CCS PCM C Compiler, Version 5.015, 5967               10-Nov-17 09:51

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   6689 words (82%)
                           Largest free fragment is 722
               RAM used:   73 (20%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (1 in main + 7 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   558
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  0A
0028:  RETLW  22
0029:  RETLW  3A
002A:  RETLW  52
002B:  RETLW  6A
002C:  RETLW  82
002D:  RETLW  9A
002E:  RETLW  B2
002F:  RETLW  CA
0030:  RETLW  FF
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  22
0036:  RETLW  00
0037:  RETLW  29
0038:  RETLW  00
0039:  RETLW  30
003A:  RETLW  00
003B:  RETLW  37
003C:  RETLW  00
003D:  BSF    03.5
003E:  BSF    03.6
003F:  MOVF   29,W
0040:  CLRF   78
0041:  SUBWF  28,W
0042:  BTFSC  03.0
0043:  GOTO   047
0044:  MOVF   28,W
0045:  MOVWF  77
0046:  GOTO   053
0047:  CLRF   77
0048:  MOVLW  08
0049:  MOVWF  2A
004A:  RLF    28,F
004B:  RLF    77,F
004C:  MOVF   29,W
004D:  SUBWF  77,W
004E:  BTFSC  03.0
004F:  MOVWF  77
0050:  RLF    78,F
0051:  DECFSZ 2A,F
0052:  GOTO   04A
0053:  BCF    03.5
0054:  BCF    03.6
0055:  RETURN
0056:  MOVLW  20
0057:  BSF    03.5
0058:  BSF    03.6
0059:  MOVWF  32
005A:  CLRF   2E
005B:  CLRF   2F
005C:  CLRF   30
005D:  CLRF   31
005E:  MOVF   29,W
005F:  MOVWF  7A
0060:  MOVF   28,W
0061:  MOVWF  79
0062:  MOVF   27,W
0063:  MOVWF  78
0064:  MOVF   26,W
0065:  MOVWF  77
0066:  BCF    03.0
0067:  BTFSS  77.0
0068:  GOTO   077
0069:  MOVF   2A,W
006A:  ADDWF  2E,F
006B:  MOVF   2B,W
006C:  BTFSC  03.0
006D:  INCFSZ 2B,W
006E:  ADDWF  2F,F
006F:  MOVF   2C,W
0070:  BTFSC  03.0
0071:  INCFSZ 2C,W
0072:  ADDWF  30,F
0073:  MOVF   2D,W
0074:  BTFSC  03.0
0075:  INCFSZ 2D,W
0076:  ADDWF  31,F
0077:  RRF    31,F
0078:  RRF    30,F
0079:  RRF    2F,F
007A:  RRF    2E,F
007B:  RRF    7A,F
007C:  RRF    79,F
007D:  RRF    78,F
007E:  RRF    77,F
007F:  DECFSZ 32,F
0080:  GOTO   066
0081:  BCF    03.5
0082:  BCF    03.6
0083:  RETURN
*
0122:  BTFSC  03.1
0123:  GOTO   127
0124:  MOVLW  AA
0125:  MOVWF  04
0126:  BSF    03.7
0127:  BSF    03.5
0128:  BSF    03.6
0129:  MOVF   25,W
012A:  XORWF  29,W
012B:  ANDLW  80
012C:  MOVWF  2F
012D:  BTFSS  25.7
012E:  GOTO   13A
012F:  COMF   22,F
0130:  COMF   23,F
0131:  COMF   24,F
0132:  COMF   25,F
0133:  INCF   22,F
0134:  BTFSC  03.2
0135:  INCF   23,F
0136:  BTFSC  03.2
0137:  INCF   24,F
0138:  BTFSC  03.2
0139:  INCF   25,F
013A:  BTFSS  29.7
013B:  GOTO   147
013C:  COMF   26,F
013D:  COMF   27,F
013E:  COMF   28,F
013F:  COMF   29,F
0140:  INCF   26,F
0141:  BTFSC  03.2
0142:  INCF   27,F
0143:  BTFSC  03.2
0144:  INCF   28,F
0145:  BTFSC  03.2
0146:  INCF   29,F
0147:  CLRF   77
0148:  CLRF   78
0149:  CLRF   79
014A:  CLRF   7A
014B:  CLRF   2A
014C:  CLRF   2B
014D:  CLRF   2C
014E:  CLRF   2D
014F:  MOVF   29,W
0150:  IORWF  28,W
0151:  IORWF  27,W
0152:  IORWF  26,W
0153:  BTFSC  03.2
0154:  GOTO   185
0155:  MOVLW  20
0156:  MOVWF  2E
0157:  BCF    03.0
0158:  RLF    22,F
0159:  RLF    23,F
015A:  RLF    24,F
015B:  RLF    25,F
015C:  RLF    2A,F
015D:  RLF    2B,F
015E:  RLF    2C,F
015F:  RLF    2D,F
0160:  MOVF   29,W
0161:  SUBWF  2D,W
0162:  BTFSS  03.2
0163:  GOTO   16E
0164:  MOVF   28,W
0165:  SUBWF  2C,W
0166:  BTFSS  03.2
0167:  GOTO   16E
0168:  MOVF   27,W
0169:  SUBWF  2B,W
016A:  BTFSS  03.2
016B:  GOTO   16E
016C:  MOVF   26,W
016D:  SUBWF  2A,W
016E:  BTFSS  03.0
016F:  GOTO   17F
0170:  MOVF   26,W
0171:  SUBWF  2A,F
0172:  MOVF   27,W
0173:  BTFSS  03.0
0174:  INCFSZ 27,W
0175:  SUBWF  2B,F
0176:  MOVF   28,W
0177:  BTFSS  03.0
0178:  INCFSZ 28,W
0179:  SUBWF  2C,F
017A:  MOVF   29,W
017B:  BTFSS  03.0
017C:  INCFSZ 29,W
017D:  SUBWF  2D,F
017E:  BSF    03.0
017F:  RLF    77,F
0180:  RLF    78,F
0181:  RLF    79,F
0182:  RLF    7A,F
0183:  DECFSZ 2E,F
0184:  GOTO   157
0185:  BTFSS  2F.7
0186:  GOTO   192
0187:  COMF   77,F
0188:  COMF   78,F
0189:  COMF   79,F
018A:  COMF   7A,F
018B:  INCF   77,F
018C:  BTFSC  03.2
018D:  INCF   78,F
018E:  BTFSC  03.2
018F:  INCF   79,F
0190:  BTFSC  03.2
0191:  INCF   7A,F
0192:  MOVF   2A,W
0193:  MOVWF  00
0194:  INCF   04,F
0195:  MOVF   2B,W
0196:  MOVWF  00
0197:  INCF   04,F
0198:  MOVF   2C,W
0199:  MOVWF  00
019A:  INCF   04,F
019B:  MOVF   2D,W
019C:  MOVWF  00
019D:  BCF    03.5
019E:  BCF    03.6
019F:  RETURN
*
0564:  CLRF   77
0565:  CLRF   78
0566:  BSF    03.6
0567:  MOVF   68,W
0568:  BCF    03.0
0569:  BTFSC  69.0
056A:  ADDWF  77,F
056B:  RRF    77,F
056C:  RRF    78,F
056D:  BTFSC  69.1
056E:  ADDWF  77,F
056F:  RRF    77,F
0570:  RRF    78,F
0571:  BTFSC  69.2
0572:  ADDWF  77,F
0573:  RRF    77,F
0574:  RRF    78,F
0575:  BTFSC  69.3
0576:  ADDWF  77,F
0577:  RRF    77,F
0578:  RRF    78,F
0579:  BTFSC  69.4
057A:  ADDWF  77,F
057B:  RRF    77,F
057C:  RRF    78,F
057D:  BTFSC  69.5
057E:  ADDWF  77,F
057F:  RRF    77,F
0580:  RRF    78,F
0581:  BTFSC  69.6
0582:  ADDWF  77,F
0583:  RRF    77,F
0584:  RRF    78,F
0585:  BTFSC  69.7
0586:  ADDWF  77,F
0587:  RRF    77,F
0588:  RRF    78,F
0589:  BCF    03.6
058A:  RETURN
*
06BC:  CLRF   78
06BD:  CLRF   79
06BE:  CLRF   77
06BF:  CLRF   7A
06C0:  BSF    03.6
06C1:  MOVF   4F,W
06C2:  BTFSS  03.2
06C3:  GOTO   6C7
06C4:  MOVF   4E,W
06C5:  BTFSC  03.2
06C6:  GOTO   6E1
06C7:  MOVLW  10
06C8:  MOVWF  50
06C9:  BCF    03.0
06CA:  RLF    4C,F
06CB:  RLF    4D,F
06CC:  RLF    77,F
06CD:  RLF    7A,F
06CE:  MOVF   4F,W
06CF:  SUBWF  7A,W
06D0:  BTFSS  03.2
06D1:  GOTO   6D4
06D2:  MOVF   4E,W
06D3:  SUBWF  77,W
06D4:  BTFSS  03.0
06D5:  GOTO   6DD
06D6:  MOVF   4E,W
06D7:  SUBWF  77,F
06D8:  BTFSS  03.0
06D9:  DECF   7A,F
06DA:  MOVF   4F,W
06DB:  SUBWF  7A,F
06DC:  BSF    03.0
06DD:  RLF    78,F
06DE:  RLF    79,F
06DF:  DECFSZ 50,F
06E0:  GOTO   6C9
06E1:  BCF    03.6
06E2:  RETURN
*
151F:  BSF    0A.0
1520:  BCF    0A.1
1521:  BSF    0A.2
1522:  ADDWF  02,F
1523:  GOTO   2D4
1524:  GOTO   450
1525:  GOTO   34F
1526:  GOTO   006
1527:  GOTO   4AF
1528:  GOTO   51C
1529:  GOTO   51C
152A:  GOTO   51C
152B:  GOTO   51C
152C:  GOTO   51C
152D:  GOTO   506
*
1ED4:  BCF    0A.0
1ED5:  BSF    0A.1
1ED6:  BSF    0A.2
1ED7:  ADDWF  02,F
1ED8:  GOTO   00A
1ED9:  GOTO   041
1EDA:  GOTO   1E2
1EDB:  GOTO   3C8
1EDC:  GOTO   5FE
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... //#device *=16 
.................... #use delay(clock=20M) 
*
0B60:  MOVLW  20
0B61:  MOVWF  04
0B62:  BSF    03.7
0B63:  MOVF   00,W
0B64:  BTFSC  03.2
0B65:  GOTO   373
0B66:  MOVLW  06
0B67:  MOVWF  78
0B68:  CLRF   77
0B69:  DECFSZ 77,F
0B6A:  GOTO   369
0B6B:  DECFSZ 78,F
0B6C:  GOTO   368
0B6D:  MOVLW  7B
0B6E:  MOVWF  77
0B6F:  DECFSZ 77,F
0B70:  GOTO   36F
0B71:  DECFSZ 00,F
0B72:  GOTO   366
0B73:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0313:  MOVLW  08
0314:  MOVWF  78
0315:  NOP
0316:  BCF    07.3
0317:  BCF    20.3
0318:  MOVF   20,W
0319:  BSF    03.5
031A:  MOVWF  07
031B:  NOP
031C:  BCF    03.5
031D:  BSF    03.6
031E:  RLF    66,F
031F:  BCF    03.6
0320:  BCF    07.4
0321:  BTFSS  03.0
0322:  GOTO   329
0323:  BSF    20.4
0324:  MOVF   20,W
0325:  BSF    03.5
0326:  MOVWF  07
0327:  GOTO   32D
0328:  BCF    03.5
0329:  BCF    20.4
032A:  MOVF   20,W
032B:  BSF    03.5
032C:  MOVWF  07
032D:  NOP
032E:  BCF    03.5
032F:  BSF    20.3
0330:  MOVF   20,W
0331:  BSF    03.5
0332:  MOVWF  07
0333:  BCF    03.5
0334:  BTFSS  07.3
0335:  GOTO   334
0336:  DECFSZ 78,F
0337:  GOTO   315
0338:  NOP
0339:  BCF    07.3
033A:  BCF    20.3
033B:  MOVF   20,W
033C:  BSF    03.5
033D:  MOVWF  07
033E:  NOP
033F:  BCF    03.5
0340:  BSF    20.4
0341:  MOVF   20,W
0342:  BSF    03.5
0343:  MOVWF  07
0344:  NOP
0345:  NOP
0346:  BCF    03.5
0347:  BSF    20.3
0348:  MOVF   20,W
0349:  BSF    03.5
034A:  MOVWF  07
034B:  BCF    03.5
034C:  BTFSS  07.3
034D:  GOTO   34C
034E:  CLRF   78
034F:  NOP
0350:  BTFSC  07.4
0351:  BSF    78.0
0352:  BCF    07.3
0353:  BCF    20.3
0354:  MOVF   20,W
0355:  BSF    03.5
0356:  MOVWF  07
0357:  BCF    03.5
0358:  BCF    07.4
0359:  BCF    20.4
035A:  MOVF   20,W
035B:  BSF    03.5
035C:  MOVWF  07
035D:  BCF    03.5
035E:  RETURN
*
04F9:  MOVLW  08
04FA:  BSF    03.6
04FB:  MOVWF  67
04FC:  MOVF   77,W
04FD:  MOVWF  68
04FE:  BCF    03.6
04FF:  BSF    20.4
0500:  MOVF   20,W
0501:  BSF    03.5
0502:  MOVWF  07
0503:  NOP
0504:  BCF    03.5
0505:  BSF    20.3
0506:  MOVF   20,W
0507:  BSF    03.5
0508:  MOVWF  07
0509:  BCF    03.5
050A:  BTFSS  07.3
050B:  GOTO   50A
050C:  BTFSC  07.4
050D:  BSF    03.0
050E:  BTFSS  07.4
050F:  BCF    03.0
0510:  RLF    78,F
0511:  NOP
0512:  BCF    20.3
0513:  MOVF   20,W
0514:  BSF    03.5
0515:  MOVWF  07
0516:  BCF    03.5
0517:  BCF    07.3
0518:  BSF    03.6
0519:  DECFSZ 67,F
051A:  GOTO   4FE
051B:  BCF    03.6
051C:  BSF    20.4
051D:  MOVF   20,W
051E:  BSF    03.5
051F:  MOVWF  07
0520:  NOP
0521:  BCF    03.5
0522:  BCF    07.4
0523:  BSF    03.6
0524:  MOVF   68,W
0525:  BTFSC  03.2
0526:  GOTO   52E
0527:  BCF    03.6
0528:  BCF    20.4
0529:  MOVF   20,W
052A:  BSF    03.5
052B:  MOVWF  07
052C:  BCF    03.5
052D:  BSF    03.6
052E:  NOP
052F:  BCF    03.6
0530:  BSF    20.3
0531:  MOVF   20,W
0532:  BSF    03.5
0533:  MOVWF  07
0534:  BCF    03.5
0535:  BTFSS  07.3
0536:  GOTO   535
0537:  NOP
0538:  BCF    07.3
0539:  BCF    20.3
053A:  MOVF   20,W
053B:  BSF    03.5
053C:  MOVWF  07
053D:  NOP
053E:  BCF    03.5
053F:  BCF    07.4
0540:  BCF    20.4
0541:  MOVF   20,W
0542:  BSF    03.5
0543:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
058B:  BSF    03.6
058C:  MOVF   64,W
058D:  ANDLW  0F
058E:  MOVWF  65
058F:  MOVF   64,W
0590:  ANDLW  F0
0591:  MOVWF  77
0592:  SWAPF  77,F
0593:  MOVLW  0F
0594:  ANDWF  77,F
0595:  MOVF   77,W
0596:  MOVWF  67
0597:  MOVWF  68
0598:  MOVLW  0A
0599:  MOVWF  69
059A:  BCF    03.6
059B:  CALL   564
059C:  MOVF   78,W
059D:  BSF    03.6
059E:  ADDWF  65,W
059F:  MOVWF  78
05A0:  BCF    03.6
05A1:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
02F3:  BSF    03.6
02F4:  MOVF   60,W
02F5:  BSF    03.5
02F6:  MOVWF  28
02F7:  MOVLW  0A
02F8:  MOVWF  29
02F9:  BCF    03.5
02FA:  BCF    03.6
02FB:  CALL   03D
02FC:  SWAPF  78,W
02FD:  MOVWF  77
02FE:  MOVLW  F0
02FF:  ANDWF  77,F
0300:  MOVF   77,W
0301:  ANDLW  F0
0302:  BSF    03.6
0303:  MOVWF  61
0304:  MOVF   60,W
0305:  BSF    03.5
0306:  MOVWF  28
0307:  MOVLW  0A
0308:  MOVWF  29
0309:  BCF    03.5
030A:  BCF    03.6
030B:  CALL   03D
030C:  MOVF   77,W
030D:  ANDLW  0F
030E:  BSF    03.6
030F:  IORWF  61,W
0310:  MOVWF  78
0311:  BCF    03.6
0312:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
04B2:  BSF    03.6
04B3:  CLRF   65
....................     int value = 0; 
....................     I2C_start(); 
04B4:  BCF    03.6
04B5:  BSF    20.4
04B6:  MOVF   20,W
04B7:  BSF    03.5
04B8:  MOVWF  07
04B9:  NOP
04BA:  BCF    03.5
04BB:  BSF    20.3
04BC:  MOVF   20,W
04BD:  BSF    03.5
04BE:  MOVWF  07
04BF:  NOP
04C0:  BCF    03.5
04C1:  BCF    07.4
04C2:  BCF    20.4
04C3:  MOVF   20,W
04C4:  BSF    03.5
04C5:  MOVWF  07
04C6:  NOP
04C7:  BCF    03.5
04C8:  BCF    07.3
04C9:  BCF    20.3
04CA:  MOVF   20,W
04CB:  BSF    03.5
04CC:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
04CD:  MOVLW  D0
04CE:  BCF    03.5
04CF:  BSF    03.6
04D0:  MOVWF  66
04D1:  BCF    03.6
04D2:  CALL   313
....................     I2C_write(address); 
04D3:  BSF    03.6
04D4:  MOVF   64,W
04D5:  MOVWF  66
04D6:  BCF    03.6
04D7:  CALL   313
....................     I2C_start(); 
04D8:  BSF    20.4
04D9:  MOVF   20,W
04DA:  BSF    03.5
04DB:  MOVWF  07
04DC:  NOP
04DD:  BCF    03.5
04DE:  BSF    20.3
04DF:  MOVF   20,W
04E0:  BSF    03.5
04E1:  MOVWF  07
04E2:  NOP
04E3:  BCF    03.5
04E4:  BTFSS  07.3
04E5:  GOTO   4E4
04E6:  BCF    07.4
04E7:  BCF    20.4
04E8:  MOVF   20,W
04E9:  BSF    03.5
04EA:  MOVWF  07
04EB:  NOP
04EC:  BCF    03.5
04ED:  BCF    07.3
04EE:  BCF    20.3
04EF:  MOVF   20,W
04F0:  BSF    03.5
04F1:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
04F2:  MOVLW  D1
04F3:  BCF    03.5
04F4:  BSF    03.6
04F5:  MOVWF  66
04F6:  BCF    03.6
04F7:  CALL   313
....................     value = I2C_read(0); 
04F8:  CLRF   77
*
0544:  MOVF   78,W
0545:  BCF    03.5
0546:  BSF    03.6
0547:  MOVWF  65
....................     I2C_stop(); 
0548:  BCF    03.6
0549:  BCF    20.4
054A:  MOVF   20,W
054B:  BSF    03.5
054C:  MOVWF  07
054D:  NOP
054E:  BCF    03.5
054F:  BSF    20.3
0550:  MOVF   20,W
0551:  BSF    03.5
0552:  MOVWF  07
0553:  BCF    03.5
0554:  BTFSS  07.3
0555:  GOTO   554
0556:  NOP
0557:  GOTO   558
0558:  NOP
0559:  BSF    20.4
055A:  MOVF   20,W
055B:  BSF    03.5
055C:  MOVWF  07
055D:  NOP
....................     return value; 
055E:  BCF    03.5
055F:  BSF    03.6
0560:  MOVF   65,W
0561:  MOVWF  78
0562:  BCF    03.6
0563:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
035F:  BSF    20.4
0360:  MOVF   20,W
0361:  BSF    03.5
0362:  MOVWF  07
0363:  NOP
0364:  BCF    03.5
0365:  BSF    20.3
0366:  MOVF   20,W
0367:  BSF    03.5
0368:  MOVWF  07
0369:  NOP
036A:  BCF    03.5
036B:  BCF    07.4
036C:  BCF    20.4
036D:  MOVF   20,W
036E:  BSF    03.5
036F:  MOVWF  07
0370:  NOP
0371:  BCF    03.5
0372:  BCF    07.3
0373:  BCF    20.3
0374:  MOVF   20,W
0375:  BSF    03.5
0376:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
0377:  MOVLW  D0
0378:  BCF    03.5
0379:  BSF    03.6
037A:  MOVWF  66
037B:  BCF    03.6
037C:  CALL   313
....................     I2C_write(address); 
037D:  BSF    03.6
037E:  MOVF   61,W
037F:  MOVWF  66
0380:  BCF    03.6
0381:  CALL   313
....................     I2C_write(value); 
0382:  BSF    03.6
0383:  MOVF   62,W
0384:  MOVWF  66
0385:  BCF    03.6
0386:  CALL   313
....................     I2C_stop(); 
0387:  BCF    20.4
0388:  MOVF   20,W
0389:  BSF    03.5
038A:  MOVWF  07
038B:  NOP
038C:  BCF    03.5
038D:  BSF    20.3
038E:  MOVF   20,W
038F:  BSF    03.5
0390:  MOVWF  07
0391:  BCF    03.5
0392:  BTFSS  07.3
0393:  GOTO   392
0394:  NOP
0395:  GOTO   396
0396:  NOP
0397:  BSF    20.4
0398:  MOVF   20,W
0399:  BSF    03.5
039A:  MOVWF  07
039B:  NOP
039C:  BCF    03.5
039D:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
05A6:  CLRF   64
05A7:  BCF    03.6
05A8:  CALL   4B2
05A9:  MOVF   78,W
05AA:  BSF    03.6
05AB:  MOVWF  60
....................     sec = bcd_to_decimal(sec); 
05AC:  MOVF   60,W
05AD:  MOVWF  64
05AE:  BCF    03.6
05AF:  CALL   58B
05B0:  MOVF   78,W
05B1:  BSF    03.6
05B2:  MOVWF  60
....................     min = DS3231_Read(minuteREG); 
05B3:  MOVLW  01
05B4:  MOVWF  64
05B5:  BCF    03.6
05B6:  CALL   4B2
05B7:  MOVF   78,W
05B8:  BSF    03.6
05B9:  MOVWF  5F
....................     min = bcd_to_decimal(min); 
05BA:  MOVF   5F,W
05BB:  MOVWF  64
05BC:  BCF    03.6
05BD:  CALL   58B
05BE:  MOVF   78,W
05BF:  BSF    03.6
05C0:  MOVWF  5F
....................     hora = (0x3F & DS3231_Read(hourREG)); 
05C1:  MOVLW  02
05C2:  MOVWF  64
05C3:  BCF    03.6
05C4:  CALL   4B2
05C5:  MOVF   78,W
05C6:  ANDLW  3F
05C7:  BSF    03.6
05C8:  MOVWF  5E
....................     hora = bcd_to_decimal(hora); 
05C9:  MOVF   5E,W
05CA:  MOVWF  64
05CB:  BCF    03.6
05CC:  CALL   58B
05CD:  MOVF   78,W
05CE:  BSF    03.6
05CF:  MOVWF  5E
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
*
061F:  MOVLW  06
0620:  MOVWF  64
0621:  BCF    03.6
0622:  CALL   4B2
0623:  MOVF   78,W
0624:  BSF    03.6
0625:  MOVWF  56
....................     year = bcd_to_decimal(year); 
0626:  MOVF   56,W
0627:  MOVWF  64
0628:  BCF    03.6
0629:  CALL   58B
062A:  MOVF   78,W
062B:  BSF    03.6
062C:  MOVWF  56
....................     month = (0x1F & DS3231_Read(monthREG)); 
062D:  MOVLW  05
062E:  MOVWF  64
062F:  BCF    03.6
0630:  CALL   4B2
0631:  MOVF   78,W
0632:  ANDLW  1F
0633:  BSF    03.6
0634:  MOVWF  55
....................     month = bcd_to_decimal(month); 
0635:  MOVF   55,W
0636:  MOVWF  64
0637:  BCF    03.6
0638:  CALL   58B
0639:  MOVF   78,W
063A:  BSF    03.6
063B:  MOVWF  55
....................     date = (0x3F & DS3231_Read(dateREG)); 
063C:  MOVLW  04
063D:  MOVWF  64
063E:  BCF    03.6
063F:  CALL   4B2
0640:  MOVF   78,W
0641:  ANDLW  3F
0642:  BSF    03.6
0643:  MOVWF  54
....................     date = bcd_to_decimal(date); 
0644:  MOVF   54,W
0645:  MOVWF  64
0646:  BCF    03.6
0647:  CALL   58B
0648:  MOVF   78,W
0649:  BSF    03.6
064A:  MOVWF  54
....................     dow = (0x07 & DS3231_Read(dayREG)); 
064B:  MOVLW  03
064C:  MOVWF  64
064D:  BCF    03.6
064E:  CALL   4B2
064F:  MOVF   78,W
0650:  ANDLW  07
0651:  BSF    03.6
0652:  MOVWF  57
....................     dow = bcd_to_decimal(dow); 
0653:  MOVF   57,W
0654:  MOVWF  64
0655:  BCF    03.6
0656:  CALL   58B
0657:  MOVF   78,W
0658:  BSF    03.6
0659:  MOVWF  57
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
039E:  BSF    03.6
039F:  MOVF   5F,W
03A0:  MOVWF  60
03A1:  BCF    03.6
03A2:  CALL   2F3
03A3:  MOVF   78,W
03A4:  BSF    03.6
03A5:  MOVWF  60
03A6:  CLRF   61
03A7:  MOVF   60,W
03A8:  MOVWF  62
03A9:  BCF    03.6
03AA:  CALL   35F
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
03AB:  BSF    03.6
03AC:  MOVF   5E,W
03AD:  MOVWF  60
03AE:  BCF    03.6
03AF:  CALL   2F3
03B0:  MOVF   78,W
03B1:  BSF    03.6
03B2:  MOVWF  60
03B3:  MOVLW  01
03B4:  MOVWF  61
03B5:  MOVF   60,W
03B6:  MOVWF  62
03B7:  BCF    03.6
03B8:  CALL   35F
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
03B9:  BSF    03.6
03BA:  MOVF   5D,W
03BB:  MOVWF  60
03BC:  BCF    03.6
03BD:  CALL   2F3
03BE:  MOVF   78,W
03BF:  ANDLW  3F
03C0:  BSF    03.6
03C1:  MOVWF  60
03C2:  MOVLW  02
03C3:  MOVWF  61
03C4:  MOVF   60,W
03C5:  MOVWF  62
03C6:  BCF    03.6
03C7:  CALL   35F
03C8:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
*
0406:  BSF    03.6
0407:  MOVF   59,W
0408:  MOVWF  60
0409:  BCF    03.6
040A:  CALL   2F3
040B:  MOVF   78,W
040C:  BSF    03.6
040D:  MOVWF  5D
040E:  MOVLW  03
040F:  MOVWF  61
0410:  MOVF   5D,W
0411:  MOVWF  62
0412:  BCF    03.6
0413:  CALL   35F
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
0414:  BSF    03.6
0415:  MOVF   5A,W
0416:  MOVWF  60
0417:  BCF    03.6
0418:  CALL   2F3
0419:  MOVF   78,W
041A:  BSF    03.6
041B:  MOVWF  5D
041C:  MOVLW  04
041D:  MOVWF  61
041E:  MOVF   5D,W
041F:  MOVWF  62
0420:  BCF    03.6
0421:  CALL   35F
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
0422:  BSF    03.6
0423:  MOVF   5B,W
0424:  MOVWF  60
0425:  BCF    03.6
0426:  CALL   2F3
0427:  MOVF   78,W
0428:  BSF    03.6
0429:  MOVWF  5D
042A:  MOVLW  05
042B:  MOVWF  61
042C:  MOVF   5D,W
042D:  MOVWF  62
042E:  BCF    03.6
042F:  CALL   35F
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
0430:  BSF    03.6
0431:  MOVF   5C,W
0432:  MOVWF  60
0433:  BCF    03.6
0434:  CALL   2F3
0435:  MOVF   78,W
0436:  BSF    03.6
0437:  MOVWF  5D
0438:  MOVLW  06
0439:  MOVWF  61
043A:  MOVF   5D,W
043B:  MOVWF  62
043C:  BCF    03.6
043D:  CALL   35F
043E:  RETURN
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
06EA:  CLRF   4F
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
06EB:  CLRF   4F
06EC:  MOVF   4E,W
06ED:  SUBWF  4F,W
06EE:  BTFSC  03.0
06EF:  GOTO   6F9
....................         array[i] = 0; 
06F0:  MOVF   4F,W
06F1:  ADDWF  4C,W
06F2:  MOVWF  04
06F3:  BCF    03.7
06F4:  BTFSC  4D.0
06F5:  BSF    03.7
06F6:  CLRF   00
06F7:  INCF   4F,F
06F8:  GOTO   6EC
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
06E3:  BSF    03.6
06E4:  MOVF   48,W
06E5:  MOVWF  4D
06E6:  MOVF   47,W
06E7:  MOVWF  4C
06E8:  MOVF   49,W
06E9:  MOVWF  4E
....................  
....................     int index = 0; 
*
06F9:  CLRF   4A
....................     while (number > 0) { 
06FA:  MOVF   45,F
06FB:  BTFSS  03.2
06FC:  GOTO   700
06FD:  MOVF   46,F
06FE:  BTFSC  03.2
06FF:  GOTO   724
....................         int digit = number % 10; 
0700:  MOVF   46,W
0701:  MOVWF  4D
0702:  MOVF   45,W
0703:  MOVWF  4C
0704:  CLRF   4F
0705:  MOVLW  0A
0706:  MOVWF  4E
0707:  BCF    03.6
0708:  CALL   6BC
0709:  MOVF   77,W
070A:  BSF    03.6
070B:  MOVWF  4B
....................         digits[index] = digit; 
070C:  MOVF   4A,W
070D:  ADDWF  47,W
070E:  MOVWF  04
070F:  BCF    03.7
0710:  BTFSC  48.0
0711:  BSF    03.7
0712:  MOVF   4B,W
0713:  MOVWF  00
....................         index++; 
0714:  INCF   4A,F
....................         number /= 10; 
0715:  MOVF   46,W
0716:  MOVWF  4D
0717:  MOVF   45,W
0718:  MOVWF  4C
0719:  CLRF   4F
071A:  MOVLW  0A
071B:  MOVWF  4E
071C:  BCF    03.6
071D:  CALL   6BC
071E:  MOVF   79,W
071F:  BSF    03.6
0720:  MOVWF  46
0721:  MOVF   78,W
0722:  MOVWF  45
0723:  GOTO   6FA
....................     } 
0724:  BCF    03.6
0725:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
07D0:  BSF    03.5
07D1:  BCF    03.6
07D2:  BCF    05.1
07D3:  BCF    03.5
07D4:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
07D5:  BSF    03.5
07D6:  BCF    05.1
07D7:  BCF    03.5
07D8:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0793:  MOVLW  01
0794:  BSF    03.6
0795:  MOVWF  3B
0796:  CLRF   3C
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
0797:  BSF    03.5
0798:  BCF    03.6
0799:  BCF    05.3
079A:  BCF    03.5
079B:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
079C:  BSF    03.5
079D:  BCF    05.1
079E:  BCF    03.5
079F:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
07A0:  BSF    03.6
07A1:  CLRF   3C
07A2:  MOVF   3A,W
07A3:  SUBWF  3C,W
07A4:  BTFSC  03.0
07A5:  GOTO   7D0
....................         int character = charactersArray[j]; 
07A6:  MOVF   3C,W
07A7:  ADDWF  38,W
07A8:  MOVWF  04
07A9:  BCF    03.7
07AA:  BTFSC  39.0
07AB:  BSF    03.7
07AC:  MOVF   00,W
07AD:  MOVWF  3D
....................  
....................         for (i = 1; i <= 8; i++) { 
07AE:  MOVLW  01
07AF:  MOVWF  3B
07B0:  MOVF   3B,W
07B1:  SUBLW  08
07B2:  BTFSS  03.0
07B3:  GOTO   7CE
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
07B4:  BTFSC  3D.0
07B5:  GOTO   7BA
07B6:  BCF    03.6
07B7:  BCF    05.0
07B8:  GOTO   7BC
07B9:  BSF    03.6
07BA:  BCF    03.6
07BB:  BSF    05.0
07BC:  BSF    03.5
07BD:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
07BE:  BCF    03.0
07BF:  BCF    03.5
07C0:  BSF    03.6
07C1:  RRF    3D,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
07C2:  BSF    03.5
07C3:  BCF    03.6
07C4:  BCF    05.3
07C5:  BCF    03.5
07C6:  BSF    05.3
....................             output_low(PIN_CLOCK); 
07C7:  BSF    03.5
07C8:  BCF    05.3
07C9:  BCF    03.5
07CA:  BCF    05.3
07CB:  BSF    03.6
07CC:  INCF   3B,F
07CD:  GOTO   7B0
....................         } 
07CE:  INCF   3C,F
07CF:  GOTO   7A2
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
07D9:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
0841:  CLRF   3B
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
0842:  CLRF   3B
0843:  MOVF   3A,W
0844:  SUBWF  3B,W
0845:  BTFSC  03.0
0846:  GOTO   068
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0847:  MOVF   3B,W
0848:  ADDWF  38,W
0849:  MOVWF  78
084A:  MOVF   39,W
084B:  MOVWF  7A
084C:  BTFSC  03.0
084D:  INCF   7A,F
084E:  MOVF   78,W
084F:  MOVWF  3C
0850:  MOVF   7A,W
0851:  MOVWF  3D
0852:  MOVF   3B,W
0853:  ADDWF  38,W
0854:  MOVWF  04
0855:  BCF    03.7
0856:  BTFSC  39.0
0857:  BSF    03.7
0858:  MOVF   00,W
0859:  BCF    0A.3
085A:  BCF    03.6
085B:  CALL   004
085C:  BSF    0A.3
085D:  MOVWF  78
085E:  BSF    03.6
085F:  MOVF   3C,W
0860:  MOVWF  04
0861:  BCF    03.7
0862:  BTFSC  3D.0
0863:  BSF    03.7
0864:  MOVF   78,W
0865:  MOVWF  00
0866:  INCF   3B,F
0867:  GOTO   043
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
080A:  CLRF   3B
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
080B:  CLRF   3B
080C:  MOVF   3A,W
080D:  SUBWF  3B,W
080E:  BTFSC  03.0
080F:  GOTO   03A
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0810:  MOVF   3B,W
0811:  ADDWF  38,W
0812:  MOVWF  78
0813:  MOVF   39,W
0814:  MOVWF  7A
0815:  BTFSC  03.0
0816:  INCF   7A,F
0817:  MOVF   78,W
0818:  MOVWF  3C
0819:  MOVF   7A,W
081A:  MOVWF  3D
081B:  MOVF   3B,W
081C:  ADDWF  38,W
081D:  MOVWF  04
081E:  BCF    03.7
081F:  BTFSC  39.0
0820:  BSF    03.7
0821:  MOVF   00,W
0822:  BCF    0A.3
0823:  BCF    03.6
0824:  CALL   004
0825:  BSF    0A.3
0826:  MOVWF  78
0827:  BSF    03.6
0828:  MOVF   3C,W
0829:  MOVWF  04
082A:  BCF    03.7
082B:  BTFSC  3D.0
082C:  BSF    03.7
082D:  MOVF   78,W
082E:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
082F:  MOVF   3B,W
0830:  ADDWF  38,W
0831:  MOVWF  04
0832:  BCF    03.7
0833:  BTFSC  39.0
0834:  BSF    03.7
0835:  MOVF   00,W
0836:  IORLW  08
0837:  MOVWF  00
0838:  INCF   3B,F
0839:  GOTO   00C
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
0800:  BSF    03.6
0801:  MOVF   37,F
0802:  BTFSC  03.2
0803:  GOTO   03B
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
0804:  MOVF   35,W
0805:  MOVWF  39
0806:  MOVF   34,W
0807:  MOVWF  38
0808:  MOVF   36,W
0809:  MOVWF  3A
....................     } else { 
*
083A:  GOTO   068
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
083B:  MOVF   35,W
083C:  MOVWF  39
083D:  MOVF   34,W
083E:  MOVWF  38
083F:  MOVF   36,W
0840:  MOVWF  3A
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
0868:  MOVF   35,W
0869:  MOVWF  39
086A:  MOVF   34,W
086B:  MOVWF  38
086C:  MOVF   36,W
086D:  MOVWF  3A
086E:  BCF    0A.3
086F:  BCF    03.6
0870:  CALL   793
0871:  BSF    0A.3
0872:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
14BF:  BSF    03.6
14C0:  CLRF   1F
14C1:  CLRF   20
14C2:  CLRF   21
14C3:  CLRF   22
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
14C4:  MOVLW  01
14C5:  MOVWF  1F
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
14C6:  MOVLW  09
14C7:  MOVWF  20
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
14C8:  MOVLW  01
14C9:  MOVWF  21
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
14CA:  MOVWF  22
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
14CB:  MOVWF  39
14CC:  MOVLW  1F
14CD:  MOVWF  38
14CE:  MOVLW  04
14CF:  MOVWF  3A
14D0:  BCF    0A.4
14D1:  BCF    03.6
14D2:  CALL   793
14D3:  BSF    0A.4
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... #define UPPER_BOUND_HOURS 23 
.................... #define UPPER_BOUND_MINUTES 59 
.................... #define UPPER_BOUND_SECONDS 59 
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     Format format; 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     //    char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time Time_new(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
05D6:  MOVF   61,W
05D7:  MOVWF  65
....................     time.minute = minute; 
05D8:  MOVF   62,W
05D9:  MOVWF  66
....................     time.second = second; 
05DA:  MOVF   63,W
05DB:  MOVWF  67
....................     return time; 
05DC:  MOVF   64,W
05DD:  MOVWF  77
05DE:  MOVF   65,W
05DF:  MOVWF  78
05E0:  MOVF   66,W
05E1:  MOVWF  79
05E2:  MOVF   67,W
05E3:  MOVWF  7A
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
05A2:  BSF    03.6
05A3:  CLRF   5E
05A4:  CLRF   5F
05A5:  CLRF   60
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = Time_new(currentHour, currentMinute, currentSecond); 
*
05D0:  MOVF   5E,W
05D1:  MOVWF  61
05D2:  MOVF   5F,W
05D3:  MOVWF  62
05D4:  MOVF   60,W
05D5:  MOVWF  63
*
05E4:  MOVF   7A,W
05E5:  MOVWF  5D
05E6:  MOVF   79,W
05E7:  MOVWF  5C
05E8:  MOVF   78,W
05E9:  MOVWF  5B
05EA:  MOVF   77,W
05EB:  MOVWF  5A
....................  
....................     return currentTime; 
05EC:  MOVF   5A,W
05ED:  MOVWF  77
05EE:  MOVF   5B,W
05EF:  MOVWF  78
05F0:  MOVF   5C,W
05F1:  MOVWF  79
05F2:  MOVF   5D,W
05F3:  MOVWF  7A
05F4:  BCF    03.6
05F5:  RETURN
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     //    newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     //    write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
0726:  MOVLW  01
0727:  BSF    03.6
0728:  ADDWF  3A,W
0729:  MOVWF  04
072A:  BCF    03.7
072B:  BTFSC  3B.0
072C:  BSF    03.7
072D:  MOVF   00,W
072E:  MOVWF  43
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
072F:  MOVF   3C,F
0730:  BTFSC  03.2
0731:  GOTO   75B
....................         if (timePtr->format == FORMAT_12) { 
0732:  MOVF   3A,W
0733:  MOVWF  04
0734:  BCF    03.7
0735:  BTFSC  3B.0
0736:  BSF    03.7
0737:  MOVF   00,W
0738:  ANDLW  01
0739:  SUBLW  01
073A:  BTFSS  03.2
073B:  GOTO   75B
....................             if (timePtr->hour == 0) { 
073C:  MOVLW  01
073D:  ADDWF  3A,W
073E:  MOVWF  04
073F:  BCF    03.7
0740:  BTFSC  3B.0
0741:  BSF    03.7
0742:  MOVF   00,F
0743:  BTFSS  03.2
0744:  GOTO   748
....................                 hour = 12; 
0745:  MOVLW  0C
0746:  MOVWF  43
....................             } else if (timePtr->hour > 12) { 
0747:  GOTO   75B
0748:  MOVLW  01
0749:  ADDWF  3A,W
074A:  MOVWF  04
074B:  BCF    03.7
074C:  BTFSC  3B.0
074D:  BSF    03.7
074E:  MOVF   00,W
074F:  SUBLW  0C
0750:  BTFSC  03.0
0751:  GOTO   75B
....................                 hour = timePtr->hour - 12; 
0752:  MOVLW  01
0753:  ADDWF  3A,W
0754:  MOVWF  04
0755:  BCF    03.7
0756:  BTFSC  3B.0
0757:  BSF    03.7
0758:  MOVLW  0C
0759:  SUBWF  00,W
075A:  MOVWF  43
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             Array_getArraySize(newTimeInDigits.hour) 
....................             ); 
075B:  CLRF   46
075C:  MOVF   43,W
075D:  MOVWF  45
075E:  MOVLW  01
075F:  MOVWF  48
0760:  MOVLW  3D
0761:  MOVWF  47
0762:  MOVLW  02
0763:  MOVWF  49
0764:  BCF    03.6
0765:  CALL   6E3
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             Array_getArraySize(newTimeInDigits.minute) 
....................             ); 
0766:  MOVLW  02
0767:  BSF    03.6
0768:  ADDWF  3A,W
0769:  MOVWF  04
076A:  BCF    03.7
076B:  BTFSC  3B.0
076C:  BSF    03.7
076D:  MOVF   00,W
076E:  MOVWF  44
076F:  CLRF   46
0770:  MOVF   44,W
0771:  MOVWF  45
0772:  MOVLW  01
0773:  MOVWF  48
0774:  MOVLW  3F
0775:  MOVWF  47
0776:  MOVLW  02
0777:  MOVWF  49
0778:  BCF    03.6
0779:  CALL   6E3
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             Array_getArraySize(newTimeInDigits.second) 
....................             ); 
077A:  MOVLW  03
077B:  BSF    03.6
077C:  ADDWF  3A,W
077D:  MOVWF  04
077E:  BCF    03.7
077F:  BTFSC  3B.0
0780:  BSF    03.7
0781:  MOVF   00,W
0782:  MOVWF  44
0783:  CLRF   46
0784:  MOVF   44,W
0785:  MOVWF  45
0786:  MOVLW  01
0787:  MOVWF  48
0788:  MOVLW  41
0789:  MOVWF  47
078A:  MOVLW  02
078B:  MOVWF  49
078C:  BCF    03.6
078D:  CALL   6E3
....................  
....................     return newTimeInDigits; 
078E:  MOVLW  3D
078F:  MOVWF  78
0790:  MOVLW  01
0791:  MOVWF  79
0792:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
13BC:  MOVLW  01
13BD:  ADDWF  27,W
13BE:  MOVWF  04
13BF:  BCF    03.7
13C0:  BTFSC  28.0
13C1:  BSF    03.7
13C2:  MOVF   00,F
13C3:  BTFSS  03.2
13C4:  GOTO   3D7
13C5:  MOVLW  02
13C6:  ADDWF  27,W
13C7:  MOVWF  04
13C8:  BCF    03.7
13C9:  BTFSC  28.0
13CA:  BSF    03.7
13CB:  MOVF   00,F
13CC:  BTFSS  03.2
13CD:  GOTO   3D7
13CE:  MOVLW  03
13CF:  ADDWF  27,W
13D0:  MOVWF  04
13D1:  BCF    03.7
13D2:  BTFSC  28.0
13D3:  BSF    03.7
13D4:  MOVF   00,F
13D5:  BTFSC  03.2
13D6:  GOTO   3D9
13D7:  MOVLW  00
13D8:  GOTO   3DA
13D9:  MOVLW  01
13DA:  MOVWF  78
.................... } 
....................  
.................... Time Time_getInitialTime() { 
....................     return Time_new(0, 0, 0); 
.................... } 
....................  
.................... Time Time_getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour % (UPPER_BOUND_HOURS + 1), 
....................             timePtr->minute % (UPPER_BOUND_MINUTES + 1), 
....................             timePtr->second % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
*
03C9:  MOVLW  01
03CA:  BSF    03.6
03CB:  ADDWF  58,W
03CC:  MOVWF  04
03CD:  BCF    03.7
03CE:  BTFSC  59.0
03CF:  BSF    03.7
03D0:  MOVF   00,W
03D1:  BSF    03.5
03D2:  MOVWF  28
03D3:  MOVLW  18
03D4:  MOVWF  29
03D5:  BCF    03.5
03D6:  BCF    03.6
03D7:  CALL   03D
03D8:  MOVF   77,W
03D9:  BSF    03.6
03DA:  MOVWF  5A
03DB:  MOVLW  02
03DC:  ADDWF  58,W
03DD:  MOVWF  04
03DE:  BCF    03.7
03DF:  BTFSC  59.0
03E0:  BSF    03.7
03E1:  MOVF   00,W
03E2:  BSF    03.5
03E3:  MOVWF  28
03E4:  MOVLW  3C
03E5:  MOVWF  29
03E6:  BCF    03.5
03E7:  BCF    03.6
03E8:  CALL   03D
03E9:  MOVF   77,W
03EA:  BSF    03.6
03EB:  MOVWF  5B
03EC:  MOVLW  03
03ED:  ADDWF  58,W
03EE:  MOVWF  04
03EF:  BCF    03.7
03F0:  BTFSC  59.0
03F1:  BSF    03.7
03F2:  MOVF   00,W
03F3:  BSF    03.5
03F4:  MOVWF  28
03F5:  MOVLW  3C
03F6:  MOVWF  29
03F7:  BCF    03.5
03F8:  BCF    03.6
03F9:  CALL   03D
03FA:  MOVF   77,W
03FB:  BSF    03.6
03FC:  MOVWF  5C
03FD:  MOVF   5A,W
03FE:  MOVWF  5D
03FF:  MOVF   5B,W
0400:  MOVWF  5E
0401:  MOVF   5C,W
0402:  MOVWF  5F
0403:  BCF    03.6
0404:  CALL   39E
0405:  RETURN
.................... } 
....................  
.................... void Time_setClockTime(int hour, int minutes, int seconds) { 
....................     setTime( 
....................             hour % (UPPER_BOUND_HOURS + 1), 
....................             minutes % (UPPER_BOUND_MINUTES + 1), 
....................             seconds % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
0084:  MOVLW  01
0085:  BSF    03.5
0086:  BSF    03.6
0087:  ADDWF  12,W
0088:  MOVWF  04
0089:  BCF    03.7
008A:  BTFSC  13.0
008B:  BSF    03.7
008C:  MOVF   00,W
008D:  CLRF   23
008E:  CLRF   22
008F:  CLRF   21
0090:  MOVWF  20
0091:  CLRF   25
0092:  MOVF   04,W
0093:  MOVWF  24
0094:  BCF    25.0
0095:  BTFSC  03.7
0096:  BSF    25.0
0097:  MOVF   23,W
0098:  MOVWF  29
0099:  MOVF   22,W
009A:  MOVWF  28
009B:  MOVF   21,W
009C:  MOVWF  27
009D:  MOVF   20,W
009E:  MOVWF  26
009F:  CLRF   2D
00A0:  CLRF   2C
00A1:  MOVLW  0E
00A2:  MOVWF  2B
00A3:  MOVLW  10
00A4:  MOVWF  2A
00A5:  BCF    03.5
00A6:  BCF    03.6
00A7:  CALL   056
00A8:  BSF    03.5
00A9:  BSF    03.6
00AA:  MOVF   24,W
00AB:  MOVWF  04
00AC:  BCF    03.7
00AD:  BTFSC  25.0
00AE:  BSF    03.7
00AF:  MOVF   7A,W
00B0:  MOVWF  17
00B1:  MOVF   79,W
00B2:  MOVWF  16
00B3:  MOVF   78,W
00B4:  MOVWF  15
00B5:  MOVF   77,W
00B6:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
00B7:  MOVLW  02
00B8:  ADDWF  12,W
00B9:  MOVWF  04
00BA:  BCF    03.7
00BB:  BTFSC  13.0
00BC:  BSF    03.7
00BD:  MOVF   00,W
00BE:  CLRF   23
00BF:  CLRF   22
00C0:  CLRF   21
00C1:  MOVWF  20
00C2:  CLRF   25
00C3:  MOVF   04,W
00C4:  MOVWF  24
00C5:  BCF    25.0
00C6:  BTFSC  03.7
00C7:  BSF    25.0
00C8:  MOVF   23,W
00C9:  MOVWF  29
00CA:  MOVF   22,W
00CB:  MOVWF  28
00CC:  MOVF   21,W
00CD:  MOVWF  27
00CE:  MOVF   20,W
00CF:  MOVWF  26
00D0:  CLRF   2D
00D1:  CLRF   2C
00D2:  CLRF   2B
00D3:  MOVLW  3C
00D4:  MOVWF  2A
00D5:  BCF    03.5
00D6:  BCF    03.6
00D7:  CALL   056
00D8:  BSF    03.5
00D9:  BSF    03.6
00DA:  MOVF   24,W
00DB:  MOVWF  04
00DC:  BCF    03.7
00DD:  BTFSC  25.0
00DE:  BSF    03.7
00DF:  MOVF   7A,W
00E0:  MOVWF  1B
00E1:  MOVF   79,W
00E2:  MOVWF  1A
00E3:  MOVF   78,W
00E4:  MOVWF  19
00E5:  MOVF   77,W
00E6:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
00E7:  MOVF   18,W
00E8:  ADDWF  14,W
00E9:  MOVWF  20
00EA:  MOVF   15,W
00EB:  MOVWF  21
00EC:  MOVF   19,W
00ED:  BTFSC  03.0
00EE:  INCFSZ 19,W
00EF:  ADDWF  21,F
00F0:  MOVF   16,W
00F1:  MOVWF  22
00F2:  MOVF   1A,W
00F3:  BTFSC  03.0
00F4:  INCFSZ 1A,W
00F5:  ADDWF  22,F
00F6:  MOVF   17,W
00F7:  MOVWF  23
00F8:  MOVF   1B,W
00F9:  BTFSC  03.0
00FA:  INCFSZ 1B,W
00FB:  ADDWF  23,F
00FC:  MOVLW  03
00FD:  ADDWF  12,W
00FE:  MOVWF  04
00FF:  BCF    03.7
0100:  BTFSC  13.0
0101:  BSF    03.7
0102:  MOVF   00,W
0103:  ADDWF  20,W
0104:  MOVWF  1C
0105:  MOVF   21,W
0106:  MOVWF  1D
0107:  MOVLW  00
0108:  BTFSC  03.0
0109:  MOVLW  01
010A:  ADDWF  1D,F
010B:  MOVF   22,W
010C:  MOVWF  1E
010D:  MOVLW  00
010E:  BTFSC  03.0
010F:  MOVLW  01
0110:  ADDWF  1E,F
0111:  MOVF   23,W
0112:  MOVWF  1F
0113:  MOVLW  00
0114:  BTFSC  03.0
0115:  MOVLW  01
0116:  ADDWF  1F,F
....................  
....................     return seconds; 
0117:  MOVF   1C,W
0118:  MOVWF  77
0119:  MOVF   1D,W
011A:  MOVWF  78
011B:  MOVF   1E,W
011C:  MOVWF  79
011D:  MOVF   1F,W
011E:  MOVWF  7A
011F:  BCF    03.5
0120:  BCF    03.6
0121:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
0B9F:  BSF    03.6
0BA0:  CLRF   5D
0BA1:  CLRF   5E
0BA2:  CLRF   5F
0BA3:  BCF    0A.3
0BA4:  BCF    03.6
0BA5:  CALL   39E
0BA6:  BSF    0A.3
0BA7:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void Time_saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int Time_getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... void Time_showHoursMinutesRtc(BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
088C:  CLRF   23
088D:  CLRF   24
088E:  CLRF   25
088F:  CLRF   26
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0890:  BCF    0A.3
0891:  BCF    03.6
0892:  CALL   5A2
0893:  BSF    0A.3
0894:  MOVF   7A,W
0895:  BSF    03.6
0896:  MOVWF  30
0897:  MOVF   79,W
0898:  MOVWF  2F
0899:  MOVF   78,W
089A:  MOVWF  2E
089B:  MOVF   77,W
089C:  MOVWF  2D
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
089D:  MOVLW  01
089E:  MOVWF  3B
089F:  MOVLW  2D
08A0:  MOVWF  3A
08A1:  CLRF   3C
08A2:  BCF    0A.3
08A3:  BCF    03.6
08A4:  CALL   726
08A5:  BSF    0A.3
08A6:  MOVF   79,W
08A7:  MOVWF  7A
08A8:  MOVF   78,W
08A9:  BSF    03.6
08AA:  MOVWF  31
08AB:  MOVF   7A,W
08AC:  MOVWF  32
08AD:  MOVLW  01
08AE:  MOVWF  34
08AF:  MOVLW  27
08B0:  MOVWF  33
08B1:  MOVLW  06
08B2:  MOVWF  78
08B3:  MOVF   31,W
08B4:  MOVWF  04
08B5:  BCF    03.7
08B6:  BTFSC  32.0
08B7:  BSF    03.7
08B8:  MOVF   00,W
08B9:  MOVWF  77
08BA:  MOVF   33,W
08BB:  MOVWF  04
08BC:  BCF    03.7
08BD:  BTFSC  34.0
08BE:  BSF    03.7
08BF:  MOVF   77,W
08C0:  MOVWF  00
08C1:  INCF   33,F
08C2:  BTFSC  03.2
08C3:  INCF   34,F
08C4:  INCF   31,F
08C5:  BTFSC  03.2
08C6:  INCF   32,F
08C7:  DECFSZ 78,F
08C8:  GOTO   0B3
....................     timeToSend[0] = timeInDigits.minute[0]; 
08C9:  MOVF   29,W
08CA:  MOVWF  23
....................     timeToSend[1] = timeInDigits.minute[1]; 
08CB:  MOVF   2A,W
08CC:  MOVWF  24
....................     timeToSend[2] = timeInDigits.hour[0]; 
08CD:  MOVF   27,W
08CE:  MOVWF  25
....................     timeToSend[3] = timeInDigits.hour[1]; 
08CF:  MOVF   28,W
08D0:  MOVWF  26
....................  
....................     if (blink) { 
08D1:  MOVF   22,F
08D2:  BTFSC  03.2
08D3:  GOTO   0D8
....................         blink = currentTime.second % 2; 
08D4:  MOVF   30,W
08D5:  ANDLW  01
08D6:  MOVWF  22
....................     } else { 
08D7:  GOTO   0DA
....................         blink = TRUE; 
08D8:  MOVLW  01
08D9:  MOVWF  22
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
08DA:  MOVLW  01
08DB:  MOVWF  35
08DC:  MOVLW  23
08DD:  MOVWF  34
08DE:  MOVLW  04
08DF:  MOVWF  36
08E0:  MOVF   22,W
08E1:  MOVWF  37
08E2:  BCF    03.6
08E3:  CALL   000
.................... } 
....................  
.................... void Time_showMinutesSecondsRtc(void) { 
....................     int timeToSend[4] = {0}; 
*
08F1:  CLRF   22
08F2:  CLRF   23
08F3:  CLRF   24
08F4:  CLRF   25
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
08F5:  BCF    0A.3
08F6:  BCF    03.6
08F7:  CALL   5A2
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.6
08FB:  MOVWF  2F
08FC:  MOVF   79,W
08FD:  MOVWF  2E
08FE:  MOVF   78,W
08FF:  MOVWF  2D
0900:  MOVF   77,W
0901:  MOVWF  2C
....................     currentTime.minute = (currentTime.minute + currentTime.hour * 60) % 100; 
0902:  MOVF   2D,W
0903:  MOVWF  68
0904:  MOVLW  3C
0905:  MOVWF  69
0906:  BCF    0A.3
0907:  BCF    03.6
0908:  CALL   564
0909:  BSF    0A.3
090A:  MOVF   78,W
090B:  BSF    03.6
090C:  ADDWF  2E,W
090D:  MOVWF  31
090E:  BSF    03.5
090F:  MOVWF  28
0910:  MOVLW  64
0911:  MOVWF  29
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  BCF    03.6
0915:  CALL   03D
0916:  BSF    0A.3
0917:  MOVF   77,W
0918:  BSF    03.6
0919:  MOVWF  2E
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
091A:  MOVLW  01
091B:  MOVWF  3B
091C:  MOVLW  2C
091D:  MOVWF  3A
091E:  CLRF   3C
091F:  BCF    0A.3
0920:  BCF    03.6
0921:  CALL   726
0922:  BSF    0A.3
0923:  MOVF   79,W
0924:  MOVWF  7A
0925:  MOVF   78,W
0926:  BSF    03.6
0927:  MOVWF  30
0928:  MOVF   7A,W
0929:  MOVWF  31
092A:  MOVLW  01
092B:  MOVWF  33
092C:  MOVLW  26
092D:  MOVWF  32
092E:  MOVLW  06
092F:  MOVWF  78
0930:  MOVF   30,W
0931:  MOVWF  04
0932:  BCF    03.7
0933:  BTFSC  31.0
0934:  BSF    03.7
0935:  MOVF   00,W
0936:  MOVWF  77
0937:  MOVF   32,W
0938:  MOVWF  04
0939:  BCF    03.7
093A:  BTFSC  33.0
093B:  BSF    03.7
093C:  MOVF   77,W
093D:  MOVWF  00
093E:  INCF   32,F
093F:  BTFSC  03.2
0940:  INCF   33,F
0941:  INCF   30,F
0942:  BTFSC  03.2
0943:  INCF   31,F
0944:  DECFSZ 78,F
0945:  GOTO   130
....................     timeToSend[0] = timeInDigits.second[0]; 
0946:  MOVF   2A,W
0947:  MOVWF  22
....................     timeToSend[1] = timeInDigits.second[1]; 
0948:  MOVF   2B,W
0949:  MOVWF  23
....................     timeToSend[2] = timeInDigits.minute[0]; 
094A:  MOVF   28,W
094B:  MOVWF  24
....................     timeToSend[3] = timeInDigits.minute[1]; 
094C:  MOVF   29,W
094D:  MOVWF  25
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
094E:  MOVLW  01
094F:  MOVWF  35
0950:  MOVLW  22
0951:  MOVWF  34
0952:  MOVLW  04
0953:  MOVWF  36
0954:  MOVLW  01
0955:  MOVWF  37
0956:  BCF    03.6
0957:  CALL   000
0958:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time alarmTime; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
.................... } Timer; 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
01A0:  MOVLW  04
01A1:  BSF    03.6
01A2:  ADDWF  5A,W
01A3:  MOVWF  78
01A4:  MOVF   5B,W
01A5:  MOVWF  7A
01A6:  BTFSC  03.0
01A7:  INCF   7A,F
01A8:  MOVF   78,W
01A9:  BSF    03.5
01AA:  MOVWF  10
01AB:  MOVF   7A,W
01AC:  MOVWF  11
01AD:  MOVWF  13
01AE:  MOVF   10,W
01AF:  MOVWF  12
01B0:  BCF    03.5
01B1:  BCF    03.6
01B2:  CALL   084
01B3:  MOVF   7A,W
01B4:  BSF    03.6
01B5:  MOVWF  5F
01B6:  MOVF   79,W
01B7:  MOVWF  5E
01B8:  MOVF   78,W
01B9:  MOVWF  5D
01BA:  MOVF   77,W
01BB:  MOVWF  5C
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
01BC:  MOVLW  08
01BD:  ADDWF  5A,W
01BE:  MOVWF  78
01BF:  MOVF   5B,W
01C0:  MOVWF  7A
01C1:  BTFSC  03.0
01C2:  INCF   7A,F
01C3:  MOVF   78,W
01C4:  BSF    03.5
01C5:  MOVWF  10
01C6:  MOVF   7A,W
01C7:  MOVWF  11
01C8:  MOVWF  13
01C9:  MOVF   10,W
01CA:  MOVWF  12
01CB:  BCF    03.5
01CC:  BCF    03.6
01CD:  CALL   084
01CE:  MOVF   7A,W
01CF:  BSF    03.6
01D0:  MOVWF  63
01D1:  MOVF   79,W
01D2:  MOVWF  62
01D3:  MOVF   78,W
01D4:  MOVWF  61
01D5:  MOVF   77,W
01D6:  MOVWF  60
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
01D7:  MOVF   5C,W
01D8:  SUBWF  60,W
01D9:  MOVWF  64
01DA:  MOVF   61,W
01DB:  MOVWF  65
01DC:  MOVF   5D,W
01DD:  BTFSS  03.0
01DE:  INCFSZ 5D,W
01DF:  SUBWF  65,F
01E0:  MOVF   62,W
01E1:  MOVWF  66
01E2:  MOVF   5E,W
01E3:  BTFSS  03.0
01E4:  INCFSZ 5E,W
01E5:  SUBWF  66,F
01E6:  MOVF   63,W
01E7:  MOVWF  67
01E8:  MOVF   5F,W
01E9:  BTFSS  03.0
01EA:  INCFSZ 5F,W
01EB:  SUBWF  67,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
01EC:  BTFSS  67.7
01ED:  GOTO   1F3
01EE:  CLRF   77
01EF:  CLRF   78
01F0:  CLRF   79
01F1:  CLRF   7A
01F2:  GOTO   1FB
01F3:  MOVF   64,W
01F4:  MOVWF  77
01F5:  MOVF   65,W
01F6:  MOVWF  78
01F7:  MOVF   66,W
01F8:  MOVWF  79
01F9:  MOVF   67,W
01FA:  MOVWF  7A
01FB:  MOVF   7A,W
01FC:  MOVWF  67
01FD:  MOVF   79,W
01FE:  MOVWF  66
01FF:  MOVF   78,W
0200:  MOVWF  65
0201:  MOVF   77,W
0202:  MOVWF  64
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
0203:  BCF    03.1
0204:  MOVF   67,W
0205:  BSF    03.5
0206:  MOVWF  25
0207:  BCF    03.5
0208:  MOVF   66,W
0209:  BSF    03.5
020A:  MOVWF  24
020B:  BCF    03.5
020C:  MOVF   65,W
020D:  BSF    03.5
020E:  MOVWF  23
020F:  BCF    03.5
0210:  MOVF   64,W
0211:  BSF    03.5
0212:  MOVWF  22
0213:  CLRF   29
0214:  CLRF   28
0215:  MOVLW  0E
0216:  MOVWF  27
0217:  MOVLW  10
0218:  MOVWF  26
0219:  BCF    03.5
021A:  BCF    03.6
021B:  CALL   122
021C:  MOVF   7A,W
021D:  BSF    03.6
021E:  MOVWF  6B
021F:  MOVF   79,W
0220:  MOVWF  6A
0221:  MOVF   78,W
0222:  MOVWF  69
0223:  MOVF   77,W
0224:  MOVWF  68
0225:  BSF    03.1
0226:  MOVLW  90
0227:  MOVWF  04
0228:  BSF    03.7
0229:  MOVF   67,W
022A:  BSF    03.5
022B:  MOVWF  25
022C:  BCF    03.5
022D:  MOVF   66,W
022E:  BSF    03.5
022F:  MOVWF  24
0230:  BCF    03.5
0231:  MOVF   65,W
0232:  BSF    03.5
0233:  MOVWF  23
0234:  BCF    03.5
0235:  MOVF   64,W
0236:  BSF    03.5
0237:  MOVWF  22
0238:  CLRF   29
0239:  CLRF   28
023A:  MOVLW  0E
023B:  MOVWF  27
023C:  MOVLW  10
023D:  MOVWF  26
023E:  BCF    03.5
023F:  BCF    03.6
0240:  CALL   122
0241:  BSF    03.5
0242:  BSF    03.6
0243:  MOVF   13,W
0244:  MOVWF  17
0245:  MOVF   12,W
0246:  MOVWF  16
0247:  MOVF   11,W
0248:  MOVWF  15
0249:  MOVF   10,W
024A:  MOVWF  14
024B:  CLRF   19
024C:  MOVF   04,W
024D:  MOVWF  18
024E:  BCF    19.0
024F:  BTFSC  03.7
0250:  BSF    19.0
0251:  BCF    03.1
0252:  MOVF   13,W
0253:  MOVWF  25
0254:  MOVF   12,W
0255:  MOVWF  24
0256:  MOVF   11,W
0257:  MOVWF  23
0258:  MOVF   10,W
0259:  MOVWF  22
025A:  CLRF   29
025B:  CLRF   28
025C:  CLRF   27
025D:  MOVLW  3C
025E:  MOVWF  26
025F:  BCF    03.5
0260:  BCF    03.6
0261:  CALL   122
0262:  BSF    03.5
0263:  BSF    03.6
0264:  MOVF   18,W
0265:  MOVWF  04
0266:  BCF    03.7
0267:  BTFSC  19.0
0268:  BSF    03.7
0269:  MOVF   7A,W
026A:  BCF    03.5
026B:  MOVWF  6F
026C:  MOVF   79,W
026D:  MOVWF  6E
026E:  MOVF   78,W
026F:  MOVWF  6D
0270:  MOVF   77,W
0271:  MOVWF  6C
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
0272:  MOVLW  03
0273:  ADDWF  5A,W
0274:  MOVWF  78
0275:  MOVF   5B,W
0276:  MOVWF  7A
0277:  BTFSC  03.0
0278:  INCF   7A,F
0279:  MOVF   78,W
027A:  BSF    03.5
027B:  MOVWF  10
027C:  MOVF   7A,W
027D:  MOVWF  11
027E:  CLRF   13
027F:  MOVF   04,W
0280:  MOVWF  12
0281:  BCF    13.0
0282:  BTFSC  03.7
0283:  BSF    13.0
0284:  BSF    03.1
0285:  MOVLW  94
0286:  MOVWF  04
0287:  BSF    03.7
0288:  BCF    03.5
0289:  MOVF   67,W
028A:  BSF    03.5
028B:  MOVWF  25
028C:  BCF    03.5
028D:  MOVF   66,W
028E:  BSF    03.5
028F:  MOVWF  24
0290:  BCF    03.5
0291:  MOVF   65,W
0292:  BSF    03.5
0293:  MOVWF  23
0294:  BCF    03.5
0295:  MOVF   64,W
0296:  BSF    03.5
0297:  MOVWF  22
0298:  CLRF   29
0299:  CLRF   28
029A:  MOVLW  0E
029B:  MOVWF  27
029C:  MOVLW  10
029D:  MOVWF  26
029E:  BCF    03.5
029F:  BCF    03.6
02A0:  CALL   122
02A1:  BSF    03.5
02A2:  BSF    03.6
02A3:  MOVF   14,W
02A4:  MOVWF  77
02A5:  MOVF   15,W
02A6:  MOVWF  78
02A7:  MOVF   16,W
02A8:  MOVWF  79
02A9:  MOVF   17,W
02AA:  MOVWF  7A
02AB:  MOVF   12,W
02AC:  MOVWF  04
02AD:  BCF    03.7
02AE:  BTFSC  13.0
02AF:  BSF    03.7
02B0:  MOVF   17,W
02B1:  MOVWF  1B
02B2:  MOVF   16,W
02B3:  MOVWF  1A
02B4:  MOVF   15,W
02B5:  MOVWF  19
02B6:  MOVF   14,W
02B7:  MOVWF  18
02B8:  CLRF   1D
02B9:  MOVF   04,W
02BA:  MOVWF  1C
02BB:  BCF    1D.0
02BC:  BTFSC  03.7
02BD:  BSF    1D.0
02BE:  BSF    03.1
02BF:  MOVLW  9E
02C0:  MOVWF  04
02C1:  BSF    03.7
02C2:  MOVF   17,W
02C3:  MOVWF  25
02C4:  MOVF   16,W
02C5:  MOVWF  24
02C6:  MOVF   15,W
02C7:  MOVWF  23
02C8:  MOVF   14,W
02C9:  MOVWF  22
02CA:  CLRF   29
02CB:  CLRF   28
02CC:  CLRF   27
02CD:  MOVLW  3C
02CE:  MOVWF  26
02CF:  BCF    03.5
02D0:  BCF    03.6
02D1:  CALL   122
02D2:  BSF    03.5
02D3:  BSF    03.6
02D4:  MOVF   1C,W
02D5:  MOVWF  04
02D6:  BCF    03.7
02D7:  BTFSC  1D.0
02D8:  BSF    03.7
02D9:  MOVF   10,W
02DA:  MOVWF  04
02DB:  BCF    03.7
02DC:  BTFSC  11.0
02DD:  BSF    03.7
02DE:  MOVF   1E,W
02DF:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
02E0:  MOVLW  01
02E1:  BCF    03.5
02E2:  ADDWF  5A,W
02E3:  MOVWF  04
02E4:  BCF    03.7
02E5:  BTFSC  5B.0
02E6:  BSF    03.7
02E7:  MOVF   68,W
02E8:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
02E9:  MOVLW  02
02EA:  ADDWF  5A,W
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  BTFSC  5B.0
02EE:  BSF    03.7
02EF:  MOVF   6C,W
02F0:  MOVWF  00
02F1:  BCF    03.6
02F2:  RETURN
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int hoursUpperBound, int minutesUpperBound, __EEADDRESS__ addressAlarmHour, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressRtcHour, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmHours = addressAlarmHour; 
*
10BB:  MOVF   5E,W
10BC:  BSF    03.5
10BD:  MOVWF  1F
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
10BE:  BCF    03.5
10BF:  MOVF   60,W
10C0:  BSF    03.5
10C1:  MOVWF  1E
....................     newTimer.addressRtcHours = addressRtcHour; 
10C2:  BCF    03.5
10C3:  MOVF   62,W
10C4:  BSF    03.5
10C5:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
10C6:  BCF    03.5
10C7:  MOVF   64,W
10C8:  BSF    03.5
10C9:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
10CA:  BCF    03.5
10CB:  MOVF   66,W
10CC:  BSF    03.5
10CD:  MOVWF  22
....................  
....................     newTimer.alarmTime.hour = read_eeprom(addressAlarmHour) % (hoursUpperBound + 1); 
10CE:  BCF    03.5
10CF:  MOVF   5E,W
10D0:  MOVWF  0D
10D1:  BSF    03.5
10D2:  BCF    0C.7
10D3:  BSF    0C.0
10D4:  BCF    03.5
10D5:  MOVF   0C,W
10D6:  MOVWF  68
10D7:  MOVLW  01
10D8:  ADDWF  5C,W
10D9:  MOVWF  69
10DA:  MOVF   68,W
10DB:  BSF    03.5
10DC:  MOVWF  28
10DD:  BCF    03.5
10DE:  MOVF   69,W
10DF:  BSF    03.5
10E0:  MOVWF  29
10E1:  BCF    0A.4
10E2:  BCF    03.5
10E3:  BCF    03.6
10E4:  CALL   03D
10E5:  BSF    0A.4
10E6:  MOVF   77,W
10E7:  BSF    03.5
10E8:  BSF    03.6
10E9:  MOVWF  19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
10EA:  BCF    03.5
10EB:  MOVF   60,W
10EC:  MOVWF  0D
10ED:  BSF    03.5
10EE:  BCF    0C.7
10EF:  BSF    0C.0
10F0:  BCF    03.5
10F1:  MOVF   0C,W
10F2:  MOVWF  68
10F3:  MOVLW  01
10F4:  ADDWF  5D,W
10F5:  MOVWF  69
10F6:  MOVF   68,W
10F7:  BSF    03.5
10F8:  MOVWF  28
10F9:  BCF    03.5
10FA:  MOVF   69,W
10FB:  BSF    03.5
10FC:  MOVWF  29
10FD:  BCF    0A.4
10FE:  BCF    03.5
10FF:  BCF    03.6
1100:  CALL   03D
1101:  BSF    0A.4
1102:  MOVF   77,W
1103:  BSF    03.5
1104:  BSF    03.6
1105:  MOVWF  1A
....................     newTimer.alarmTime.second = 0; 
1106:  CLRF   1B
....................  
....................     newTimer.hoursUpperBound = hoursUpperBound; 
1107:  BCF    03.5
1108:  MOVF   5C,W
1109:  BSF    03.5
110A:  MOVWF  23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
110B:  BCF    03.5
110C:  MOVF   5D,W
110D:  BSF    03.5
110E:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
110F:  MOVLW  3B
1110:  MOVWF  25
....................  
.................... //    newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 100; 
.................... //    newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (minutesUpperBound + 1); 
.................... //    newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
....................  
....................     return newTimer; 
1111:  MOVLW  90
1112:  MOVWF  78
1113:  MOVLW  01
1114:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int minutesUpperBound, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
*
114C:  MOVF   5D,W
114D:  BSF    03.5
114E:  MOVWF  1E
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
114F:  BCF    03.5
1150:  MOVF   5F,W
1151:  BSF    03.5
1152:  MOVWF  1D
....................     newTimer.addressRtcHours = addressRtcHour; 
1153:  BCF    03.5
1154:  MOVF   61,W
1155:  BSF    03.5
1156:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
1157:  BCF    03.5
1158:  MOVF   63,W
1159:  BSF    03.5
115A:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
115B:  BCF    03.5
115C:  MOVF   65,W
115D:  BSF    03.5
115E:  MOVWF  22
....................  
....................     newTimer.hoursUpperBound = 0; 
115F:  CLRF   23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
1160:  BCF    03.5
1161:  MOVF   5C,W
1162:  BSF    03.5
1163:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
1164:  MOVLW  3B
1165:  MOVWF  25
....................  
....................     newTimer.alarmTime.hour = 0; 
1166:  CLRF   19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
1167:  BCF    03.5
1168:  MOVF   5D,W
1169:  MOVWF  0D
116A:  BSF    03.5
116B:  BCF    0C.7
116C:  BSF    0C.0
116D:  BCF    03.5
116E:  MOVF   0C,W
116F:  MOVWF  67
1170:  MOVLW  01
1171:  ADDWF  5C,W
1172:  MOVWF  68
1173:  MOVF   67,W
1174:  BSF    03.5
1175:  MOVWF  28
1176:  BCF    03.5
1177:  MOVF   68,W
1178:  BSF    03.5
1179:  MOVWF  29
117A:  BCF    0A.4
117B:  BCF    03.5
117C:  BCF    03.6
117D:  CALL   03D
117E:  BSF    0A.4
117F:  MOVF   77,W
1180:  BSF    03.5
1181:  BSF    03.6
1182:  MOVWF  1A
....................     newTimer.alarmTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
1183:  BCF    03.5
1184:  MOVF   5F,W
1185:  MOVWF  0D
1186:  BSF    03.5
1187:  BCF    0C.7
1188:  BSF    0C.0
1189:  BCF    03.5
118A:  MOVF   0C,W
118B:  MOVWF  67
118C:  MOVLW  01
118D:  BSF    03.5
118E:  ADDWF  25,W
118F:  BCF    03.5
1190:  MOVWF  68
1191:  MOVF   67,W
1192:  BSF    03.5
1193:  MOVWF  28
1194:  BCF    03.5
1195:  MOVF   68,W
1196:  BSF    03.5
1197:  MOVWF  29
1198:  BCF    0A.4
1199:  BCF    03.5
119A:  BCF    03.6
119B:  CALL   03D
119C:  BSF    0A.4
119D:  MOVF   77,W
119E:  BSF    03.5
119F:  BSF    03.6
11A0:  MOVWF  1B
....................  
....................  
.................... //    newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 2; 
.................... //    newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (minutesUpperBound + 1); 
.................... //    newTimer.currentTime.minute = (newTimer.currentTime.minute + newTimer.currentTime.hour * 60) % 100; 
.................... //    newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
....................  
....................     return newTimer; 
11A1:  MOVLW  90
11A2:  MOVWF  78
11A3:  MOVLW  01
11A4:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_setRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
*
11D1:  MOVLW  05
11D2:  ADDWF  52,W
11D3:  MOVWF  78
11D4:  MOVF   53,W
11D5:  MOVWF  7A
11D6:  BTFSC  03.0
11D7:  INCF   7A,F
11D8:  MOVF   78,W
11D9:  MOVWF  54
11DA:  MOVF   7A,W
11DB:  MOVWF  55
11DC:  MOVLW  10
11DD:  ADDWF  52,W
11DE:  MOVWF  04
11DF:  BCF    03.7
11E0:  BTFSC  53.0
11E1:  BSF    03.7
11E2:  MOVF   00,W
11E3:  MOVWF  56
11E4:  MOVF   56,W
11E5:  MOVWF  0D
11E6:  BSF    03.5
11E7:  BCF    0C.7
11E8:  BSF    0C.0
11E9:  BCF    03.5
11EA:  MOVF   0C,W
11EB:  MOVWF  56
11EC:  MOVLW  13
11ED:  ADDWF  52,W
11EE:  MOVWF  04
11EF:  BCF    03.7
11F0:  BTFSC  53.0
11F1:  BSF    03.7
11F2:  MOVLW  01
11F3:  ADDWF  00,W
11F4:  MOVWF  57
11F5:  MOVF   56,W
11F6:  BSF    03.5
11F7:  MOVWF  28
11F8:  BCF    03.5
11F9:  MOVF   57,W
11FA:  BSF    03.5
11FB:  MOVWF  29
11FC:  BCF    0A.4
11FD:  BCF    03.5
11FE:  BCF    03.6
11FF:  CALL   03D
1200:  BSF    0A.4
1201:  MOVF   77,W
1202:  BSF    03.6
1203:  MOVWF  56
1204:  MOVF   54,W
1205:  MOVWF  04
1206:  BCF    03.7
1207:  BTFSC  55.0
1208:  BSF    03.7
1209:  MOVF   56,W
120A:  MOVWF  00
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
120B:  MOVLW  06
120C:  ADDWF  52,W
120D:  MOVWF  78
120E:  MOVF   53,W
120F:  MOVWF  7A
1210:  BTFSC  03.0
1211:  INCF   7A,F
1212:  MOVF   78,W
1213:  MOVWF  54
1214:  MOVF   7A,W
1215:  MOVWF  55
1216:  MOVLW  11
1217:  ADDWF  52,W
1218:  MOVWF  04
1219:  BCF    03.7
121A:  BTFSC  53.0
121B:  BSF    03.7
121C:  MOVF   00,W
121D:  MOVWF  56
121E:  MOVF   56,W
121F:  MOVWF  0D
1220:  BSF    03.5
1221:  BCF    0C.7
1222:  BSF    0C.0
1223:  BCF    03.5
1224:  MOVF   0C,W
1225:  MOVWF  56
1226:  MOVLW  14
1227:  ADDWF  52,W
1228:  MOVWF  04
1229:  BCF    03.7
122A:  BTFSC  53.0
122B:  BSF    03.7
122C:  MOVLW  01
122D:  ADDWF  00,W
122E:  MOVWF  57
122F:  MOVF   56,W
1230:  BSF    03.5
1231:  MOVWF  28
1232:  BCF    03.5
1233:  MOVF   57,W
1234:  BSF    03.5
1235:  MOVWF  29
1236:  BCF    0A.4
1237:  BCF    03.5
1238:  BCF    03.6
1239:  CALL   03D
123A:  BSF    0A.4
123B:  MOVF   77,W
123C:  BSF    03.6
123D:  MOVWF  56
123E:  MOVF   54,W
123F:  MOVWF  04
1240:  BCF    03.7
1241:  BTFSC  55.0
1242:  BSF    03.7
1243:  MOVF   56,W
1244:  MOVWF  00
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
1245:  MOVLW  07
1246:  ADDWF  52,W
1247:  MOVWF  78
1248:  MOVF   53,W
1249:  MOVWF  7A
124A:  BTFSC  03.0
124B:  INCF   7A,F
124C:  MOVF   78,W
124D:  MOVWF  54
124E:  MOVF   7A,W
124F:  MOVWF  55
1250:  MOVLW  12
1251:  ADDWF  52,W
1252:  MOVWF  04
1253:  BCF    03.7
1254:  BTFSC  53.0
1255:  BSF    03.7
1256:  MOVF   00,W
1257:  MOVWF  56
1258:  MOVF   56,W
1259:  MOVWF  0D
125A:  BSF    03.5
125B:  BCF    0C.7
125C:  BSF    0C.0
125D:  BCF    03.5
125E:  MOVF   0C,W
125F:  MOVWF  56
1260:  MOVLW  15
1261:  ADDWF  52,W
1262:  MOVWF  04
1263:  BCF    03.7
1264:  BTFSC  53.0
1265:  BSF    03.7
1266:  MOVLW  01
1267:  ADDWF  00,W
1268:  MOVWF  57
1269:  MOVF   56,W
126A:  BSF    03.5
126B:  MOVWF  28
126C:  BCF    03.5
126D:  MOVF   57,W
126E:  BSF    03.5
126F:  MOVWF  29
1270:  BCF    0A.4
1271:  BCF    03.5
1272:  BCF    03.6
1273:  CALL   03D
1274:  BSF    0A.4
1275:  MOVF   77,W
1276:  BSF    03.6
1277:  MOVWF  56
1278:  MOVF   54,W
1279:  MOVWF  04
127A:  BCF    03.7
127B:  BTFSC  55.0
127C:  BSF    03.7
127D:  MOVF   56,W
127E:  MOVWF  00
....................     Timer_updateCountdownTime(timerPtr); 
127F:  MOVF   53,W
1280:  MOVWF  5B
1281:  MOVF   52,W
1282:  MOVWF  5A
1283:  BCF    0A.4
1284:  BCF    03.6
1285:  CALL   1A0
1286:  BSF    0A.4
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->alarmTime.hour + 1; 
*
195D:  MOVLW  09
195E:  ADDWF  23,W
195F:  MOVWF  78
1960:  MOVF   24,W
1961:  MOVWF  7A
1962:  BTFSC  03.0
1963:  INCF   7A,F
1964:  MOVF   78,W
1965:  MOVWF  25
1966:  MOVF   7A,W
1967:  MOVWF  26
1968:  MOVLW  09
1969:  ADDWF  23,W
196A:  MOVWF  04
196B:  BCF    03.7
196C:  BTFSC  24.0
196D:  BSF    03.7
196E:  MOVF   00,W
196F:  MOVWF  27
1970:  MOVLW  13
1971:  ADDWF  23,W
1972:  MOVWF  04
1973:  BCF    03.7
1974:  BTFSC  24.0
1975:  BSF    03.7
1976:  MOVF   00,W
1977:  SUBWF  27,W
1978:  BTFSS  03.2
1979:  GOTO   17C
197A:  MOVLW  00
197B:  GOTO   184
197C:  MOVLW  09
197D:  ADDWF  23,W
197E:  MOVWF  04
197F:  BCF    03.7
1980:  BTFSC  24.0
1981:  BSF    03.7
1982:  MOVLW  01
1983:  ADDWF  00,W
1984:  MOVWF  27
1985:  MOVF   25,W
1986:  MOVWF  04
1987:  BCF    03.7
1988:  BTFSC  26.0
1989:  BSF    03.7
198A:  MOVF   27,W
198B:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->alarmTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->alarmTime.minute + 1; 
*
0C6B:  MOVLW  0A
0C6C:  BSF    03.6
0C6D:  ADDWF  23,W
0C6E:  MOVWF  78
0C6F:  MOVF   24,W
0C70:  MOVWF  7A
0C71:  BTFSC  03.0
0C72:  INCF   7A,F
0C73:  MOVF   78,W
0C74:  MOVWF  25
0C75:  MOVF   7A,W
0C76:  MOVWF  26
0C77:  MOVLW  0A
0C78:  ADDWF  23,W
0C79:  MOVWF  04
0C7A:  BCF    03.7
0C7B:  BTFSC  24.0
0C7C:  BSF    03.7
0C7D:  MOVF   00,W
0C7E:  MOVWF  27
0C7F:  MOVLW  14
0C80:  ADDWF  23,W
0C81:  MOVWF  04
0C82:  BCF    03.7
0C83:  BTFSC  24.0
0C84:  BSF    03.7
0C85:  MOVF   00,W
0C86:  SUBWF  27,W
0C87:  BTFSS  03.2
0C88:  GOTO   48B
0C89:  MOVLW  00
0C8A:  GOTO   493
0C8B:  MOVLW  0A
0C8C:  ADDWF  23,W
0C8D:  MOVWF  04
0C8E:  BCF    03.7
0C8F:  BTFSC  24.0
0C90:  BSF    03.7
0C91:  MOVLW  01
0C92:  ADDWF  00,W
0C93:  MOVWF  27
0C94:  MOVF   25,W
0C95:  MOVWF  04
0C96:  BCF    03.7
0C97:  BTFSC  26.0
0C98:  BSF    03.7
0C99:  MOVF   27,W
0C9A:  MOVWF  00
0C9B:  BCF    03.6
0C9C:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->alarmTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->alarmTime.second + 1; 
*
1B1E:  MOVLW  0B
1B1F:  ADDWF  23,W
1B20:  MOVWF  78
1B21:  MOVF   24,W
1B22:  MOVWF  7A
1B23:  BTFSC  03.0
1B24:  INCF   7A,F
1B25:  MOVF   78,W
1B26:  MOVWF  25
1B27:  MOVF   7A,W
1B28:  MOVWF  26
1B29:  MOVLW  0B
1B2A:  ADDWF  23,W
1B2B:  MOVWF  04
1B2C:  BCF    03.7
1B2D:  BTFSC  24.0
1B2E:  BSF    03.7
1B2F:  MOVF   00,W
1B30:  MOVWF  27
1B31:  MOVLW  15
1B32:  ADDWF  23,W
1B33:  MOVWF  04
1B34:  BCF    03.7
1B35:  BTFSC  24.0
1B36:  BSF    03.7
1B37:  MOVF   00,W
1B38:  SUBWF  27,W
1B39:  BTFSS  03.2
1B3A:  GOTO   33D
1B3B:  MOVLW  00
1B3C:  GOTO   345
1B3D:  MOVLW  0B
1B3E:  ADDWF  23,W
1B3F:  MOVWF  04
1B40:  BCF    03.7
1B41:  BTFSC  24.0
1B42:  BSF    03.7
1B43:  MOVLW  01
1B44:  ADDWF  00,W
1B45:  MOVWF  27
1B46:  MOVF   25,W
1B47:  MOVWF  04
1B48:  BCF    03.7
1B49:  BTFSC  26.0
1B4A:  BSF    03.7
1B4B:  MOVF   27,W
1B4C:  MOVWF  00
1B4D:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->alarmTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0AE5:  MOVLW  10
0AE6:  ADDWF  23,W
0AE7:  MOVWF  04
0AE8:  BCF    03.7
0AE9:  BTFSC  24.0
0AEA:  BSF    03.7
0AEB:  MOVF   00,W
0AEC:  MOVWF  25
0AED:  MOVLW  05
0AEE:  ADDWF  23,W
0AEF:  MOVWF  04
0AF0:  BCF    03.7
0AF1:  BTFSC  24.0
0AF2:  BSF    03.7
0AF3:  MOVF   00,W
0AF4:  MOVWF  26
0AF5:  BCF    03.6
0AF6:  MOVF   0B,W
0AF7:  MOVWF  77
0AF8:  BCF    0B.7
0AF9:  BSF    03.6
0AFA:  MOVF   25,W
0AFB:  MOVWF  0D
0AFC:  MOVF   26,W
0AFD:  MOVWF  0C
0AFE:  BSF    03.5
0AFF:  BCF    0C.7
0B00:  BSF    0C.2
0B01:  MOVLW  55
0B02:  MOVWF  0D
0B03:  MOVLW  AA
0B04:  MOVWF  0D
0B05:  BSF    0C.1
0B06:  BTFSC  0C.1
0B07:  GOTO   306
0B08:  BCF    0C.2
0B09:  MOVF   77,W
0B0A:  BCF    03.5
0B0B:  BCF    03.6
0B0C:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0B0D:  MOVLW  11
0B0E:  BSF    03.6
0B0F:  ADDWF  23,W
0B10:  MOVWF  04
0B11:  BCF    03.7
0B12:  BTFSC  24.0
0B13:  BSF    03.7
0B14:  MOVF   00,W
0B15:  MOVWF  25
0B16:  MOVLW  06
0B17:  ADDWF  23,W
0B18:  MOVWF  04
0B19:  BCF    03.7
0B1A:  BTFSC  24.0
0B1B:  BSF    03.7
0B1C:  MOVF   00,W
0B1D:  MOVWF  26
0B1E:  BCF    03.6
0B1F:  MOVF   0B,W
0B20:  MOVWF  77
0B21:  BCF    0B.7
0B22:  BSF    03.6
0B23:  MOVF   25,W
0B24:  MOVWF  0D
0B25:  MOVF   26,W
0B26:  MOVWF  0C
0B27:  BSF    03.5
0B28:  BCF    0C.7
0B29:  BSF    0C.2
0B2A:  MOVLW  55
0B2B:  MOVWF  0D
0B2C:  MOVLW  AA
0B2D:  MOVWF  0D
0B2E:  BSF    0C.1
0B2F:  BTFSC  0C.1
0B30:  GOTO   32F
0B31:  BCF    0C.2
0B32:  MOVF   77,W
0B33:  BCF    03.5
0B34:  BCF    03.6
0B35:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0B36:  MOVLW  12
0B37:  BSF    03.6
0B38:  ADDWF  23,W
0B39:  MOVWF  04
0B3A:  BCF    03.7
0B3B:  BTFSC  24.0
0B3C:  BSF    03.7
0B3D:  MOVF   00,W
0B3E:  MOVWF  25
0B3F:  MOVLW  07
0B40:  ADDWF  23,W
0B41:  MOVWF  04
0B42:  BCF    03.7
0B43:  BTFSC  24.0
0B44:  BSF    03.7
0B45:  MOVF   00,W
0B46:  MOVWF  26
0B47:  BCF    03.6
0B48:  MOVF   0B,W
0B49:  MOVWF  77
0B4A:  BCF    0B.7
0B4B:  BSF    03.6
0B4C:  MOVF   25,W
0B4D:  MOVWF  0D
0B4E:  MOVF   26,W
0B4F:  MOVWF  0C
0B50:  BSF    03.5
0B51:  BCF    0C.7
0B52:  BSF    0C.2
0B53:  MOVLW  55
0B54:  MOVWF  0D
0B55:  MOVLW  AA
0B56:  MOVWF  0D
0B57:  BSF    0C.1
0B58:  BTFSC  0C.1
0B59:  GOTO   358
0B5A:  BCF    0C.2
0B5B:  MOVF   77,W
0B5C:  BCF    03.5
0B5D:  BCF    03.6
0B5E:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarm(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
.................... void Timer_saveAlarmHoursMinutes(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
*
1CFC:  MOVLW  0F
1CFD:  ADDWF  21,W
1CFE:  MOVWF  04
1CFF:  BCF    03.7
1D00:  BTFSC  22.0
1D01:  BSF    03.7
1D02:  MOVF   00,W
1D03:  MOVWF  23
1D04:  MOVLW  09
1D05:  ADDWF  21,W
1D06:  MOVWF  04
1D07:  BCF    03.7
1D08:  BTFSC  22.0
1D09:  BSF    03.7
1D0A:  MOVF   00,W
1D0B:  MOVWF  24
1D0C:  BCF    03.6
1D0D:  MOVF   0B,W
1D0E:  MOVWF  77
1D0F:  BCF    0B.7
1D10:  BSF    03.6
1D11:  MOVF   23,W
1D12:  MOVWF  0D
1D13:  MOVF   24,W
1D14:  MOVWF  0C
1D15:  BSF    03.5
1D16:  BCF    0C.7
1D17:  BSF    0C.2
1D18:  MOVLW  55
1D19:  MOVWF  0D
1D1A:  MOVLW  AA
1D1B:  MOVWF  0D
1D1C:  BSF    0C.1
1D1D:  BTFSC  0C.1
1D1E:  GOTO   51D
1D1F:  BCF    0C.2
1D20:  MOVF   77,W
1D21:  BCF    03.5
1D22:  BCF    03.6
1D23:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute);     
1D24:  MOVLW  0E
1D25:  BSF    03.6
1D26:  ADDWF  21,W
1D27:  MOVWF  04
1D28:  BCF    03.7
1D29:  BTFSC  22.0
1D2A:  BSF    03.7
1D2B:  MOVF   00,W
1D2C:  MOVWF  23
1D2D:  MOVLW  0A
1D2E:  ADDWF  21,W
1D2F:  MOVWF  04
1D30:  BCF    03.7
1D31:  BTFSC  22.0
1D32:  BSF    03.7
1D33:  MOVF   00,W
1D34:  MOVWF  24
1D35:  BCF    03.6
1D36:  MOVF   0B,W
1D37:  MOVWF  77
1D38:  BCF    0B.7
1D39:  BSF    03.6
1D3A:  MOVF   23,W
1D3B:  MOVWF  0D
1D3C:  MOVF   24,W
1D3D:  MOVWF  0C
1D3E:  BSF    03.5
1D3F:  BCF    0C.7
1D40:  BSF    0C.2
1D41:  MOVLW  55
1D42:  MOVWF  0D
1D43:  MOVLW  AA
1D44:  MOVWF  0D
1D45:  BSF    0C.1
1D46:  BTFSC  0C.1
1D47:  GOTO   546
1D48:  BCF    0C.2
1D49:  MOVF   77,W
1D4A:  BCF    03.5
1D4B:  BCF    03.6
1D4C:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarmMinutesSeconds(Timer *timerPtr) {   
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
*
1D66:  MOVLW  0E
1D67:  ADDWF  23,W
1D68:  MOVWF  04
1D69:  BCF    03.7
1D6A:  BTFSC  24.0
1D6B:  BSF    03.7
1D6C:  MOVF   00,W
1D6D:  MOVWF  25
1D6E:  MOVLW  0A
1D6F:  ADDWF  23,W
1D70:  MOVWF  04
1D71:  BCF    03.7
1D72:  BTFSC  24.0
1D73:  BSF    03.7
1D74:  MOVF   00,W
1D75:  MOVWF  26
1D76:  BCF    03.6
1D77:  MOVF   0B,W
1D78:  MOVWF  77
1D79:  BCF    0B.7
1D7A:  BSF    03.6
1D7B:  MOVF   25,W
1D7C:  MOVWF  0D
1D7D:  MOVF   26,W
1D7E:  MOVWF  0C
1D7F:  BSF    03.5
1D80:  BCF    0C.7
1D81:  BSF    0C.2
1D82:  MOVLW  55
1D83:  MOVWF  0D
1D84:  MOVLW  AA
1D85:  MOVWF  0D
1D86:  BSF    0C.1
1D87:  BTFSC  0C.1
1D88:  GOTO   587
1D89:  BCF    0C.2
1D8A:  MOVF   77,W
1D8B:  BCF    03.5
1D8C:  BCF    03.6
1D8D:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
1D8E:  MOVLW  0D
1D8F:  BSF    03.6
1D90:  ADDWF  23,W
1D91:  MOVWF  04
1D92:  BCF    03.7
1D93:  BTFSC  24.0
1D94:  BSF    03.7
1D95:  MOVF   00,W
1D96:  MOVWF  25
1D97:  MOVLW  0B
1D98:  ADDWF  23,W
1D99:  MOVWF  04
1D9A:  BCF    03.7
1D9B:  BTFSC  24.0
1D9C:  BSF    03.7
1D9D:  MOVF   00,W
1D9E:  MOVWF  26
1D9F:  BCF    03.6
1DA0:  MOVF   0B,W
1DA1:  MOVWF  77
1DA2:  BCF    0B.7
1DA3:  BSF    03.6
1DA4:  MOVF   25,W
1DA5:  MOVWF  0D
1DA6:  MOVF   26,W
1DA7:  MOVWF  0C
1DA8:  BSF    03.5
1DA9:  BCF    0C.7
1DAA:  BSF    0C.2
1DAB:  MOVLW  55
1DAC:  MOVWF  0D
1DAD:  MOVLW  AA
1DAE:  MOVWF  0D
1DAF:  BSF    0C.1
1DB0:  BTFSC  0C.1
1DB1:  GOTO   5B0
1DB2:  BCF    0C.2
1DB3:  MOVF   77,W
1DB4:  BCF    03.5
1DB5:  BCF    03.6
1DB6:  IORWF  0B,F
1DB7:  BSF    03.6
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
13B0:  MOVF   23,W
13B1:  MOVWF  78
13B2:  MOVF   24,W
13B3:  MOVWF  7A
13B4:  MOVF   78,W
13B5:  MOVWF  25
13B6:  MOVF   7A,W
13B7:  MOVWF  26
13B8:  MOVF   26,W
13B9:  MOVWF  28
13BA:  MOVF   25,W
13BB:  MOVWF  27
*
13DB:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->alarmTime.hour == 0)&& (timerPtr->alarmTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
097F:  CLRF   27
0980:  CLRF   28
0981:  CLRF   29
0982:  CLRF   2A
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0983:  MOVF   24,W
0984:  MOVWF  78
0985:  MOVF   25,W
0986:  MOVWF  7A
0987:  MOVF   78,W
0988:  MOVWF  31
0989:  MOVF   7A,W
098A:  MOVWF  32
098B:  MOVWF  3B
098C:  MOVF   31,W
098D:  MOVWF  3A
098E:  CLRF   3C
098F:  BCF    0A.3
0990:  BCF    03.6
0991:  CALL   726
0992:  BSF    0A.3
0993:  MOVF   79,W
0994:  MOVWF  7A
0995:  MOVF   78,W
0996:  BSF    03.6
0997:  MOVWF  31
0998:  MOVF   7A,W
0999:  MOVWF  32
099A:  MOVLW  01
099B:  MOVWF  34
099C:  MOVLW  2B
099D:  MOVWF  33
099E:  MOVLW  06
099F:  MOVWF  78
09A0:  MOVF   31,W
09A1:  MOVWF  04
09A2:  BCF    03.7
09A3:  BTFSC  32.0
09A4:  BSF    03.7
09A5:  MOVF   00,W
09A6:  MOVWF  77
09A7:  MOVF   33,W
09A8:  MOVWF  04
09A9:  BCF    03.7
09AA:  BTFSC  34.0
09AB:  BSF    03.7
09AC:  MOVF   77,W
09AD:  MOVWF  00
09AE:  INCF   33,F
09AF:  BTFSC  03.2
09B0:  INCF   34,F
09B1:  INCF   31,F
09B2:  BTFSC  03.2
09B3:  INCF   32,F
09B4:  DECFSZ 78,F
09B5:  GOTO   1A0
....................     timeToSend[0] = timeInDigits.minute[0]; 
09B6:  MOVF   2D,W
09B7:  MOVWF  27
....................     timeToSend[1] = timeInDigits.minute[1]; 
09B8:  MOVF   2E,W
09B9:  MOVWF  28
....................     timeToSend[2] = timeInDigits.hour[0]; 
09BA:  MOVF   2B,W
09BB:  MOVWF  29
....................     timeToSend[3] = timeInDigits.hour[1]; 
09BC:  MOVF   2C,W
09BD:  MOVWF  2A
....................  
....................     if (blink) { 
09BE:  MOVF   26,F
09BF:  BTFSC  03.2
09C0:  GOTO   1CB
....................         blink = timerPtr->currentTime.second % 2; 
09C1:  MOVLW  07
09C2:  ADDWF  24,W
09C3:  MOVWF  04
09C4:  BCF    03.7
09C5:  BTFSC  25.0
09C6:  BSF    03.7
09C7:  MOVF   00,W
09C8:  ANDLW  01
09C9:  MOVWF  26
....................     } else { 
09CA:  GOTO   1CD
....................         blink = TRUE; 
09CB:  MOVLW  01
09CC:  MOVWF  26
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
09CD:  MOVLW  01
09CE:  MOVWF  35
09CF:  MOVLW  27
09D0:  MOVWF  34
09D1:  MOVLW  04
09D2:  MOVWF  36
09D3:  MOVF   26,W
09D4:  MOVWF  37
09D5:  BCF    03.6
09D6:  CALL   000
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
09F0:  CLRF   26
09F1:  CLRF   27
09F2:  CLRF   28
09F3:  CLRF   29
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................  
....................     time = timerPtr->countdownTime; 
09F4:  MOVF   24,W
09F5:  MOVWF  04
09F6:  BCF    03.7
09F7:  BTFSC  25.0
09F8:  BSF    03.7
09F9:  MOVF   00,W
09FA:  MOVWF  77
09FB:  INCF   04,F
09FC:  MOVF   00,W
09FD:  MOVWF  78
09FE:  INCF   04,F
09FF:  MOVF   00,W
0A00:  MOVWF  79
0A01:  INCF   04,F
0A02:  MOVF   00,W
0A03:  MOVWF  7A
0A04:  MOVF   77,W
0A05:  MOVWF  30
0A06:  MOVF   78,W
0A07:  MOVWF  31
0A08:  MOVF   79,W
0A09:  MOVWF  32
0A0A:  MOVF   7A,W
0A0B:  MOVWF  33
....................     time.minute = (time.minute + time.hour * 60) % 100; 
0A0C:  MOVF   31,W
0A0D:  MOVWF  68
0A0E:  MOVLW  3C
0A0F:  MOVWF  69
0A10:  BCF    0A.3
0A11:  BCF    03.6
0A12:  CALL   564
0A13:  BSF    0A.3
0A14:  MOVF   78,W
0A15:  BSF    03.6
0A16:  ADDWF  32,W
0A17:  MOVWF  35
0A18:  BSF    03.5
0A19:  MOVWF  28
0A1A:  MOVLW  64
0A1B:  MOVWF  29
0A1C:  BCF    0A.3
0A1D:  BCF    03.5
0A1E:  BCF    03.6
0A1F:  CALL   03D
0A20:  BSF    0A.3
0A21:  MOVF   77,W
0A22:  BSF    03.6
0A23:  MOVWF  32
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE); 
0A24:  MOVLW  01
0A25:  MOVWF  3B
0A26:  MOVLW  30
0A27:  MOVWF  3A
0A28:  CLRF   3C
0A29:  BCF    0A.3
0A2A:  BCF    03.6
0A2B:  CALL   726
0A2C:  BSF    0A.3
0A2D:  MOVF   79,W
0A2E:  MOVWF  7A
0A2F:  MOVF   78,W
0A30:  BSF    03.6
0A31:  MOVWF  34
0A32:  MOVF   7A,W
0A33:  MOVWF  35
0A34:  MOVLW  01
0A35:  MOVWF  37
0A36:  MOVLW  2A
0A37:  MOVWF  36
0A38:  MOVLW  06
0A39:  MOVWF  78
0A3A:  MOVF   34,W
0A3B:  MOVWF  04
0A3C:  BCF    03.7
0A3D:  BTFSC  35.0
0A3E:  BSF    03.7
0A3F:  MOVF   00,W
0A40:  MOVWF  77
0A41:  MOVF   36,W
0A42:  MOVWF  04
0A43:  BCF    03.7
0A44:  BTFSC  37.0
0A45:  BSF    03.7
0A46:  MOVF   77,W
0A47:  MOVWF  00
0A48:  INCF   36,F
0A49:  BTFSC  03.2
0A4A:  INCF   37,F
0A4B:  INCF   34,F
0A4C:  BTFSC  03.2
0A4D:  INCF   35,F
0A4E:  DECFSZ 78,F
0A4F:  GOTO   23A
....................     //    timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
....................     timeToSend[0] = timeInDigits.second[0]; 
0A50:  MOVF   2E,W
0A51:  MOVWF  26
....................     timeToSend[1] = timeInDigits.second[1]; 
0A52:  MOVF   2F,W
0A53:  MOVWF  27
....................     timeToSend[2] = timeInDigits.minute[0]; 
0A54:  MOVF   2C,W
0A55:  MOVWF  28
....................     timeToSend[3] = timeInDigits.minute[1]; 
0A56:  MOVF   2D,W
0A57:  MOVWF  29
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
0A58:  MOVLW  01
0A59:  MOVWF  35
0A5A:  MOVLW  26
0A5B:  MOVWF  34
0A5C:  MOVLW  04
0A5D:  MOVWF  36
0A5E:  MOVLW  01
0A5F:  MOVWF  37
0A60:  BCF    03.6
0A61:  CALL   000
0A62:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1866:  CLRF   25
1867:  CLRF   26
1868:  CLRF   27
1869:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
186A:  MOVLW  08
186B:  ADDWF  23,W
186C:  MOVWF  78
186D:  MOVF   24,W
186E:  MOVWF  7A
186F:  BTFSC  03.0
1870:  INCF   7A,F
1871:  MOVF   78,W
1872:  MOVWF  2F
1873:  MOVF   7A,W
1874:  MOVWF  30
1875:  MOVWF  3B
1876:  MOVF   2F,W
1877:  MOVWF  3A
1878:  CLRF   3C
1879:  BCF    0A.4
187A:  BCF    0A.3
187B:  BCF    03.6
187C:  CALL   726
187D:  BSF    0A.4
187E:  BSF    0A.3
187F:  MOVF   79,W
1880:  MOVWF  7A
1881:  MOVF   78,W
1882:  BSF    03.6
1883:  MOVWF  2F
1884:  MOVF   7A,W
1885:  MOVWF  30
1886:  MOVLW  01
1887:  MOVWF  32
1888:  MOVLW  29
1889:  MOVWF  31
188A:  MOVLW  06
188B:  MOVWF  78
188C:  MOVF   2F,W
188D:  MOVWF  04
188E:  BCF    03.7
188F:  BTFSC  30.0
1890:  BSF    03.7
1891:  MOVF   00,W
1892:  MOVWF  77
1893:  MOVF   31,W
1894:  MOVWF  04
1895:  BCF    03.7
1896:  BTFSC  32.0
1897:  BSF    03.7
1898:  MOVF   77,W
1899:  MOVWF  00
189A:  INCF   31,F
189B:  BTFSC  03.2
189C:  INCF   32,F
189D:  INCF   2F,F
189E:  BTFSC  03.2
189F:  INCF   30,F
18A0:  DECFSZ 78,F
18A1:  GOTO   08C
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
18A2:  MOVF   2B,W
18A3:  BCF    0A.4
18A4:  BCF    0A.3
18A5:  BCF    03.6
18A6:  CALL   004
18A7:  BSF    0A.4
18A8:  BSF    0A.3
18A9:  MOVWF  78
18AA:  BSF    03.6
18AB:  MOVWF  25
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
18AC:  MOVF   2C,W
18AD:  BCF    0A.4
18AE:  BCF    0A.3
18AF:  BCF    03.6
18B0:  CALL   004
18B1:  BSF    0A.4
18B2:  BSF    0A.3
18B3:  IORLW  08
18B4:  BSF    03.6
18B5:  MOVWF  26
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
18B6:  MOVLW  01
18B7:  MOVWF  39
18B8:  MOVLW  25
18B9:  MOVWF  38
18BA:  MOVLW  04
18BB:  MOVWF  3A
18BC:  BCF    0A.4
18BD:  BCF    0A.3
18BE:  BCF    03.6
18BF:  CALL   793
18C0:  BSF    0A.4
18C1:  BSF    0A.3
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
18DB:  CLRF   25
18DC:  CLRF   26
18DD:  CLRF   27
18DE:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
18DF:  MOVLW  08
18E0:  ADDWF  23,W
18E1:  MOVWF  78
18E2:  MOVF   24,W
18E3:  MOVWF  7A
18E4:  BTFSC  03.0
18E5:  INCF   7A,F
18E6:  MOVF   78,W
18E7:  MOVWF  2F
18E8:  MOVF   7A,W
18E9:  MOVWF  30
18EA:  MOVWF  3B
18EB:  MOVF   2F,W
18EC:  MOVWF  3A
18ED:  CLRF   3C
18EE:  BCF    0A.4
18EF:  BCF    0A.3
18F0:  BCF    03.6
18F1:  CALL   726
18F2:  BSF    0A.4
18F3:  BSF    0A.3
18F4:  MOVF   79,W
18F5:  MOVWF  7A
18F6:  MOVF   78,W
18F7:  BSF    03.6
18F8:  MOVWF  2F
18F9:  MOVF   7A,W
18FA:  MOVWF  30
18FB:  MOVLW  01
18FC:  MOVWF  32
18FD:  MOVLW  29
18FE:  MOVWF  31
18FF:  MOVLW  06
1900:  MOVWF  78
1901:  MOVF   2F,W
1902:  MOVWF  04
1903:  BCF    03.7
1904:  BTFSC  30.0
1905:  BSF    03.7
1906:  MOVF   00,W
1907:  MOVWF  77
1908:  MOVF   31,W
1909:  MOVWF  04
190A:  BCF    03.7
190B:  BTFSC  32.0
190C:  BSF    03.7
190D:  MOVF   77,W
190E:  MOVWF  00
190F:  INCF   31,F
1910:  BTFSC  03.2
1911:  INCF   32,F
1912:  INCF   2F,F
1913:  BTFSC  03.2
1914:  INCF   30,F
1915:  DECFSZ 78,F
1916:  GOTO   101
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1917:  MOVF   2D,W
1918:  BCF    0A.4
1919:  BCF    0A.3
191A:  BCF    03.6
191B:  CALL   004
191C:  BSF    0A.4
191D:  BSF    0A.3
191E:  MOVWF  78
191F:  BSF    03.6
1920:  MOVWF  25
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1921:  MOVF   2E,W
1922:  BCF    0A.4
1923:  BCF    0A.3
1924:  BCF    03.6
1925:  CALL   004
1926:  BSF    0A.4
1927:  BSF    0A.3
1928:  IORLW  08
1929:  BSF    03.6
192A:  MOVWF  26
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
192B:  MOVLW  01
192C:  MOVWF  39
192D:  MOVLW  25
192E:  MOVWF  38
192F:  MOVLW  04
1930:  MOVWF  3A
1931:  BCF    0A.4
1932:  BCF    0A.3
1933:  BCF    03.6
1934:  CALL   793
1935:  BSF    0A.4
1936:  BSF    0A.3
1937:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0BBB:  CLRF   25
0BBC:  CLRF   26
0BBD:  CLRF   27
0BBE:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0BBF:  MOVLW  08
0BC0:  ADDWF  23,W
0BC1:  MOVWF  78
0BC2:  MOVF   24,W
0BC3:  MOVWF  7A
0BC4:  BTFSC  03.0
0BC5:  INCF   7A,F
0BC6:  MOVF   78,W
0BC7:  MOVWF  2F
0BC8:  MOVF   7A,W
0BC9:  MOVWF  30
0BCA:  MOVWF  3B
0BCB:  MOVF   2F,W
0BCC:  MOVWF  3A
0BCD:  CLRF   3C
0BCE:  BCF    0A.3
0BCF:  BCF    03.6
0BD0:  CALL   726
0BD1:  BSF    0A.3
0BD2:  MOVF   79,W
0BD3:  MOVWF  7A
0BD4:  MOVF   78,W
0BD5:  BSF    03.6
0BD6:  MOVWF  2F
0BD7:  MOVF   7A,W
0BD8:  MOVWF  30
0BD9:  MOVLW  01
0BDA:  MOVWF  32
0BDB:  MOVLW  29
0BDC:  MOVWF  31
0BDD:  MOVLW  06
0BDE:  MOVWF  78
0BDF:  MOVF   2F,W
0BE0:  MOVWF  04
0BE1:  BCF    03.7
0BE2:  BTFSC  30.0
0BE3:  BSF    03.7
0BE4:  MOVF   00,W
0BE5:  MOVWF  77
0BE6:  MOVF   31,W
0BE7:  MOVWF  04
0BE8:  BCF    03.7
0BE9:  BTFSC  32.0
0BEA:  BSF    03.7
0BEB:  MOVF   77,W
0BEC:  MOVWF  00
0BED:  INCF   31,F
0BEE:  BTFSC  03.2
0BEF:  INCF   32,F
0BF0:  INCF   2F,F
0BF1:  BTFSC  03.2
0BF2:  INCF   30,F
0BF3:  DECFSZ 78,F
0BF4:  GOTO   3DF
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0BF5:  MOVF   2B,W
0BF6:  MOVWF  25
....................     numbersToSend[1] = displayableTime.minute[1]; 
0BF7:  MOVF   2C,W
0BF8:  MOVWF  26
....................     numbersToSend[2] = displayableTime.hour[0]; 
0BF9:  MOVF   29,W
0BFA:  MOVWF  27
....................     numbersToSend[3] = displayableTime.hour[1]; 
0BFB:  MOVF   2A,W
0BFC:  MOVWF  28
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0BFD:  MOVLW  01
0BFE:  MOVWF  35
0BFF:  MOVLW  25
0C00:  MOVWF  34
0C01:  MOVLW  04
0C02:  MOVWF  36
0C03:  MOVLW  01
0C04:  MOVWF  37
0C05:  BCF    03.6
0C06:  CALL   000
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C1C:  CLRF   25
0C1D:  CLRF   26
0C1E:  CLRF   27
0C1F:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0C20:  MOVLW  08
0C21:  ADDWF  23,W
0C22:  MOVWF  78
0C23:  MOVF   24,W
0C24:  MOVWF  7A
0C25:  BTFSC  03.0
0C26:  INCF   7A,F
0C27:  MOVF   78,W
0C28:  MOVWF  2F
0C29:  MOVF   7A,W
0C2A:  MOVWF  30
0C2B:  MOVWF  3B
0C2C:  MOVF   2F,W
0C2D:  MOVWF  3A
0C2E:  CLRF   3C
0C2F:  BCF    0A.3
0C30:  BCF    03.6
0C31:  CALL   726
0C32:  BSF    0A.3
0C33:  MOVF   79,W
0C34:  MOVWF  7A
0C35:  MOVF   78,W
0C36:  BSF    03.6
0C37:  MOVWF  2F
0C38:  MOVF   7A,W
0C39:  MOVWF  30
0C3A:  MOVLW  01
0C3B:  MOVWF  32
0C3C:  MOVLW  29
0C3D:  MOVWF  31
0C3E:  MOVLW  06
0C3F:  MOVWF  78
0C40:  MOVF   2F,W
0C41:  MOVWF  04
0C42:  BCF    03.7
0C43:  BTFSC  30.0
0C44:  BSF    03.7
0C45:  MOVF   00,W
0C46:  MOVWF  77
0C47:  MOVF   31,W
0C48:  MOVWF  04
0C49:  BCF    03.7
0C4A:  BTFSC  32.0
0C4B:  BSF    03.7
0C4C:  MOVF   77,W
0C4D:  MOVWF  00
0C4E:  INCF   31,F
0C4F:  BTFSC  03.2
0C50:  INCF   32,F
0C51:  INCF   2F,F
0C52:  BTFSC  03.2
0C53:  INCF   30,F
0C54:  DECFSZ 78,F
0C55:  GOTO   440
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0C56:  MOVF   2D,W
0C57:  MOVWF  25
....................     numbersToSend[1] = displayableTime.second[1]; 
0C58:  MOVF   2E,W
0C59:  MOVWF  26
....................     numbersToSend[2] = displayableTime.minute[0]; 
0C5A:  MOVF   2B,W
0C5B:  MOVWF  27
....................     numbersToSend[3] = displayableTime.minute[1]; 
0C5C:  MOVF   2C,W
0C5D:  MOVWF  28
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0C5E:  MOVLW  01
0C5F:  MOVWF  35
0C60:  MOVLW  25
0C61:  MOVWF  34
0C62:  MOVLW  04
0C63:  MOVWF  36
0C64:  MOVLW  01
0C65:  MOVWF  37
0C66:  BCF    03.6
0C67:  CALL   000
0C68:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A07:  CLRF   25
1A08:  CLRF   26
1A09:  CLRF   27
1A0A:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A0B:  MOVLW  08
1A0C:  ADDWF  23,W
1A0D:  MOVWF  78
1A0E:  MOVF   24,W
1A0F:  MOVWF  7A
1A10:  BTFSC  03.0
1A11:  INCF   7A,F
1A12:  MOVF   78,W
1A13:  MOVWF  2F
1A14:  MOVF   7A,W
1A15:  MOVWF  30
1A16:  MOVWF  3B
1A17:  MOVF   2F,W
1A18:  MOVWF  3A
1A19:  CLRF   3C
1A1A:  BCF    0A.4
1A1B:  BCF    0A.3
1A1C:  BCF    03.6
1A1D:  CALL   726
1A1E:  BSF    0A.4
1A1F:  BSF    0A.3
1A20:  MOVF   79,W
1A21:  MOVWF  7A
1A22:  MOVF   78,W
1A23:  BSF    03.6
1A24:  MOVWF  2F
1A25:  MOVF   7A,W
1A26:  MOVWF  30
1A27:  MOVLW  01
1A28:  MOVWF  32
1A29:  MOVLW  29
1A2A:  MOVWF  31
1A2B:  MOVLW  06
1A2C:  MOVWF  78
1A2D:  MOVF   2F,W
1A2E:  MOVWF  04
1A2F:  BCF    03.7
1A30:  BTFSC  30.0
1A31:  BSF    03.7
1A32:  MOVF   00,W
1A33:  MOVWF  77
1A34:  MOVF   31,W
1A35:  MOVWF  04
1A36:  BCF    03.7
1A37:  BTFSC  32.0
1A38:  BSF    03.7
1A39:  MOVF   77,W
1A3A:  MOVWF  00
1A3B:  INCF   31,F
1A3C:  BTFSC  03.2
1A3D:  INCF   32,F
1A3E:  INCF   2F,F
1A3F:  BTFSC  03.2
1A40:  INCF   30,F
1A41:  DECFSZ 78,F
1A42:  GOTO   22D
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1A43:  MOVLW  08
1A44:  MOVWF  26
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
1A45:  MOVF   29,W
1A46:  BCF    0A.4
1A47:  BCF    0A.3
1A48:  BCF    03.6
1A49:  CALL   004
1A4A:  BSF    0A.4
1A4B:  BSF    0A.3
1A4C:  MOVWF  78
1A4D:  BSF    03.6
1A4E:  MOVWF  27
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
1A4F:  MOVF   2A,W
1A50:  BCF    0A.4
1A51:  BCF    0A.3
1A52:  BCF    03.6
1A53:  CALL   004
1A54:  BSF    0A.4
1A55:  BSF    0A.3
1A56:  MOVWF  78
1A57:  BSF    03.6
1A58:  MOVWF  28
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1A59:  MOVLW  01
1A5A:  MOVWF  39
1A5B:  MOVLW  25
1A5C:  MOVWF  38
1A5D:  MOVLW  04
1A5E:  MOVWF  3A
1A5F:  BCF    0A.4
1A60:  BCF    0A.3
1A61:  BCF    03.6
1A62:  CALL   793
1A63:  BSF    0A.4
1A64:  BSF    0A.3
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A7E:  CLRF   25
1A7F:  CLRF   26
1A80:  CLRF   27
1A81:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A82:  MOVLW  08
1A83:  ADDWF  23,W
1A84:  MOVWF  78
1A85:  MOVF   24,W
1A86:  MOVWF  7A
1A87:  BTFSC  03.0
1A88:  INCF   7A,F
1A89:  MOVF   78,W
1A8A:  MOVWF  2F
1A8B:  MOVF   7A,W
1A8C:  MOVWF  30
1A8D:  MOVWF  3B
1A8E:  MOVF   2F,W
1A8F:  MOVWF  3A
1A90:  CLRF   3C
1A91:  BCF    0A.4
1A92:  BCF    0A.3
1A93:  BCF    03.6
1A94:  CALL   726
1A95:  BSF    0A.4
1A96:  BSF    0A.3
1A97:  MOVF   79,W
1A98:  MOVWF  7A
1A99:  MOVF   78,W
1A9A:  BSF    03.6
1A9B:  MOVWF  2F
1A9C:  MOVF   7A,W
1A9D:  MOVWF  30
1A9E:  MOVLW  01
1A9F:  MOVWF  32
1AA0:  MOVLW  29
1AA1:  MOVWF  31
1AA2:  MOVLW  06
1AA3:  MOVWF  78
1AA4:  MOVF   2F,W
1AA5:  MOVWF  04
1AA6:  BCF    03.7
1AA7:  BTFSC  30.0
1AA8:  BSF    03.7
1AA9:  MOVF   00,W
1AAA:  MOVWF  77
1AAB:  MOVF   31,W
1AAC:  MOVWF  04
1AAD:  BCF    03.7
1AAE:  BTFSC  32.0
1AAF:  BSF    03.7
1AB0:  MOVF   77,W
1AB1:  MOVWF  00
1AB2:  INCF   31,F
1AB3:  BTFSC  03.2
1AB4:  INCF   32,F
1AB5:  INCF   2F,F
1AB6:  BTFSC  03.2
1AB7:  INCF   30,F
1AB8:  DECFSZ 78,F
1AB9:  GOTO   2A4
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1ABA:  MOVLW  08
1ABB:  MOVWF  26
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
1ABC:  MOVF   2B,W
1ABD:  BCF    0A.4
1ABE:  BCF    0A.3
1ABF:  BCF    03.6
1AC0:  CALL   004
1AC1:  BSF    0A.4
1AC2:  BSF    0A.3
1AC3:  MOVWF  78
1AC4:  BSF    03.6
1AC5:  MOVWF  27
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
1AC6:  MOVF   2C,W
1AC7:  BCF    0A.4
1AC8:  BCF    0A.3
1AC9:  BCF    03.6
1ACA:  CALL   004
1ACB:  BSF    0A.4
1ACC:  BSF    0A.3
1ACD:  MOVWF  78
1ACE:  BSF    03.6
1ACF:  MOVWF  28
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1AD0:  MOVLW  01
1AD1:  MOVWF  39
1AD2:  MOVLW  25
1AD3:  MOVWF  38
1AD4:  MOVLW  04
1AD5:  MOVWF  3A
1AD6:  BCF    0A.4
1AD7:  BCF    0A.3
1AD8:  BCF    03.6
1AD9:  CALL   793
1ADA:  BSF    0A.4
1ADB:  BSF    0A.3
1ADC:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_HOURS_MINUTES = 0, 
....................     FORMAT_MINUTES_SECONDS 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTUP = 0, 
....................     COUNTDOWN, 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_SETTING_BRIGHTNESS, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     int brightness; 
....................     int numberOfDays; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
....................     char addressBrightness; 
....................     char addressTypeOfCount; 
....................     char addressNumberOfDays; 
.................... } PolyoneDisplay; 
....................  
.................... const int brightnessLevels[10] = {10, 34, 58, 82, 106, 130, 154, 178, 202, 255}; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Time time; 
....................     time = polyoneDisplayPtr->timer.currentTime; 
*
043F:  MOVLW  04
0440:  BSF    03.6
0441:  ADDWF  52,W
0442:  MOVWF  04
0443:  BCF    03.7
0444:  BTFSC  53.0
0445:  BSF    03.7
0446:  MOVF   00,W
0447:  MOVWF  77
0448:  INCF   04,F
0449:  MOVF   00,W
044A:  MOVWF  78
044B:  INCF   04,F
044C:  MOVF   00,W
044D:  MOVWF  79
044E:  INCF   04,F
044F:  MOVF   00,W
0450:  MOVWF  7A
0451:  MOVF   77,W
0452:  MOVWF  54
0453:  MOVF   78,W
0454:  MOVWF  55
0455:  MOVF   79,W
0456:  MOVWF  56
0457:  MOVF   7A,W
0458:  MOVWF  57
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0459:  MOVLW  16
045A:  ADDWF  52,W
045B:  MOVWF  04
045C:  BCF    03.7
045D:  BTFSC  53.0
045E:  BSF    03.7
045F:  MOVF   00,W
0460:  ANDLW  01
0461:  BTFSS  03.2
0462:  GOTO   488
....................         time.hour %= 24; 
0463:  MOVF   55,W
0464:  BSF    03.5
0465:  MOVWF  28
0466:  MOVLW  18
0467:  MOVWF  29
0468:  BCF    03.5
0469:  BCF    03.6
046A:  CALL   03D
046B:  MOVF   77,W
046C:  BSF    03.6
046D:  MOVWF  55
....................         Time_setClockTime(&time); 
046E:  MOVLW  01
046F:  MOVWF  59
0470:  MOVLW  54
0471:  MOVWF  58
0472:  BCF    03.6
0473:  CALL   3C9
....................         setDate(1, (time.hour / 4) + 1, 1, 1); 
0474:  BSF    03.6
0475:  RRF    55,W
0476:  MOVWF  77
0477:  RRF    77,F
0478:  MOVLW  3F
0479:  ANDWF  77,F
047A:  MOVF   77,W
047B:  ADDLW  01
047C:  MOVWF  58
047D:  MOVLW  01
047E:  MOVWF  59
047F:  MOVF   58,W
0480:  MOVWF  5A
0481:  MOVLW  01
0482:  MOVWF  5B
0483:  MOVWF  5C
0484:  BCF    03.6
0485:  CALL   406
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
0486:  GOTO   4AF
0487:  BSF    03.6
0488:  MOVLW  16
0489:  ADDWF  52,W
048A:  MOVWF  04
048B:  BCF    03.7
048C:  BTFSC  53.0
048D:  BSF    03.7
048E:  MOVF   00,W
048F:  ANDLW  01
0490:  SUBLW  01
0491:  BTFSS  03.2
0492:  GOTO   4B0
....................         time.hour = time.minute / 60; 
0493:  MOVF   56,W
0494:  BSF    03.5
0495:  MOVWF  28
0496:  MOVLW  3C
0497:  MOVWF  29
0498:  BCF    03.5
0499:  BCF    03.6
049A:  CALL   03D
049B:  MOVF   78,W
049C:  BSF    03.6
049D:  MOVWF  55
....................         time.minute %= 60; 
049E:  MOVF   56,W
049F:  BSF    03.5
04A0:  MOVWF  28
04A1:  MOVLW  3C
04A2:  MOVWF  29
04A3:  BCF    03.5
04A4:  BCF    03.6
04A5:  CALL   03D
04A6:  MOVF   77,W
04A7:  BSF    03.6
04A8:  MOVWF  56
....................         Time_setClockTime(&time); 
04A9:  MOVLW  01
04AA:  MOVWF  59
04AB:  MOVLW  54
04AC:  MOVWF  58
04AD:  BCF    03.6
04AE:  CALL   3C9
04AF:  BSF    03.6
.................... //        Timer_setRtc(&polyoneDisplayPtr->timer); 
....................     } 
04B0:  BCF    03.6
04B1:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->timer.currentTime = Time_getCurrentTime(); 
*
05F6:  MOVLW  04
05F7:  BSF    03.6
05F8:  ADDWF  52,W
05F9:  MOVWF  78
05FA:  MOVF   53,W
05FB:  MOVWF  7A
05FC:  BTFSC  03.0
05FD:  INCF   7A,F
05FE:  MOVF   78,W
05FF:  MOVWF  58
0600:  MOVF   7A,W
0601:  MOVWF  59
0602:  BCF    03.6
0603:  CALL   5A2
0604:  BSF    03.6
0605:  MOVF   58,W
0606:  MOVWF  04
0607:  BCF    03.7
0608:  BTFSC  59.0
0609:  BSF    03.7
060A:  MOVF   77,W
060B:  MOVWF  00
060C:  INCF   04,F
060D:  MOVF   78,W
060E:  MOVWF  00
060F:  INCF   04,F
0610:  MOVF   79,W
0611:  MOVWF  00
0612:  INCF   04,F
0613:  MOVF   7A,W
0614:  MOVWF  00
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0615:  MOVLW  16
0616:  ADDWF  52,W
0617:  MOVWF  04
0618:  BCF    03.7
0619:  BTFSC  53.0
061A:  BSF    03.7
061B:  MOVF   00,W
061C:  ANDLW  01
061D:  BTFSS  03.2
061E:  GOTO   676
....................         int dayOfMonth; 
....................         int month; 
....................         int year; 
....................         int dayOfWeek; 
....................         DS3231_get_Date(dayOfMonth, month, year, dayOfWeek); 
....................         polyoneDisplayPtr->timer.currentTime.hour += ((dayOfMonth - 1) % 5) * 24; 
*
065A:  MOVLW  05
065B:  ADDWF  52,W
065C:  MOVWF  04
065D:  BCF    03.7
065E:  BTFSC  53.0
065F:  BSF    03.7
0660:  MOVLW  01
0661:  SUBWF  54,W
0662:  MOVWF  5C
0663:  BSF    03.5
0664:  MOVWF  28
0665:  MOVLW  05
0666:  MOVWF  29
0667:  BCF    03.5
0668:  BCF    03.6
0669:  CALL   03D
066A:  MOVF   77,W
066B:  BSF    03.6
066C:  MOVWF  68
066D:  MOVLW  18
066E:  MOVWF  69
066F:  BCF    03.6
0670:  CALL   564
0671:  MOVF   78,W
0672:  ADDWF  00,W
0673:  MOVWF  00
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
0674:  GOTO   6AD
0675:  BSF    03.6
0676:  MOVLW  16
0677:  ADDWF  52,W
0678:  MOVWF  04
0679:  BCF    03.7
067A:  BTFSC  53.0
067B:  BSF    03.7
067C:  MOVF   00,W
067D:  ANDLW  01
067E:  SUBLW  01
067F:  BTFSS  03.2
0680:  GOTO   6AC
....................         polyoneDisplayPtr->timer.currentTime.minute += (polyoneDisplayPtr->timer.currentTime.hour % 2) * 60; 
0681:  MOVLW  06
0682:  ADDWF  52,W
0683:  MOVWF  78
0684:  MOVF   53,W
0685:  MOVWF  7A
0686:  BTFSC  03.0
0687:  INCF   7A,F
0688:  MOVF   78,W
0689:  MOVWF  58
068A:  MOVF   7A,W
068B:  MOVWF  59
068C:  MOVF   58,W
068D:  MOVWF  04
068E:  BCF    03.7
068F:  BTFSC  59.0
0690:  BSF    03.7
0691:  MOVF   00,W
0692:  MOVWF  5A
0693:  MOVLW  05
0694:  ADDWF  52,W
0695:  MOVWF  04
0696:  BCF    03.7
0697:  BTFSC  53.0
0698:  BSF    03.7
0699:  MOVF   00,W
069A:  ANDLW  01
069B:  MOVWF  5C
069C:  MOVWF  68
069D:  MOVLW  3C
069E:  MOVWF  69
069F:  BCF    03.6
06A0:  CALL   564
06A1:  MOVF   78,W
06A2:  BSF    03.6
06A3:  ADDWF  5A,W
06A4:  MOVWF  5A
06A5:  MOVF   58,W
06A6:  MOVWF  04
06A7:  BCF    03.7
06A8:  BTFSC  59.0
06A9:  BSF    03.7
06AA:  MOVF   5A,W
06AB:  MOVWF  00
06AC:  BCF    03.6
....................     } 
....................  
....................     Timer_updateCountdownTime(&polyoneDisplayPtr->timer); 
06AD:  BSF    03.6
06AE:  MOVF   52,W
06AF:  MOVWF  78
06B0:  MOVF   53,W
06B1:  MOVWF  7A
06B2:  MOVF   52,W
06B3:  MOVWF  58
06B4:  MOVF   53,W
06B5:  MOVWF  59
06B6:  MOVWF  5B
06B7:  MOVF   52,W
06B8:  MOVWF  5A
06B9:  BCF    03.6
06BA:  CALL   1A0
06BB:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(char addressCurrentState, 
....................         char addressPreviousState, char addressFormat, 
....................         char addressFirstNumberAlarm, 
....................         char addressSecondNumberAlarm, char addressRtcHours, 
....................         char addressRtcMinutes, char addressRtcSeconds, 
....................         char addressBrightness, char addressTypeOfCount, __EEADDRESS__ addressNumberOfDays) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
101C:  MOVF   25,W
101D:  MOVWF  4C
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
101E:  MOVF   26,W
101F:  MOVWF  4D
....................     polyoneDisplay.addressFormat = addressFormat; 
1020:  MOVF   27,W
1021:  MOVWF  4E
....................     polyoneDisplay.addressBrightness = addressBrightness; 
1022:  MOVF   2D,W
1023:  MOVWF  4F
....................     polyoneDisplay.addressTypeOfCount = addressTypeOfCount; 
1024:  MOVF   2E,W
1025:  MOVWF  50
....................     polyoneDisplay.addressNumberOfDays = addressNumberOfDays; 
1026:  MOVF   2F,W
1027:  MOVWF  51
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
1028:  MOVF   27,W
1029:  MOVWF  0D
102A:  BSF    03.5
102B:  BCF    0C.7
102C:  BSF    0C.0
102D:  BCF    03.5
102E:  MOVF   0C,W
102F:  ANDLW  01
1030:  MOVWF  78
1031:  BCF    47.0
1032:  BTFSC  78.0
1033:  BSF    47.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
1034:  MOVF   25,W
1035:  MOVWF  0D
1036:  BSF    03.5
1037:  BCF    0C.7
1038:  BSF    0C.0
1039:  BCF    03.5
103A:  MOVF   0C,W
103B:  MOVWF  53
103C:  MOVF   53,W
103D:  BSF    03.5
103E:  MOVWF  28
103F:  MOVLW  03
1040:  MOVWF  29
1041:  BCF    0A.4
1042:  BCF    03.5
1043:  BCF    03.6
1044:  CALL   03D
1045:  BSF    0A.4
1046:  MOVF   77,W
1047:  BSF    03.6
1048:  MOVWF  48
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
1049:  MOVF   26,W
104A:  MOVWF  0D
104B:  BSF    03.5
104C:  BCF    0C.7
104D:  BSF    0C.0
104E:  BCF    03.5
104F:  MOVF   0C,W
1050:  MOVWF  53
1051:  MOVF   53,W
1052:  BSF    03.5
1053:  MOVWF  28
1054:  MOVLW  03
1055:  MOVWF  29
1056:  BCF    0A.4
1057:  BCF    03.5
1058:  BCF    03.6
1059:  CALL   03D
105A:  BSF    0A.4
105B:  MOVF   77,W
105C:  BSF    03.6
105D:  MOVWF  49
....................     polyoneDisplay.brightness = read_eeprom(addressBrightness) % 10; 
105E:  MOVF   2D,W
105F:  MOVWF  0D
1060:  BSF    03.5
1061:  BCF    0C.7
1062:  BSF    0C.0
1063:  BCF    03.5
1064:  MOVF   0C,W
1065:  MOVWF  53
1066:  MOVF   53,W
1067:  BSF    03.5
1068:  MOVWF  28
1069:  MOVLW  0A
106A:  MOVWF  29
106B:  BCF    0A.4
106C:  BCF    03.5
106D:  BCF    03.6
106E:  CALL   03D
106F:  BSF    0A.4
1070:  MOVF   77,W
1071:  BSF    03.6
1072:  MOVWF  4A
....................     polyoneDisplay.typeOfCount = read_eeprom(addressTypeOfCount) % 2; 
1073:  MOVF   2E,W
1074:  MOVWF  0D
1075:  BSF    03.5
1076:  BCF    0C.7
1077:  BSF    0C.0
1078:  BCF    03.5
1079:  MOVF   0C,W
107A:  ANDLW  01
107B:  MOVWF  78
107C:  BCF    47.1
107D:  BTFSC  78.0
107E:  BSF    47.1
....................     polyoneDisplay.numberOfDays = read_eeprom(addressNumberOfDays) % 5; 
107F:  MOVF   2F,W
1080:  MOVWF  0D
1081:  BSF    03.5
1082:  BCF    0C.7
1083:  BSF    0C.0
1084:  BCF    03.5
1085:  MOVF   0C,W
1086:  MOVWF  53
1087:  MOVF   53,W
1088:  BSF    03.5
1089:  MOVWF  28
108A:  MOVLW  05
108B:  MOVWF  29
108C:  BCF    0A.4
108D:  BCF    03.5
108E:  BCF    03.6
108F:  CALL   03D
1090:  BSF    0A.4
1091:  MOVF   77,W
1092:  BSF    03.6
1093:  MOVWF  4B
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
1094:  MOVF   49,F
1095:  BTFSS  03.2
1096:  GOTO   09C
1097:  MOVF   48,F
1098:  BTFSS  03.2
1099:  GOTO   09C
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
109A:  MOVLW  02
109B:  MOVWF  49
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
109C:  MOVLW  00
109D:  BTFSC  47.0
109E:  MOVLW  01
109F:  XORLW  00
10A0:  BCF    03.6
10A1:  BTFSC  03.2
10A2:  GOTO   0A7
10A3:  XORLW  01
10A4:  BTFSC  03.2
10A5:  GOTO   13A
10A6:  GOTO   1C9
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
10A7:  MOVLW  63
10A8:  BSF    03.6
10A9:  MOVWF  5C
10AA:  MOVLW  3B
10AB:  MOVWF  5D
10AC:  CLRF   5F
10AD:  MOVF   28,W
10AE:  MOVWF  5E
10AF:  CLRF   61
10B0:  MOVF   29,W
10B1:  MOVWF  60
10B2:  CLRF   63
10B3:  MOVF   2A,W
10B4:  MOVWF  62
10B5:  CLRF   65
10B6:  MOVF   2B,W
10B7:  MOVWF  64
10B8:  CLRF   67
10B9:  MOVF   2C,W
10BA:  MOVWF  66
*
1115:  MOVF   79,W
1116:  MOVWF  7A
1117:  MOVF   78,W
1118:  BCF    03.5
1119:  MOVWF  56
111A:  MOVF   7A,W
111B:  MOVWF  57
111C:  MOVLW  01
111D:  MOVWF  59
111E:  MOVLW  31
111F:  MOVWF  58
1120:  MOVLW  16
1121:  MOVWF  78
1122:  MOVF   56,W
1123:  MOVWF  04
1124:  BCF    03.7
1125:  BTFSC  57.0
1126:  BSF    03.7
1127:  MOVF   00,W
1128:  MOVWF  77
1129:  MOVF   58,W
112A:  MOVWF  04
112B:  BCF    03.7
112C:  BTFSC  59.0
112D:  BSF    03.7
112E:  MOVF   77,W
112F:  MOVWF  00
1130:  INCF   58,F
1131:  BTFSC  03.2
1132:  INCF   59,F
1133:  INCF   56,F
1134:  BTFSC  03.2
1135:  INCF   57,F
1136:  DECFSZ 78,F
1137:  GOTO   122
....................             break; 
1138:  BCF    03.6
1139:  GOTO   1C9
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
113A:  MOVLW  63
113B:  BSF    03.6
113C:  MOVWF  5C
113D:  CLRF   5E
113E:  MOVF   28,W
113F:  MOVWF  5D
1140:  CLRF   60
1141:  MOVF   29,W
1142:  MOVWF  5F
1143:  CLRF   62
1144:  MOVF   2A,W
1145:  MOVWF  61
1146:  CLRF   64
1147:  MOVF   2B,W
1148:  MOVWF  63
1149:  CLRF   66
114A:  MOVF   2C,W
114B:  MOVWF  65
*
11A5:  MOVF   79,W
11A6:  MOVWF  7A
11A7:  MOVF   78,W
11A8:  BCF    03.5
11A9:  MOVWF  56
11AA:  MOVF   7A,W
11AB:  MOVWF  57
11AC:  MOVLW  01
11AD:  MOVWF  59
11AE:  MOVLW  31
11AF:  MOVWF  58
11B0:  MOVLW  16
11B1:  MOVWF  78
11B2:  MOVF   56,W
11B3:  MOVWF  04
11B4:  BCF    03.7
11B5:  BTFSC  57.0
11B6:  BSF    03.7
11B7:  MOVF   00,W
11B8:  MOVWF  77
11B9:  MOVF   58,W
11BA:  MOVWF  04
11BB:  BCF    03.7
11BC:  BTFSC  59.0
11BD:  BSF    03.7
11BE:  MOVF   77,W
11BF:  MOVWF  00
11C0:  INCF   58,F
11C1:  BTFSC  03.2
11C2:  INCF   59,F
11C3:  INCF   56,F
11C4:  BTFSC  03.2
11C5:  INCF   57,F
11C6:  DECFSZ 78,F
11C7:  GOTO   1B2
....................             break; 
11C8:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
11C9:  BSF    03.6
11CA:  MOVF   48,F
11CB:  BTFSS  03.2
11CC:  GOTO   29B
....................         Timer_updateTimerFromEeprom(&polyoneDisplay.timer); 
11CD:  MOVLW  01
11CE:  MOVWF  53
11CF:  MOVLW  31
11D0:  MOVWF  52
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
*
1287:  MOVLW  01
1288:  BSF    03.6
1289:  MOVWF  53
128A:  MOVLW  31
128B:  MOVWF  52
128C:  BCF    0A.4
128D:  BCF    03.6
128E:  CALL   43F
128F:  BSF    0A.4
....................         Timer_updateCountdownTime(&polyoneDisplay); 
1290:  MOVLW  01
1291:  BSF    03.6
1292:  MOVWF  5B
1293:  MOVLW  31
1294:  MOVWF  5A
1295:  BCF    0A.4
1296:  BCF    03.6
1297:  CALL   1A0
1298:  BSF    0A.4
....................     } else { 
1299:  GOTO   2A3
129A:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
129B:  MOVLW  01
129C:  MOVWF  53
129D:  MOVLW  31
129E:  MOVWF  52
129F:  BCF    0A.4
12A0:  BCF    03.6
12A1:  CALL   5F6
12A2:  BSF    0A.4
....................     } 
....................  
....................     return polyoneDisplay; 
12A3:  MOVLW  31
12A4:  MOVWF  78
12A5:  MOVLW  01
12A6:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
*
0873:  MOVLW  16
0874:  BSF    03.6
0875:  ADDWF  1F,W
0876:  MOVWF  04
0877:  BCF    03.7
0878:  BTFSC  20.0
0879:  BSF    03.7
087A:  MOVF   00,W
087B:  MOVWF  77
087C:  RRF    77,W
087D:  ANDLW  01
087E:  BTFSS  03.2
087F:  GOTO   15A
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0880:  MOVLW  16
0881:  ADDWF  1F,W
0882:  MOVWF  04
0883:  BCF    03.7
0884:  BTFSC  20.0
0885:  BSF    03.7
0886:  MOVF   00,W
0887:  ANDLW  01
0888:  BTFSS  03.2
0889:  GOTO   0E6
....................             Time_showHoursMinutesRtc(withBlink); 
088A:  MOVF   21,W
088B:  MOVWF  22
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
08E4:  GOTO   158
08E5:  BSF    03.6
08E6:  MOVLW  16
08E7:  ADDWF  1F,W
08E8:  MOVWF  04
08E9:  BCF    03.7
08EA:  BTFSC  20.0
08EB:  BSF    03.7
08EC:  MOVF   00,W
08ED:  ANDLW  01
08EE:  SUBLW  01
08EF:  BTFSS  03.2
08F0:  GOTO   159
....................             Time_showMinutesSecondsRtc(); 
....................         } 
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
*
0959:  GOTO   263
095A:  MOVLW  16
095B:  ADDWF  1F,W
095C:  MOVWF  04
095D:  BCF    03.7
095E:  BTFSC  20.0
095F:  BSF    03.7
0960:  MOVF   00,W
0961:  MOVWF  77
0962:  RRF    77,W
0963:  ANDLW  01
0964:  SUBLW  01
0965:  BTFSS  03.2
0966:  GOTO   263
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0967:  MOVLW  16
0968:  ADDWF  1F,W
0969:  MOVWF  04
096A:  BCF    03.7
096B:  BTFSC  20.0
096C:  BSF    03.7
096D:  MOVF   00,W
096E:  ANDLW  01
096F:  BTFSS  03.2
0970:  GOTO   1D9
....................             Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0971:  MOVF   1F,W
0972:  MOVWF  78
0973:  MOVF   20,W
0974:  MOVWF  7A
0975:  MOVF   78,W
0976:  MOVWF  22
0977:  MOVF   7A,W
0978:  MOVWF  23
0979:  MOVF   23,W
097A:  MOVWF  25
097B:  MOVF   22,W
097C:  MOVWF  24
097D:  MOVF   21,W
097E:  MOVWF  26
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
09D7:  GOTO   262
09D8:  BSF    03.6
09D9:  MOVLW  16
09DA:  ADDWF  1F,W
09DB:  MOVWF  04
09DC:  BCF    03.7
09DD:  BTFSC  20.0
09DE:  BSF    03.7
09DF:  MOVF   00,W
09E0:  ANDLW  01
09E1:  SUBLW  01
09E2:  BTFSS  03.2
09E3:  GOTO   263
....................             Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
09E4:  MOVF   1F,W
09E5:  MOVWF  78
09E6:  MOVF   20,W
09E7:  MOVWF  7A
09E8:  MOVF   78,W
09E9:  MOVWF  22
09EA:  MOVF   7A,W
09EB:  MOVWF  23
09EC:  MOVF   23,W
09ED:  MOVWF  25
09EE:  MOVF   22,W
09EF:  MOVWF  24
....................         } 
....................     } 
*
0A63:  BCF    03.6
0A64:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0BA8:  MOVLW  16
0BA9:  BSF    03.6
0BAA:  ADDWF  1F,W
0BAB:  MOVWF  04
0BAC:  BCF    03.7
0BAD:  BTFSC  20.0
0BAE:  BSF    03.7
0BAF:  MOVF   00,W
0BB0:  ANDLW  01
0BB1:  BTFSS  03.2
0BB2:  GOTO   409
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0BB3:  MOVF   1F,W
0BB4:  MOVWF  21
0BB5:  MOVF   20,W
0BB6:  MOVWF  22
0BB7:  MOVF   22,W
0BB8:  MOVWF  24
0BB9:  MOVF   21,W
0BBA:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0C07:  GOTO   468
0C08:  BSF    03.6
0C09:  MOVLW  16
0C0A:  ADDWF  1F,W
0C0B:  MOVWF  04
0C0C:  BCF    03.7
0C0D:  BTFSC  20.0
0C0E:  BSF    03.7
0C0F:  MOVF   00,W
0C10:  ANDLW  01
0C11:  SUBLW  01
0C12:  BTFSS  03.2
0C13:  GOTO   469
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0C14:  MOVF   1F,W
0C15:  MOVWF  21
0C16:  MOVF   20,W
0C17:  MOVWF  22
0C18:  MOVF   22,W
0C19:  MOVWF  24
0C1A:  MOVF   21,W
0C1B:  MOVWF  23
....................     } 
*
0C69:  BCF    03.6
0C6A:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_hideBrightness(void) { 
....................     int numbersToSend[4] = {0}; 
*
1E09:  BSF    03.6
1E0A:  CLRF   1F
1E0B:  CLRF   20
1E0C:  CLRF   21
1E0D:  CLRF   22
....................  
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1E0E:  MOVLW  37
1E0F:  MOVWF  21
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1E10:  MOVLW  01
1E11:  MOVWF  39
1E12:  MOVLW  1F
1E13:  MOVWF  38
1E14:  MOVLW  04
1E15:  MOVWF  3A
1E16:  BCF    0A.4
1E17:  BCF    0A.3
1E18:  BCF    03.6
1E19:  CALL   793
1E1A:  BSF    0A.4
1E1B:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_showBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C9D:  BSF    03.6
0C9E:  CLRF   21
0C9F:  CLRF   22
0CA0:  CLRF   23
0CA1:  CLRF   24
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) % 10]; 
0CA2:  MOVLW  19
0CA3:  ADDWF  1F,W
0CA4:  MOVWF  04
0CA5:  BCF    03.7
0CA6:  BTFSC  20.0
0CA7:  BSF    03.7
0CA8:  MOVLW  01
0CA9:  ADDWF  00,W
0CAA:  MOVWF  26
0CAB:  BSF    03.5
0CAC:  MOVWF  28
0CAD:  MOVLW  0A
0CAE:  MOVWF  29
0CAF:  BCF    0A.3
0CB0:  BCF    03.5
0CB1:  BCF    03.6
0CB2:  CALL   03D
0CB3:  BSF    0A.3
0CB4:  MOVF   77,W
0CB5:  BCF    0A.3
0CB6:  CALL   004
0CB7:  BSF    0A.3
0CB8:  MOVWF  78
0CB9:  BSF    03.6
0CBA:  MOVWF  21
....................     numbersToSend[1] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) / 10] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0CBB:  MOVLW  19
0CBC:  ADDWF  1F,W
0CBD:  MOVWF  04
0CBE:  BCF    03.7
0CBF:  BTFSC  20.0
0CC0:  BSF    03.7
0CC1:  MOVLW  01
0CC2:  ADDWF  00,W
0CC3:  MOVWF  26
0CC4:  BSF    03.5
0CC5:  MOVWF  28
0CC6:  MOVLW  0A
0CC7:  MOVWF  29
0CC8:  BCF    0A.3
0CC9:  BCF    03.5
0CCA:  BCF    03.6
0CCB:  CALL   03D
0CCC:  BSF    0A.3
0CCD:  MOVF   78,W
0CCE:  BCF    0A.3
0CCF:  CALL   004
0CD0:  BSF    0A.3
0CD1:  IORLW  08
0CD2:  BSF    03.6
0CD3:  MOVWF  22
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
0CD4:  MOVLW  37
0CD5:  MOVWF  23
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
0CD6:  MOVLW  01
0CD7:  MOVWF  39
0CD8:  MOVLW  21
0CD9:  MOVWF  38
0CDA:  MOVLW  04
0CDB:  MOVWF  3A
0CDC:  BCF    0A.3
0CDD:  BCF    03.6
0CDE:  CALL   793
0CDF:  BSF    0A.3
0CE0:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
19F1:  MOVLW  16
19F2:  ADDWF  1F,W
19F3:  MOVWF  04
19F4:  BCF    03.7
19F5:  BTFSC  20.0
19F6:  BSF    03.7
19F7:  MOVF   00,W
19F8:  ANDLW  01
19F9:  BTFSS  03.2
19FA:  GOTO   267
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
19FB:  MOVF   1F,W
19FC:  MOVWF  78
19FD:  MOVF   20,W
19FE:  MOVWF  7A
19FF:  MOVF   78,W
1A00:  MOVWF  21
1A01:  MOVF   7A,W
1A02:  MOVWF  22
1A03:  MOVF   22,W
1A04:  MOVWF  24
1A05:  MOVF   21,W
1A06:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1A65:  GOTO   2DC
1A66:  BSF    03.6
1A67:  MOVLW  16
1A68:  ADDWF  1F,W
1A69:  MOVWF  04
1A6A:  BCF    03.7
1A6B:  BTFSC  20.0
1A6C:  BSF    03.7
1A6D:  MOVF   00,W
1A6E:  ANDLW  01
1A6F:  SUBLW  01
1A70:  BTFSS  03.2
1A71:  GOTO   2DD
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1A72:  MOVF   1F,W
1A73:  MOVWF  78
1A74:  MOVF   20,W
1A75:  MOVWF  7A
1A76:  MOVF   78,W
1A77:  MOVWF  21
1A78:  MOVF   7A,W
1A79:  MOVWF  22
1A7A:  MOVF   22,W
1A7B:  MOVWF  24
1A7C:  MOVF   21,W
1A7D:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1850:  MOVLW  16
1851:  ADDWF  1F,W
1852:  MOVWF  04
1853:  BCF    03.7
1854:  BTFSC  20.0
1855:  BSF    03.7
1856:  MOVF   00,W
1857:  ANDLW  01
1858:  BTFSS  03.2
1859:  GOTO   0C4
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
185A:  MOVF   1F,W
185B:  MOVWF  78
185C:  MOVF   20,W
185D:  MOVWF  7A
185E:  MOVF   78,W
185F:  MOVWF  21
1860:  MOVF   7A,W
1861:  MOVWF  22
1862:  MOVF   22,W
1863:  MOVWF  24
1864:  MOVF   21,W
1865:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
18C2:  GOTO   137
18C3:  BSF    03.6
18C4:  MOVLW  16
18C5:  ADDWF  1F,W
18C6:  MOVWF  04
18C7:  BCF    03.7
18C8:  BTFSC  20.0
18C9:  BSF    03.7
18CA:  MOVF   00,W
18CB:  ANDLW  01
18CC:  SUBLW  01
18CD:  BTFSS  03.2
18CE:  GOTO   138
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
18CF:  MOVF   1F,W
18D0:  MOVWF  78
18D1:  MOVF   20,W
18D2:  MOVWF  7A
18D3:  MOVF   78,W
18D4:  MOVWF  21
18D5:  MOVF   7A,W
18D6:  MOVWF  22
18D7:  MOVF   22,W
18D8:  MOVWF  24
18D9:  MOVF   21,W
18DA:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1BCC:  CLRF   21
1BCD:  CLRF   22
1BCE:  CLRF   23
1BCF:  CLRF   24
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1BD0:  MOVLW  16
1BD1:  ADDWF  1F,W
1BD2:  MOVWF  04
1BD3:  BCF    03.7
1BD4:  BTFSC  20.0
1BD5:  BSF    03.7
1BD6:  MOVF   00,W
1BD7:  ANDLW  01
1BD8:  BTFSS  03.2
1BD9:  GOTO   3E2
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BDA:  MOVLW  25
1BDB:  MOVWF  21
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BDC:  MOVLW  2D
1BDD:  MOVWF  22
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BDE:  MOVLW  67
1BDF:  MOVWF  23
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BE0:  MOVWF  24
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1BE1:  GOTO   3F4
1BE2:  MOVLW  16
1BE3:  ADDWF  1F,W
1BE4:  MOVWF  04
1BE5:  BCF    03.7
1BE6:  BTFSC  20.0
1BE7:  BSF    03.7
1BE8:  MOVF   00,W
1BE9:  ANDLW  01
1BEA:  SUBLW  01
1BEB:  BTFSS  03.2
1BEC:  GOTO   3F4
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
1BED:  MOVLW  B3
1BEE:  MOVWF  21
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BEF:  MOVLW  BB
1BF0:  MOVWF  22
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BF1:  MOVLW  25
1BF2:  MOVWF  23
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BF3:  MOVWF  24
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1BF4:  MOVLW  01
1BF5:  MOVWF  39
1BF6:  MOVLW  21
1BF7:  MOVWF  38
1BF8:  MOVLW  04
1BF9:  MOVWF  3A
1BFA:  BCF    0A.4
1BFB:  BCF    0A.3
1BFC:  BCF    03.6
1BFD:  CALL   793
1BFE:  BSF    0A.4
1BFF:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_increaseBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->brightness = (polyoneDisplayPtr->brightness + 1) % 10; 
*
1E2A:  MOVLW  19
1E2B:  ADDWF  1F,W
1E2C:  MOVWF  78
1E2D:  MOVF   20,W
1E2E:  MOVWF  7A
1E2F:  BTFSC  03.0
1E30:  INCF   7A,F
1E31:  MOVF   78,W
1E32:  MOVWF  21
1E33:  MOVF   7A,W
1E34:  MOVWF  22
1E35:  MOVLW  19
1E36:  ADDWF  1F,W
1E37:  MOVWF  04
1E38:  BCF    03.7
1E39:  BTFSC  20.0
1E3A:  BSF    03.7
1E3B:  MOVLW  01
1E3C:  ADDWF  00,W
1E3D:  MOVWF  24
1E3E:  BSF    03.5
1E3F:  MOVWF  28
1E40:  MOVLW  0A
1E41:  MOVWF  29
1E42:  BCF    0A.4
1E43:  BCF    0A.3
1E44:  BCF    03.5
1E45:  BCF    03.6
1E46:  CALL   03D
1E47:  BSF    0A.4
1E48:  BSF    0A.3
1E49:  MOVF   77,W
1E4A:  BSF    03.6
1E4B:  MOVWF  23
1E4C:  MOVF   21,W
1E4D:  MOVWF  04
1E4E:  BCF    03.7
1E4F:  BTFSC  22.0
1E50:  BSF    03.7
1E51:  MOVF   23,W
1E52:  MOVWF  00
....................     set_pwm1_duty(brightnessLevels[polyoneDisplayPtr->brightness]); 
1E53:  MOVLW  19
1E54:  ADDWF  1F,W
1E55:  MOVWF  04
1E56:  BCF    03.7
1E57:  BTFSC  20.0
1E58:  BSF    03.7
1E59:  MOVF   00,W
1E5A:  BCF    0A.4
1E5B:  BCF    0A.3
1E5C:  BCF    03.6
1E5D:  CALL   023
1E5E:  BSF    0A.4
1E5F:  BSF    0A.3
1E60:  BSF    03.6
1E61:  MOVWF  21
1E62:  BCF    03.6
1E63:  MOVWF  15
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1947:  MOVLW  16
1948:  ADDWF  1F,W
1949:  MOVWF  04
194A:  BCF    03.7
194B:  BTFSC  20.0
194C:  BSF    03.7
194D:  MOVF   00,W
194E:  ANDLW  01
194F:  BTFSS  03.2
1950:  GOTO   18D
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
1951:  MOVF   1F,W
1952:  MOVWF  78
1953:  MOVF   20,W
1954:  MOVWF  7A
1955:  MOVF   78,W
1956:  MOVWF  21
1957:  MOVF   7A,W
1958:  MOVWF  22
1959:  MOVF   22,W
195A:  MOVWF  24
195B:  MOVF   21,W
195C:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
198C:  GOTO   1A8
198D:  MOVLW  16
198E:  ADDWF  1F,W
198F:  MOVWF  04
1990:  BCF    03.7
1991:  BTFSC  20.0
1992:  BSF    03.7
1993:  MOVF   00,W
1994:  ANDLW  01
1995:  SUBLW  01
1996:  BTFSS  03.2
1997:  GOTO   1A8
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1998:  MOVF   1F,W
1999:  MOVWF  78
199A:  MOVF   20,W
199B:  MOVWF  7A
199C:  MOVF   1F,W
199D:  MOVWF  21
199E:  MOVF   20,W
199F:  MOVWF  22
19A0:  MOVWF  24
19A1:  MOVF   1F,W
19A2:  MOVWF  23
19A3:  BCF    0A.4
19A4:  BCF    03.6
19A5:  CALL   46B
19A6:  BSF    0A.4
19A7:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1AEC:  MOVLW  16
1AED:  ADDWF  1F,W
1AEE:  MOVWF  04
1AEF:  BCF    03.7
1AF0:  BTFSC  20.0
1AF1:  BSF    03.7
1AF2:  MOVF   00,W
1AF3:  ANDLW  01
1AF4:  BTFSS  03.2
1AF5:  GOTO   307
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1AF6:  MOVF   1F,W
1AF7:  MOVWF  78
1AF8:  MOVF   20,W
1AF9:  MOVWF  7A
1AFA:  MOVF   78,W
1AFB:  MOVWF  21
1AFC:  MOVF   20,W
1AFD:  MOVWF  22
1AFE:  MOVWF  24
1AFF:  MOVF   21,W
1B00:  MOVWF  23
1B01:  BCF    0A.4
1B02:  BCF    03.6
1B03:  CALL   46B
1B04:  BSF    0A.4
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B05:  GOTO   34E
1B06:  BSF    03.6
1B07:  MOVLW  16
1B08:  ADDWF  1F,W
1B09:  MOVWF  04
1B0A:  BCF    03.7
1B0B:  BTFSC  20.0
1B0C:  BSF    03.7
1B0D:  MOVF   00,W
1B0E:  ANDLW  01
1B0F:  SUBLW  01
1B10:  BTFSS  03.2
1B11:  GOTO   34D
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
1B12:  MOVF   1F,W
1B13:  MOVWF  78
1B14:  MOVF   20,W
1B15:  MOVWF  7A
1B16:  MOVF   78,W
1B17:  MOVWF  21
1B18:  MOVF   7A,W
1B19:  MOVWF  22
1B1A:  MOVF   22,W
1B1B:  MOVWF  24
1B1C:  MOVF   21,W
1B1D:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
1C0B:  MOVLW  16
1C0C:  ADDWF  1F,W
1C0D:  MOVWF  78
1C0E:  MOVF   20,W
1C0F:  MOVWF  7A
1C10:  BTFSC  03.0
1C11:  INCF   7A,F
1C12:  MOVF   78,W
1C13:  MOVWF  21
1C14:  MOVF   7A,W
1C15:  MOVWF  22
1C16:  MOVLW  16
1C17:  ADDWF  1F,W
1C18:  MOVWF  04
1C19:  BCF    03.7
1C1A:  BTFSC  20.0
1C1B:  BSF    03.7
1C1C:  BTFSS  00.0
1C1D:  GOTO   425
1C1E:  MOVF   21,W
1C1F:  MOVWF  04
1C20:  BCF    03.7
1C21:  BTFSC  22.0
1C22:  BSF    03.7
1C23:  BCF    00.0
1C24:  GOTO   42B
1C25:  MOVF   21,W
1C26:  MOVWF  04
1C27:  BCF    03.7
1C28:  BTFSC  22.0
1C29:  BSF    03.7
1C2A:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1C2B:  MOVLW  16
1C2C:  ADDWF  1F,W
1C2D:  MOVWF  04
1C2E:  BCF    03.7
1C2F:  BTFSC  20.0
1C30:  BSF    03.7
1C31:  MOVF   00,W
1C32:  ANDLW  01
1C33:  BTFSS  03.2
1C34:  GOTO   481
....................         polyoneDisplayPtr->timer.alarmTime.hour = polyoneDisplayPtr->timer.alarmTime.minute; 
1C35:  MOVLW  09
1C36:  ADDWF  1F,W
1C37:  MOVWF  78
1C38:  MOVF   20,W
1C39:  MOVWF  7A
1C3A:  BTFSC  03.0
1C3B:  INCF   7A,F
1C3C:  MOVF   78,W
1C3D:  MOVWF  21
1C3E:  MOVF   7A,W
1C3F:  MOVWF  22
1C40:  MOVLW  0A
1C41:  ADDWF  1F,W
1C42:  MOVWF  04
1C43:  BCF    03.7
1C44:  BTFSC  20.0
1C45:  BSF    03.7
1C46:  MOVF   00,W
1C47:  MOVWF  23
1C48:  MOVF   21,W
1C49:  MOVWF  04
1C4A:  BCF    03.7
1C4B:  BTFSC  22.0
1C4C:  BSF    03.7
1C4D:  MOVF   23,W
1C4E:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.second; 
1C4F:  MOVLW  0A
1C50:  ADDWF  1F,W
1C51:  MOVWF  78
1C52:  MOVF   20,W
1C53:  MOVWF  7A
1C54:  BTFSC  03.0
1C55:  INCF   7A,F
1C56:  MOVF   78,W
1C57:  MOVWF  21
1C58:  MOVF   7A,W
1C59:  MOVWF  22
1C5A:  MOVLW  0B
1C5B:  ADDWF  1F,W
1C5C:  MOVWF  04
1C5D:  BCF    03.7
1C5E:  BTFSC  20.0
1C5F:  BSF    03.7
1C60:  MOVF   00,W
1C61:  MOVWF  23
1C62:  MOVF   21,W
1C63:  MOVWF  04
1C64:  BCF    03.7
1C65:  BTFSC  22.0
1C66:  BSF    03.7
1C67:  MOVF   23,W
1C68:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.second = 0; 
1C69:  MOVLW  0B
1C6A:  ADDWF  1F,W
1C6B:  MOVWF  04
1C6C:  BCF    03.7
1C6D:  BTFSC  20.0
1C6E:  BSF    03.7
1C6F:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1C70:  MOVLW  13
1C71:  ADDWF  1F,W
1C72:  MOVWF  04
1C73:  BCF    03.7
1C74:  BTFSC  20.0
1C75:  BSF    03.7
1C76:  MOVLW  63
1C77:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
1C78:  MOVLW  14
1C79:  ADDWF  1F,W
1C7A:  MOVWF  04
1C7B:  BCF    03.7
1C7C:  BTFSC  20.0
1C7D:  BSF    03.7
1C7E:  MOVLW  3B
1C7F:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1C80:  GOTO   4E2
1C81:  MOVLW  16
1C82:  ADDWF  1F,W
1C83:  MOVWF  04
1C84:  BCF    03.7
1C85:  BTFSC  20.0
1C86:  BSF    03.7
1C87:  MOVF   00,W
1C88:  ANDLW  01
1C89:  SUBLW  01
1C8A:  BTFSS  03.2
1C8B:  GOTO   4E2
....................         setDate(1, 1, 1, 1); 
1C8C:  MOVLW  01
1C8D:  MOVWF  59
1C8E:  MOVWF  5A
1C8F:  MOVWF  5B
1C90:  MOVWF  5C
1C91:  BCF    0A.4
1C92:  BCF    0A.3
1C93:  BCF    03.6
1C94:  CALL   406
1C95:  BSF    0A.4
1C96:  BSF    0A.3
....................         polyoneDisplayPtr->timer.alarmTime.second = polyoneDisplayPtr->timer.alarmTime.minute; 
1C97:  MOVLW  0B
1C98:  BSF    03.6
1C99:  ADDWF  1F,W
1C9A:  MOVWF  78
1C9B:  MOVF   20,W
1C9C:  MOVWF  7A
1C9D:  BTFSC  03.0
1C9E:  INCF   7A,F
1C9F:  MOVF   78,W
1CA0:  MOVWF  21
1CA1:  MOVF   7A,W
1CA2:  MOVWF  22
1CA3:  MOVLW  0A
1CA4:  ADDWF  1F,W
1CA5:  MOVWF  04
1CA6:  BCF    03.7
1CA7:  BTFSC  20.0
1CA8:  BSF    03.7
1CA9:  MOVF   00,W
1CAA:  MOVWF  23
1CAB:  MOVF   21,W
1CAC:  MOVWF  04
1CAD:  BCF    03.7
1CAE:  BTFSC  22.0
1CAF:  BSF    03.7
1CB0:  MOVF   23,W
1CB1:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.hour; 
1CB2:  MOVLW  0A
1CB3:  ADDWF  1F,W
1CB4:  MOVWF  78
1CB5:  MOVF   20,W
1CB6:  MOVWF  7A
1CB7:  BTFSC  03.0
1CB8:  INCF   7A,F
1CB9:  MOVF   78,W
1CBA:  MOVWF  21
1CBB:  MOVF   7A,W
1CBC:  MOVWF  22
1CBD:  MOVLW  09
1CBE:  ADDWF  1F,W
1CBF:  MOVWF  04
1CC0:  BCF    03.7
1CC1:  BTFSC  20.0
1CC2:  BSF    03.7
1CC3:  MOVF   00,W
1CC4:  MOVWF  23
1CC5:  MOVF   21,W
1CC6:  MOVWF  04
1CC7:  BCF    03.7
1CC8:  BTFSC  22.0
1CC9:  BSF    03.7
1CCA:  MOVF   23,W
1CCB:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.hour = 0; 
1CCC:  MOVLW  09
1CCD:  ADDWF  1F,W
1CCE:  MOVWF  04
1CCF:  BCF    03.7
1CD0:  BTFSC  20.0
1CD1:  BSF    03.7
1CD2:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
1CD3:  MOVLW  13
1CD4:  ADDWF  1F,W
1CD5:  MOVWF  04
1CD6:  BCF    03.7
1CD7:  BTFSC  20.0
1CD8:  BSF    03.7
1CD9:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1CDA:  MOVLW  14
1CDB:  ADDWF  1F,W
1CDC:  MOVWF  04
1CDD:  BCF    03.7
1CDE:  BTFSC  20.0
1CDF:  BSF    03.7
1CE0:  MOVLW  63
1CE1:  MOVWF  00
1CE2:  BCF    03.6
....................  
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1B69:  MOVLW  16
1B6A:  ADDWF  1F,W
1B6B:  MOVWF  04
1B6C:  BCF    03.7
1B6D:  BTFSC  20.0
1B6E:  BSF    03.7
1B6F:  MOVF   00,W
1B70:  ANDLW  01
1B71:  BTFSS  03.2
1B72:  GOTO   38B
....................         return (polyoneDisplayPtr->timer.alarmTime.hour != 0) || (polyoneDisplayPtr->timer.alarmTime.minute != 0); 
1B73:  MOVLW  09
1B74:  ADDWF  1F,W
1B75:  MOVWF  04
1B76:  BCF    03.7
1B77:  BTFSC  20.0
1B78:  BSF    03.7
1B79:  MOVF   00,F
1B7A:  BTFSS  03.2
1B7B:  GOTO   387
1B7C:  MOVLW  0A
1B7D:  ADDWF  1F,W
1B7E:  MOVWF  04
1B7F:  BCF    03.7
1B80:  BTFSC  20.0
1B81:  BSF    03.7
1B82:  MOVF   00,F
1B83:  BTFSS  03.2
1B84:  GOTO   387
1B85:  MOVLW  00
1B86:  GOTO   388
1B87:  MOVLW  01
1B88:  MOVWF  78
1B89:  GOTO   3AC
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B8A:  GOTO   3AC
1B8B:  MOVLW  16
1B8C:  ADDWF  1F,W
1B8D:  MOVWF  04
1B8E:  BCF    03.7
1B8F:  BTFSC  20.0
1B90:  BSF    03.7
1B91:  MOVF   00,W
1B92:  ANDLW  01
1B93:  SUBLW  01
1B94:  BTFSS  03.2
1B95:  GOTO   3AC
....................         return (polyoneDisplayPtr->timer.alarmTime.minute != 0) || (polyoneDisplayPtr->timer.alarmTime.second != 0); 
1B96:  MOVLW  0A
1B97:  ADDWF  1F,W
1B98:  MOVWF  04
1B99:  BCF    03.7
1B9A:  BTFSC  20.0
1B9B:  BSF    03.7
1B9C:  MOVF   00,F
1B9D:  BTFSS  03.2
1B9E:  GOTO   3AA
1B9F:  MOVLW  0B
1BA0:  ADDWF  1F,W
1BA1:  MOVWF  04
1BA2:  BCF    03.7
1BA3:  BTFSC  20.0
1BA4:  BSF    03.7
1BA5:  MOVF   00,F
1BA6:  BTFSS  03.2
1BA7:  GOTO   3AA
1BA8:  MOVLW  00
1BA9:  GOTO   3AB
1BAA:  MOVLW  01
1BAB:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0AD8:  BSF    03.6
0AD9:  MOVF   1F,W
0ADA:  MOVWF  78
0ADB:  MOVF   20,W
0ADC:  MOVWF  7A
0ADD:  MOVF   78,W
0ADE:  MOVWF  21
0ADF:  MOVF   7A,W
0AE0:  MOVWF  22
0AE1:  MOVF   22,W
0AE2:  MOVWF  24
0AE3:  MOVF   21,W
0AE4:  MOVWF  23
*
0B5F:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveTypeOfCount(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressTypeOfCount, polyoneDisplayPtr->typeOfCount); 
*
0B74:  MOVLW  1F
0B75:  BSF    03.6
0B76:  ADDWF  1F,W
0B77:  MOVWF  04
0B78:  BCF    03.7
0B79:  BTFSC  20.0
0B7A:  BSF    03.7
0B7B:  MOVF   00,W
0B7C:  MOVWF  21
0B7D:  MOVLW  16
0B7E:  ADDWF  1F,W
0B7F:  MOVWF  04
0B80:  BCF    03.7
0B81:  BTFSC  20.0
0B82:  BSF    03.7
0B83:  CLRF   22
0B84:  BTFSC  00.1
0B85:  INCF   22,F
0B86:  BCF    03.6
0B87:  MOVF   0B,W
0B88:  MOVWF  77
0B89:  BCF    0B.7
0B8A:  BSF    03.6
0B8B:  MOVF   21,W
0B8C:  MOVWF  0D
0B8D:  MOVF   22,W
0B8E:  MOVWF  0C
0B8F:  BSF    03.5
0B90:  BCF    0C.7
0B91:  BSF    0C.2
0B92:  MOVLW  55
0B93:  MOVWF  0D
0B94:  MOVLW  AA
0B95:  MOVWF  0D
0B96:  BSF    0C.1
0B97:  BTFSC  0C.1
0B98:  GOTO   397
0B99:  BCF    0C.2
0B9A:  MOVF   77,W
0B9B:  BCF    03.5
0B9C:  BCF    03.6
0B9D:  IORWF  0B,F
0B9E:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressBrightness, polyoneDisplayPtr->brightness); 
*
0CE1:  MOVLW  1E
0CE2:  BSF    03.6
0CE3:  ADDWF  1F,W
0CE4:  MOVWF  04
0CE5:  BCF    03.7
0CE6:  BTFSC  20.0
0CE7:  BSF    03.7
0CE8:  MOVF   00,W
0CE9:  MOVWF  21
0CEA:  MOVLW  19
0CEB:  ADDWF  1F,W
0CEC:  MOVWF  04
0CED:  BCF    03.7
0CEE:  BTFSC  20.0
0CEF:  BSF    03.7
0CF0:  MOVF   00,W
0CF1:  MOVWF  22
0CF2:  BCF    03.6
0CF3:  MOVF   0B,W
0CF4:  MOVWF  77
0CF5:  BCF    0B.7
0CF6:  BSF    03.6
0CF7:  MOVF   21,W
0CF8:  MOVWF  0D
0CF9:  MOVF   22,W
0CFA:  MOVWF  0C
0CFB:  BSF    03.5
0CFC:  BCF    0C.7
0CFD:  BSF    0C.2
0CFE:  MOVLW  55
0CFF:  MOVWF  0D
0D00:  MOVLW  AA
0D01:  MOVWF  0D
0D02:  BSF    0C.1
0D03:  BTFSC  0C.1
0D04:  GOTO   503
0D05:  BCF    0C.2
0D06:  MOVF   77,W
0D07:  BCF    03.5
0D08:  BCF    03.6
0D09:  IORWF  0B,F
0D0A:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
07DA:  MOVLW  18
07DB:  BSF    03.6
07DC:  ADDWF  1F,W
07DD:  MOVWF  22
07DE:  MOVF   20,W
07DF:  MOVWF  23
07E0:  BTFSC  03.0
07E1:  INCF   23,F
07E2:  MOVLW  17
07E3:  ADDWF  1F,W
07E4:  MOVWF  04
07E5:  BCF    03.7
07E6:  BTFSC  20.0
07E7:  BSF    03.7
07E8:  MOVF   00,W
07E9:  MOVWF  24
07EA:  MOVF   22,W
07EB:  MOVWF  04
07EC:  BCF    03.7
07ED:  BTFSC  23.0
07EE:  BSF    03.7
07EF:  MOVF   24,W
07F0:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
07F1:  MOVLW  17
07F2:  ADDWF  1F,W
07F3:  MOVWF  04
07F4:  BCF    03.7
07F5:  BTFSC  20.0
07F6:  BSF    03.7
07F7:  MOVF   21,W
07F8:  MOVWF  00
07F9:  BCF    03.6
07FA:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0AB8:  MOVLW  18
0AB9:  BSF    03.6
0ABA:  ADDWF  1F,W
0ABB:  MOVWF  21
0ABC:  MOVF   20,W
0ABD:  MOVWF  22
0ABE:  BTFSC  03.0
0ABF:  INCF   22,F
0AC0:  MOVLW  17
0AC1:  ADDWF  1F,W
0AC2:  MOVWF  04
0AC3:  BCF    03.7
0AC4:  BTFSC  20.0
0AC5:  BSF    03.7
0AC6:  MOVF   00,W
0AC7:  MOVWF  23
0AC8:  MOVF   21,W
0AC9:  MOVWF  04
0ACA:  BCF    03.7
0ACB:  BTFSC  22.0
0ACC:  BSF    03.7
0ACD:  MOVF   23,W
0ACE:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0ACF:  MOVLW  17
0AD0:  ADDWF  1F,W
0AD1:  MOVWF  04
0AD2:  BCF    03.7
0AD3:  BTFSC  20.0
0AD4:  BSF    03.7
0AD5:  CLRF   00
0AD6:  BCF    03.6
0AD7:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0A65:  MOVLW  1B
0A66:  BSF    03.6
0A67:  ADDWF  1F,W
0A68:  MOVWF  04
0A69:  BCF    03.7
0A6A:  BTFSC  20.0
0A6B:  BSF    03.7
0A6C:  MOVF   00,W
0A6D:  MOVWF  21
0A6E:  MOVLW  17
0A6F:  ADDWF  1F,W
0A70:  MOVWF  04
0A71:  BCF    03.7
0A72:  BTFSC  20.0
0A73:  BSF    03.7
0A74:  MOVF   00,W
0A75:  MOVWF  22
0A76:  BCF    03.6
0A77:  MOVF   0B,W
0A78:  MOVWF  77
0A79:  BCF    0B.7
0A7A:  BSF    03.6
0A7B:  MOVF   21,W
0A7C:  MOVWF  0D
0A7D:  MOVF   22,W
0A7E:  MOVWF  0C
0A7F:  BSF    03.5
0A80:  BCF    0C.7
0A81:  BSF    0C.2
0A82:  MOVLW  55
0A83:  MOVWF  0D
0A84:  MOVLW  AA
0A85:  MOVWF  0D
0A86:  BSF    0C.1
0A87:  BTFSC  0C.1
0A88:  GOTO   287
0A89:  BCF    0C.2
0A8A:  MOVF   77,W
0A8B:  BCF    03.5
0A8C:  BCF    03.6
0A8D:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0A8E:  MOVLW  1C
0A8F:  BSF    03.6
0A90:  ADDWF  1F,W
0A91:  MOVWF  04
0A92:  BCF    03.7
0A93:  BTFSC  20.0
0A94:  BSF    03.7
0A95:  MOVF   00,W
0A96:  MOVWF  21
0A97:  MOVLW  18
0A98:  ADDWF  1F,W
0A99:  MOVWF  04
0A9A:  BCF    03.7
0A9B:  BTFSC  20.0
0A9C:  BSF    03.7
0A9D:  MOVF   00,W
0A9E:  MOVWF  22
0A9F:  BCF    03.6
0AA0:  MOVF   0B,W
0AA1:  MOVWF  77
0AA2:  BCF    0B.7
0AA3:  BSF    03.6
0AA4:  MOVF   21,W
0AA5:  MOVWF  0D
0AA6:  MOVF   22,W
0AA7:  MOVWF  0C
0AA8:  BSF    03.5
0AA9:  BCF    0C.7
0AAA:  BSF    0C.2
0AAB:  MOVLW  55
0AAC:  MOVWF  0D
0AAD:  MOVLW  AA
0AAE:  MOVWF  0D
0AAF:  BSF    0C.1
0AB0:  BTFSC  0C.1
0AB1:  GOTO   2B0
0AB2:  BCF    0C.2
0AB3:  MOVF   77,W
0AB4:  BCF    03.5
0AB5:  BCF    03.6
0AB6:  IORWF  0B,F
0AB7:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressFormat, polyoneDisplayPtr->format); 
*
1DBB:  MOVLW  1D
1DBC:  ADDWF  1F,W
1DBD:  MOVWF  04
1DBE:  BCF    03.7
1DBF:  BTFSC  20.0
1DC0:  BSF    03.7
1DC1:  MOVF   00,W
1DC2:  MOVWF  21
1DC3:  MOVLW  16
1DC4:  ADDWF  1F,W
1DC5:  MOVWF  04
1DC6:  BCF    03.7
1DC7:  BTFSC  20.0
1DC8:  BSF    03.7
1DC9:  CLRF   22
1DCA:  BTFSC  00.0
1DCB:  INCF   22,F
1DCC:  BCF    03.6
1DCD:  MOVF   0B,W
1DCE:  MOVWF  77
1DCF:  BCF    0B.7
1DD0:  BSF    03.6
1DD1:  MOVF   21,W
1DD2:  MOVWF  0D
1DD3:  MOVF   22,W
1DD4:  MOVWF  0C
1DD5:  BSF    03.5
1DD6:  BCF    0C.7
1DD7:  BSF    0C.2
1DD8:  MOVLW  55
1DD9:  MOVWF  0D
1DDA:  MOVLW  AA
1DDB:  MOVWF  0D
1DDC:  BSF    0C.1
1DDD:  BTFSC  0C.1
1DDE:  GOTO   5DD
1DDF:  BCF    0C.2
1DE0:  MOVF   77,W
1DE1:  BCF    03.5
1DE2:  BCF    03.6
1DE3:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_saveAlarm(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1CEE:  MOVLW  16
1CEF:  ADDWF  1F,W
1CF0:  MOVWF  04
1CF1:  BCF    03.7
1CF2:  BTFSC  20.0
1CF3:  BSF    03.7
1CF4:  MOVF   00,W
1CF5:  ANDLW  01
1CF6:  BTFSS  03.2
1CF7:  GOTO   54F
....................         Timer_saveAlarmHoursMinutes(&polyoneDisplayPtr.timer); 
1CF8:  MOVLW  01
1CF9:  MOVWF  22
1CFA:  MOVLW  1F
1CFB:  MOVWF  21
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1D4D:  GOTO   5B7
1D4E:  BSF    03.6
1D4F:  MOVLW  16
1D50:  ADDWF  1F,W
1D51:  MOVWF  04
1D52:  BCF    03.7
1D53:  BTFSC  20.0
1D54:  BSF    03.7
1D55:  MOVF   00,W
1D56:  ANDLW  01
1D57:  SUBLW  01
1D58:  BTFSS  03.2
1D59:  GOTO   5B8
....................         Timer_saveAlarmMinutesSeconds(&polyoneDisplayPtr->timer); 
1D5A:  MOVF   1F,W
1D5B:  MOVWF  78
1D5C:  MOVF   20,W
1D5D:  MOVWF  7A
1D5E:  MOVF   78,W
1D5F:  MOVWF  21
1D60:  MOVF   7A,W
1D61:  MOVWF  22
1D62:  MOVF   22,W
1D63:  MOVWF  24
1D64:  MOVF   21,W
1D65:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
12DF:  MOVLW  18
12E0:  ADDWF  1F,W
12E1:  MOVWF  78
12E2:  MOVF   20,W
12E3:  MOVWF  7A
12E4:  BTFSC  03.0
12E5:  INCF   7A,F
12E6:  MOVF   78,W
12E7:  MOVWF  21
12E8:  MOVF   7A,W
12E9:  MOVWF  22
12EA:  MOVLW  17
12EB:  ADDWF  1F,W
12EC:  MOVWF  04
12ED:  BCF    03.7
12EE:  BTFSC  20.0
12EF:  BSF    03.7
12F0:  MOVF   00,W
12F1:  MOVWF  23
12F2:  MOVF   21,W
12F3:  MOVWF  04
12F4:  BCF    03.7
12F5:  BTFSC  22.0
12F6:  BSF    03.7
12F7:  MOVF   23,W
12F8:  MOVWF  00
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
12F9:  MOVLW  16
12FA:  ADDWF  1F,W
12FB:  MOVWF  04
12FC:  BCF    03.7
12FD:  BTFSC  20.0
12FE:  BSF    03.7
12FF:  MOVF   00,W
1300:  MOVWF  77
1301:  RRF    77,W
1302:  ANDLW  01
1303:  BTFSS  03.2
1304:  GOTO   30E
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_UP; 
1305:  MOVLW  17
1306:  ADDWF  1F,W
1307:  MOVWF  04
1308:  BCF    03.7
1309:  BTFSC  20.0
130A:  BSF    03.7
130B:  MOVLW  01
130C:  MOVWF  00
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
130D:  GOTO   323
130E:  MOVLW  16
130F:  ADDWF  1F,W
1310:  MOVWF  04
1311:  BCF    03.7
1312:  BTFSC  20.0
1313:  BSF    03.7
1314:  MOVF   00,W
1315:  MOVWF  77
1316:  RRF    77,W
1317:  ANDLW  01
1318:  SUBLW  01
1319:  BTFSS  03.2
131A:  GOTO   323
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_DOWN; 
131B:  MOVLW  17
131C:  ADDWF  1F,W
131D:  MOVWF  04
131E:  BCF    03.7
131F:  BTFSC  20.0
1320:  BSF    03.7
1321:  MOVLW  02
1322:  MOVWF  00
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
13A4:  MOVF   1F,W
13A5:  MOVWF  78
13A6:  MOVF   20,W
13A7:  MOVWF  7A
13A8:  MOVF   78,W
13A9:  MOVWF  21
13AA:  MOVF   7A,W
13AB:  MOVWF  22
13AC:  MOVF   22,W
13AD:  MOVWF  24
13AE:  MOVF   21,W
13AF:  MOVWF  23
*
13DC:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 100 
.................... //#define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  PIN_BUTTON_START   PIN_B1 
.................... #define  PIN_BUTTON_MENU    PIN_B0 
.................... #define  PIN_BUZZER         PIN_C5 
.................... #define PIN_LED PIN_B3 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
....................     EEPROM_BRIGHTNESS, 
....................     EEPROM_TYPE_OF_COUNT, 
....................     EEPROM_NUMBER_OF_DAYS 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void turnOnBuzzer(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
0D58:  MOVF   03,W
0D59:  ANDLW  1F
0D5A:  MOVWF  03
0D5B:  MOVLW  FF
0D5C:  MOVWF  20
0D5D:  BSF    3E.0
0D5E:  BSF    3E.1
0D5F:  BSF    3E.2
0D60:  BSF    3E.3
0D61:  BSF    3E.4
0D62:  CLRF   61
0D63:  CLRF   62
0D64:  CLRF   63
0D65:  BSF    03.5
0D66:  BSF    03.6
0D67:  MOVF   09,W
0D68:  ANDLW  C0
0D69:  MOVWF  09
0D6A:  BCF    03.6
0D6B:  BCF    1F.4
0D6C:  BCF    1F.5
0D6D:  MOVLW  00
0D6E:  BSF    03.6
0D6F:  MOVWF  08
0D70:  BCF    03.5
0D71:  CLRF   07
0D72:  CLRF   08
0D73:  CLRF   09
0D74:  BCF    03.7
....................     setupHardware(); 
....................     myPolyoneDisplay.currentState = STATE_INIT; 
*
0D9A:  MOVLW  03
0D9B:  BCF    03.5
0D9C:  MOVWF  56
....................     rtos_run(); 
0D9D:  CLRF   22
0D9E:  CLRF   24
0D9F:  MOVLW  05
0DA0:  MOVWF  23
0DA1:  CLRF   26
0DA2:  CLRF   25
0DA3:  MOVLW  0B
0DA4:  MOVWF  27
0DA5:  MOVLW  0D
0DA6:  MOVWF  28
0DA7:  CLRF   29
0DA8:  CLRF   2B
0DA9:  MOVLW  05
0DAA:  MOVWF  2A
0DAB:  CLRF   2D
0DAC:  MOVLW  01
0DAD:  MOVWF  2C
0DAE:  MOVLW  29
0DAF:  MOVWF  2E
0DB0:  MOVLW  0D
0DB1:  MOVWF  2F
0DB2:  CLRF   30
0DB3:  CLRF   32
0DB4:  MOVLW  01
0DB5:  MOVWF  31
0DB6:  CLRF   34
0DB7:  CLRF   33
0DB8:  MOVLW  00
0DB9:  MOVWF  35
0DBA:  MOVLW  18
0DBB:  MOVWF  36
0DBC:  CLRF   37
0DBD:  CLRF   39
0DBE:  MOVLW  14
0DBF:  MOVWF  38
0DC0:  CLRF   3B
0DC1:  MOVLW  02
0DC2:  MOVWF  3A
0DC3:  MOVLW  47
0DC4:  MOVWF  3C
0DC5:  MOVLW  0D
0DC6:  MOVWF  3D
0DC7:  CLRF   21
0DC8:  BSF    03.5
0DC9:  MOVF   01,W
0DCA:  ANDLW  C0
0DCB:  IORLW  07
0DCC:  MOVWF  01
0DCD:  MOVLW  3D
0DCE:  BCF    03.5
0DCF:  MOVWF  01
0DD0:  BCF    0B.2
0DD1:  BCF    03.0
0DD2:  RLF    21,W
0DD3:  MOVWF  77
0DD4:  BCF    0A.3
0DD5:  CALL   031
0DD6:  BSF    0A.3
0DD7:  MOVWF  79
0DD8:  MOVLW  01
0DD9:  ADDWF  77,W
0DDA:  BCF    0A.3
0DDB:  CALL   031
0DDC:  BSF    0A.3
0DDD:  MOVWF  7A
0DDE:  MOVF   79,W
0DDF:  MOVWF  04
0DE0:  BCF    03.7
0DE1:  BTFSC  7A.0
0DE2:  BSF    03.7
0DE3:  MOVF   00,W
0DE4:  MOVWF  79
0DE5:  INCF   04,F
0DE6:  MOVF   00,W
0DE7:  MOVWF  77
0DE8:  INCF   04,F
0DE9:  MOVF   00,W
0DEA:  MOVWF  78
0DEB:  INCF   04,F
0DEC:  INCF   00,F
0DED:  MOVF   00,W
0DEE:  MOVWF  7A
0DEF:  BTFSS  03.2
0DF0:  GOTO   5F4
0DF1:  INCF   04,F
0DF2:  INCF   00,F
0DF3:  DECF   04,F
0DF4:  INCF   04,F
0DF5:  MOVF   00,W
0DF6:  SUBWF  78,W
0DF7:  BTFSS  03.2
0DF8:  GOTO   60C
0DF9:  MOVF   77,W
0DFA:  SUBWF  7A,W
0DFB:  BTFSS  03.2
0DFC:  GOTO   60C
0DFD:  DECF   04,F
0DFE:  CLRF   00
0DFF:  INCF   04,F
0E00:  CLRF   00
0E01:  INCF   04,F
0E02:  BTFSC  79.7
0E03:  GOTO   60C
0E04:  INCF   04,F
0E05:  MOVF   00,W
0E06:  MOVWF  0A
0E07:  DECF   04,F
0E08:  MOVF   00,W
0E09:  MOVWF  02
0E0A:  BCF    03.5
0E0B:  BCF    03.6
0E0C:  INCF   21,F
0E0D:  MOVLW  04
0E0E:  SUBWF  21,W
0E0F:  BTFSS  03.2
0E10:  GOTO   5D1
0E11:  CLRF   21
0E12:  MOVF   01,W
0E13:  BTFSS  0B.2
0E14:  GOTO   617
0E15:  BSF    03.5
0E16:  GOTO   5CD
0E17:  GOTO   612
0E18:  MOVLW  FF
0E19:  MOVWF  21
.................... } 
....................  
0E1A:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
1000:  MOVF   56,W
1001:  ADDLW  F5
1002:  BTFSC  03.0
1003:  GOTO   51C
1004:  ADDLW  0B
1005:  GOTO   51F
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new(EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS, 
....................                     EEPROM_BRIGHTNESS, 
....................                     EEPROM_TYPE_OF_COUNT, 0); 
1006:  BSF    03.6
1007:  CLRF   25
1008:  MOVLW  01
1009:  MOVWF  26
100A:  MOVLW  02
100B:  MOVWF  27
100C:  MOVLW  03
100D:  MOVWF  28
100E:  MOVLW  04
100F:  MOVWF  29
1010:  MOVLW  05
1011:  MOVWF  2A
1012:  MOVLW  06
1013:  MOVWF  2B
1014:  MOVLW  07
1015:  MOVWF  2C
1016:  MOVLW  08
1017:  MOVWF  2D
1018:  MOVLW  09
1019:  MOVWF  2E
101A:  CLRF   30
101B:  CLRF   2F
*
12A7:  MOVF   79,W
12A8:  MOVWF  7A
12A9:  MOVF   78,W
12AA:  BSF    03.6
12AB:  MOVWF  1F
12AC:  MOVF   7A,W
12AD:  MOVWF  20
12AE:  CLRF   22
12AF:  MOVLW  3F
12B0:  MOVWF  21
12B1:  MOVLW  21
12B2:  MOVWF  78
12B3:  MOVF   1F,W
12B4:  MOVWF  04
12B5:  BCF    03.7
12B6:  BTFSC  20.0
12B7:  BSF    03.7
12B8:  MOVF   00,W
12B9:  MOVWF  77
12BA:  MOVF   21,W
12BB:  MOVWF  04
12BC:  BCF    03.7
12BD:  BTFSC  22.0
12BE:  BSF    03.7
12BF:  MOVF   77,W
12C0:  MOVWF  00
12C1:  INCF   21,F
12C2:  BTFSC  03.2
12C3:  INCF   22,F
12C4:  INCF   1F,F
12C5:  BTFSC  03.2
12C6:  INCF   20,F
12C7:  DECFSZ 78,F
12C8:  GOTO   2B3
....................             //            setTime(0, 81, 23); 
....................             //            Time time; 
....................             //            time=Time_new(0,81,23); 
....................             //            Time_setClockTime(&time); 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
12C9:  CLRF   20
12CA:  MOVLW  3F
12CB:  MOVWF  1F
12CC:  CLRF   21
12CD:  BCF    0A.4
12CE:  BSF    0A.3
12CF:  BCF    03.6
12D0:  CALL   073
12D1:  BSF    0A.4
12D2:  BCF    0A.3
....................             break; 
12D3:  GOTO   51C
....................  
....................         case STATE_IDLE: 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
12D4:  BSF    03.5
12D5:  BSF    06.1
12D6:  BCF    03.5
12D7:  BTFSS  06.1
12D8:  GOTO   334
12D9:  BTFSC  3E.3
12DA:  GOTO   334
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
12DB:  BSF    03.6
12DC:  CLRF   20
12DD:  MOVLW  3F
12DE:  MOVWF  1F
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1323:  CLRF   20
1324:  MOVLW  3F
1325:  MOVWF  1F
1326:  BCF    0A.4
1327:  BSF    0A.3
1328:  BCF    03.6
1329:  CALL   265
132A:  BSF    0A.4
132B:  BCF    0A.3
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
132C:  BSF    03.6
132D:  CLRF   53
132E:  MOVLW  3F
132F:  MOVWF  52
1330:  BCF    0A.4
1331:  BCF    03.6
1332:  CALL   43F
1333:  BSF    0A.4
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1334:  BTFSC  3E.1
1335:  GOTO   341
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1336:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1337:  BSF    03.6
1338:  CLRF   20
1339:  MOVLW  3F
133A:  MOVWF  1F
133B:  MOVLW  04
133C:  MOVWF  21
133D:  BCF    0A.4
133E:  BCF    03.6
133F:  CALL   7DA
1340:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1341:  BTFSC  3E.2
1342:  GOTO   34E
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1343:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1344:  BSF    03.6
1345:  CLRF   20
1346:  MOVLW  3F
1347:  MOVWF  1F
1348:  MOVLW  09
1349:  MOVWF  21
134A:  BCF    0A.4
134B:  BCF    03.6
134C:  CALL   7DA
134D:  BSF    0A.4
....................             } 
....................             break; 
134E:  GOTO   51C
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
134F:  BSF    03.6
1350:  CLRF   53
1351:  MOVLW  3F
1352:  MOVWF  52
1353:  BCF    0A.4
1354:  BCF    03.6
1355:  CALL   5F6
1356:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
1357:  BSF    03.6
1358:  CLRF   20
1359:  MOVLW  3F
135A:  MOVWF  1F
135B:  MOVLW  01
135C:  MOVWF  21
135D:  BCF    0A.4
135E:  BSF    0A.3
135F:  BCF    03.6
1360:  CALL   073
1361:  BSF    0A.4
1362:  BCF    0A.3
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1363:  BTFSC  3E.1
1364:  GOTO   370
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1365:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1366:  BSF    03.6
1367:  CLRF   20
1368:  MOVLW  3F
1369:  MOVWF  1F
136A:  MOVLW  04
136B:  MOVWF  21
136C:  BCF    0A.4
136D:  BCF    03.6
136E:  CALL   7DA
136F:  BSF    0A.4
....................             } 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1370:  BSF    03.5
1371:  BSF    06.1
1372:  BCF    03.5
1373:  BTFSS  06.1
1374:  GOTO   3A0
1375:  BTFSC  3E.3
1376:  GOTO   3A0
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
1377:  BSF    03.6
1378:  CLRF   20
1379:  MOVLW  3F
137A:  MOVWF  1F
137B:  BCF    0A.4
137C:  BSF    0A.3
137D:  BCF    03.6
137E:  CALL   2B8
137F:  BSF    0A.4
1380:  BCF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
1381:  BSF    03.6
1382:  CLRF   20
1383:  MOVLW  3F
1384:  MOVWF  1F
1385:  BCF    0A.4
1386:  BSF    0A.3
1387:  BCF    03.6
1388:  CALL   2D8
1389:  BSF    0A.4
138A:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
138B:  BSF    03.6
138C:  CLRF   20
138D:  MOVLW  3F
138E:  MOVWF  1F
138F:  BCF    0A.4
1390:  BSF    0A.3
1391:  BCF    03.6
1392:  CALL   265
1393:  BSF    0A.4
1394:  BCF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1395:  BSF    03.6
1396:  CLRF   20
1397:  MOVLW  3F
1398:  MOVWF  1F
1399:  CLRF   21
139A:  BCF    0A.4
139B:  BSF    0A.3
139C:  BCF    03.6
139D:  CALL   073
139E:  BSF    0A.4
139F:  BCF    0A.3
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
13A0:  BSF    03.6
13A1:  CLRF   20
13A2:  MOVLW  3F
13A3:  MOVWF  1F
*
13DD:  MOVF   78,F
13DE:  BTFSC  03.2
13DF:  GOTO   441
....................                 turnOnBuzzer(); 
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
*
1414:  BSF    03.6
1415:  CLRF   20
1416:  MOVLW  3F
1417:  MOVWF  1F
1418:  MOVLW  01
1419:  MOVWF  21
141A:  BCF    0A.4
141B:  BCF    03.6
141C:  CALL   7DA
141D:  BSF    0A.4
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
141E:  BSF    03.6
141F:  CLRF   20
1420:  MOVLW  3F
1421:  MOVWF  1F
1422:  BCF    0A.4
1423:  BSF    0A.3
1424:  BCF    03.6
1425:  CALL   265
1426:  BSF    0A.4
1427:  BCF    0A.3
....................                 myPolyoneDisplay.typeOfCount = COUNTUP; 
1428:  BCF    55.1
....................                 PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
1429:  BSF    03.6
142A:  CLRF   20
142B:  MOVLW  3F
142C:  MOVWF  1F
142D:  BCF    0A.4
142E:  BSF    0A.3
142F:  BCF    03.6
1430:  CALL   374
1431:  BSF    0A.4
1432:  BCF    0A.3
....................                 Time_clearRtcTime(); 
1433:  BCF    0A.4
1434:  BSF    0A.3
1435:  CALL   39F
1436:  BSF    0A.4
1437:  BCF    0A.3
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1438:  BSF    03.6
1439:  CLRF   53
143A:  MOVLW  3F
143B:  MOVWF  52
143C:  BCF    0A.4
143D:  BCF    03.6
143E:  CALL   5F6
143F:  BSF    0A.4
1440:  BSF    03.6
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1441:  BCF    03.6
1442:  BTFSC  3E.2
1443:  GOTO   44F
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1444:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1445:  BSF    03.6
1446:  CLRF   20
1447:  MOVLW  3F
1448:  MOVWF  1F
1449:  MOVLW  09
144A:  MOVWF  21
144B:  BCF    0A.4
144C:  BCF    03.6
144D:  CALL   7DA
144E:  BSF    0A.4
....................             } 
....................              
....................             break; 
144F:  GOTO   51C
....................  
....................         case STATE_COUNTING_UP: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1450:  BSF    03.6
1451:  CLRF   53
1452:  MOVLW  3F
1453:  MOVWF  52
1454:  BCF    0A.4
1455:  BCF    03.6
1456:  CALL   5F6
1457:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
1458:  BSF    03.6
1459:  CLRF   20
145A:  MOVLW  3F
145B:  MOVWF  1F
145C:  MOVLW  01
145D:  MOVWF  21
145E:  BCF    0A.4
145F:  BSF    0A.3
1460:  BCF    03.6
1461:  CALL   073
1462:  BSF    0A.4
1463:  BCF    0A.3
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1464:  BSF    03.5
1465:  BSF    06.1
1466:  BCF    03.5
1467:  BTFSS  06.1
1468:  GOTO   494
1469:  BTFSC  3E.3
146A:  GOTO   494
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
146B:  BSF    03.6
146C:  CLRF   20
146D:  MOVLW  3F
146E:  MOVWF  1F
146F:  BCF    0A.4
1470:  BSF    0A.3
1471:  BCF    03.6
1472:  CALL   2B8
1473:  BSF    0A.4
1474:  BCF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
1475:  BSF    03.6
1476:  CLRF   20
1477:  MOVLW  3F
1478:  MOVWF  1F
1479:  BCF    0A.4
147A:  BSF    0A.3
147B:  BCF    03.6
147C:  CALL   2D8
147D:  BSF    0A.4
147E:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
147F:  BSF    03.6
1480:  CLRF   20
1481:  MOVLW  3F
1482:  MOVWF  1F
1483:  BCF    0A.4
1484:  BSF    0A.3
1485:  BCF    03.6
1486:  CALL   265
1487:  BSF    0A.4
1488:  BCF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1489:  BSF    03.6
148A:  CLRF   20
148B:  MOVLW  3F
148C:  MOVWF  1F
148D:  CLRF   21
148E:  BCF    0A.4
148F:  BSF    0A.3
1490:  BCF    03.6
1491:  CALL   073
1492:  BSF    0A.4
1493:  BCF    0A.3
....................                 //                setTime(,39,56); 
....................             } 
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1494:  BTFSC  3E.1
1495:  GOTO   4A1
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1496:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1497:  BSF    03.6
1498:  CLRF   20
1499:  MOVLW  3F
149A:  MOVWF  1F
149B:  MOVLW  04
149C:  MOVWF  21
149D:  BCF    0A.4
149E:  BCF    03.6
149F:  CALL   7DA
14A0:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
14A1:  BTFSC  3E.2
14A2:  GOTO   4AE
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
14A3:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
14A4:  BSF    03.6
14A5:  CLRF   20
14A6:  MOVLW  3F
14A7:  MOVWF  1F
14A8:  MOVLW  09
14A9:  MOVWF  21
14AA:  BCF    0A.4
14AB:  BCF    03.6
14AC:  CALL   7DA
14AD:  BSF    0A.4
....................             } 
....................             break; 
14AE:  GOTO   51C
....................  
....................         case STATE_RESETTING: 
....................             myPolyoneDisplay.typeOfCount = COUNTDOWN; 
14AF:  BSF    55.1
....................             PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
14B0:  BSF    03.6
14B1:  CLRF   20
14B2:  MOVLW  3F
14B3:  MOVWF  1F
14B4:  BCF    0A.4
14B5:  BSF    0A.3
14B6:  BCF    03.6
14B7:  CALL   374
14B8:  BSF    0A.4
14B9:  BCF    0A.3
....................             Time_clearRtcTime(); 
14BA:  BCF    0A.4
14BB:  BSF    0A.3
14BC:  CALL   39F
14BD:  BSF    0A.4
14BE:  BCF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
14D4:  MOVLW  08
14D5:  BSF    03.6
14D6:  MOVWF  1F
14D7:  MOVLW  FA
14D8:  MOVWF  20
14D9:  BCF    0A.4
14DA:  BSF    0A.3
14DB:  BCF    03.6
14DC:  CALL   360
14DD:  BSF    0A.4
14DE:  BCF    0A.3
14DF:  BSF    03.6
14E0:  DECFSZ 1F,F
14E1:  GOTO   4D7
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
14E2:  CLRF   20
14E3:  MOVLW  3F
14E4:  MOVWF  1F
14E5:  MOVLW  0A
14E6:  MOVWF  21
14E7:  BCF    0A.4
14E8:  BCF    03.6
14E9:  CALL   7DA
14EA:  BSF    0A.4
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
14EB:  MOVLW  05
14EC:  MOVWF  60
....................             Time_clearRtcTime(); 
14ED:  BCF    0A.4
14EE:  BSF    0A.3
14EF:  CALL   39F
14F0:  BSF    0A.4
14F1:  BCF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
14F2:  BSF    03.6
14F3:  CLRF   53
14F4:  MOVLW  3F
14F5:  MOVWF  52
14F6:  BCF    0A.4
14F7:  BCF    03.6
14F8:  CALL   5F6
14F9:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
14FA:  BSF    03.6
14FB:  CLRF   20
14FC:  MOVLW  3F
14FD:  MOVWF  1F
14FE:  CLRF   21
14FF:  BCF    0A.4
1500:  BSF    0A.3
1501:  BCF    03.6
1502:  CALL   073
1503:  BSF    0A.4
1504:  BCF    0A.3
....................             //            rtos_enable(Task_checkIfMenuButtonIsHeld); 
....................             break; 
1505:  GOTO   51C
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(PIN_BUTTON_START) && input(PIN_BUTTON_MENU)) { 
1506:  BSF    03.5
1507:  BSF    06.1
1508:  BCF    03.5
1509:  BTFSS  06.1
150A:  GOTO   51C
150B:  BSF    03.5
150C:  BSF    06.0
150D:  BCF    03.5
150E:  BTFSS  06.0
150F:  GOTO   51C
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
1510:  BSF    03.6
1511:  CLRF   20
1512:  MOVLW  3F
1513:  MOVWF  1F
1514:  BCF    03.6
1515:  MOVF   60,W
1516:  BSF    03.6
1517:  MOVWF  21
1518:  BCF    0A.4
1519:  BCF    03.6
151A:  CALL   7DA
151B:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
151C:  BSF    0A.3
151D:  BSF    0A.4
151E:  GOTO   002 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1800:  BCF    0A.3
1801:  GOTO   000
1802:  BSF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1803:  MOVLW  05
1804:  SUBWF  56,W
1805:  ADDLW  FB
1806:  BTFSC  03.0
1807:  GOTO   6B9
1808:  ADDLW  05
1809:  GOTO   6D4
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
180A:  BSF    03.6
180B:  CLRF   20
180C:  MOVLW  3F
180D:  MOVWF  1F
180E:  CLRF   21
180F:  BCF    0A.4
1810:  BCF    03.6
1811:  CALL   073
1812:  BSF    0A.4
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1813:  BSF    03.5
1814:  BSF    06.1
1815:  BCF    03.5
1816:  BTFSS  06.1
1817:  GOTO   031
1818:  BTFSC  3E.3
1819:  GOTO   031
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
181A:  BSF    03.6
181B:  CLRF   20
181C:  MOVLW  3F
181D:  MOVWF  1F
181E:  MOVLW  02
181F:  MOVWF  21
1820:  BCF    0A.4
1821:  BCF    0A.3
1822:  BCF    03.6
1823:  CALL   7DA
1824:  BSF    0A.4
1825:  BSF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1826:  BSF    03.6
1827:  CLRF   20
1828:  MOVLW  3F
1829:  MOVWF  1F
182A:  BCF    0A.4
182B:  BCF    03.6
182C:  CALL   265
182D:  BSF    0A.4
....................                 Time_clearRtcTime(); 
182E:  BCF    0A.4
182F:  CALL   39F
1830:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1831:  BTFSC  3E.2
1832:  GOTO   040
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1833:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1834:  BSF    03.6
1835:  CLRF   20
1836:  MOVLW  3F
1837:  MOVWF  1F
1838:  MOVLW  06
1839:  MOVWF  21
183A:  BCF    0A.4
183B:  BCF    0A.3
183C:  BCF    03.6
183D:  CALL   7DA
183E:  BSF    0A.4
183F:  BSF    0A.3
....................             } 
....................             break; 
1840:  GOTO   6B9
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             if (showDisplayCompletely) { 
1841:  BTFSS  3E.0
1842:  GOTO   04C
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1843:  BSF    03.6
1844:  CLRF   20
1845:  MOVLW  3F
1846:  MOVWF  1F
1847:  BCF    0A.4
1848:  BCF    03.6
1849:  CALL   3A8
184A:  BSF    0A.4
....................             } else { 
184B:  GOTO   137
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
184C:  BSF    03.6
184D:  CLRF   20
184E:  MOVLW  3F
184F:  MOVWF  1F
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1938:  BSF    03.5
1939:  BCF    03.6
193A:  BSF    06.1
193B:  BCF    03.5
193C:  BTFSC  06.1
193D:  GOTO   1B7
....................                 while (!input(PIN_BUTTON_START)) { 
193E:  BSF    03.5
193F:  BSF    06.1
1940:  BCF    03.5
1941:  BTFSC  06.1
1942:  GOTO   1B7
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
1943:  BSF    03.6
1944:  CLRF   20
1945:  MOVLW  3F
1946:  MOVWF  1F
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
19A8:  CLRF   20
19A9:  MOVLW  3F
19AA:  MOVWF  1F
19AB:  BCF    0A.4
19AC:  BCF    03.6
19AD:  CALL   3A8
19AE:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
19AF:  MOVLW  64
19B0:  BSF    03.6
19B1:  MOVWF  20
19B2:  BCF    0A.4
19B3:  BCF    03.6
19B4:  CALL   360
19B5:  BSF    0A.4
19B6:  GOTO   13E
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
19B7:  BTFSC  3E.4
19B8:  GOTO   1D0
19B9:  BSF    03.5
19BA:  BSF    06.0
19BB:  BCF    03.5
19BC:  BTFSS  06.0
19BD:  GOTO   1D0
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
19BE:  MOVF   57,W
19BF:  SUBLW  05
19C0:  BTFSS  03.2
19C1:  GOTO   1C4
....................                     numberOfMenuButtonHasBeenReleased++; 
19C2:  INCF   61,F
....................                 } else { 
19C3:  GOTO   1D0
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19C4:  BSF    03.6
19C5:  CLRF   20
19C6:  MOVLW  3F
19C7:  MOVWF  1F
19C8:  MOVLW  07
19C9:  MOVWF  21
19CA:  BCF    0A.4
19CB:  BCF    0A.3
19CC:  BCF    03.6
19CD:  CALL   7DA
19CE:  BSF    0A.4
19CF:  BSF    0A.3
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
19D0:  MOVF   61,W
19D1:  SUBLW  01
19D2:  BTFSC  03.0
19D3:  GOTO   1E1
....................                 numberOfMenuButtonHasBeenReleased = 0; 
19D4:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19D5:  BSF    03.6
19D6:  CLRF   20
19D7:  MOVLW  3F
19D8:  MOVWF  1F
19D9:  MOVLW  07
19DA:  MOVWF  21
19DB:  BCF    0A.4
19DC:  BCF    0A.3
19DD:  BCF    03.6
19DE:  CALL   7DA
19DF:  BSF    0A.4
19E0:  BSF    0A.3
....................             } 
....................  
....................             break; 
19E1:  GOTO   6B9
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
19E2:  BTFSS  3E.0
19E3:  GOTO   1ED
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
19E4:  BSF    03.6
19E5:  CLRF   20
19E6:  MOVLW  3F
19E7:  MOVWF  1F
19E8:  BCF    0A.4
19E9:  BCF    03.6
19EA:  CALL   3A8
19EB:  BSF    0A.4
....................             } else { 
19EC:  GOTO   2DC
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
19ED:  BSF    03.6
19EE:  CLRF   20
19EF:  MOVLW  3F
19F0:  MOVWF  1F
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1ADD:  BSF    03.5
1ADE:  BCF    03.6
1ADF:  BSF    06.1
1AE0:  BCF    03.5
1AE1:  BTFSC  06.1
1AE2:  GOTO   35E
....................                 while (!input(PIN_BUTTON_START)) { 
1AE3:  BSF    03.5
1AE4:  BSF    06.1
1AE5:  BCF    03.5
1AE6:  BTFSC  06.1
1AE7:  GOTO   35E
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1AE8:  BSF    03.6
1AE9:  CLRF   20
1AEA:  MOVLW  3F
1AEB:  MOVWF  1F
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1B4E:  BSF    03.6
1B4F:  CLRF   20
1B50:  MOVLW  3F
1B51:  MOVWF  1F
1B52:  BCF    0A.4
1B53:  BCF    03.6
1B54:  CALL   3A8
1B55:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1B56:  MOVLW  64
1B57:  BSF    03.6
1B58:  MOVWF  20
1B59:  BCF    0A.4
1B5A:  BCF    03.6
1B5B:  CALL   360
1B5C:  BSF    0A.4
1B5D:  GOTO   2E3
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1B5E:  BTFSC  3E.4
1B5F:  GOTO   3C7
1B60:  BSF    03.5
1B61:  BSF    06.0
1B62:  BCF    03.5
1B63:  BTFSS  06.0
1B64:  GOTO   3C7
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
1B65:  BSF    03.6
1B66:  CLRF   20
1B67:  MOVLW  3F
1B68:  MOVWF  1F
*
1BAC:  MOVF   78,F
1BAD:  BTFSC  03.2
1BAE:  GOTO   3BC
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
1BAF:  CLRF   20
1BB0:  MOVLW  3F
1BB1:  MOVWF  1F
1BB2:  MOVLW  08
1BB3:  MOVWF  21
1BB4:  BCF    0A.4
1BB5:  BCF    0A.3
1BB6:  BCF    03.6
1BB7:  CALL   7DA
1BB8:  BSF    0A.4
1BB9:  BSF    0A.3
....................                 } else { 
1BBA:  GOTO   3C7
1BBB:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1BBC:  CLRF   20
1BBD:  MOVLW  3F
1BBE:  MOVWF  1F
1BBF:  MOVLW  06
1BC0:  MOVWF  21
1BC1:  BCF    0A.4
1BC2:  BCF    0A.3
1BC3:  BCF    03.6
1BC4:  CALL   7DA
1BC5:  BSF    0A.4
1BC6:  BSF    0A.3
....................                 } 
....................             } 
....................             break; 
1BC7:  GOTO   6B9
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
1BC8:  BSF    03.6
1BC9:  CLRF   20
1BCA:  MOVLW  3F
1BCB:  MOVWF  1F
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
*
1C00:  BSF    03.5
1C01:  BSF    06.1
1C02:  BCF    03.5
1C03:  BTFSS  06.1
1C04:  GOTO   4E3
1C05:  BTFSC  3E.3
1C06:  GOTO   4E3
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1C07:  BSF    03.6
1C08:  CLRF   20
1C09:  MOVLW  3F
1C0A:  MOVWF  1F
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
*
1CE3:  BTFSC  3E.4
1CE4:  GOTO   5FD
1CE5:  BSF    03.5
1CE6:  BSF    06.0
1CE7:  BCF    03.5
1CE8:  BTFSS  06.0
1CE9:  GOTO   5FD
....................                 PolyoneDisplay_saveAlarm(&myPolyoneDisplay); 
1CEA:  BSF    03.6
1CEB:  CLRF   20
1CEC:  MOVLW  3F
1CED:  MOVWF  1F
....................                 PolyoneDisplay_saveFormat(&myPolyoneDisplay); 
*
1DB8:  CLRF   20
1DB9:  MOVLW  3F
1DBA:  MOVWF  1F
....................  
....................                 Time_clearRtcTime(); 
*
1DE4:  BCF    0A.4
1DE5:  CALL   39F
1DE6:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1DE7:  BSF    03.6
1DE8:  CLRF   53
1DE9:  MOVLW  3F
1DEA:  MOVWF  52
1DEB:  BCF    0A.4
1DEC:  BCF    0A.3
1DED:  BCF    03.6
1DEE:  CALL   5F6
1DEF:  BSF    0A.4
1DF0:  BSF    0A.3
....................  
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1DF1:  BSF    03.6
1DF2:  CLRF   20
1DF3:  MOVLW  3F
1DF4:  MOVWF  1F
1DF5:  MOVLW  09
1DF6:  MOVWF  21
1DF7:  BCF    0A.4
1DF8:  BCF    0A.3
1DF9:  BCF    03.6
1DFA:  CALL   7DA
1DFB:  BSF    0A.4
1DFC:  BSF    0A.3
....................             } 
....................             break; 
1DFD:  GOTO   6B9
....................  
....................         case STATE_SETTING_BRIGHTNESS: 
....................             if (showDisplayCompletely) { 
1DFE:  BTFSS  3E.0
1DFF:  GOTO   609
....................                 PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
1E00:  BSF    03.6
1E01:  CLRF   20
1E02:  MOVLW  3F
1E03:  MOVWF  1F
1E04:  BCF    0A.4
1E05:  BCF    03.6
1E06:  CALL   49D
1E07:  BSF    0A.4
....................             } else { 
1E08:  GOTO   61C
....................                 PolyoneDisplay_hideBrightness(); 
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1E1C:  BSF    03.5
1E1D:  BSF    06.1
1E1E:  BCF    03.5
1E1F:  BTFSC  06.1
1E20:  GOTO   674
....................                 while (!input(PIN_BUTTON_START)) { 
1E21:  BSF    03.5
1E22:  BSF    06.1
1E23:  BCF    03.5
1E24:  BTFSC  06.1
1E25:  GOTO   674
....................                     PolyoneDisplay_increaseBrightness(&myPolyoneDisplay); 
1E26:  BSF    03.6
1E27:  CLRF   20
1E28:  MOVLW  3F
1E29:  MOVWF  1F
....................                     PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
*
1E64:  BSF    03.6
1E65:  CLRF   20
1E66:  MOVLW  3F
1E67:  MOVWF  1F
1E68:  BCF    0A.4
1E69:  BCF    03.6
1E6A:  CALL   49D
1E6B:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1E6C:  MOVLW  64
1E6D:  BSF    03.6
1E6E:  MOVWF  20
1E6F:  BCF    0A.4
1E70:  BCF    03.6
1E71:  CALL   360
1E72:  BSF    0A.4
1E73:  GOTO   621
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1E74:  BTFSC  3E.4
1E75:  GOTO   695
1E76:  BSF    03.5
1E77:  BSF    06.0
1E78:  BCF    03.5
1E79:  BTFSS  06.0
1E7A:  GOTO   695
....................                 if (myPolyoneDisplay.previousState == STATE_SETTING_FORMAT) { 
1E7B:  MOVF   57,W
1E7C:  SUBLW  08
1E7D:  BTFSS  03.2
1E7E:  GOTO   694
....................                     PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1E7F:  BSF    03.6
1E80:  CLRF   20
1E81:  MOVLW  3F
1E82:  MOVWF  1F
1E83:  BCF    0A.4
1E84:  BCF    03.6
1E85:  CALL   4E1
1E86:  BSF    0A.4
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
1E87:  BSF    03.6
1E88:  CLRF   20
1E89:  MOVLW  3F
1E8A:  MOVWF  1F
1E8B:  MOVLW  05
1E8C:  MOVWF  21
1E8D:  BCF    0A.4
1E8E:  BCF    0A.3
1E8F:  BCF    03.6
1E90:  CALL   7DA
1E91:  BSF    0A.4
1E92:  BSF    0A.3
....................                 } else { 
1E93:  GOTO   695
....................                     numberOfMenuButtonHasBeenReleased++; 
1E94:  INCF   61,F
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1E95:  MOVF   61,W
1E96:  SUBLW  01
1E97:  BTFSC  03.0
1E98:  GOTO   6B9
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1E99:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, myPolyoneDisplay.previousState); 
1E9A:  BSF    03.6
1E9B:  CLRF   20
1E9C:  MOVLW  3F
1E9D:  MOVWF  1F
1E9E:  BCF    03.6
1E9F:  MOVF   57,W
1EA0:  BSF    03.6
1EA1:  MOVWF  21
1EA2:  BCF    0A.4
1EA3:  BCF    0A.3
1EA4:  BCF    03.6
1EA5:  CALL   7DA
1EA6:  BSF    0A.4
1EA7:  BSF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1EA8:  BSF    03.6
1EA9:  CLRF   20
1EAA:  MOVLW  3F
1EAB:  MOVWF  1F
1EAC:  CLRF   21
1EAD:  BCF    0A.4
1EAE:  BCF    03.6
1EAF:  CALL   073
1EB0:  BSF    0A.4
....................                 PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1EB1:  BSF    03.6
1EB2:  CLRF   20
1EB3:  MOVLW  3F
1EB4:  MOVWF  1F
1EB5:  BCF    0A.4
1EB6:  BCF    03.6
1EB7:  CALL   4E1
1EB8:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(PIN_BUTTON_START); 
1EB9:  BSF    03.5
1EBA:  BSF    06.1
1EBB:  BCF    03.5
1EBC:  BCF    3E.3
1EBD:  BTFSC  06.1
1EBE:  BSF    3E.3
....................     menuButtonState = input(PIN_BUTTON_MENU); 
1EBF:  BSF    03.5
1EC0:  BSF    06.0
1EC1:  BCF    03.5
1EC2:  BCF    3E.4
1EC3:  BTFSC  06.0
1EC4:  BSF    3E.4
....................     rtos_yield(); 
1EC5:  MOVLW  CC
1EC6:  MOVWF  35
1EC7:  MOVLW  1E
1EC8:  MOVWF  36
1EC9:  BSF    0A.3
1ECA:  BCF    0A.4
1ECB:  GOTO   60A
1ECC:  MOVLW  00
1ECD:  MOVWF  35
1ECE:  MOVLW  18
1ECF:  MOVWF  36
1ED0:  BSF    0A.3
1ED1:  BCF    0A.4
1ED2:  GOTO   60A
1ED3:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(PIN_BUTTON_START)) { 
*
0D0B:  BSF    03.5
0D0C:  BSF    06.1
0D0D:  BCF    03.5
0D0E:  BTFSC  06.1
0D0F:  GOTO   512
....................         nextUpButtonCounter++; 
0D10:  INCF   62,F
....................     } else { 
0D11:  GOTO   514
....................         nextUpButtonCounter = 0; 
0D12:  CLRF   62
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D13:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0D14:  MOVF   62,W
0D15:  SUBLW  13
0D16:  BTFSC  03.0
0D17:  GOTO   51A
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0D18:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0D19:  CLRF   62
....................     } 
....................     rtos_yield(); 
0D1A:  MOVLW  21
0D1B:  MOVWF  27
0D1C:  MOVLW  0D
0D1D:  MOVWF  28
0D1E:  BSF    0A.3
0D1F:  BCF    0A.4
0D20:  GOTO   60A
0D21:  MOVLW  0B
0D22:  MOVWF  27
0D23:  MOVLW  0D
0D24:  MOVWF  28
0D25:  BSF    0A.3
0D26:  BCF    0A.4
0D27:  GOTO   60A
0D28:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(PIN_BUTTON_MENU)) { 
0D29:  BSF    03.5
0D2A:  BSF    06.0
0D2B:  BCF    03.5
0D2C:  BTFSC  06.0
0D2D:  GOTO   530
....................         menuButtonCounter++; 
0D2E:  INCF   63,F
....................     } else { 
0D2F:  GOTO   532
....................         menuButtonCounter = 0; 
0D30:  CLRF   63
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0D31:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0D32:  MOVF   63,W
0D33:  SUBLW  0C
0D34:  BTFSC  03.0
0D35:  GOTO   538
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0D36:  BCF    3E.2
....................         menuButtonCounter = 0; 
0D37:  CLRF   63
....................     } 
....................     rtos_yield(); 
0D38:  MOVLW  3F
0D39:  MOVWF  2E
0D3A:  MOVLW  0D
0D3B:  MOVWF  2F
0D3C:  BSF    0A.3
0D3D:  BCF    0A.4
0D3E:  GOTO   60A
0D3F:  MOVLW  29
0D40:  MOVWF  2E
0D41:  MOVLW  0D
0D42:  MOVWF  2F
0D43:  BSF    0A.3
0D44:  BCF    0A.4
0D45:  GOTO   60A
0D46:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0D47:  MOVLW  01
0D48:  XORWF  3E,F
....................     rtos_yield(); 
0D49:  MOVLW  50
0D4A:  MOVWF  3C
0D4B:  MOVLW  0D
0D4C:  MOVWF  3D
0D4D:  BSF    0A.3
0D4E:  BCF    0A.4
0D4F:  GOTO   60A
0D50:  MOVLW  47
0D51:  MOVWF  3C
0D52:  MOVLW  0D
0D53:  MOVWF  3D
0D54:  BSF    0A.3
0D55:  BCF    0A.4
0D56:  GOTO   60A
0D57:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
*
0D75:  MOVLW  00
0D76:  MOVWF  78
0D77:  IORLW  06
0D78:  BCF    03.6
0D79:  MOVWF  12
0D7A:  MOVLW  FF
0D7B:  BSF    03.5
0D7C:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0D7D:  BCF    03.5
0D7E:  BCF    20.2
0D7F:  MOVF   20,W
0D80:  BSF    03.5
0D81:  MOVWF  07
0D82:  BCF    03.5
0D83:  BCF    07.2
0D84:  MOVLW  0E
0D85:  MOVWF  17
0D86:  BSF    03.5
0D87:  CLRF   1B
0D88:  CLRF   1C
0D89:  MOVLW  01
0D8A:  MOVWF  1D
....................  
....................     delay_ms(500); 
0D8B:  MOVLW  02
0D8C:  BCF    03.5
0D8D:  MOVWF  64
0D8E:  MOVLW  FA
0D8F:  BSF    03.6
0D90:  MOVWF  20
0D91:  BCF    03.6
0D92:  CALL   360
0D93:  DECFSZ 64,F
0D94:  GOTO   58E
....................     port_b_pullups(0xFF); 
0D95:  MOVLW  FF
0D96:  BSF    03.5
0D97:  MOVWF  15
0D98:  BCF    01.7
....................     WPUB = 0xFF; 
0D99:  MOVWF  15
.................... } 
....................  
.................... void turnOnBuzzer(void) { 
....................     output_high(PIN_BUZZER); 
*
13E0:  BCF    03.6
13E1:  BCF    20.5
13E2:  MOVF   20,W
13E3:  BSF    03.5
13E4:  MOVWF  07
13E5:  BCF    03.5
13E6:  BSF    07.5
....................     delay_ms(200); 
13E7:  MOVLW  C8
13E8:  BSF    03.6
13E9:  MOVWF  20
13EA:  BCF    0A.4
13EB:  BSF    0A.3
13EC:  BCF    03.6
13ED:  CALL   360
13EE:  BSF    0A.4
13EF:  BCF    0A.3
....................     output_low(PIN_BUZZER); 
13F0:  BCF    20.5
13F1:  MOVF   20,W
13F2:  BSF    03.5
13F3:  MOVWF  07
13F4:  BCF    03.5
13F5:  BCF    07.5
....................     delay_ms(100); 
13F6:  MOVLW  64
13F7:  BSF    03.6
13F8:  MOVWF  20
13F9:  BCF    0A.4
13FA:  BSF    0A.3
13FB:  BCF    03.6
13FC:  CALL   360
13FD:  BSF    0A.4
13FE:  BCF    0A.3
....................     output_high(PIN_BUZZER); 
13FF:  BCF    20.5
1400:  MOVF   20,W
1401:  BSF    03.5
1402:  MOVWF  07
1403:  BCF    03.5
1404:  BSF    07.5
....................     delay_ms(200); 
1405:  MOVLW  C8
1406:  BSF    03.6
1407:  MOVWF  20
1408:  BCF    0A.4
1409:  BSF    0A.3
140A:  BCF    03.6
140B:  CALL   360
140C:  BSF    0A.4
140D:  BCF    0A.3
....................     output_low(PIN_BUZZER); 
140E:  BCF    20.5
140F:  MOVF   20,W
1410:  BSF    03.5
1411:  MOVWF  07
1412:  BCF    03.5
1413:  BCF    07.5
.................... } 

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
