CCS PCM C Compiler, Version 5.015, 5967               10-Nov-17 15:33

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   7159 words (87%)
                           Largest free fragment is 505
               RAM used:   73 (20%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (1 in main + 7 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   5F1
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  0A
0028:  RETLW  22
0029:  RETLW  3A
002A:  RETLW  52
002B:  RETLW  6A
002C:  RETLW  82
002D:  RETLW  9A
002E:  RETLW  B2
002F:  RETLW  CA
0030:  RETLW  FF
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  22
0036:  RETLW  00
0037:  RETLW  29
0038:  RETLW  00
0039:  RETLW  30
003A:  RETLW  00
003B:  RETLW  37
003C:  RETLW  00
003D:  BSF    03.5
003E:  BSF    03.6
003F:  MOVF   29,W
0040:  CLRF   78
0041:  SUBWF  28,W
0042:  BTFSC  03.0
0043:  GOTO   047
0044:  MOVF   28,W
0045:  MOVWF  77
0046:  GOTO   053
0047:  CLRF   77
0048:  MOVLW  08
0049:  MOVWF  2A
004A:  RLF    28,F
004B:  RLF    77,F
004C:  MOVF   29,W
004D:  SUBWF  77,W
004E:  BTFSC  03.0
004F:  MOVWF  77
0050:  RLF    78,F
0051:  DECFSZ 2A,F
0052:  GOTO   04A
0053:  BCF    03.5
0054:  BCF    03.6
0055:  RETURN
0056:  MOVLW  20
0057:  BSF    03.5
0058:  BSF    03.6
0059:  MOVWF  32
005A:  CLRF   2E
005B:  CLRF   2F
005C:  CLRF   30
005D:  CLRF   31
005E:  MOVF   29,W
005F:  MOVWF  7A
0060:  MOVF   28,W
0061:  MOVWF  79
0062:  MOVF   27,W
0063:  MOVWF  78
0064:  MOVF   26,W
0065:  MOVWF  77
0066:  BCF    03.0
0067:  BTFSS  77.0
0068:  GOTO   077
0069:  MOVF   2A,W
006A:  ADDWF  2E,F
006B:  MOVF   2B,W
006C:  BTFSC  03.0
006D:  INCFSZ 2B,W
006E:  ADDWF  2F,F
006F:  MOVF   2C,W
0070:  BTFSC  03.0
0071:  INCFSZ 2C,W
0072:  ADDWF  30,F
0073:  MOVF   2D,W
0074:  BTFSC  03.0
0075:  INCFSZ 2D,W
0076:  ADDWF  31,F
0077:  RRF    31,F
0078:  RRF    30,F
0079:  RRF    2F,F
007A:  RRF    2E,F
007B:  RRF    7A,F
007C:  RRF    79,F
007D:  RRF    78,F
007E:  RRF    77,F
007F:  DECFSZ 32,F
0080:  GOTO   066
0081:  BCF    03.5
0082:  BCF    03.6
0083:  RETURN
*
0122:  BTFSC  03.1
0123:  GOTO   127
0124:  MOVLW  AA
0125:  MOVWF  04
0126:  BSF    03.7
0127:  BSF    03.5
0128:  BSF    03.6
0129:  MOVF   25,W
012A:  XORWF  29,W
012B:  ANDLW  80
012C:  MOVWF  2F
012D:  BTFSS  25.7
012E:  GOTO   13A
012F:  COMF   22,F
0130:  COMF   23,F
0131:  COMF   24,F
0132:  COMF   25,F
0133:  INCF   22,F
0134:  BTFSC  03.2
0135:  INCF   23,F
0136:  BTFSC  03.2
0137:  INCF   24,F
0138:  BTFSC  03.2
0139:  INCF   25,F
013A:  BTFSS  29.7
013B:  GOTO   147
013C:  COMF   26,F
013D:  COMF   27,F
013E:  COMF   28,F
013F:  COMF   29,F
0140:  INCF   26,F
0141:  BTFSC  03.2
0142:  INCF   27,F
0143:  BTFSC  03.2
0144:  INCF   28,F
0145:  BTFSC  03.2
0146:  INCF   29,F
0147:  CLRF   77
0148:  CLRF   78
0149:  CLRF   79
014A:  CLRF   7A
014B:  CLRF   2A
014C:  CLRF   2B
014D:  CLRF   2C
014E:  CLRF   2D
014F:  MOVF   29,W
0150:  IORWF  28,W
0151:  IORWF  27,W
0152:  IORWF  26,W
0153:  BTFSC  03.2
0154:  GOTO   185
0155:  MOVLW  20
0156:  MOVWF  2E
0157:  BCF    03.0
0158:  RLF    22,F
0159:  RLF    23,F
015A:  RLF    24,F
015B:  RLF    25,F
015C:  RLF    2A,F
015D:  RLF    2B,F
015E:  RLF    2C,F
015F:  RLF    2D,F
0160:  MOVF   29,W
0161:  SUBWF  2D,W
0162:  BTFSS  03.2
0163:  GOTO   16E
0164:  MOVF   28,W
0165:  SUBWF  2C,W
0166:  BTFSS  03.2
0167:  GOTO   16E
0168:  MOVF   27,W
0169:  SUBWF  2B,W
016A:  BTFSS  03.2
016B:  GOTO   16E
016C:  MOVF   26,W
016D:  SUBWF  2A,W
016E:  BTFSS  03.0
016F:  GOTO   17F
0170:  MOVF   26,W
0171:  SUBWF  2A,F
0172:  MOVF   27,W
0173:  BTFSS  03.0
0174:  INCFSZ 27,W
0175:  SUBWF  2B,F
0176:  MOVF   28,W
0177:  BTFSS  03.0
0178:  INCFSZ 28,W
0179:  SUBWF  2C,F
017A:  MOVF   29,W
017B:  BTFSS  03.0
017C:  INCFSZ 29,W
017D:  SUBWF  2D,F
017E:  BSF    03.0
017F:  RLF    77,F
0180:  RLF    78,F
0181:  RLF    79,F
0182:  RLF    7A,F
0183:  DECFSZ 2E,F
0184:  GOTO   157
0185:  BTFSS  2F.7
0186:  GOTO   192
0187:  COMF   77,F
0188:  COMF   78,F
0189:  COMF   79,F
018A:  COMF   7A,F
018B:  INCF   77,F
018C:  BTFSC  03.2
018D:  INCF   78,F
018E:  BTFSC  03.2
018F:  INCF   79,F
0190:  BTFSC  03.2
0191:  INCF   7A,F
0192:  MOVF   2A,W
0193:  MOVWF  00
0194:  INCF   04,F
0195:  MOVF   2B,W
0196:  MOVWF  00
0197:  INCF   04,F
0198:  MOVF   2C,W
0199:  MOVWF  00
019A:  INCF   04,F
019B:  MOVF   2D,W
019C:  MOVWF  00
019D:  BCF    03.5
019E:  BCF    03.6
019F:  RETURN
*
0557:  CLRF   77
0558:  CLRF   78
0559:  BSF    03.6
055A:  MOVF   63,W
055B:  BCF    03.0
055C:  BTFSC  64.0
055D:  ADDWF  77,F
055E:  RRF    77,F
055F:  RRF    78,F
0560:  BTFSC  64.1
0561:  ADDWF  77,F
0562:  RRF    77,F
0563:  RRF    78,F
0564:  BTFSC  64.2
0565:  ADDWF  77,F
0566:  RRF    77,F
0567:  RRF    78,F
0568:  BTFSC  64.3
0569:  ADDWF  77,F
056A:  RRF    77,F
056B:  RRF    78,F
056C:  BTFSC  64.4
056D:  ADDWF  77,F
056E:  RRF    77,F
056F:  RRF    78,F
0570:  BTFSC  64.5
0571:  ADDWF  77,F
0572:  RRF    77,F
0573:  RRF    78,F
0574:  BTFSC  64.6
0575:  ADDWF  77,F
0576:  RRF    77,F
0577:  RRF    78,F
0578:  BTFSC  64.7
0579:  ADDWF  77,F
057A:  RRF    77,F
057B:  RRF    78,F
057C:  BCF    03.6
057D:  RETURN
*
06AF:  CLRF   78
06B0:  CLRF   79
06B1:  CLRF   77
06B2:  CLRF   7A
06B3:  BSF    03.6
06B4:  MOVF   4D,W
06B5:  BTFSS  03.2
06B6:  GOTO   6BA
06B7:  MOVF   4C,W
06B8:  BTFSC  03.2
06B9:  GOTO   6D4
06BA:  MOVLW  10
06BB:  MOVWF  4E
06BC:  BCF    03.0
06BD:  RLF    4A,F
06BE:  RLF    4B,F
06BF:  RLF    77,F
06C0:  RLF    7A,F
06C1:  MOVF   4D,W
06C2:  SUBWF  7A,W
06C3:  BTFSS  03.2
06C4:  GOTO   6C7
06C5:  MOVF   4C,W
06C6:  SUBWF  77,W
06C7:  BTFSS  03.0
06C8:  GOTO   6D0
06C9:  MOVF   4C,W
06CA:  SUBWF  77,F
06CB:  BTFSS  03.0
06CC:  DECF   7A,F
06CD:  MOVF   4D,W
06CE:  SUBWF  7A,F
06CF:  BSF    03.0
06D0:  RLF    78,F
06D1:  RLF    79,F
06D2:  DECFSZ 4E,F
06D3:  GOTO   6BC
06D4:  BCF    03.6
06D5:  RETURN
*
15F5:  BSF    0A.0
15F6:  BCF    0A.1
15F7:  BSF    0A.2
15F8:  ADDLW  FC
15F9:  BTFSC  03.0
15FA:  INCF   0A,F
15FB:  MOVWF  02
15FC:  GOTO   315
15FD:  GOTO   4B2
15FE:  GOTO   3A4
15FF:  GOTO   006
1600:  GOTO   573
1601:  GOTO   5F2
1602:  GOTO   5F2
1603:  GOTO   5F2
1604:  GOTO   5F2
1605:  GOTO   5F2
1606:  GOTO   5DA
*
1F3F:  BSF    0A.0
1F40:  BSF    0A.1
1F41:  BSF    0A.2
1F42:  ADDWF  02,F
1F43:  GOTO   00A
1F44:  GOTO   04E
1F45:  GOTO   1ED
1F46:  GOTO   3D1
1F47:  GOTO   66B
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... //#device *=16 
.................... #use delay(clock=20M) 
*
07CD:  MOVLW  1D
07CE:  MOVWF  04
07CF:  BSF    03.7
07D0:  MOVF   00,W
07D1:  BTFSC  03.2
07D2:  GOTO   7E0
07D3:  MOVLW  06
07D4:  MOVWF  78
07D5:  CLRF   77
07D6:  DECFSZ 77,F
07D7:  GOTO   7D6
07D8:  DECFSZ 78,F
07D9:  GOTO   7D5
07DA:  MOVLW  7B
07DB:  MOVWF  77
07DC:  DECFSZ 77,F
07DD:  GOTO   7DC
07DE:  DECFSZ 00,F
07DF:  GOTO   7D3
07E0:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0313:  MOVLW  08
0314:  MOVWF  78
0315:  NOP
0316:  BCF    07.3
0317:  BCF    20.3
0318:  MOVF   20,W
0319:  BSF    03.5
031A:  MOVWF  07
031B:  NOP
031C:  BCF    03.5
031D:  BSF    03.6
031E:  RLF    61,F
031F:  BCF    03.6
0320:  BCF    07.4
0321:  BTFSS  03.0
0322:  GOTO   329
0323:  BSF    20.4
0324:  MOVF   20,W
0325:  BSF    03.5
0326:  MOVWF  07
0327:  GOTO   32D
0328:  BCF    03.5
0329:  BCF    20.4
032A:  MOVF   20,W
032B:  BSF    03.5
032C:  MOVWF  07
032D:  NOP
032E:  BCF    03.5
032F:  BSF    20.3
0330:  MOVF   20,W
0331:  BSF    03.5
0332:  MOVWF  07
0333:  BCF    03.5
0334:  BTFSS  07.3
0335:  GOTO   334
0336:  DECFSZ 78,F
0337:  GOTO   315
0338:  NOP
0339:  BCF    07.3
033A:  BCF    20.3
033B:  MOVF   20,W
033C:  BSF    03.5
033D:  MOVWF  07
033E:  NOP
033F:  BCF    03.5
0340:  BSF    20.4
0341:  MOVF   20,W
0342:  BSF    03.5
0343:  MOVWF  07
0344:  NOP
0345:  NOP
0346:  BCF    03.5
0347:  BSF    20.3
0348:  MOVF   20,W
0349:  BSF    03.5
034A:  MOVWF  07
034B:  BCF    03.5
034C:  BTFSS  07.3
034D:  GOTO   34C
034E:  CLRF   78
034F:  NOP
0350:  BTFSC  07.4
0351:  BSF    78.0
0352:  BCF    07.3
0353:  BCF    20.3
0354:  MOVF   20,W
0355:  BSF    03.5
0356:  MOVWF  07
0357:  BCF    03.5
0358:  BCF    07.4
0359:  BCF    20.4
035A:  MOVF   20,W
035B:  BSF    03.5
035C:  MOVWF  07
035D:  BCF    03.5
035E:  RETURN
*
04EC:  MOVLW  08
04ED:  BSF    03.6
04EE:  MOVWF  62
04EF:  MOVF   77,W
04F0:  MOVWF  63
04F1:  BCF    03.6
04F2:  BSF    20.4
04F3:  MOVF   20,W
04F4:  BSF    03.5
04F5:  MOVWF  07
04F6:  NOP
04F7:  BCF    03.5
04F8:  BSF    20.3
04F9:  MOVF   20,W
04FA:  BSF    03.5
04FB:  MOVWF  07
04FC:  BCF    03.5
04FD:  BTFSS  07.3
04FE:  GOTO   4FD
04FF:  BTFSC  07.4
0500:  BSF    03.0
0501:  BTFSS  07.4
0502:  BCF    03.0
0503:  RLF    78,F
0504:  NOP
0505:  BCF    20.3
0506:  MOVF   20,W
0507:  BSF    03.5
0508:  MOVWF  07
0509:  BCF    03.5
050A:  BCF    07.3
050B:  BSF    03.6
050C:  DECFSZ 62,F
050D:  GOTO   4F1
050E:  BCF    03.6
050F:  BSF    20.4
0510:  MOVF   20,W
0511:  BSF    03.5
0512:  MOVWF  07
0513:  NOP
0514:  BCF    03.5
0515:  BCF    07.4
0516:  BSF    03.6
0517:  MOVF   63,W
0518:  BTFSC  03.2
0519:  GOTO   521
051A:  BCF    03.6
051B:  BCF    20.4
051C:  MOVF   20,W
051D:  BSF    03.5
051E:  MOVWF  07
051F:  BCF    03.5
0520:  BSF    03.6
0521:  NOP
0522:  BCF    03.6
0523:  BSF    20.3
0524:  MOVF   20,W
0525:  BSF    03.5
0526:  MOVWF  07
0527:  BCF    03.5
0528:  BTFSS  07.3
0529:  GOTO   528
052A:  NOP
052B:  BCF    07.3
052C:  BCF    20.3
052D:  MOVF   20,W
052E:  BSF    03.5
052F:  MOVWF  07
0530:  NOP
0531:  BCF    03.5
0532:  BCF    07.4
0533:  BCF    20.4
0534:  MOVF   20,W
0535:  BSF    03.5
0536:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
057E:  BSF    03.6
057F:  MOVF   5F,W
0580:  ANDLW  0F
0581:  MOVWF  60
0582:  MOVF   5F,W
0583:  ANDLW  F0
0584:  MOVWF  77
0585:  SWAPF  77,F
0586:  MOVLW  0F
0587:  ANDWF  77,F
0588:  MOVF   77,W
0589:  MOVWF  62
058A:  MOVWF  63
058B:  MOVLW  0A
058C:  MOVWF  64
058D:  BCF    03.6
058E:  CALL   557
058F:  MOVF   78,W
0590:  BSF    03.6
0591:  ADDWF  60,W
0592:  MOVWF  78
0593:  BCF    03.6
0594:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
02F3:  BSF    03.6
02F4:  MOVF   5B,W
02F5:  BSF    03.5
02F6:  MOVWF  28
02F7:  MOVLW  0A
02F8:  MOVWF  29
02F9:  BCF    03.5
02FA:  BCF    03.6
02FB:  CALL   03D
02FC:  SWAPF  78,W
02FD:  MOVWF  77
02FE:  MOVLW  F0
02FF:  ANDWF  77,F
0300:  MOVF   77,W
0301:  ANDLW  F0
0302:  BSF    03.6
0303:  MOVWF  5C
0304:  MOVF   5B,W
0305:  BSF    03.5
0306:  MOVWF  28
0307:  MOVLW  0A
0308:  MOVWF  29
0309:  BCF    03.5
030A:  BCF    03.6
030B:  CALL   03D
030C:  MOVF   77,W
030D:  ANDLW  0F
030E:  BSF    03.6
030F:  IORWF  5C,W
0310:  MOVWF  78
0311:  BCF    03.6
0312:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
04A5:  BSF    03.6
04A6:  CLRF   60
....................     int value = 0; 
....................     I2C_start(); 
04A7:  BCF    03.6
04A8:  BSF    20.4
04A9:  MOVF   20,W
04AA:  BSF    03.5
04AB:  MOVWF  07
04AC:  NOP
04AD:  BCF    03.5
04AE:  BSF    20.3
04AF:  MOVF   20,W
04B0:  BSF    03.5
04B1:  MOVWF  07
04B2:  NOP
04B3:  BCF    03.5
04B4:  BCF    07.4
04B5:  BCF    20.4
04B6:  MOVF   20,W
04B7:  BSF    03.5
04B8:  MOVWF  07
04B9:  NOP
04BA:  BCF    03.5
04BB:  BCF    07.3
04BC:  BCF    20.3
04BD:  MOVF   20,W
04BE:  BSF    03.5
04BF:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
04C0:  MOVLW  D0
04C1:  BCF    03.5
04C2:  BSF    03.6
04C3:  MOVWF  61
04C4:  BCF    03.6
04C5:  CALL   313
....................     I2C_write(address); 
04C6:  BSF    03.6
04C7:  MOVF   5F,W
04C8:  MOVWF  61
04C9:  BCF    03.6
04CA:  CALL   313
....................     I2C_start(); 
04CB:  BSF    20.4
04CC:  MOVF   20,W
04CD:  BSF    03.5
04CE:  MOVWF  07
04CF:  NOP
04D0:  BCF    03.5
04D1:  BSF    20.3
04D2:  MOVF   20,W
04D3:  BSF    03.5
04D4:  MOVWF  07
04D5:  NOP
04D6:  BCF    03.5
04D7:  BTFSS  07.3
04D8:  GOTO   4D7
04D9:  BCF    07.4
04DA:  BCF    20.4
04DB:  MOVF   20,W
04DC:  BSF    03.5
04DD:  MOVWF  07
04DE:  NOP
04DF:  BCF    03.5
04E0:  BCF    07.3
04E1:  BCF    20.3
04E2:  MOVF   20,W
04E3:  BSF    03.5
04E4:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
04E5:  MOVLW  D1
04E6:  BCF    03.5
04E7:  BSF    03.6
04E8:  MOVWF  61
04E9:  BCF    03.6
04EA:  CALL   313
....................     value = I2C_read(0); 
04EB:  CLRF   77
*
0537:  MOVF   78,W
0538:  BCF    03.5
0539:  BSF    03.6
053A:  MOVWF  60
....................     I2C_stop(); 
053B:  BCF    03.6
053C:  BCF    20.4
053D:  MOVF   20,W
053E:  BSF    03.5
053F:  MOVWF  07
0540:  NOP
0541:  BCF    03.5
0542:  BSF    20.3
0543:  MOVF   20,W
0544:  BSF    03.5
0545:  MOVWF  07
0546:  BCF    03.5
0547:  BTFSS  07.3
0548:  GOTO   547
0549:  NOP
054A:  GOTO   54B
054B:  NOP
054C:  BSF    20.4
054D:  MOVF   20,W
054E:  BSF    03.5
054F:  MOVWF  07
0550:  NOP
....................     return value; 
0551:  BCF    03.5
0552:  BSF    03.6
0553:  MOVF   60,W
0554:  MOVWF  78
0555:  BCF    03.6
0556:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
035F:  BSF    20.4
0360:  MOVF   20,W
0361:  BSF    03.5
0362:  MOVWF  07
0363:  NOP
0364:  BCF    03.5
0365:  BSF    20.3
0366:  MOVF   20,W
0367:  BSF    03.5
0368:  MOVWF  07
0369:  NOP
036A:  BCF    03.5
036B:  BCF    07.4
036C:  BCF    20.4
036D:  MOVF   20,W
036E:  BSF    03.5
036F:  MOVWF  07
0370:  NOP
0371:  BCF    03.5
0372:  BCF    07.3
0373:  BCF    20.3
0374:  MOVF   20,W
0375:  BSF    03.5
0376:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
0377:  MOVLW  D0
0378:  BCF    03.5
0379:  BSF    03.6
037A:  MOVWF  61
037B:  BCF    03.6
037C:  CALL   313
....................     I2C_write(address); 
037D:  BSF    03.6
037E:  MOVF   5C,W
037F:  MOVWF  61
0380:  BCF    03.6
0381:  CALL   313
....................     I2C_write(value); 
0382:  BSF    03.6
0383:  MOVF   5D,W
0384:  MOVWF  61
0385:  BCF    03.6
0386:  CALL   313
....................     I2C_stop(); 
0387:  BCF    20.4
0388:  MOVF   20,W
0389:  BSF    03.5
038A:  MOVWF  07
038B:  NOP
038C:  BCF    03.5
038D:  BSF    20.3
038E:  MOVF   20,W
038F:  BSF    03.5
0390:  MOVWF  07
0391:  BCF    03.5
0392:  BTFSS  07.3
0393:  GOTO   392
0394:  NOP
0395:  GOTO   396
0396:  NOP
0397:  BSF    20.4
0398:  MOVF   20,W
0399:  BSF    03.5
039A:  MOVWF  07
039B:  NOP
039C:  BCF    03.5
039D:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
0599:  CLRF   5F
059A:  BCF    03.6
059B:  CALL   4A5
059C:  MOVF   78,W
059D:  BSF    03.6
059E:  MOVWF  5B
....................     sec = bcd_to_decimal(sec); 
059F:  MOVF   5B,W
05A0:  MOVWF  5F
05A1:  BCF    03.6
05A2:  CALL   57E
05A3:  MOVF   78,W
05A4:  BSF    03.6
05A5:  MOVWF  5B
....................     min = DS3231_Read(minuteREG); 
05A6:  MOVLW  01
05A7:  MOVWF  5F
05A8:  BCF    03.6
05A9:  CALL   4A5
05AA:  MOVF   78,W
05AB:  BSF    03.6
05AC:  MOVWF  5A
....................     min = bcd_to_decimal(min); 
05AD:  MOVF   5A,W
05AE:  MOVWF  5F
05AF:  BCF    03.6
05B0:  CALL   57E
05B1:  MOVF   78,W
05B2:  BSF    03.6
05B3:  MOVWF  5A
....................     hora = (0x3F & DS3231_Read(hourREG)); 
05B4:  MOVLW  02
05B5:  MOVWF  5F
05B6:  BCF    03.6
05B7:  CALL   4A5
05B8:  MOVF   78,W
05B9:  ANDLW  3F
05BA:  BSF    03.6
05BB:  MOVWF  59
....................     hora = bcd_to_decimal(hora); 
05BC:  MOVF   59,W
05BD:  MOVWF  5F
05BE:  BCF    03.6
05BF:  CALL   57E
05C0:  MOVF   78,W
05C1:  BSF    03.6
05C2:  MOVWF  59
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
*
0612:  MOVLW  06
0613:  MOVWF  5F
0614:  BCF    03.6
0615:  CALL   4A5
0616:  MOVF   78,W
0617:  BSF    03.6
0618:  MOVWF  51
*
089D:  MOVLW  06
089E:  MOVWF  5F
089F:  BCF    0A.3
08A0:  BCF    03.6
08A1:  CALL   4A5
08A2:  BSF    0A.3
08A3:  MOVF   78,W
08A4:  BSF    03.6
08A5:  MOVWF  30
....................     year = bcd_to_decimal(year); 
*
0619:  MOVF   51,W
061A:  MOVWF  5F
061B:  BCF    03.6
061C:  CALL   57E
061D:  MOVF   78,W
061E:  BSF    03.6
061F:  MOVWF  51
*
08A6:  MOVF   30,W
08A7:  MOVWF  5F
08A8:  BCF    0A.3
08A9:  BCF    03.6
08AA:  CALL   57E
08AB:  BSF    0A.3
08AC:  MOVF   78,W
08AD:  BSF    03.6
08AE:  MOVWF  30
....................     month = (0x1F & DS3231_Read(monthREG)); 
*
0620:  MOVLW  05
0621:  MOVWF  5F
0622:  BCF    03.6
0623:  CALL   4A5
0624:  MOVF   78,W
0625:  ANDLW  1F
0626:  BSF    03.6
0627:  MOVWF  50
*
08AF:  MOVLW  05
08B0:  MOVWF  5F
08B1:  BCF    0A.3
08B2:  BCF    03.6
08B3:  CALL   4A5
08B4:  BSF    0A.3
08B5:  MOVF   78,W
08B6:  ANDLW  1F
08B7:  BSF    03.6
08B8:  MOVWF  2F
....................     month = bcd_to_decimal(month); 
*
0628:  MOVF   50,W
0629:  MOVWF  5F
062A:  BCF    03.6
062B:  CALL   57E
062C:  MOVF   78,W
062D:  BSF    03.6
062E:  MOVWF  50
*
08B9:  MOVF   2F,W
08BA:  MOVWF  5F
08BB:  BCF    0A.3
08BC:  BCF    03.6
08BD:  CALL   57E
08BE:  BSF    0A.3
08BF:  MOVF   78,W
08C0:  BSF    03.6
08C1:  MOVWF  2F
....................     date = (0x3F & DS3231_Read(dateREG)); 
*
062F:  MOVLW  04
0630:  MOVWF  5F
0631:  BCF    03.6
0632:  CALL   4A5
0633:  MOVF   78,W
0634:  ANDLW  3F
0635:  BSF    03.6
0636:  MOVWF  4F
*
08C2:  MOVLW  04
08C3:  MOVWF  5F
08C4:  BCF    0A.3
08C5:  BCF    03.6
08C6:  CALL   4A5
08C7:  BSF    0A.3
08C8:  MOVF   78,W
08C9:  ANDLW  3F
08CA:  BSF    03.6
08CB:  MOVWF  2E
....................     date = bcd_to_decimal(date); 
*
0637:  MOVF   4F,W
0638:  MOVWF  5F
0639:  BCF    03.6
063A:  CALL   57E
063B:  MOVF   78,W
063C:  BSF    03.6
063D:  MOVWF  4F
*
08CC:  MOVF   2E,W
08CD:  MOVWF  5F
08CE:  BCF    0A.3
08CF:  BCF    03.6
08D0:  CALL   57E
08D1:  BSF    0A.3
08D2:  MOVF   78,W
08D3:  BSF    03.6
08D4:  MOVWF  2E
....................     dow = (0x07 & DS3231_Read(dayREG)); 
*
063E:  MOVLW  03
063F:  MOVWF  5F
0640:  BCF    03.6
0641:  CALL   4A5
0642:  MOVF   78,W
0643:  ANDLW  07
0644:  BSF    03.6
0645:  MOVWF  52
*
08D5:  MOVLW  03
08D6:  MOVWF  5F
08D7:  BCF    0A.3
08D8:  BCF    03.6
08D9:  CALL   4A5
08DA:  BSF    0A.3
08DB:  MOVF   78,W
08DC:  ANDLW  07
08DD:  BSF    03.6
08DE:  MOVWF  31
....................     dow = bcd_to_decimal(dow); 
*
0646:  MOVF   52,W
0647:  MOVWF  5F
0648:  BCF    03.6
0649:  CALL   57E
064A:  MOVF   78,W
064B:  BSF    03.6
064C:  MOVWF  52
*
08DF:  MOVF   31,W
08E0:  MOVWF  5F
08E1:  BCF    0A.3
08E2:  BCF    03.6
08E3:  CALL   57E
08E4:  BSF    0A.3
08E5:  MOVF   78,W
08E6:  BSF    03.6
08E7:  MOVWF  31
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
03D7:  BSF    03.6
03D8:  MOVF   5A,W
03D9:  MOVWF  5B
03DA:  BCF    03.6
03DB:  CALL   2F3
03DC:  MOVF   78,W
03DD:  BSF    03.6
03DE:  MOVWF  5B
03DF:  CLRF   5C
03E0:  MOVF   5B,W
03E1:  MOVWF  5D
03E2:  BCF    03.6
03E3:  CALL   35F
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
03E4:  BSF    03.6
03E5:  MOVF   59,W
03E6:  MOVWF  5B
03E7:  BCF    03.6
03E8:  CALL   2F3
03E9:  MOVF   78,W
03EA:  BSF    03.6
03EB:  MOVWF  5B
03EC:  MOVLW  01
03ED:  MOVWF  5C
03EE:  MOVF   5B,W
03EF:  MOVWF  5D
03F0:  BCF    03.6
03F1:  CALL   35F
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
03F2:  BSF    03.6
03F3:  MOVF   58,W
03F4:  MOVWF  5B
03F5:  BCF    03.6
03F6:  CALL   2F3
03F7:  MOVF   78,W
03F8:  ANDLW  3F
03F9:  BSF    03.6
03FA:  MOVWF  5B
03FB:  MOVLW  02
03FC:  MOVWF  5C
03FD:  MOVF   5B,W
03FE:  MOVWF  5D
03FF:  BCF    03.6
0400:  CALL   35F
0401:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
*
039E:  BSF    03.6
039F:  MOVF   54,W
03A0:  MOVWF  5B
03A1:  BCF    03.6
03A2:  CALL   2F3
03A3:  MOVF   78,W
03A4:  BSF    03.6
03A5:  MOVWF  58
03A6:  MOVLW  03
03A7:  MOVWF  5C
03A8:  MOVF   58,W
03A9:  MOVWF  5D
03AA:  BCF    03.6
03AB:  CALL   35F
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
03AC:  BSF    03.6
03AD:  MOVF   55,W
03AE:  MOVWF  5B
03AF:  BCF    03.6
03B0:  CALL   2F3
03B1:  MOVF   78,W
03B2:  BSF    03.6
03B3:  MOVWF  58
03B4:  MOVLW  04
03B5:  MOVWF  5C
03B6:  MOVF   58,W
03B7:  MOVWF  5D
03B8:  BCF    03.6
03B9:  CALL   35F
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
03BA:  BSF    03.6
03BB:  MOVF   56,W
03BC:  MOVWF  5B
03BD:  BCF    03.6
03BE:  CALL   2F3
03BF:  MOVF   78,W
03C0:  BSF    03.6
03C1:  MOVWF  58
03C2:  MOVLW  05
03C3:  MOVWF  5C
03C4:  MOVF   58,W
03C5:  MOVWF  5D
03C6:  BCF    03.6
03C7:  CALL   35F
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
03C8:  BSF    03.6
03C9:  MOVF   57,W
03CA:  MOVWF  5B
03CB:  BCF    03.6
03CC:  CALL   2F3
03CD:  MOVF   78,W
03CE:  BSF    03.6
03CF:  MOVWF  58
03D0:  MOVLW  06
03D1:  MOVWF  5C
03D2:  MOVF   58,W
03D3:  MOVWF  5D
03D4:  BCF    03.6
03D5:  CALL   35F
03D6:  RETURN
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
06DD:  CLRF   4D
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
06DE:  CLRF   4D
06DF:  MOVF   4C,W
06E0:  SUBWF  4D,W
06E1:  BTFSC  03.0
06E2:  GOTO   6EC
....................         array[i] = 0; 
06E3:  MOVF   4D,W
06E4:  ADDWF  4A,W
06E5:  MOVWF  04
06E6:  BCF    03.7
06E7:  BTFSC  4B.0
06E8:  BSF    03.7
06E9:  CLRF   00
06EA:  INCF   4D,F
06EB:  GOTO   6DF
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
06D6:  BSF    03.6
06D7:  MOVF   46,W
06D8:  MOVWF  4B
06D9:  MOVF   45,W
06DA:  MOVWF  4A
06DB:  MOVF   47,W
06DC:  MOVWF  4C
....................  
....................     int index = 0; 
*
06EC:  CLRF   48
....................     while (number > 0) { 
06ED:  MOVF   43,F
06EE:  BTFSS  03.2
06EF:  GOTO   6F3
06F0:  MOVF   44,F
06F1:  BTFSC  03.2
06F2:  GOTO   717
....................         int digit = number % 10; 
06F3:  MOVF   44,W
06F4:  MOVWF  4B
06F5:  MOVF   43,W
06F6:  MOVWF  4A
06F7:  CLRF   4D
06F8:  MOVLW  0A
06F9:  MOVWF  4C
06FA:  BCF    03.6
06FB:  CALL   6AF
06FC:  MOVF   77,W
06FD:  BSF    03.6
06FE:  MOVWF  49
....................         digits[index] = digit; 
06FF:  MOVF   48,W
0700:  ADDWF  45,W
0701:  MOVWF  04
0702:  BCF    03.7
0703:  BTFSC  46.0
0704:  BSF    03.7
0705:  MOVF   49,W
0706:  MOVWF  00
....................         index++; 
0707:  INCF   48,F
....................         number /= 10; 
0708:  MOVF   44,W
0709:  MOVWF  4B
070A:  MOVF   43,W
070B:  MOVWF  4A
070C:  CLRF   4D
070D:  MOVLW  0A
070E:  MOVWF  4C
070F:  BCF    03.6
0710:  CALL   6AF
0711:  MOVF   79,W
0712:  BSF    03.6
0713:  MOVWF  44
0714:  MOVF   78,W
0715:  MOVWF  43
0716:  GOTO   6ED
....................     } 
0717:  BCF    03.6
0718:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
07C3:  BSF    03.5
07C4:  BCF    03.6
07C5:  BCF    05.1
07C6:  BCF    03.5
07C7:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
07C8:  BSF    03.5
07C9:  BCF    05.1
07CA:  BCF    03.5
07CB:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0786:  MOVLW  01
0787:  BSF    03.6
0788:  MOVWF  39
0789:  CLRF   3A
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
078A:  BSF    03.5
078B:  BCF    03.6
078C:  BCF    05.3
078D:  BCF    03.5
078E:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
078F:  BSF    03.5
0790:  BCF    05.1
0791:  BCF    03.5
0792:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
0793:  BSF    03.6
0794:  CLRF   3A
0795:  MOVF   38,W
0796:  SUBWF  3A,W
0797:  BTFSC  03.0
0798:  GOTO   7C3
....................         int character = charactersArray[j]; 
0799:  MOVF   3A,W
079A:  ADDWF  36,W
079B:  MOVWF  04
079C:  BCF    03.7
079D:  BTFSC  37.0
079E:  BSF    03.7
079F:  MOVF   00,W
07A0:  MOVWF  3B
....................  
....................         for (i = 1; i <= 8; i++) { 
07A1:  MOVLW  01
07A2:  MOVWF  39
07A3:  MOVF   39,W
07A4:  SUBLW  08
07A5:  BTFSS  03.0
07A6:  GOTO   7C1
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
07A7:  BTFSC  3B.0
07A8:  GOTO   7AD
07A9:  BCF    03.6
07AA:  BCF    05.0
07AB:  GOTO   7AF
07AC:  BSF    03.6
07AD:  BCF    03.6
07AE:  BSF    05.0
07AF:  BSF    03.5
07B0:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
07B1:  BCF    03.0
07B2:  BCF    03.5
07B3:  BSF    03.6
07B4:  RRF    3B,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
07B5:  BSF    03.5
07B6:  BCF    03.6
07B7:  BCF    05.3
07B8:  BCF    03.5
07B9:  BSF    05.3
....................             output_low(PIN_CLOCK); 
07BA:  BSF    03.5
07BB:  BCF    05.3
07BC:  BCF    03.5
07BD:  BCF    05.3
07BE:  BSF    03.6
07BF:  INCF   39,F
07C0:  GOTO   7A3
....................         } 
07C1:  INCF   3A,F
07C2:  GOTO   795
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
07CC:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
0841:  CLRF   39
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
0842:  CLRF   39
0843:  MOVF   38,W
0844:  SUBWF  39,W
0845:  BTFSC  03.0
0846:  GOTO   068
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0847:  MOVF   39,W
0848:  ADDWF  36,W
0849:  MOVWF  78
084A:  MOVF   37,W
084B:  MOVWF  7A
084C:  BTFSC  03.0
084D:  INCF   7A,F
084E:  MOVF   78,W
084F:  MOVWF  3A
0850:  MOVF   7A,W
0851:  MOVWF  3B
0852:  MOVF   39,W
0853:  ADDWF  36,W
0854:  MOVWF  04
0855:  BCF    03.7
0856:  BTFSC  37.0
0857:  BSF    03.7
0858:  MOVF   00,W
0859:  BCF    0A.3
085A:  BCF    03.6
085B:  CALL   004
085C:  BSF    0A.3
085D:  MOVWF  78
085E:  BSF    03.6
085F:  MOVF   3A,W
0860:  MOVWF  04
0861:  BCF    03.7
0862:  BTFSC  3B.0
0863:  BSF    03.7
0864:  MOVF   78,W
0865:  MOVWF  00
0866:  INCF   39,F
0867:  GOTO   043
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
080A:  CLRF   39
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
080B:  CLRF   39
080C:  MOVF   38,W
080D:  SUBWF  39,W
080E:  BTFSC  03.0
080F:  GOTO   03A
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0810:  MOVF   39,W
0811:  ADDWF  36,W
0812:  MOVWF  78
0813:  MOVF   37,W
0814:  MOVWF  7A
0815:  BTFSC  03.0
0816:  INCF   7A,F
0817:  MOVF   78,W
0818:  MOVWF  3A
0819:  MOVF   7A,W
081A:  MOVWF  3B
081B:  MOVF   39,W
081C:  ADDWF  36,W
081D:  MOVWF  04
081E:  BCF    03.7
081F:  BTFSC  37.0
0820:  BSF    03.7
0821:  MOVF   00,W
0822:  BCF    0A.3
0823:  BCF    03.6
0824:  CALL   004
0825:  BSF    0A.3
0826:  MOVWF  78
0827:  BSF    03.6
0828:  MOVF   3A,W
0829:  MOVWF  04
082A:  BCF    03.7
082B:  BTFSC  3B.0
082C:  BSF    03.7
082D:  MOVF   78,W
082E:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
082F:  MOVF   39,W
0830:  ADDWF  36,W
0831:  MOVWF  04
0832:  BCF    03.7
0833:  BTFSC  37.0
0834:  BSF    03.7
0835:  MOVF   00,W
0836:  IORLW  08
0837:  MOVWF  00
0838:  INCF   39,F
0839:  GOTO   00C
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
0800:  BSF    03.6
0801:  MOVF   35,F
0802:  BTFSC  03.2
0803:  GOTO   03B
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
0804:  MOVF   33,W
0805:  MOVWF  37
0806:  MOVF   32,W
0807:  MOVWF  36
0808:  MOVF   34,W
0809:  MOVWF  38
....................     } else { 
*
083A:  GOTO   068
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
083B:  MOVF   33,W
083C:  MOVWF  37
083D:  MOVF   32,W
083E:  MOVWF  36
083F:  MOVF   34,W
0840:  MOVWF  38
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
0868:  MOVF   33,W
0869:  MOVWF  37
086A:  MOVF   32,W
086B:  MOVWF  36
086C:  MOVF   34,W
086D:  MOVWF  38
086E:  BCF    0A.3
086F:  BCF    03.6
0870:  CALL   786
0871:  BSF    0A.3
0872:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
158B:  BSF    03.6
158C:  CLRF   1C
158D:  CLRF   1D
158E:  CLRF   1E
158F:  CLRF   1F
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
1590:  MOVLW  01
1591:  MOVWF  1C
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
1592:  MOVLW  09
1593:  MOVWF  1D
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
1594:  MOVLW  01
1595:  MOVWF  1E
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
1596:  MOVWF  1F
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
1597:  MOVWF  37
1598:  MOVLW  1C
1599:  MOVWF  36
159A:  MOVLW  04
159B:  MOVWF  38
159C:  BCF    0A.4
159D:  BCF    03.6
159E:  CALL   786
159F:  BSF    0A.4
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
*
07E1:  BSF    03.6
07E2:  CLRF   1C
07E3:  CLRF   1D
07E4:  CLRF   1E
07E5:  CLRF   1F
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
07E6:  MOVLW  01
07E7:  MOVWF  37
07E8:  MOVLW  1C
07E9:  MOVWF  36
07EA:  MOVLW  04
07EB:  MOVWF  38
07EC:  BCF    03.6
07ED:  CALL   786
07EE:  RETURN
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... #define UPPER_BOUND_HOURS 23 
.................... #define UPPER_BOUND_MINUTES 59 
.................... #define UPPER_BOUND_SECONDS 59 
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     Format format; 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     //    char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time Time_new(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
05C9:  MOVF   5C,W
05CA:  MOVWF  60
....................     time.minute = minute; 
05CB:  MOVF   5D,W
05CC:  MOVWF  61
....................     time.second = second; 
05CD:  MOVF   5E,W
05CE:  MOVWF  62
....................     return time; 
05CF:  MOVF   5F,W
05D0:  MOVWF  77
05D1:  MOVF   60,W
05D2:  MOVWF  78
05D3:  MOVF   61,W
05D4:  MOVWF  79
05D5:  MOVF   62,W
05D6:  MOVWF  7A
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
0595:  BSF    03.6
0596:  CLRF   59
0597:  CLRF   5A
0598:  CLRF   5B
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = Time_new(currentHour, currentMinute, currentSecond); 
*
05C3:  MOVF   59,W
05C4:  MOVWF  5C
05C5:  MOVF   5A,W
05C6:  MOVWF  5D
05C7:  MOVF   5B,W
05C8:  MOVWF  5E
*
05D7:  MOVF   7A,W
05D8:  MOVWF  58
05D9:  MOVF   79,W
05DA:  MOVWF  57
05DB:  MOVF   78,W
05DC:  MOVWF  56
05DD:  MOVF   77,W
05DE:  MOVWF  55
....................  
....................     return currentTime; 
05DF:  MOVF   55,W
05E0:  MOVWF  77
05E1:  MOVF   56,W
05E2:  MOVWF  78
05E3:  MOVF   57,W
05E4:  MOVWF  79
05E5:  MOVF   58,W
05E6:  MOVWF  7A
05E7:  BCF    03.6
05E8:  RETURN
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     //    newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     //    write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
0719:  MOVLW  01
071A:  BSF    03.6
071B:  ADDWF  38,W
071C:  MOVWF  04
071D:  BCF    03.7
071E:  BTFSC  39.0
071F:  BSF    03.7
0720:  MOVF   00,W
0721:  MOVWF  41
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
0722:  MOVF   3A,F
0723:  BTFSC  03.2
0724:  GOTO   74E
....................         if (timePtr->format == FORMAT_12) { 
0725:  MOVF   38,W
0726:  MOVWF  04
0727:  BCF    03.7
0728:  BTFSC  39.0
0729:  BSF    03.7
072A:  MOVF   00,W
072B:  ANDLW  01
072C:  SUBLW  01
072D:  BTFSS  03.2
072E:  GOTO   74E
....................             if (timePtr->hour == 0) { 
072F:  MOVLW  01
0730:  ADDWF  38,W
0731:  MOVWF  04
0732:  BCF    03.7
0733:  BTFSC  39.0
0734:  BSF    03.7
0735:  MOVF   00,F
0736:  BTFSS  03.2
0737:  GOTO   73B
....................                 hour = 12; 
0738:  MOVLW  0C
0739:  MOVWF  41
....................             } else if (timePtr->hour > 12) { 
073A:  GOTO   74E
073B:  MOVLW  01
073C:  ADDWF  38,W
073D:  MOVWF  04
073E:  BCF    03.7
073F:  BTFSC  39.0
0740:  BSF    03.7
0741:  MOVF   00,W
0742:  SUBLW  0C
0743:  BTFSC  03.0
0744:  GOTO   74E
....................                 hour = timePtr->hour - 12; 
0745:  MOVLW  01
0746:  ADDWF  38,W
0747:  MOVWF  04
0748:  BCF    03.7
0749:  BTFSC  39.0
074A:  BSF    03.7
074B:  MOVLW  0C
074C:  SUBWF  00,W
074D:  MOVWF  41
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             Array_getArraySize(newTimeInDigits.hour) 
....................             ); 
074E:  CLRF   44
074F:  MOVF   41,W
0750:  MOVWF  43
0751:  MOVLW  01
0752:  MOVWF  46
0753:  MOVLW  3B
0754:  MOVWF  45
0755:  MOVLW  02
0756:  MOVWF  47
0757:  BCF    03.6
0758:  CALL   6D6
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             Array_getArraySize(newTimeInDigits.minute) 
....................             ); 
0759:  MOVLW  02
075A:  BSF    03.6
075B:  ADDWF  38,W
075C:  MOVWF  04
075D:  BCF    03.7
075E:  BTFSC  39.0
075F:  BSF    03.7
0760:  MOVF   00,W
0761:  MOVWF  42
0762:  CLRF   44
0763:  MOVF   42,W
0764:  MOVWF  43
0765:  MOVLW  01
0766:  MOVWF  46
0767:  MOVLW  3D
0768:  MOVWF  45
0769:  MOVLW  02
076A:  MOVWF  47
076B:  BCF    03.6
076C:  CALL   6D6
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             Array_getArraySize(newTimeInDigits.second) 
....................             ); 
076D:  MOVLW  03
076E:  BSF    03.6
076F:  ADDWF  38,W
0770:  MOVWF  04
0771:  BCF    03.7
0772:  BTFSC  39.0
0773:  BSF    03.7
0774:  MOVF   00,W
0775:  MOVWF  42
0776:  CLRF   44
0777:  MOVF   42,W
0778:  MOVWF  43
0779:  MOVLW  01
077A:  MOVWF  46
077B:  MOVLW  3F
077C:  MOVWF  45
077D:  MOVLW  02
077E:  MOVWF  47
077F:  BCF    03.6
0780:  CALL   6D6
....................  
....................     return newTimeInDigits; 
0781:  MOVLW  3B
0782:  MOVWF  78
0783:  MOVLW  01
0784:  MOVWF  79
0785:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
1418:  MOVLW  01
1419:  ADDWF  24,W
141A:  MOVWF  04
141B:  BCF    03.7
141C:  BTFSC  25.0
141D:  BSF    03.7
141E:  MOVF   00,F
141F:  BTFSS  03.2
1420:  GOTO   433
1421:  MOVLW  02
1422:  ADDWF  24,W
1423:  MOVWF  04
1424:  BCF    03.7
1425:  BTFSC  25.0
1426:  BSF    03.7
1427:  MOVF   00,F
1428:  BTFSS  03.2
1429:  GOTO   433
142A:  MOVLW  03
142B:  ADDWF  24,W
142C:  MOVWF  04
142D:  BCF    03.7
142E:  BTFSC  25.0
142F:  BSF    03.7
1430:  MOVF   00,F
1431:  BTFSC  03.2
1432:  GOTO   435
1433:  MOVLW  00
1434:  GOTO   436
1435:  MOVLW  01
1436:  MOVWF  78
.................... } 
....................  
.................... Time Time_getInitialTime() { 
....................     return Time_new(0, 0, 0); 
.................... } 
....................  
.................... Time Time_getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour % (UPPER_BOUND_HOURS + 1), 
....................             timePtr->minute % (UPPER_BOUND_MINUTES + 1), 
....................             timePtr->second % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
*
0469:  MOVLW  01
046A:  ADDWF  53,W
046B:  MOVWF  04
046C:  BCF    03.7
046D:  BTFSC  54.0
046E:  BSF    03.7
046F:  MOVF   00,W
0470:  BSF    03.5
0471:  MOVWF  28
0472:  MOVLW  18
0473:  MOVWF  29
0474:  BCF    03.5
0475:  BCF    03.6
0476:  CALL   03D
0477:  MOVF   77,W
0478:  BSF    03.6
0479:  MOVWF  55
047A:  MOVLW  02
047B:  ADDWF  53,W
047C:  MOVWF  04
047D:  BCF    03.7
047E:  BTFSC  54.0
047F:  BSF    03.7
0480:  MOVF   00,W
0481:  BSF    03.5
0482:  MOVWF  28
0483:  MOVLW  3C
0484:  MOVWF  29
0485:  BCF    03.5
0486:  BCF    03.6
0487:  CALL   03D
0488:  MOVF   77,W
0489:  BSF    03.6
048A:  MOVWF  56
048B:  MOVLW  03
048C:  ADDWF  53,W
048D:  MOVWF  04
048E:  BCF    03.7
048F:  BTFSC  54.0
0490:  BSF    03.7
0491:  MOVF   00,W
0492:  BSF    03.5
0493:  MOVWF  28
0494:  MOVLW  3C
0495:  MOVWF  29
0496:  BCF    03.5
0497:  BCF    03.6
0498:  CALL   03D
0499:  MOVF   77,W
049A:  BSF    03.6
049B:  MOVWF  57
049C:  MOVF   55,W
049D:  MOVWF  58
049E:  MOVF   56,W
049F:  MOVWF  59
04A0:  MOVF   57,W
04A1:  MOVWF  5A
04A2:  BCF    03.6
04A3:  CALL   3D7
.................... } 
....................  
.................... void Time_setClockTime(int hour, int minutes, int seconds) { 
....................     setTime( 
....................             hour % (UPPER_BOUND_HOURS + 1), 
....................             minutes % (UPPER_BOUND_MINUTES + 1), 
....................             seconds % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
0084:  MOVLW  01
0085:  BSF    03.5
0086:  BSF    03.6
0087:  ADDWF  12,W
0088:  MOVWF  04
0089:  BCF    03.7
008A:  BTFSC  13.0
008B:  BSF    03.7
008C:  MOVF   00,W
008D:  CLRF   23
008E:  CLRF   22
008F:  CLRF   21
0090:  MOVWF  20
0091:  CLRF   25
0092:  MOVF   04,W
0093:  MOVWF  24
0094:  BCF    25.0
0095:  BTFSC  03.7
0096:  BSF    25.0
0097:  MOVF   23,W
0098:  MOVWF  29
0099:  MOVF   22,W
009A:  MOVWF  28
009B:  MOVF   21,W
009C:  MOVWF  27
009D:  MOVF   20,W
009E:  MOVWF  26
009F:  CLRF   2D
00A0:  CLRF   2C
00A1:  MOVLW  0E
00A2:  MOVWF  2B
00A3:  MOVLW  10
00A4:  MOVWF  2A
00A5:  BCF    03.5
00A6:  BCF    03.6
00A7:  CALL   056
00A8:  BSF    03.5
00A9:  BSF    03.6
00AA:  MOVF   24,W
00AB:  MOVWF  04
00AC:  BCF    03.7
00AD:  BTFSC  25.0
00AE:  BSF    03.7
00AF:  MOVF   7A,W
00B0:  MOVWF  17
00B1:  MOVF   79,W
00B2:  MOVWF  16
00B3:  MOVF   78,W
00B4:  MOVWF  15
00B5:  MOVF   77,W
00B6:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
00B7:  MOVLW  02
00B8:  ADDWF  12,W
00B9:  MOVWF  04
00BA:  BCF    03.7
00BB:  BTFSC  13.0
00BC:  BSF    03.7
00BD:  MOVF   00,W
00BE:  CLRF   23
00BF:  CLRF   22
00C0:  CLRF   21
00C1:  MOVWF  20
00C2:  CLRF   25
00C3:  MOVF   04,W
00C4:  MOVWF  24
00C5:  BCF    25.0
00C6:  BTFSC  03.7
00C7:  BSF    25.0
00C8:  MOVF   23,W
00C9:  MOVWF  29
00CA:  MOVF   22,W
00CB:  MOVWF  28
00CC:  MOVF   21,W
00CD:  MOVWF  27
00CE:  MOVF   20,W
00CF:  MOVWF  26
00D0:  CLRF   2D
00D1:  CLRF   2C
00D2:  CLRF   2B
00D3:  MOVLW  3C
00D4:  MOVWF  2A
00D5:  BCF    03.5
00D6:  BCF    03.6
00D7:  CALL   056
00D8:  BSF    03.5
00D9:  BSF    03.6
00DA:  MOVF   24,W
00DB:  MOVWF  04
00DC:  BCF    03.7
00DD:  BTFSC  25.0
00DE:  BSF    03.7
00DF:  MOVF   7A,W
00E0:  MOVWF  1B
00E1:  MOVF   79,W
00E2:  MOVWF  1A
00E3:  MOVF   78,W
00E4:  MOVWF  19
00E5:  MOVF   77,W
00E6:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
00E7:  MOVF   18,W
00E8:  ADDWF  14,W
00E9:  MOVWF  20
00EA:  MOVF   15,W
00EB:  MOVWF  21
00EC:  MOVF   19,W
00ED:  BTFSC  03.0
00EE:  INCFSZ 19,W
00EF:  ADDWF  21,F
00F0:  MOVF   16,W
00F1:  MOVWF  22
00F2:  MOVF   1A,W
00F3:  BTFSC  03.0
00F4:  INCFSZ 1A,W
00F5:  ADDWF  22,F
00F6:  MOVF   17,W
00F7:  MOVWF  23
00F8:  MOVF   1B,W
00F9:  BTFSC  03.0
00FA:  INCFSZ 1B,W
00FB:  ADDWF  23,F
00FC:  MOVLW  03
00FD:  ADDWF  12,W
00FE:  MOVWF  04
00FF:  BCF    03.7
0100:  BTFSC  13.0
0101:  BSF    03.7
0102:  MOVF   00,W
0103:  ADDWF  20,W
0104:  MOVWF  1C
0105:  MOVF   21,W
0106:  MOVWF  1D
0107:  MOVLW  00
0108:  BTFSC  03.0
0109:  MOVLW  01
010A:  ADDWF  1D,F
010B:  MOVF   22,W
010C:  MOVWF  1E
010D:  MOVLW  00
010E:  BTFSC  03.0
010F:  MOVLW  01
0110:  ADDWF  1E,F
0111:  MOVF   23,W
0112:  MOVWF  1F
0113:  MOVLW  00
0114:  BTFSC  03.0
0115:  MOVLW  01
0116:  ADDWF  1F,F
....................  
....................     return seconds; 
0117:  MOVF   1C,W
0118:  MOVWF  77
0119:  MOVF   1D,W
011A:  MOVWF  78
011B:  MOVF   1E,W
011C:  MOVWF  79
011D:  MOVF   1F,W
011E:  MOVWF  7A
011F:  BCF    03.5
0120:  BCF    03.6
0121:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07EF:  BSF    03.6
07F0:  CLRF   58
07F1:  CLRF   59
07F2:  CLRF   5A
07F3:  BCF    03.6
07F4:  CALL   3D7
07F5:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void Time_saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int Time_getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... void Time_showHoursMinutesRtc(BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
088C:  CLRF   20
088D:  CLRF   21
088E:  CLRF   22
088F:  CLRF   23
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0890:  BCF    0A.3
0891:  BCF    03.6
0892:  CALL   595
0893:  BSF    0A.3
0894:  MOVF   7A,W
0895:  BSF    03.6
0896:  MOVWF  2D
0897:  MOVF   79,W
0898:  MOVWF  2C
0899:  MOVF   78,W
089A:  MOVWF  2B
089B:  MOVF   77,W
089C:  MOVWF  2A
....................  
....................     int dayOfMonth; 
....................     int month; 
....................     int year; 
....................     int dayOfWeek; 
....................  
....................     DS3231_get_Date(dayOfMonth, month, year, dayOfWeek); 
....................     currentTime.hour += ((dayOfMonth - 1) % 5) * 24;  
*
08E8:  MOVLW  01
08E9:  SUBWF  2E,W
08EA:  MOVWF  33
08EB:  BSF    03.5
08EC:  MOVWF  28
08ED:  MOVLW  05
08EE:  MOVWF  29
08EF:  BCF    0A.3
08F0:  BCF    03.5
08F1:  BCF    03.6
08F2:  CALL   03D
08F3:  BSF    0A.3
08F4:  MOVF   77,W
08F5:  BSF    03.6
08F6:  MOVWF  63
08F7:  MOVLW  18
08F8:  MOVWF  64
08F9:  BCF    0A.3
08FA:  BCF    03.6
08FB:  CALL   557
08FC:  BSF    0A.3
08FD:  MOVF   78,W
08FE:  BSF    03.6
08FF:  ADDWF  2B,F
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
0900:  MOVLW  01
0901:  MOVWF  39
0902:  MOVLW  2A
0903:  MOVWF  38
0904:  CLRF   3A
0905:  BCF    0A.3
0906:  BCF    03.6
0907:  CALL   719
0908:  BSF    0A.3
0909:  MOVF   79,W
090A:  MOVWF  7A
090B:  MOVF   78,W
090C:  BSF    03.6
090D:  MOVWF  32
090E:  MOVF   7A,W
090F:  MOVWF  33
0910:  MOVLW  01
0911:  MOVWF  35
0912:  MOVLW  24
0913:  MOVWF  34
0914:  MOVLW  06
0915:  MOVWF  78
0916:  MOVF   32,W
0917:  MOVWF  04
0918:  BCF    03.7
0919:  BTFSC  33.0
091A:  BSF    03.7
091B:  MOVF   00,W
091C:  MOVWF  77
091D:  MOVF   34,W
091E:  MOVWF  04
091F:  BCF    03.7
0920:  BTFSC  35.0
0921:  BSF    03.7
0922:  MOVF   77,W
0923:  MOVWF  00
0924:  INCF   34,F
0925:  BTFSC  03.2
0926:  INCF   35,F
0927:  INCF   32,F
0928:  BTFSC  03.2
0929:  INCF   33,F
092A:  DECFSZ 78,F
092B:  GOTO   116
....................     timeToSend[0] = timeInDigits.minute[0]; 
092C:  MOVF   26,W
092D:  MOVWF  20
....................     timeToSend[1] = timeInDigits.minute[1]; 
092E:  MOVF   27,W
092F:  MOVWF  21
....................     timeToSend[2] = timeInDigits.hour[0]; 
0930:  MOVF   24,W
0931:  MOVWF  22
....................     timeToSend[3] = timeInDigits.hour[1]; 
0932:  MOVF   25,W
0933:  MOVWF  23
....................  
....................     if (blink) { 
0934:  MOVF   1F,F
0935:  BTFSC  03.2
0936:  GOTO   13B
....................         blink = currentTime.second % 2; 
0937:  MOVF   2D,W
0938:  ANDLW  01
0939:  MOVWF  1F
....................     } else { 
093A:  GOTO   13D
....................         blink = TRUE; 
093B:  MOVLW  01
093C:  MOVWF  1F
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
093D:  MOVLW  01
093E:  MOVWF  33
093F:  MOVLW  20
0940:  MOVWF  32
0941:  MOVLW  04
0942:  MOVWF  34
0943:  MOVF   1F,W
0944:  MOVWF  35
0945:  BCF    03.6
0946:  CALL   000
.................... } 
....................  
.................... void Time_showMinutesSecondsRtc(void) { 
....................     int timeToSend[4] = {0}; 
*
0954:  CLRF   1F
0955:  CLRF   20
0956:  CLRF   21
0957:  CLRF   22
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0958:  BCF    0A.3
0959:  BCF    03.6
095A:  CALL   595
095B:  BSF    0A.3
095C:  MOVF   7A,W
095D:  BSF    03.6
095E:  MOVWF  2C
095F:  MOVF   79,W
0960:  MOVWF  2B
0961:  MOVF   78,W
0962:  MOVWF  2A
0963:  MOVF   77,W
0964:  MOVWF  29
....................     currentTime.minute = (currentTime.minute + currentTime.hour * 60) % 100; 
0965:  MOVF   2A,W
0966:  MOVWF  63
0967:  MOVLW  3C
0968:  MOVWF  64
0969:  BCF    0A.3
096A:  BCF    03.6
096B:  CALL   557
096C:  BSF    0A.3
096D:  MOVF   78,W
096E:  BSF    03.6
096F:  ADDWF  2B,W
0970:  MOVWF  2E
0971:  BSF    03.5
0972:  MOVWF  28
0973:  MOVLW  64
0974:  MOVWF  29
0975:  BCF    0A.3
0976:  BCF    03.5
0977:  BCF    03.6
0978:  CALL   03D
0979:  BSF    0A.3
097A:  MOVF   77,W
097B:  BSF    03.6
097C:  MOVWF  2B
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
097D:  MOVLW  01
097E:  MOVWF  39
097F:  MOVLW  29
0980:  MOVWF  38
0981:  CLRF   3A
0982:  BCF    0A.3
0983:  BCF    03.6
0984:  CALL   719
0985:  BSF    0A.3
0986:  MOVF   79,W
0987:  MOVWF  7A
0988:  MOVF   78,W
0989:  BSF    03.6
098A:  MOVWF  2D
098B:  MOVF   7A,W
098C:  MOVWF  2E
098D:  MOVLW  01
098E:  MOVWF  30
098F:  MOVLW  23
0990:  MOVWF  2F
0991:  MOVLW  06
0992:  MOVWF  78
0993:  MOVF   2D,W
0994:  MOVWF  04
0995:  BCF    03.7
0996:  BTFSC  2E.0
0997:  BSF    03.7
0998:  MOVF   00,W
0999:  MOVWF  77
099A:  MOVF   2F,W
099B:  MOVWF  04
099C:  BCF    03.7
099D:  BTFSC  30.0
099E:  BSF    03.7
099F:  MOVF   77,W
09A0:  MOVWF  00
09A1:  INCF   2F,F
09A2:  BTFSC  03.2
09A3:  INCF   30,F
09A4:  INCF   2D,F
09A5:  BTFSC  03.2
09A6:  INCF   2E,F
09A7:  DECFSZ 78,F
09A8:  GOTO   193
....................     timeToSend[0] = timeInDigits.second[0]; 
09A9:  MOVF   27,W
09AA:  MOVWF  1F
....................     timeToSend[1] = timeInDigits.second[1]; 
09AB:  MOVF   28,W
09AC:  MOVWF  20
....................     timeToSend[2] = timeInDigits.minute[0]; 
09AD:  MOVF   25,W
09AE:  MOVWF  21
....................     timeToSend[3] = timeInDigits.minute[1]; 
09AF:  MOVF   26,W
09B0:  MOVWF  22
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
09B1:  MOVLW  01
09B2:  MOVWF  33
09B3:  MOVLW  1F
09B4:  MOVWF  32
09B5:  MOVLW  04
09B6:  MOVWF  34
09B7:  MOVLW  01
09B8:  MOVWF  35
09B9:  BCF    03.6
09BA:  CALL   000
09BB:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time alarmTime; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
.................... } Timer; 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
01A0:  MOVLW  04
01A1:  BSF    03.6
01A2:  ADDWF  55,W
01A3:  MOVWF  78
01A4:  MOVF   56,W
01A5:  MOVWF  7A
01A6:  BTFSC  03.0
01A7:  INCF   7A,F
01A8:  MOVF   78,W
01A9:  BSF    03.5
01AA:  MOVWF  10
01AB:  MOVF   7A,W
01AC:  MOVWF  11
01AD:  MOVWF  13
01AE:  MOVF   10,W
01AF:  MOVWF  12
01B0:  BCF    03.5
01B1:  BCF    03.6
01B2:  CALL   084
01B3:  MOVF   7A,W
01B4:  BSF    03.6
01B5:  MOVWF  5A
01B6:  MOVF   79,W
01B7:  MOVWF  59
01B8:  MOVF   78,W
01B9:  MOVWF  58
01BA:  MOVF   77,W
01BB:  MOVWF  57
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
01BC:  MOVLW  08
01BD:  ADDWF  55,W
01BE:  MOVWF  78
01BF:  MOVF   56,W
01C0:  MOVWF  7A
01C1:  BTFSC  03.0
01C2:  INCF   7A,F
01C3:  MOVF   78,W
01C4:  BSF    03.5
01C5:  MOVWF  10
01C6:  MOVF   7A,W
01C7:  MOVWF  11
01C8:  MOVWF  13
01C9:  MOVF   10,W
01CA:  MOVWF  12
01CB:  BCF    03.5
01CC:  BCF    03.6
01CD:  CALL   084
01CE:  MOVF   7A,W
01CF:  BSF    03.6
01D0:  MOVWF  5E
01D1:  MOVF   79,W
01D2:  MOVWF  5D
01D3:  MOVF   78,W
01D4:  MOVWF  5C
01D5:  MOVF   77,W
01D6:  MOVWF  5B
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
01D7:  MOVF   57,W
01D8:  SUBWF  5B,W
01D9:  MOVWF  5F
01DA:  MOVF   5C,W
01DB:  MOVWF  60
01DC:  MOVF   58,W
01DD:  BTFSS  03.0
01DE:  INCFSZ 58,W
01DF:  SUBWF  60,F
01E0:  MOVF   5D,W
01E1:  MOVWF  61
01E2:  MOVF   59,W
01E3:  BTFSS  03.0
01E4:  INCFSZ 59,W
01E5:  SUBWF  61,F
01E6:  MOVF   5E,W
01E7:  MOVWF  62
01E8:  MOVF   5A,W
01E9:  BTFSS  03.0
01EA:  INCFSZ 5A,W
01EB:  SUBWF  62,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
01EC:  BTFSS  62.7
01ED:  GOTO   1F3
01EE:  CLRF   77
01EF:  CLRF   78
01F0:  CLRF   79
01F1:  CLRF   7A
01F2:  GOTO   1FB
01F3:  MOVF   5F,W
01F4:  MOVWF  77
01F5:  MOVF   60,W
01F6:  MOVWF  78
01F7:  MOVF   61,W
01F8:  MOVWF  79
01F9:  MOVF   62,W
01FA:  MOVWF  7A
01FB:  MOVF   7A,W
01FC:  MOVWF  62
01FD:  MOVF   79,W
01FE:  MOVWF  61
01FF:  MOVF   78,W
0200:  MOVWF  60
0201:  MOVF   77,W
0202:  MOVWF  5F
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
0203:  BCF    03.1
0204:  MOVF   62,W
0205:  BSF    03.5
0206:  MOVWF  25
0207:  BCF    03.5
0208:  MOVF   61,W
0209:  BSF    03.5
020A:  MOVWF  24
020B:  BCF    03.5
020C:  MOVF   60,W
020D:  BSF    03.5
020E:  MOVWF  23
020F:  BCF    03.5
0210:  MOVF   5F,W
0211:  BSF    03.5
0212:  MOVWF  22
0213:  CLRF   29
0214:  CLRF   28
0215:  MOVLW  0E
0216:  MOVWF  27
0217:  MOVLW  10
0218:  MOVWF  26
0219:  BCF    03.5
021A:  BCF    03.6
021B:  CALL   122
021C:  MOVF   7A,W
021D:  BSF    03.6
021E:  MOVWF  66
021F:  MOVF   79,W
0220:  MOVWF  65
0221:  MOVF   78,W
0222:  MOVWF  64
0223:  MOVF   77,W
0224:  MOVWF  63
0225:  BSF    03.1
0226:  MOVLW  90
0227:  MOVWF  04
0228:  BSF    03.7
0229:  MOVF   62,W
022A:  BSF    03.5
022B:  MOVWF  25
022C:  BCF    03.5
022D:  MOVF   61,W
022E:  BSF    03.5
022F:  MOVWF  24
0230:  BCF    03.5
0231:  MOVF   60,W
0232:  BSF    03.5
0233:  MOVWF  23
0234:  BCF    03.5
0235:  MOVF   5F,W
0236:  BSF    03.5
0237:  MOVWF  22
0238:  CLRF   29
0239:  CLRF   28
023A:  MOVLW  0E
023B:  MOVWF  27
023C:  MOVLW  10
023D:  MOVWF  26
023E:  BCF    03.5
023F:  BCF    03.6
0240:  CALL   122
0241:  BSF    03.5
0242:  BSF    03.6
0243:  MOVF   13,W
0244:  MOVWF  17
0245:  MOVF   12,W
0246:  MOVWF  16
0247:  MOVF   11,W
0248:  MOVWF  15
0249:  MOVF   10,W
024A:  MOVWF  14
024B:  CLRF   19
024C:  MOVF   04,W
024D:  MOVWF  18
024E:  BCF    19.0
024F:  BTFSC  03.7
0250:  BSF    19.0
0251:  BCF    03.1
0252:  MOVF   13,W
0253:  MOVWF  25
0254:  MOVF   12,W
0255:  MOVWF  24
0256:  MOVF   11,W
0257:  MOVWF  23
0258:  MOVF   10,W
0259:  MOVWF  22
025A:  CLRF   29
025B:  CLRF   28
025C:  CLRF   27
025D:  MOVLW  3C
025E:  MOVWF  26
025F:  BCF    03.5
0260:  BCF    03.6
0261:  CALL   122
0262:  BSF    03.5
0263:  BSF    03.6
0264:  MOVF   18,W
0265:  MOVWF  04
0266:  BCF    03.7
0267:  BTFSC  19.0
0268:  BSF    03.7
0269:  MOVF   7A,W
026A:  BCF    03.5
026B:  MOVWF  6A
026C:  MOVF   79,W
026D:  MOVWF  69
026E:  MOVF   78,W
026F:  MOVWF  68
0270:  MOVF   77,W
0271:  MOVWF  67
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
0272:  MOVLW  03
0273:  ADDWF  55,W
0274:  MOVWF  78
0275:  MOVF   56,W
0276:  MOVWF  7A
0277:  BTFSC  03.0
0278:  INCF   7A,F
0279:  MOVF   78,W
027A:  BSF    03.5
027B:  MOVWF  10
027C:  MOVF   7A,W
027D:  MOVWF  11
027E:  CLRF   13
027F:  MOVF   04,W
0280:  MOVWF  12
0281:  BCF    13.0
0282:  BTFSC  03.7
0283:  BSF    13.0
0284:  BSF    03.1
0285:  MOVLW  94
0286:  MOVWF  04
0287:  BSF    03.7
0288:  BCF    03.5
0289:  MOVF   62,W
028A:  BSF    03.5
028B:  MOVWF  25
028C:  BCF    03.5
028D:  MOVF   61,W
028E:  BSF    03.5
028F:  MOVWF  24
0290:  BCF    03.5
0291:  MOVF   60,W
0292:  BSF    03.5
0293:  MOVWF  23
0294:  BCF    03.5
0295:  MOVF   5F,W
0296:  BSF    03.5
0297:  MOVWF  22
0298:  CLRF   29
0299:  CLRF   28
029A:  MOVLW  0E
029B:  MOVWF  27
029C:  MOVLW  10
029D:  MOVWF  26
029E:  BCF    03.5
029F:  BCF    03.6
02A0:  CALL   122
02A1:  BSF    03.5
02A2:  BSF    03.6
02A3:  MOVF   14,W
02A4:  MOVWF  77
02A5:  MOVF   15,W
02A6:  MOVWF  78
02A7:  MOVF   16,W
02A8:  MOVWF  79
02A9:  MOVF   17,W
02AA:  MOVWF  7A
02AB:  MOVF   12,W
02AC:  MOVWF  04
02AD:  BCF    03.7
02AE:  BTFSC  13.0
02AF:  BSF    03.7
02B0:  MOVF   17,W
02B1:  MOVWF  1B
02B2:  MOVF   16,W
02B3:  MOVWF  1A
02B4:  MOVF   15,W
02B5:  MOVWF  19
02B6:  MOVF   14,W
02B7:  MOVWF  18
02B8:  CLRF   1D
02B9:  MOVF   04,W
02BA:  MOVWF  1C
02BB:  BCF    1D.0
02BC:  BTFSC  03.7
02BD:  BSF    1D.0
02BE:  BSF    03.1
02BF:  MOVLW  9E
02C0:  MOVWF  04
02C1:  BSF    03.7
02C2:  MOVF   17,W
02C3:  MOVWF  25
02C4:  MOVF   16,W
02C5:  MOVWF  24
02C6:  MOVF   15,W
02C7:  MOVWF  23
02C8:  MOVF   14,W
02C9:  MOVWF  22
02CA:  CLRF   29
02CB:  CLRF   28
02CC:  CLRF   27
02CD:  MOVLW  3C
02CE:  MOVWF  26
02CF:  BCF    03.5
02D0:  BCF    03.6
02D1:  CALL   122
02D2:  BSF    03.5
02D3:  BSF    03.6
02D4:  MOVF   1C,W
02D5:  MOVWF  04
02D6:  BCF    03.7
02D7:  BTFSC  1D.0
02D8:  BSF    03.7
02D9:  MOVF   10,W
02DA:  MOVWF  04
02DB:  BCF    03.7
02DC:  BTFSC  11.0
02DD:  BSF    03.7
02DE:  MOVF   1E,W
02DF:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
02E0:  MOVLW  01
02E1:  BCF    03.5
02E2:  ADDWF  55,W
02E3:  MOVWF  04
02E4:  BCF    03.7
02E5:  BTFSC  56.0
02E6:  BSF    03.7
02E7:  MOVF   63,W
02E8:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
02E9:  MOVLW  02
02EA:  ADDWF  55,W
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  BTFSC  56.0
02EE:  BSF    03.7
02EF:  MOVF   67,W
02F0:  MOVWF  00
02F1:  BCF    03.6
02F2:  RETURN
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int hoursUpperBound, int minutesUpperBound, 
....................         __EEADDRESS__ addressAlarmHour, __EEADDRESS__ addressAlarmMinutes, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, 
....................         __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmHours = addressAlarmHour; 
*
10A6:  MOVF   59,W
10A7:  BSF    03.5
10A8:  MOVWF  1F
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
10A9:  BCF    03.5
10AA:  MOVF   5B,W
10AB:  BSF    03.5
10AC:  MOVWF  1E
....................     newTimer.addressRtcHours = addressRtcHour; 
10AD:  BCF    03.5
10AE:  MOVF   5D,W
10AF:  BSF    03.5
10B0:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
10B1:  BCF    03.5
10B2:  MOVF   5F,W
10B3:  BSF    03.5
10B4:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
10B5:  BCF    03.5
10B6:  MOVF   61,W
10B7:  BSF    03.5
10B8:  MOVWF  22
....................  
....................     newTimer.alarmTime.hour = read_eeprom(addressAlarmHour) % (hoursUpperBound + 1); 
10B9:  BCF    03.5
10BA:  MOVF   59,W
10BB:  MOVWF  0D
10BC:  BSF    03.5
10BD:  BCF    0C.7
10BE:  BSF    0C.0
10BF:  BCF    03.5
10C0:  MOVF   0C,W
10C1:  MOVWF  63
10C2:  MOVLW  01
10C3:  ADDWF  57,W
10C4:  MOVWF  64
10C5:  MOVF   63,W
10C6:  BSF    03.5
10C7:  MOVWF  28
10C8:  BCF    03.5
10C9:  MOVF   64,W
10CA:  BSF    03.5
10CB:  MOVWF  29
10CC:  BCF    0A.4
10CD:  BCF    03.5
10CE:  BCF    03.6
10CF:  CALL   03D
10D0:  BSF    0A.4
10D1:  MOVF   77,W
10D2:  BSF    03.5
10D3:  BSF    03.6
10D4:  MOVWF  19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
10D5:  BCF    03.5
10D6:  MOVF   5B,W
10D7:  MOVWF  0D
10D8:  BSF    03.5
10D9:  BCF    0C.7
10DA:  BSF    0C.0
10DB:  BCF    03.5
10DC:  MOVF   0C,W
10DD:  MOVWF  63
10DE:  MOVLW  01
10DF:  ADDWF  58,W
10E0:  MOVWF  64
10E1:  MOVF   63,W
10E2:  BSF    03.5
10E3:  MOVWF  28
10E4:  BCF    03.5
10E5:  MOVF   64,W
10E6:  BSF    03.5
10E7:  MOVWF  29
10E8:  BCF    0A.4
10E9:  BCF    03.5
10EA:  BCF    03.6
10EB:  CALL   03D
10EC:  BSF    0A.4
10ED:  MOVF   77,W
10EE:  BSF    03.5
10EF:  BSF    03.6
10F0:  MOVWF  1A
....................     newTimer.alarmTime.second = 0; 
10F1:  CLRF   1B
....................  
....................     newTimer.hoursUpperBound = hoursUpperBound; 
10F2:  BCF    03.5
10F3:  MOVF   57,W
10F4:  BSF    03.5
10F5:  MOVWF  23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
10F6:  BCF    03.5
10F7:  MOVF   58,W
10F8:  BSF    03.5
10F9:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
10FA:  MOVLW  3B
10FB:  MOVWF  25
....................     return newTimer; 
10FC:  MOVLW  90
10FD:  MOVWF  78
10FE:  MOVLW  01
10FF:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int minutesUpperBound, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, 
....................         __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
*
1162:  MOVF   58,W
1163:  BSF    03.5
1164:  MOVWF  1E
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
1165:  BCF    03.5
1166:  MOVF   5A,W
1167:  BSF    03.5
1168:  MOVWF  1D
....................     newTimer.addressRtcHours = addressRtcHour; 
1169:  BCF    03.5
116A:  MOVF   5C,W
116B:  BSF    03.5
116C:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
116D:  BCF    03.5
116E:  MOVF   5E,W
116F:  BSF    03.5
1170:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
1171:  BCF    03.5
1172:  MOVF   60,W
1173:  BSF    03.5
1174:  MOVWF  22
....................  
....................     newTimer.hoursUpperBound = 0; 
1175:  CLRF   23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
1176:  BCF    03.5
1177:  MOVF   57,W
1178:  BSF    03.5
1179:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
117A:  MOVLW  3B
117B:  MOVWF  25
....................  
....................     newTimer.alarmTime.hour = 0; 
117C:  CLRF   19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
117D:  BCF    03.5
117E:  MOVF   58,W
117F:  MOVWF  0D
1180:  BSF    03.5
1181:  BCF    0C.7
1182:  BSF    0C.0
1183:  BCF    03.5
1184:  MOVF   0C,W
1185:  MOVWF  62
1186:  MOVLW  01
1187:  ADDWF  57,W
1188:  MOVWF  63
1189:  MOVF   62,W
118A:  BSF    03.5
118B:  MOVWF  28
118C:  BCF    03.5
118D:  MOVF   63,W
118E:  BSF    03.5
118F:  MOVWF  29
1190:  BCF    0A.4
1191:  BCF    03.5
1192:  BCF    03.6
1193:  CALL   03D
1194:  BSF    0A.4
1195:  MOVF   77,W
1196:  BSF    03.5
1197:  BSF    03.6
1198:  MOVWF  1A
....................     newTimer.alarmTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
1199:  BCF    03.5
119A:  MOVF   5A,W
119B:  MOVWF  0D
119C:  BSF    03.5
119D:  BCF    0C.7
119E:  BSF    0C.0
119F:  BCF    03.5
11A0:  MOVF   0C,W
11A1:  MOVWF  62
11A2:  MOVLW  01
11A3:  BSF    03.5
11A4:  ADDWF  25,W
11A5:  BCF    03.5
11A6:  MOVWF  63
11A7:  MOVF   62,W
11A8:  BSF    03.5
11A9:  MOVWF  28
11AA:  BCF    03.5
11AB:  MOVF   63,W
11AC:  BSF    03.5
11AD:  MOVWF  29
11AE:  BCF    0A.4
11AF:  BCF    03.5
11B0:  BCF    03.6
11B1:  CALL   03D
11B2:  BSF    0A.4
11B3:  MOVF   77,W
11B4:  BSF    03.5
11B5:  BSF    03.6
11B6:  MOVWF  1B
....................  
....................     return newTimer; 
11B7:  MOVLW  90
11B8:  MOVWF  78
11B9:  MOVLW  01
11BA:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_setRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
*
1212:  MOVLW  05
1213:  ADDWF  4D,W
1214:  MOVWF  78
1215:  MOVF   4E,W
1216:  MOVWF  7A
1217:  BTFSC  03.0
1218:  INCF   7A,F
1219:  MOVF   78,W
121A:  MOVWF  4F
121B:  MOVF   7A,W
121C:  MOVWF  50
121D:  MOVLW  10
121E:  ADDWF  4D,W
121F:  MOVWF  04
1220:  BCF    03.7
1221:  BTFSC  4E.0
1222:  BSF    03.7
1223:  MOVF   00,W
1224:  MOVWF  51
1225:  MOVF   51,W
1226:  MOVWF  0D
1227:  BSF    03.5
1228:  BCF    0C.7
1229:  BSF    0C.0
122A:  BCF    03.5
122B:  MOVF   0C,W
122C:  MOVWF  51
122D:  MOVLW  13
122E:  ADDWF  4D,W
122F:  MOVWF  04
1230:  BCF    03.7
1231:  BTFSC  4E.0
1232:  BSF    03.7
1233:  MOVLW  01
1234:  ADDWF  00,W
1235:  MOVWF  52
1236:  MOVF   51,W
1237:  BSF    03.5
1238:  MOVWF  28
1239:  BCF    03.5
123A:  MOVF   52,W
123B:  BSF    03.5
123C:  MOVWF  29
123D:  BCF    0A.4
123E:  BCF    03.5
123F:  BCF    03.6
1240:  CALL   03D
1241:  BSF    0A.4
1242:  MOVF   77,W
1243:  BSF    03.6
1244:  MOVWF  51
1245:  MOVF   4F,W
1246:  MOVWF  04
1247:  BCF    03.7
1248:  BTFSC  50.0
1249:  BSF    03.7
124A:  MOVF   51,W
124B:  MOVWF  00
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
124C:  MOVLW  06
124D:  ADDWF  4D,W
124E:  MOVWF  78
124F:  MOVF   4E,W
1250:  MOVWF  7A
1251:  BTFSC  03.0
1252:  INCF   7A,F
1253:  MOVF   78,W
1254:  MOVWF  4F
1255:  MOVF   7A,W
1256:  MOVWF  50
1257:  MOVLW  11
1258:  ADDWF  4D,W
1259:  MOVWF  04
125A:  BCF    03.7
125B:  BTFSC  4E.0
125C:  BSF    03.7
125D:  MOVF   00,W
125E:  MOVWF  51
125F:  MOVF   51,W
1260:  MOVWF  0D
1261:  BSF    03.5
1262:  BCF    0C.7
1263:  BSF    0C.0
1264:  BCF    03.5
1265:  MOVF   0C,W
1266:  MOVWF  51
1267:  MOVLW  14
1268:  ADDWF  4D,W
1269:  MOVWF  04
126A:  BCF    03.7
126B:  BTFSC  4E.0
126C:  BSF    03.7
126D:  MOVLW  01
126E:  ADDWF  00,W
126F:  MOVWF  52
1270:  MOVF   51,W
1271:  BSF    03.5
1272:  MOVWF  28
1273:  BCF    03.5
1274:  MOVF   52,W
1275:  BSF    03.5
1276:  MOVWF  29
1277:  BCF    0A.4
1278:  BCF    03.5
1279:  BCF    03.6
127A:  CALL   03D
127B:  BSF    0A.4
127C:  MOVF   77,W
127D:  BSF    03.6
127E:  MOVWF  51
127F:  MOVF   4F,W
1280:  MOVWF  04
1281:  BCF    03.7
1282:  BTFSC  50.0
1283:  BSF    03.7
1284:  MOVF   51,W
1285:  MOVWF  00
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
1286:  MOVLW  07
1287:  ADDWF  4D,W
1288:  MOVWF  78
1289:  MOVF   4E,W
128A:  MOVWF  7A
128B:  BTFSC  03.0
128C:  INCF   7A,F
128D:  MOVF   78,W
128E:  MOVWF  4F
128F:  MOVF   7A,W
1290:  MOVWF  50
1291:  MOVLW  12
1292:  ADDWF  4D,W
1293:  MOVWF  04
1294:  BCF    03.7
1295:  BTFSC  4E.0
1296:  BSF    03.7
1297:  MOVF   00,W
1298:  MOVWF  51
1299:  MOVF   51,W
129A:  MOVWF  0D
129B:  BSF    03.5
129C:  BCF    0C.7
129D:  BSF    0C.0
129E:  BCF    03.5
129F:  MOVF   0C,W
12A0:  MOVWF  51
12A1:  MOVLW  15
12A2:  ADDWF  4D,W
12A3:  MOVWF  04
12A4:  BCF    03.7
12A5:  BTFSC  4E.0
12A6:  BSF    03.7
12A7:  MOVLW  01
12A8:  ADDWF  00,W
12A9:  MOVWF  52
12AA:  MOVF   51,W
12AB:  BSF    03.5
12AC:  MOVWF  28
12AD:  BCF    03.5
12AE:  MOVF   52,W
12AF:  BSF    03.5
12B0:  MOVWF  29
12B1:  BCF    0A.4
12B2:  BCF    03.5
12B3:  BCF    03.6
12B4:  CALL   03D
12B5:  BSF    0A.4
12B6:  MOVF   77,W
12B7:  BSF    03.6
12B8:  MOVWF  51
12B9:  MOVF   4F,W
12BA:  MOVWF  04
12BB:  BCF    03.7
12BC:  BTFSC  50.0
12BD:  BSF    03.7
12BE:  MOVF   51,W
12BF:  MOVWF  00
....................     Timer_updateCountdownTime(timerPtr); 
12C0:  MOVF   4E,W
12C1:  MOVWF  56
12C2:  MOVF   4D,W
12C3:  MOVWF  55
12C4:  BCF    0A.4
12C5:  BCF    03.6
12C6:  CALL   1A0
12C7:  BSF    0A.4
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->alarmTime.hour + 1; 
*
196A:  MOVLW  09
196B:  ADDWF  20,W
196C:  MOVWF  78
196D:  MOVF   21,W
196E:  MOVWF  7A
196F:  BTFSC  03.0
1970:  INCF   7A,F
1971:  MOVF   78,W
1972:  MOVWF  22
1973:  MOVF   7A,W
1974:  MOVWF  23
1975:  MOVLW  09
1976:  ADDWF  20,W
1977:  MOVWF  04
1978:  BCF    03.7
1979:  BTFSC  21.0
197A:  BSF    03.7
197B:  MOVF   00,W
197C:  MOVWF  24
197D:  MOVLW  13
197E:  ADDWF  20,W
197F:  MOVWF  04
1980:  BCF    03.7
1981:  BTFSC  21.0
1982:  BSF    03.7
1983:  MOVF   00,W
1984:  SUBWF  24,W
1985:  BTFSS  03.2
1986:  GOTO   189
1987:  MOVLW  00
1988:  GOTO   191
1989:  MOVLW  09
198A:  ADDWF  20,W
198B:  MOVWF  04
198C:  BCF    03.7
198D:  BTFSC  21.0
198E:  BSF    03.7
198F:  MOVLW  01
1990:  ADDWF  00,W
1991:  MOVWF  24
1992:  MOVF   22,W
1993:  MOVWF  04
1994:  BCF    03.7
1995:  BTFSC  23.0
1996:  BSF    03.7
1997:  MOVF   24,W
1998:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->alarmTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->alarmTime.minute + 1; 
*
0D04:  MOVLW  0A
0D05:  BSF    03.6
0D06:  ADDWF  20,W
0D07:  MOVWF  78
0D08:  MOVF   21,W
0D09:  MOVWF  7A
0D0A:  BTFSC  03.0
0D0B:  INCF   7A,F
0D0C:  MOVF   78,W
0D0D:  MOVWF  22
0D0E:  MOVF   7A,W
0D0F:  MOVWF  23
0D10:  MOVLW  0A
0D11:  ADDWF  20,W
0D12:  MOVWF  04
0D13:  BCF    03.7
0D14:  BTFSC  21.0
0D15:  BSF    03.7
0D16:  MOVF   00,W
0D17:  MOVWF  24
0D18:  MOVLW  14
0D19:  ADDWF  20,W
0D1A:  MOVWF  04
0D1B:  BCF    03.7
0D1C:  BTFSC  21.0
0D1D:  BSF    03.7
0D1E:  MOVF   00,W
0D1F:  SUBWF  24,W
0D20:  BTFSS  03.2
0D21:  GOTO   524
0D22:  MOVLW  00
0D23:  GOTO   52C
0D24:  MOVLW  0A
0D25:  ADDWF  20,W
0D26:  MOVWF  04
0D27:  BCF    03.7
0D28:  BTFSC  21.0
0D29:  BSF    03.7
0D2A:  MOVLW  01
0D2B:  ADDWF  00,W
0D2C:  MOVWF  24
0D2D:  MOVF   22,W
0D2E:  MOVWF  04
0D2F:  BCF    03.7
0D30:  BTFSC  23.0
0D31:  BSF    03.7
0D32:  MOVF   24,W
0D33:  MOVWF  00
0D34:  BCF    03.6
0D35:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->alarmTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->alarmTime.second + 1; 
*
1B29:  MOVLW  0B
1B2A:  ADDWF  20,W
1B2B:  MOVWF  78
1B2C:  MOVF   21,W
1B2D:  MOVWF  7A
1B2E:  BTFSC  03.0
1B2F:  INCF   7A,F
1B30:  MOVF   78,W
1B31:  MOVWF  22
1B32:  MOVF   7A,W
1B33:  MOVWF  23
1B34:  MOVLW  0B
1B35:  ADDWF  20,W
1B36:  MOVWF  04
1B37:  BCF    03.7
1B38:  BTFSC  21.0
1B39:  BSF    03.7
1B3A:  MOVF   00,W
1B3B:  MOVWF  24
1B3C:  MOVLW  15
1B3D:  ADDWF  20,W
1B3E:  MOVWF  04
1B3F:  BCF    03.7
1B40:  BTFSC  21.0
1B41:  BSF    03.7
1B42:  MOVF   00,W
1B43:  SUBWF  24,W
1B44:  BTFSS  03.2
1B45:  GOTO   348
1B46:  MOVLW  00
1B47:  GOTO   350
1B48:  MOVLW  0B
1B49:  ADDWF  20,W
1B4A:  MOVWF  04
1B4B:  BCF    03.7
1B4C:  BTFSC  21.0
1B4D:  BSF    03.7
1B4E:  MOVLW  01
1B4F:  ADDWF  00,W
1B50:  MOVWF  24
1B51:  MOVF   22,W
1B52:  MOVWF  04
1B53:  BCF    03.7
1B54:  BTFSC  23.0
1B55:  BSF    03.7
1B56:  MOVF   24,W
1B57:  MOVWF  00
1B58:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->alarmTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0B9B:  MOVLW  10
0B9C:  ADDWF  20,W
0B9D:  MOVWF  04
0B9E:  BCF    03.7
0B9F:  BTFSC  21.0
0BA0:  BSF    03.7
0BA1:  MOVF   00,W
0BA2:  MOVWF  22
0BA3:  MOVLW  05
0BA4:  ADDWF  20,W
0BA5:  MOVWF  04
0BA6:  BCF    03.7
0BA7:  BTFSC  21.0
0BA8:  BSF    03.7
0BA9:  MOVF   00,W
0BAA:  MOVWF  23
0BAB:  BCF    03.6
0BAC:  MOVF   0B,W
0BAD:  MOVWF  77
0BAE:  BCF    0B.7
0BAF:  BSF    03.6
0BB0:  MOVF   22,W
0BB1:  MOVWF  0D
0BB2:  MOVF   23,W
0BB3:  MOVWF  0C
0BB4:  BSF    03.5
0BB5:  BCF    0C.7
0BB6:  BSF    0C.2
0BB7:  MOVLW  55
0BB8:  MOVWF  0D
0BB9:  MOVLW  AA
0BBA:  MOVWF  0D
0BBB:  BSF    0C.1
0BBC:  BTFSC  0C.1
0BBD:  GOTO   3BC
0BBE:  BCF    0C.2
0BBF:  MOVF   77,W
0BC0:  BCF    03.5
0BC1:  BCF    03.6
0BC2:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0BC3:  MOVLW  11
0BC4:  BSF    03.6
0BC5:  ADDWF  20,W
0BC6:  MOVWF  04
0BC7:  BCF    03.7
0BC8:  BTFSC  21.0
0BC9:  BSF    03.7
0BCA:  MOVF   00,W
0BCB:  MOVWF  22
0BCC:  MOVLW  06
0BCD:  ADDWF  20,W
0BCE:  MOVWF  04
0BCF:  BCF    03.7
0BD0:  BTFSC  21.0
0BD1:  BSF    03.7
0BD2:  MOVF   00,W
0BD3:  MOVWF  23
0BD4:  BCF    03.6
0BD5:  MOVF   0B,W
0BD6:  MOVWF  77
0BD7:  BCF    0B.7
0BD8:  BSF    03.6
0BD9:  MOVF   22,W
0BDA:  MOVWF  0D
0BDB:  MOVF   23,W
0BDC:  MOVWF  0C
0BDD:  BSF    03.5
0BDE:  BCF    0C.7
0BDF:  BSF    0C.2
0BE0:  MOVLW  55
0BE1:  MOVWF  0D
0BE2:  MOVLW  AA
0BE3:  MOVWF  0D
0BE4:  BSF    0C.1
0BE5:  BTFSC  0C.1
0BE6:  GOTO   3E5
0BE7:  BCF    0C.2
0BE8:  MOVF   77,W
0BE9:  BCF    03.5
0BEA:  BCF    03.6
0BEB:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0BEC:  MOVLW  12
0BED:  BSF    03.6
0BEE:  ADDWF  20,W
0BEF:  MOVWF  04
0BF0:  BCF    03.7
0BF1:  BTFSC  21.0
0BF2:  BSF    03.7
0BF3:  MOVF   00,W
0BF4:  MOVWF  22
0BF5:  MOVLW  07
0BF6:  ADDWF  20,W
0BF7:  MOVWF  04
0BF8:  BCF    03.7
0BF9:  BTFSC  21.0
0BFA:  BSF    03.7
0BFB:  MOVF   00,W
0BFC:  MOVWF  23
0BFD:  BCF    03.6
0BFE:  MOVF   0B,W
0BFF:  MOVWF  77
0C00:  BCF    0B.7
0C01:  BSF    03.6
0C02:  MOVF   22,W
0C03:  MOVWF  0D
0C04:  MOVF   23,W
0C05:  MOVWF  0C
0C06:  BSF    03.5
0C07:  BCF    0C.7
0C08:  BSF    0C.2
0C09:  MOVLW  55
0C0A:  MOVWF  0D
0C0B:  MOVLW  AA
0C0C:  MOVWF  0D
0C0D:  BSF    0C.1
0C0E:  BTFSC  0C.1
0C0F:  GOTO   40E
0C10:  BCF    0C.2
0C11:  MOVF   77,W
0C12:  BCF    03.5
0C13:  BCF    03.6
0C14:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarm(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
....................  
.................... void Timer_saveAlarmHoursMinutes(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
.................... } 
....................  
.................... void Timer_saveAlarmMinutesSeconds(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
140C:  MOVF   20,W
140D:  MOVWF  78
140E:  MOVF   21,W
140F:  MOVWF  7A
1410:  MOVF   78,W
1411:  MOVWF  22
1412:  MOVF   7A,W
1413:  MOVWF  23
1414:  MOVF   23,W
1415:  MOVWF  25
1416:  MOVF   22,W
1417:  MOVWF  24
*
1437:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->alarmTime.hour == 0)&& (timerPtr->alarmTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
09E2:  CLRF   24
09E3:  CLRF   25
09E4:  CLRF   26
09E5:  CLRF   27
....................     TimeInDigits timeInDigits;    
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
09E6:  MOVF   21,W
09E7:  MOVWF  78
09E8:  MOVF   22,W
09E9:  MOVWF  7A
09EA:  MOVF   78,W
09EB:  MOVWF  2E
09EC:  MOVF   7A,W
09ED:  MOVWF  2F
09EE:  MOVWF  39
09EF:  MOVF   2E,W
09F0:  MOVWF  38
09F1:  CLRF   3A
09F2:  BCF    0A.3
09F3:  BCF    03.6
09F4:  CALL   719
09F5:  BSF    0A.3
09F6:  MOVF   79,W
09F7:  MOVWF  7A
09F8:  MOVF   78,W
09F9:  BSF    03.6
09FA:  MOVWF  2E
09FB:  MOVF   7A,W
09FC:  MOVWF  2F
09FD:  MOVLW  01
09FE:  MOVWF  31
09FF:  MOVLW  28
0A00:  MOVWF  30
0A01:  MOVLW  06
0A02:  MOVWF  78
0A03:  MOVF   2E,W
0A04:  MOVWF  04
0A05:  BCF    03.7
0A06:  BTFSC  2F.0
0A07:  BSF    03.7
0A08:  MOVF   00,W
0A09:  MOVWF  77
0A0A:  MOVF   30,W
0A0B:  MOVWF  04
0A0C:  BCF    03.7
0A0D:  BTFSC  31.0
0A0E:  BSF    03.7
0A0F:  MOVF   77,W
0A10:  MOVWF  00
0A11:  INCF   30,F
0A12:  BTFSC  03.2
0A13:  INCF   31,F
0A14:  INCF   2E,F
0A15:  BTFSC  03.2
0A16:  INCF   2F,F
0A17:  DECFSZ 78,F
0A18:  GOTO   203
....................     timeToSend[0] = timeInDigits.minute[0]; 
0A19:  MOVF   2A,W
0A1A:  MOVWF  24
....................     timeToSend[1] = timeInDigits.minute[1]; 
0A1B:  MOVF   2B,W
0A1C:  MOVWF  25
....................     timeToSend[2] = timeInDigits.hour[0]; 
0A1D:  MOVF   28,W
0A1E:  MOVWF  26
....................     timeToSend[3] = timeInDigits.hour[1]; 
0A1F:  MOVF   29,W
0A20:  MOVWF  27
....................  
....................     if (blink) { 
0A21:  MOVF   23,F
0A22:  BTFSC  03.2
0A23:  GOTO   22E
....................         blink = timerPtr->currentTime.second % 2; 
0A24:  MOVLW  07
0A25:  ADDWF  21,W
0A26:  MOVWF  04
0A27:  BCF    03.7
0A28:  BTFSC  22.0
0A29:  BSF    03.7
0A2A:  MOVF   00,W
0A2B:  ANDLW  01
0A2C:  MOVWF  23
....................     } else { 
0A2D:  GOTO   230
....................         blink = TRUE; 
0A2E:  MOVLW  01
0A2F:  MOVWF  23
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
0A30:  MOVLW  01
0A31:  MOVWF  33
0A32:  MOVLW  24
0A33:  MOVWF  32
0A34:  MOVLW  04
0A35:  MOVWF  34
0A36:  MOVF   23,W
0A37:  MOVWF  35
0A38:  BCF    03.6
0A39:  CALL   000
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
0A53:  CLRF   23
0A54:  CLRF   24
0A55:  CLRF   25
0A56:  CLRF   26
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................  
....................     time = timerPtr->countdownTime; 
0A57:  MOVF   21,W
0A58:  MOVWF  04
0A59:  BCF    03.7
0A5A:  BTFSC  22.0
0A5B:  BSF    03.7
0A5C:  MOVF   00,W
0A5D:  MOVWF  77
0A5E:  INCF   04,F
0A5F:  MOVF   00,W
0A60:  MOVWF  78
0A61:  INCF   04,F
0A62:  MOVF   00,W
0A63:  MOVWF  79
0A64:  INCF   04,F
0A65:  MOVF   00,W
0A66:  MOVWF  7A
0A67:  MOVF   77,W
0A68:  MOVWF  2D
0A69:  MOVF   78,W
0A6A:  MOVWF  2E
0A6B:  MOVF   79,W
0A6C:  MOVWF  2F
0A6D:  MOVF   7A,W
0A6E:  MOVWF  30
....................     time.minute = (time.minute + time.hour * 60) % 100; 
0A6F:  MOVF   2E,W
0A70:  MOVWF  63
0A71:  MOVLW  3C
0A72:  MOVWF  64
0A73:  BCF    0A.3
0A74:  BCF    03.6
0A75:  CALL   557
0A76:  BSF    0A.3
0A77:  MOVF   78,W
0A78:  BSF    03.6
0A79:  ADDWF  2F,W
0A7A:  MOVWF  32
0A7B:  BSF    03.5
0A7C:  MOVWF  28
0A7D:  MOVLW  64
0A7E:  MOVWF  29
0A7F:  BCF    0A.3
0A80:  BCF    03.5
0A81:  BCF    03.6
0A82:  CALL   03D
0A83:  BSF    0A.3
0A84:  MOVF   77,W
0A85:  BSF    03.6
0A86:  MOVWF  2F
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE);   
0A87:  MOVLW  01
0A88:  MOVWF  39
0A89:  MOVLW  2D
0A8A:  MOVWF  38
0A8B:  CLRF   3A
0A8C:  BCF    0A.3
0A8D:  BCF    03.6
0A8E:  CALL   719
0A8F:  BSF    0A.3
0A90:  MOVF   79,W
0A91:  MOVWF  7A
0A92:  MOVF   78,W
0A93:  BSF    03.6
0A94:  MOVWF  31
0A95:  MOVF   7A,W
0A96:  MOVWF  32
0A97:  MOVLW  01
0A98:  MOVWF  34
0A99:  MOVLW  27
0A9A:  MOVWF  33
0A9B:  MOVLW  06
0A9C:  MOVWF  78
0A9D:  MOVF   31,W
0A9E:  MOVWF  04
0A9F:  BCF    03.7
0AA0:  BTFSC  32.0
0AA1:  BSF    03.7
0AA2:  MOVF   00,W
0AA3:  MOVWF  77
0AA4:  MOVF   33,W
0AA5:  MOVWF  04
0AA6:  BCF    03.7
0AA7:  BTFSC  34.0
0AA8:  BSF    03.7
0AA9:  MOVF   77,W
0AAA:  MOVWF  00
0AAB:  INCF   33,F
0AAC:  BTFSC  03.2
0AAD:  INCF   34,F
0AAE:  INCF   31,F
0AAF:  BTFSC  03.2
0AB0:  INCF   32,F
0AB1:  DECFSZ 78,F
0AB2:  GOTO   29D
....................     timeToSend[0] = timeInDigits.second[0]; 
0AB3:  MOVF   2B,W
0AB4:  MOVWF  23
....................     timeToSend[1] = timeInDigits.second[1]; 
0AB5:  MOVF   2C,W
0AB6:  MOVWF  24
....................     timeToSend[2] = timeInDigits.minute[0]; 
0AB7:  MOVF   29,W
0AB8:  MOVWF  25
....................     timeToSend[3] = timeInDigits.minute[1]; 
0AB9:  MOVF   2A,W
0ABA:  MOVWF  26
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
0ABB:  MOVLW  01
0ABC:  MOVWF  33
0ABD:  MOVLW  23
0ABE:  MOVWF  32
0ABF:  MOVLW  04
0AC0:  MOVWF  34
0AC1:  MOVLW  01
0AC2:  MOVWF  35
0AC3:  BCF    03.6
0AC4:  CALL   000
0AC5:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1873:  CLRF   22
1874:  CLRF   23
1875:  CLRF   24
1876:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1877:  MOVLW  08
1878:  ADDWF  20,W
1879:  MOVWF  78
187A:  MOVF   21,W
187B:  MOVWF  7A
187C:  BTFSC  03.0
187D:  INCF   7A,F
187E:  MOVF   78,W
187F:  MOVWF  2C
1880:  MOVF   7A,W
1881:  MOVWF  2D
1882:  MOVWF  39
1883:  MOVF   2C,W
1884:  MOVWF  38
1885:  CLRF   3A
1886:  BCF    0A.4
1887:  BCF    0A.3
1888:  BCF    03.6
1889:  CALL   719
188A:  BSF    0A.4
188B:  BSF    0A.3
188C:  MOVF   79,W
188D:  MOVWF  7A
188E:  MOVF   78,W
188F:  BSF    03.6
1890:  MOVWF  2C
1891:  MOVF   7A,W
1892:  MOVWF  2D
1893:  MOVLW  01
1894:  MOVWF  2F
1895:  MOVLW  26
1896:  MOVWF  2E
1897:  MOVLW  06
1898:  MOVWF  78
1899:  MOVF   2C,W
189A:  MOVWF  04
189B:  BCF    03.7
189C:  BTFSC  2D.0
189D:  BSF    03.7
189E:  MOVF   00,W
189F:  MOVWF  77
18A0:  MOVF   2E,W
18A1:  MOVWF  04
18A2:  BCF    03.7
18A3:  BTFSC  2F.0
18A4:  BSF    03.7
18A5:  MOVF   77,W
18A6:  MOVWF  00
18A7:  INCF   2E,F
18A8:  BTFSC  03.2
18A9:  INCF   2F,F
18AA:  INCF   2C,F
18AB:  BTFSC  03.2
18AC:  INCF   2D,F
18AD:  DECFSZ 78,F
18AE:  GOTO   099
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
18AF:  MOVF   28,W
18B0:  BCF    0A.4
18B1:  BCF    0A.3
18B2:  BCF    03.6
18B3:  CALL   004
18B4:  BSF    0A.4
18B5:  BSF    0A.3
18B6:  MOVWF  78
18B7:  BSF    03.6
18B8:  MOVWF  22
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
18B9:  MOVF   29,W
18BA:  BCF    0A.4
18BB:  BCF    0A.3
18BC:  BCF    03.6
18BD:  CALL   004
18BE:  BSF    0A.4
18BF:  BSF    0A.3
18C0:  IORLW  08
18C1:  BSF    03.6
18C2:  MOVWF  23
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
18C3:  MOVLW  01
18C4:  MOVWF  37
18C5:  MOVLW  22
18C6:  MOVWF  36
18C7:  MOVLW  04
18C8:  MOVWF  38
18C9:  BCF    0A.4
18CA:  BCF    0A.3
18CB:  BCF    03.6
18CC:  CALL   786
18CD:  BSF    0A.4
18CE:  BSF    0A.3
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
18E8:  CLRF   22
18E9:  CLRF   23
18EA:  CLRF   24
18EB:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
18EC:  MOVLW  08
18ED:  ADDWF  20,W
18EE:  MOVWF  78
18EF:  MOVF   21,W
18F0:  MOVWF  7A
18F1:  BTFSC  03.0
18F2:  INCF   7A,F
18F3:  MOVF   78,W
18F4:  MOVWF  2C
18F5:  MOVF   7A,W
18F6:  MOVWF  2D
18F7:  MOVWF  39
18F8:  MOVF   2C,W
18F9:  MOVWF  38
18FA:  CLRF   3A
18FB:  BCF    0A.4
18FC:  BCF    0A.3
18FD:  BCF    03.6
18FE:  CALL   719
18FF:  BSF    0A.4
1900:  BSF    0A.3
1901:  MOVF   79,W
1902:  MOVWF  7A
1903:  MOVF   78,W
1904:  BSF    03.6
1905:  MOVWF  2C
1906:  MOVF   7A,W
1907:  MOVWF  2D
1908:  MOVLW  01
1909:  MOVWF  2F
190A:  MOVLW  26
190B:  MOVWF  2E
190C:  MOVLW  06
190D:  MOVWF  78
190E:  MOVF   2C,W
190F:  MOVWF  04
1910:  BCF    03.7
1911:  BTFSC  2D.0
1912:  BSF    03.7
1913:  MOVF   00,W
1914:  MOVWF  77
1915:  MOVF   2E,W
1916:  MOVWF  04
1917:  BCF    03.7
1918:  BTFSC  2F.0
1919:  BSF    03.7
191A:  MOVF   77,W
191B:  MOVWF  00
191C:  INCF   2E,F
191D:  BTFSC  03.2
191E:  INCF   2F,F
191F:  INCF   2C,F
1920:  BTFSC  03.2
1921:  INCF   2D,F
1922:  DECFSZ 78,F
1923:  GOTO   10E
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1924:  MOVF   2A,W
1925:  BCF    0A.4
1926:  BCF    0A.3
1927:  BCF    03.6
1928:  CALL   004
1929:  BSF    0A.4
192A:  BSF    0A.3
192B:  MOVWF  78
192C:  BSF    03.6
192D:  MOVWF  22
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
192E:  MOVF   2B,W
192F:  BCF    0A.4
1930:  BCF    0A.3
1931:  BCF    03.6
1932:  CALL   004
1933:  BSF    0A.4
1934:  BSF    0A.3
1935:  IORLW  08
1936:  BSF    03.6
1937:  MOVWF  23
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1938:  MOVLW  01
1939:  MOVWF  37
193A:  MOVLW  22
193B:  MOVWF  36
193C:  MOVLW  04
193D:  MOVWF  38
193E:  BCF    0A.4
193F:  BCF    0A.3
1940:  BCF    03.6
1941:  CALL   786
1942:  BSF    0A.4
1943:  BSF    0A.3
1944:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C54:  CLRF   22
0C55:  CLRF   23
0C56:  CLRF   24
0C57:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0C58:  MOVLW  08
0C59:  ADDWF  20,W
0C5A:  MOVWF  78
0C5B:  MOVF   21,W
0C5C:  MOVWF  7A
0C5D:  BTFSC  03.0
0C5E:  INCF   7A,F
0C5F:  MOVF   78,W
0C60:  MOVWF  2C
0C61:  MOVF   7A,W
0C62:  MOVWF  2D
0C63:  MOVWF  39
0C64:  MOVF   2C,W
0C65:  MOVWF  38
0C66:  CLRF   3A
0C67:  BCF    0A.3
0C68:  BCF    03.6
0C69:  CALL   719
0C6A:  BSF    0A.3
0C6B:  MOVF   79,W
0C6C:  MOVWF  7A
0C6D:  MOVF   78,W
0C6E:  BSF    03.6
0C6F:  MOVWF  2C
0C70:  MOVF   7A,W
0C71:  MOVWF  2D
0C72:  MOVLW  01
0C73:  MOVWF  2F
0C74:  MOVLW  26
0C75:  MOVWF  2E
0C76:  MOVLW  06
0C77:  MOVWF  78
0C78:  MOVF   2C,W
0C79:  MOVWF  04
0C7A:  BCF    03.7
0C7B:  BTFSC  2D.0
0C7C:  BSF    03.7
0C7D:  MOVF   00,W
0C7E:  MOVWF  77
0C7F:  MOVF   2E,W
0C80:  MOVWF  04
0C81:  BCF    03.7
0C82:  BTFSC  2F.0
0C83:  BSF    03.7
0C84:  MOVF   77,W
0C85:  MOVWF  00
0C86:  INCF   2E,F
0C87:  BTFSC  03.2
0C88:  INCF   2F,F
0C89:  INCF   2C,F
0C8A:  BTFSC  03.2
0C8B:  INCF   2D,F
0C8C:  DECFSZ 78,F
0C8D:  GOTO   478
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0C8E:  MOVF   28,W
0C8F:  MOVWF  22
....................     numbersToSend[1] = displayableTime.minute[1]; 
0C90:  MOVF   29,W
0C91:  MOVWF  23
....................     numbersToSend[2] = displayableTime.hour[0]; 
0C92:  MOVF   26,W
0C93:  MOVWF  24
....................     numbersToSend[3] = displayableTime.hour[1]; 
0C94:  MOVF   27,W
0C95:  MOVWF  25
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0C96:  MOVLW  01
0C97:  MOVWF  33
0C98:  MOVLW  22
0C99:  MOVWF  32
0C9A:  MOVLW  04
0C9B:  MOVWF  34
0C9C:  MOVLW  01
0C9D:  MOVWF  35
0C9E:  BCF    03.6
0C9F:  CALL   000
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0CB5:  CLRF   22
0CB6:  CLRF   23
0CB7:  CLRF   24
0CB8:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0CB9:  MOVLW  08
0CBA:  ADDWF  20,W
0CBB:  MOVWF  78
0CBC:  MOVF   21,W
0CBD:  MOVWF  7A
0CBE:  BTFSC  03.0
0CBF:  INCF   7A,F
0CC0:  MOVF   78,W
0CC1:  MOVWF  2C
0CC2:  MOVF   7A,W
0CC3:  MOVWF  2D
0CC4:  MOVWF  39
0CC5:  MOVF   2C,W
0CC6:  MOVWF  38
0CC7:  CLRF   3A
0CC8:  BCF    0A.3
0CC9:  BCF    03.6
0CCA:  CALL   719
0CCB:  BSF    0A.3
0CCC:  MOVF   79,W
0CCD:  MOVWF  7A
0CCE:  MOVF   78,W
0CCF:  BSF    03.6
0CD0:  MOVWF  2C
0CD1:  MOVF   7A,W
0CD2:  MOVWF  2D
0CD3:  MOVLW  01
0CD4:  MOVWF  2F
0CD5:  MOVLW  26
0CD6:  MOVWF  2E
0CD7:  MOVLW  06
0CD8:  MOVWF  78
0CD9:  MOVF   2C,W
0CDA:  MOVWF  04
0CDB:  BCF    03.7
0CDC:  BTFSC  2D.0
0CDD:  BSF    03.7
0CDE:  MOVF   00,W
0CDF:  MOVWF  77
0CE0:  MOVF   2E,W
0CE1:  MOVWF  04
0CE2:  BCF    03.7
0CE3:  BTFSC  2F.0
0CE4:  BSF    03.7
0CE5:  MOVF   77,W
0CE6:  MOVWF  00
0CE7:  INCF   2E,F
0CE8:  BTFSC  03.2
0CE9:  INCF   2F,F
0CEA:  INCF   2C,F
0CEB:  BTFSC  03.2
0CEC:  INCF   2D,F
0CED:  DECFSZ 78,F
0CEE:  GOTO   4D9
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0CEF:  MOVF   2A,W
0CF0:  MOVWF  22
....................     numbersToSend[1] = displayableTime.second[1]; 
0CF1:  MOVF   2B,W
0CF2:  MOVWF  23
....................     numbersToSend[2] = displayableTime.minute[0]; 
0CF3:  MOVF   28,W
0CF4:  MOVWF  24
....................     numbersToSend[3] = displayableTime.minute[1]; 
0CF5:  MOVF   29,W
0CF6:  MOVWF  25
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0CF7:  MOVLW  01
0CF8:  MOVWF  33
0CF9:  MOVLW  22
0CFA:  MOVWF  32
0CFB:  MOVLW  04
0CFC:  MOVWF  34
0CFD:  MOVLW  01
0CFE:  MOVWF  35
0CFF:  BCF    03.6
0D00:  CALL   000
0D01:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A12:  CLRF   22
1A13:  CLRF   23
1A14:  CLRF   24
1A15:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A16:  MOVLW  08
1A17:  ADDWF  20,W
1A18:  MOVWF  78
1A19:  MOVF   21,W
1A1A:  MOVWF  7A
1A1B:  BTFSC  03.0
1A1C:  INCF   7A,F
1A1D:  MOVF   78,W
1A1E:  MOVWF  2C
1A1F:  MOVF   7A,W
1A20:  MOVWF  2D
1A21:  MOVWF  39
1A22:  MOVF   2C,W
1A23:  MOVWF  38
1A24:  CLRF   3A
1A25:  BCF    0A.4
1A26:  BCF    0A.3
1A27:  BCF    03.6
1A28:  CALL   719
1A29:  BSF    0A.4
1A2A:  BSF    0A.3
1A2B:  MOVF   79,W
1A2C:  MOVWF  7A
1A2D:  MOVF   78,W
1A2E:  BSF    03.6
1A2F:  MOVWF  2C
1A30:  MOVF   7A,W
1A31:  MOVWF  2D
1A32:  MOVLW  01
1A33:  MOVWF  2F
1A34:  MOVLW  26
1A35:  MOVWF  2E
1A36:  MOVLW  06
1A37:  MOVWF  78
1A38:  MOVF   2C,W
1A39:  MOVWF  04
1A3A:  BCF    03.7
1A3B:  BTFSC  2D.0
1A3C:  BSF    03.7
1A3D:  MOVF   00,W
1A3E:  MOVWF  77
1A3F:  MOVF   2E,W
1A40:  MOVWF  04
1A41:  BCF    03.7
1A42:  BTFSC  2F.0
1A43:  BSF    03.7
1A44:  MOVF   77,W
1A45:  MOVWF  00
1A46:  INCF   2E,F
1A47:  BTFSC  03.2
1A48:  INCF   2F,F
1A49:  INCF   2C,F
1A4A:  BTFSC  03.2
1A4B:  INCF   2D,F
1A4C:  DECFSZ 78,F
1A4D:  GOTO   238
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1A4E:  MOVLW  08
1A4F:  MOVWF  23
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
1A50:  MOVF   26,W
1A51:  BCF    0A.4
1A52:  BCF    0A.3
1A53:  BCF    03.6
1A54:  CALL   004
1A55:  BSF    0A.4
1A56:  BSF    0A.3
1A57:  MOVWF  78
1A58:  BSF    03.6
1A59:  MOVWF  24
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
1A5A:  MOVF   27,W
1A5B:  BCF    0A.4
1A5C:  BCF    0A.3
1A5D:  BCF    03.6
1A5E:  CALL   004
1A5F:  BSF    0A.4
1A60:  BSF    0A.3
1A61:  MOVWF  78
1A62:  BSF    03.6
1A63:  MOVWF  25
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1A64:  MOVLW  01
1A65:  MOVWF  37
1A66:  MOVLW  22
1A67:  MOVWF  36
1A68:  MOVLW  04
1A69:  MOVWF  38
1A6A:  BCF    0A.4
1A6B:  BCF    0A.3
1A6C:  BCF    03.6
1A6D:  CALL   786
1A6E:  BSF    0A.4
1A6F:  BSF    0A.3
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A89:  CLRF   22
1A8A:  CLRF   23
1A8B:  CLRF   24
1A8C:  CLRF   25
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A8D:  MOVLW  08
1A8E:  ADDWF  20,W
1A8F:  MOVWF  78
1A90:  MOVF   21,W
1A91:  MOVWF  7A
1A92:  BTFSC  03.0
1A93:  INCF   7A,F
1A94:  MOVF   78,W
1A95:  MOVWF  2C
1A96:  MOVF   7A,W
1A97:  MOVWF  2D
1A98:  MOVWF  39
1A99:  MOVF   2C,W
1A9A:  MOVWF  38
1A9B:  CLRF   3A
1A9C:  BCF    0A.4
1A9D:  BCF    0A.3
1A9E:  BCF    03.6
1A9F:  CALL   719
1AA0:  BSF    0A.4
1AA1:  BSF    0A.3
1AA2:  MOVF   79,W
1AA3:  MOVWF  7A
1AA4:  MOVF   78,W
1AA5:  BSF    03.6
1AA6:  MOVWF  2C
1AA7:  MOVF   7A,W
1AA8:  MOVWF  2D
1AA9:  MOVLW  01
1AAA:  MOVWF  2F
1AAB:  MOVLW  26
1AAC:  MOVWF  2E
1AAD:  MOVLW  06
1AAE:  MOVWF  78
1AAF:  MOVF   2C,W
1AB0:  MOVWF  04
1AB1:  BCF    03.7
1AB2:  BTFSC  2D.0
1AB3:  BSF    03.7
1AB4:  MOVF   00,W
1AB5:  MOVWF  77
1AB6:  MOVF   2E,W
1AB7:  MOVWF  04
1AB8:  BCF    03.7
1AB9:  BTFSC  2F.0
1ABA:  BSF    03.7
1ABB:  MOVF   77,W
1ABC:  MOVWF  00
1ABD:  INCF   2E,F
1ABE:  BTFSC  03.2
1ABF:  INCF   2F,F
1AC0:  INCF   2C,F
1AC1:  BTFSC  03.2
1AC2:  INCF   2D,F
1AC3:  DECFSZ 78,F
1AC4:  GOTO   2AF
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1AC5:  MOVLW  08
1AC6:  MOVWF  23
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
1AC7:  MOVF   28,W
1AC8:  BCF    0A.4
1AC9:  BCF    0A.3
1ACA:  BCF    03.6
1ACB:  CALL   004
1ACC:  BSF    0A.4
1ACD:  BSF    0A.3
1ACE:  MOVWF  78
1ACF:  BSF    03.6
1AD0:  MOVWF  24
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
1AD1:  MOVF   29,W
1AD2:  BCF    0A.4
1AD3:  BCF    0A.3
1AD4:  BCF    03.6
1AD5:  CALL   004
1AD6:  BSF    0A.4
1AD7:  BSF    0A.3
1AD8:  MOVWF  78
1AD9:  BSF    03.6
1ADA:  MOVWF  25
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1ADB:  MOVLW  01
1ADC:  MOVWF  37
1ADD:  MOVLW  22
1ADE:  MOVWF  36
1ADF:  MOVLW  04
1AE0:  MOVWF  38
1AE1:  BCF    0A.4
1AE2:  BCF    0A.3
1AE3:  BCF    03.6
1AE4:  CALL   786
1AE5:  BSF    0A.4
1AE6:  BSF    0A.3
1AE7:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_HOURS_MINUTES = 0, 
....................     FORMAT_MINUTES_SECONDS, 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTUP = 0, 
....................     COUNTDOWN, 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_SETTING_BRIGHTNESS, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     int brightness; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
....................     char addressBrightness; 
....................     char addressTypeOfCount; 
....................     char addressFirstNumber; 
....................     char addressSecondNumber; 
.................... } PolyoneDisplay; 
....................  
.................... const int brightnessLevels[10] = {10, 34, 58, 82, 106, 130, 154, 178, 202, 255}; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Time time; 
....................     time = polyoneDisplayPtr->timer.currentTime; 
*
0402:  MOVLW  04
0403:  BSF    03.6
0404:  ADDWF  4D,W
0405:  MOVWF  04
0406:  BCF    03.7
0407:  BTFSC  4E.0
0408:  BSF    03.7
0409:  MOVF   00,W
040A:  MOVWF  77
040B:  INCF   04,F
040C:  MOVF   00,W
040D:  MOVWF  78
040E:  INCF   04,F
040F:  MOVF   00,W
0410:  MOVWF  79
0411:  INCF   04,F
0412:  MOVF   00,W
0413:  MOVWF  7A
0414:  MOVF   77,W
0415:  MOVWF  4F
0416:  MOVF   78,W
0417:  MOVWF  50
0418:  MOVF   79,W
0419:  MOVWF  51
041A:  MOVF   7A,W
041B:  MOVWF  52
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
041C:  MOVLW  16
041D:  ADDWF  4D,W
041E:  MOVWF  04
041F:  BCF    03.7
0420:  BTFSC  4E.0
0421:  BSF    03.7
0422:  MOVF   00,W
0423:  ANDLW  01
0424:  BTFSS  03.2
0425:  GOTO   444
....................         setDate(1, (time.hour / 4) + 1, 1, 1); 
0426:  RRF    50,W
0427:  MOVWF  77
0428:  RRF    77,F
0429:  MOVLW  3F
042A:  ANDWF  77,F
042B:  MOVF   77,W
042C:  ADDLW  01
042D:  MOVWF  53
042E:  MOVLW  01
042F:  MOVWF  54
0430:  MOVF   53,W
0431:  MOVWF  55
0432:  MOVLW  01
0433:  MOVWF  56
0434:  MOVWF  57
0435:  BCF    03.6
0436:  CALL   39E
....................         time.hour %= 24; 
0437:  BSF    03.6
0438:  MOVF   50,W
0439:  BSF    03.5
043A:  MOVWF  28
043B:  MOVLW  18
043C:  MOVWF  29
043D:  BCF    03.5
043E:  BCF    03.6
043F:  CALL   03D
0440:  MOVF   77,W
0441:  BSF    03.6
0442:  MOVWF  50
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
0443:  GOTO   465
0444:  MOVLW  16
0445:  ADDWF  4D,W
0446:  MOVWF  04
0447:  BCF    03.7
0448:  BTFSC  4E.0
0449:  BSF    03.7
044A:  MOVF   00,W
044B:  ANDLW  01
044C:  SUBLW  01
044D:  BTFSS  03.2
044E:  GOTO   465
....................         time.hour = time.minute / 60; 
044F:  MOVF   51,W
0450:  BSF    03.5
0451:  MOVWF  28
0452:  MOVLW  3C
0453:  MOVWF  29
0454:  BCF    03.5
0455:  BCF    03.6
0456:  CALL   03D
0457:  MOVF   78,W
0458:  BSF    03.6
0459:  MOVWF  50
....................         time.minute %= 60; 
045A:  MOVF   51,W
045B:  BSF    03.5
045C:  MOVWF  28
045D:  MOVLW  3C
045E:  MOVWF  29
045F:  BCF    03.5
0460:  BCF    03.6
0461:  CALL   03D
0462:  MOVF   77,W
0463:  BSF    03.6
0464:  MOVWF  51
....................     } 
....................     Time_setClockTime(&time); 
0465:  MOVLW  01
0466:  MOVWF  54
0467:  MOVLW  4F
0468:  MOVWF  53
*
04A4:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->timer.currentTime = Time_getCurrentTime(); 
*
05E9:  MOVLW  04
05EA:  BSF    03.6
05EB:  ADDWF  4D,W
05EC:  MOVWF  78
05ED:  MOVF   4E,W
05EE:  MOVWF  7A
05EF:  BTFSC  03.0
05F0:  INCF   7A,F
05F1:  MOVF   78,W
05F2:  MOVWF  53
05F3:  MOVF   7A,W
05F4:  MOVWF  54
05F5:  BCF    03.6
05F6:  CALL   595
05F7:  BSF    03.6
05F8:  MOVF   53,W
05F9:  MOVWF  04
05FA:  BCF    03.7
05FB:  BTFSC  54.0
05FC:  BSF    03.7
05FD:  MOVF   77,W
05FE:  MOVWF  00
05FF:  INCF   04,F
0600:  MOVF   78,W
0601:  MOVWF  00
0602:  INCF   04,F
0603:  MOVF   79,W
0604:  MOVWF  00
0605:  INCF   04,F
0606:  MOVF   7A,W
0607:  MOVWF  00
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0608:  MOVLW  16
0609:  ADDWF  4D,W
060A:  MOVWF  04
060B:  BCF    03.7
060C:  BTFSC  4E.0
060D:  BSF    03.7
060E:  MOVF   00,W
060F:  ANDLW  01
0610:  BTFSS  03.2
0611:  GOTO   669
....................         int dayOfMonth; 
....................         int month; 
....................         int year; 
....................         int dayOfWeek; 
....................         DS3231_get_Date(dayOfMonth, month, year, dayOfWeek); 
....................         polyoneDisplayPtr->timer.currentTime.hour += ((dayOfMonth - 1) % 5) * 24; 
*
064D:  MOVLW  05
064E:  ADDWF  4D,W
064F:  MOVWF  04
0650:  BCF    03.7
0651:  BTFSC  4E.0
0652:  BSF    03.7
0653:  MOVLW  01
0654:  SUBWF  4F,W
0655:  MOVWF  57
0656:  BSF    03.5
0657:  MOVWF  28
0658:  MOVLW  05
0659:  MOVWF  29
065A:  BCF    03.5
065B:  BCF    03.6
065C:  CALL   03D
065D:  MOVF   77,W
065E:  BSF    03.6
065F:  MOVWF  63
0660:  MOVLW  18
0661:  MOVWF  64
0662:  BCF    03.6
0663:  CALL   557
0664:  MOVF   78,W
0665:  ADDWF  00,W
0666:  MOVWF  00
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
0667:  GOTO   6A0
0668:  BSF    03.6
0669:  MOVLW  16
066A:  ADDWF  4D,W
066B:  MOVWF  04
066C:  BCF    03.7
066D:  BTFSC  4E.0
066E:  BSF    03.7
066F:  MOVF   00,W
0670:  ANDLW  01
0671:  SUBLW  01
0672:  BTFSS  03.2
0673:  GOTO   69F
....................         polyoneDisplayPtr->timer.currentTime.minute += (polyoneDisplayPtr->timer.currentTime.hour % 2) * 60; 
0674:  MOVLW  06
0675:  ADDWF  4D,W
0676:  MOVWF  78
0677:  MOVF   4E,W
0678:  MOVWF  7A
0679:  BTFSC  03.0
067A:  INCF   7A,F
067B:  MOVF   78,W
067C:  MOVWF  53
067D:  MOVF   7A,W
067E:  MOVWF  54
067F:  MOVF   53,W
0680:  MOVWF  04
0681:  BCF    03.7
0682:  BTFSC  54.0
0683:  BSF    03.7
0684:  MOVF   00,W
0685:  MOVWF  55
0686:  MOVLW  05
0687:  ADDWF  4D,W
0688:  MOVWF  04
0689:  BCF    03.7
068A:  BTFSC  4E.0
068B:  BSF    03.7
068C:  MOVF   00,W
068D:  ANDLW  01
068E:  MOVWF  57
068F:  MOVWF  63
0690:  MOVLW  3C
0691:  MOVWF  64
0692:  BCF    03.6
0693:  CALL   557
0694:  MOVF   78,W
0695:  BSF    03.6
0696:  ADDWF  55,W
0697:  MOVWF  55
0698:  MOVF   53,W
0699:  MOVWF  04
069A:  BCF    03.7
069B:  BTFSC  54.0
069C:  BSF    03.7
069D:  MOVF   55,W
069E:  MOVWF  00
069F:  BCF    03.6
....................     } 
....................  
....................     Timer_updateCountdownTime(&polyoneDisplayPtr->timer); 
06A0:  BSF    03.6
06A1:  MOVF   4D,W
06A2:  MOVWF  78
06A3:  MOVF   4E,W
06A4:  MOVWF  7A
06A5:  MOVF   4D,W
06A6:  MOVWF  53
06A7:  MOVF   4E,W
06A8:  MOVWF  54
06A9:  MOVWF  56
06AA:  MOVF   4D,W
06AB:  MOVWF  55
06AC:  BCF    03.6
06AD:  CALL   1A0
06AE:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(char addressCurrentState, 
....................         char addressPreviousState, char addressFormat, 
....................         char addressFirstNumberAlarm, 
....................         char addressSecondNumberAlarm, char addressRtcHours, 
....................         char addressRtcMinutes, char addressRtcSeconds, 
....................         char addressBrightness, char addressTypeOfCount) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
101A:  MOVF   22,W
101B:  MOVWF  46
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
101C:  MOVF   23,W
101D:  MOVWF  47
....................     polyoneDisplay.addressFormat = addressFormat; 
101E:  MOVF   24,W
101F:  MOVWF  48
....................     polyoneDisplay.addressBrightness = addressBrightness; 
1020:  MOVF   2A,W
1021:  MOVWF  49
....................     polyoneDisplay.addressTypeOfCount = addressTypeOfCount; 
1022:  MOVF   2B,W
1023:  MOVWF  4A
....................     polyoneDisplay.addressFirstNumber = addressFirstNumberAlarm; 
1024:  MOVF   25,W
1025:  MOVWF  4B
....................     polyoneDisplay.addressSecondNumber = addressSecondNumberAlarm; 
1026:  MOVF   26,W
1027:  MOVWF  4C
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
1028:  MOVF   24,W
1029:  MOVWF  0D
102A:  BSF    03.5
102B:  BCF    0C.7
102C:  BSF    0C.0
102D:  BCF    03.5
102E:  MOVF   0C,W
102F:  ANDLW  01
1030:  MOVWF  78
1031:  BCF    42.0
1032:  BTFSC  78.0
1033:  BSF    42.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
1034:  MOVF   22,W
1035:  MOVWF  0D
1036:  BSF    03.5
1037:  BCF    0C.7
1038:  BSF    0C.0
1039:  BCF    03.5
103A:  MOVF   0C,W
103B:  MOVWF  4E
103C:  MOVF   4E,W
103D:  BSF    03.5
103E:  MOVWF  28
103F:  MOVLW  03
1040:  MOVWF  29
1041:  BCF    0A.4
1042:  BCF    03.5
1043:  BCF    03.6
1044:  CALL   03D
1045:  BSF    0A.4
1046:  MOVF   77,W
1047:  BSF    03.6
1048:  MOVWF  43
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
1049:  MOVF   23,W
104A:  MOVWF  0D
104B:  BSF    03.5
104C:  BCF    0C.7
104D:  BSF    0C.0
104E:  BCF    03.5
104F:  MOVF   0C,W
1050:  MOVWF  4E
1051:  MOVF   4E,W
1052:  BSF    03.5
1053:  MOVWF  28
1054:  MOVLW  03
1055:  MOVWF  29
1056:  BCF    0A.4
1057:  BCF    03.5
1058:  BCF    03.6
1059:  CALL   03D
105A:  BSF    0A.4
105B:  MOVF   77,W
105C:  BSF    03.6
105D:  MOVWF  44
....................     polyoneDisplay.brightness = read_eeprom(addressBrightness) % 10; 
105E:  MOVF   2A,W
105F:  MOVWF  0D
1060:  BSF    03.5
1061:  BCF    0C.7
1062:  BSF    0C.0
1063:  BCF    03.5
1064:  MOVF   0C,W
1065:  MOVWF  4E
1066:  MOVF   4E,W
1067:  BSF    03.5
1068:  MOVWF  28
1069:  MOVLW  0A
106A:  MOVWF  29
106B:  BCF    0A.4
106C:  BCF    03.5
106D:  BCF    03.6
106E:  CALL   03D
106F:  BSF    0A.4
1070:  MOVF   77,W
1071:  BSF    03.6
1072:  MOVWF  45
....................     polyoneDisplay.typeOfCount = read_eeprom(addressTypeOfCount) % 2; 
1073:  MOVF   2B,W
1074:  MOVWF  0D
1075:  BSF    03.5
1076:  BCF    0C.7
1077:  BSF    0C.0
1078:  BCF    03.5
1079:  MOVF   0C,W
107A:  ANDLW  01
107B:  MOVWF  78
107C:  BCF    42.1
107D:  BTFSC  78.0
107E:  BSF    42.1
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
107F:  MOVF   44,F
1080:  BTFSS  03.2
1081:  GOTO   087
1082:  MOVF   43,F
1083:  BTFSS  03.2
1084:  GOTO   087
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
1085:  MOVLW  02
1086:  MOVWF  44
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
1087:  MOVLW  00
1088:  BTFSC  42.0
1089:  MOVLW  01
108A:  XORLW  00
108B:  BCF    03.6
108C:  BTFSC  03.2
108D:  GOTO   092
108E:  XORLW  01
108F:  BTFSC  03.2
1090:  GOTO   150
1091:  GOTO   20A
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
1092:  MOVLW  63
1093:  BSF    03.6
1094:  MOVWF  57
1095:  MOVLW  3B
1096:  MOVWF  58
1097:  CLRF   5A
1098:  MOVF   25,W
1099:  MOVWF  59
109A:  CLRF   5C
109B:  MOVF   26,W
109C:  MOVWF  5B
109D:  CLRF   5E
109E:  MOVF   27,W
109F:  MOVWF  5D
10A0:  CLRF   60
10A1:  MOVF   28,W
10A2:  MOVWF  5F
10A3:  CLRF   62
10A4:  MOVF   29,W
10A5:  MOVWF  61
*
1100:  MOVF   79,W
1101:  MOVWF  7A
1102:  MOVF   78,W
1103:  BCF    03.5
1104:  MOVWF  51
1105:  MOVF   7A,W
1106:  MOVWF  52
1107:  MOVLW  01
1108:  MOVWF  54
1109:  MOVLW  2C
110A:  MOVWF  53
110B:  MOVLW  16
110C:  MOVWF  78
110D:  MOVF   51,W
110E:  MOVWF  04
110F:  BCF    03.7
1110:  BTFSC  52.0
1111:  BSF    03.7
1112:  MOVF   00,W
1113:  MOVWF  77
1114:  MOVF   53,W
1115:  MOVWF  04
1116:  BCF    03.7
1117:  BTFSC  54.0
1118:  BSF    03.7
1119:  MOVF   77,W
111A:  MOVWF  00
111B:  INCF   53,F
111C:  BTFSC  03.2
111D:  INCF   54,F
111E:  INCF   51,F
111F:  BTFSC  03.2
1120:  INCF   52,F
1121:  DECFSZ 78,F
1122:  GOTO   10D
....................  
....................             polyoneDisplay.timer.alarmTime.hour = read_eeprom( 
....................                     addressFirstNumberAlarm) % (FIRST_NUMBER_UPPER_BOUND + 1); 
1123:  MOVF   25,W
1124:  MOVWF  0D
1125:  BSF    03.5
1126:  BCF    0C.7
1127:  BSF    0C.0
1128:  BCF    03.5
1129:  MOVF   0C,W
112A:  MOVWF  4E
112B:  MOVF   4E,W
112C:  BSF    03.5
112D:  MOVWF  28
112E:  MOVLW  64
112F:  MOVWF  29
1130:  BCF    0A.4
1131:  BCF    03.5
1132:  BCF    03.6
1133:  CALL   03D
1134:  BSF    0A.4
1135:  MOVF   77,W
1136:  BSF    03.6
1137:  MOVWF  35
....................             polyoneDisplay.timer.alarmTime.minute = read_eeprom( 
....................                     addressSecondNumberAlarm) % (SECOND_NUMBER_UPPER_BOUND + 1); 
1138:  MOVF   26,W
1139:  MOVWF  0D
113A:  BSF    03.5
113B:  BCF    0C.7
113C:  BSF    0C.0
113D:  BCF    03.5
113E:  MOVF   0C,W
113F:  MOVWF  4E
1140:  MOVF   4E,W
1141:  BSF    03.5
1142:  MOVWF  28
1143:  MOVLW  3C
1144:  MOVWF  29
1145:  BCF    0A.4
1146:  BCF    03.5
1147:  BCF    03.6
1148:  CALL   03D
1149:  BSF    0A.4
114A:  MOVF   77,W
114B:  BSF    03.6
114C:  MOVWF  36
....................             polyoneDisplay.timer.alarmTime.second = 0; 
114D:  CLRF   37
....................             break; 
114E:  BCF    03.6
114F:  GOTO   20A
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
1150:  MOVLW  63
1151:  BSF    03.6
1152:  MOVWF  57
1153:  CLRF   59
1154:  MOVF   25,W
1155:  MOVWF  58
1156:  CLRF   5B
1157:  MOVF   26,W
1158:  MOVWF  5A
1159:  CLRF   5D
115A:  MOVF   27,W
115B:  MOVWF  5C
115C:  CLRF   5F
115D:  MOVF   28,W
115E:  MOVWF  5E
115F:  CLRF   61
1160:  MOVF   29,W
1161:  MOVWF  60
*
11BB:  MOVF   79,W
11BC:  MOVWF  7A
11BD:  MOVF   78,W
11BE:  BCF    03.5
11BF:  MOVWF  51
11C0:  MOVF   7A,W
11C1:  MOVWF  52
11C2:  MOVLW  01
11C3:  MOVWF  54
11C4:  MOVLW  2C
11C5:  MOVWF  53
11C6:  MOVLW  16
11C7:  MOVWF  78
11C8:  MOVF   51,W
11C9:  MOVWF  04
11CA:  BCF    03.7
11CB:  BTFSC  52.0
11CC:  BSF    03.7
11CD:  MOVF   00,W
11CE:  MOVWF  77
11CF:  MOVF   53,W
11D0:  MOVWF  04
11D1:  BCF    03.7
11D2:  BTFSC  54.0
11D3:  BSF    03.7
11D4:  MOVF   77,W
11D5:  MOVWF  00
11D6:  INCF   53,F
11D7:  BTFSC  03.2
11D8:  INCF   54,F
11D9:  INCF   51,F
11DA:  BTFSC  03.2
11DB:  INCF   52,F
11DC:  DECFSZ 78,F
11DD:  GOTO   1C8
....................  
....................             polyoneDisplay.timer.alarmTime.hour = 0; 
11DE:  CLRF   35
....................             polyoneDisplay.timer.alarmTime.minute = read_eeprom( 
....................                     addressFirstNumberAlarm) % (FIRST_NUMBER_UPPER_BOUND + 1); 
11DF:  MOVF   25,W
11E0:  MOVWF  0D
11E1:  BSF    03.5
11E2:  BCF    0C.7
11E3:  BSF    0C.0
11E4:  BCF    03.5
11E5:  MOVF   0C,W
11E6:  MOVWF  4E
11E7:  MOVF   4E,W
11E8:  BSF    03.5
11E9:  MOVWF  28
11EA:  MOVLW  64
11EB:  MOVWF  29
11EC:  BCF    0A.4
11ED:  BCF    03.5
11EE:  BCF    03.6
11EF:  CALL   03D
11F0:  BSF    0A.4
11F1:  MOVF   77,W
11F2:  BSF    03.6
11F3:  MOVWF  36
....................             polyoneDisplay.timer.alarmTime.second = read_eeprom( 
....................                     addressSecondNumberAlarm) % (60); 
11F4:  MOVF   26,W
11F5:  MOVWF  0D
11F6:  BSF    03.5
11F7:  BCF    0C.7
11F8:  BSF    0C.0
11F9:  BCF    03.5
11FA:  MOVF   0C,W
11FB:  MOVWF  4E
11FC:  MOVF   4E,W
11FD:  BSF    03.5
11FE:  MOVWF  28
11FF:  MOVLW  3C
1200:  MOVWF  29
1201:  BCF    0A.4
1202:  BCF    03.5
1203:  BCF    03.6
1204:  CALL   03D
1205:  BSF    0A.4
1206:  MOVF   77,W
1207:  BSF    03.6
1208:  MOVWF  37
....................  
....................             break; 
1209:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
120A:  BSF    03.6
120B:  MOVF   43,F
120C:  BTFSS  03.2
120D:  GOTO   2DC
....................         Timer_updateTimerFromEeprom(&polyoneDisplay.timer); 
120E:  MOVLW  01
120F:  MOVWF  4E
1210:  MOVLW  2C
1211:  MOVWF  4D
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
*
12C8:  MOVLW  01
12C9:  BSF    03.6
12CA:  MOVWF  4E
12CB:  MOVLW  2C
12CC:  MOVWF  4D
12CD:  BCF    0A.4
12CE:  BCF    03.6
12CF:  CALL   402
12D0:  BSF    0A.4
....................         Timer_updateCountdownTime(&polyoneDisplay); 
12D1:  MOVLW  01
12D2:  BSF    03.6
12D3:  MOVWF  56
12D4:  MOVLW  2C
12D5:  MOVWF  55
12D6:  BCF    0A.4
12D7:  BCF    03.6
12D8:  CALL   1A0
12D9:  BSF    0A.4
....................     } else { 
12DA:  GOTO   2E4
12DB:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
12DC:  MOVLW  01
12DD:  MOVWF  4E
12DE:  MOVLW  2C
12DF:  MOVWF  4D
12E0:  BCF    0A.4
12E1:  BCF    03.6
12E2:  CALL   5E9
12E3:  BSF    0A.4
....................     } 
....................  
....................     return polyoneDisplay; 
12E4:  MOVLW  2C
12E5:  MOVWF  78
12E6:  MOVLW  01
12E7:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
*
0873:  MOVLW  16
0874:  BSF    03.6
0875:  ADDWF  1C,W
0876:  MOVWF  04
0877:  BCF    03.7
0878:  BTFSC  1D.0
0879:  BSF    03.7
087A:  MOVF   00,W
087B:  MOVWF  77
087C:  RRF    77,W
087D:  ANDLW  01
087E:  BTFSS  03.2
087F:  GOTO   1BD
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
0880:  MOVLW  16
0881:  ADDWF  1C,W
0882:  MOVWF  04
0883:  BCF    03.7
0884:  BTFSC  1D.0
0885:  BSF    03.7
0886:  MOVF   00,W
0887:  ANDLW  01
0888:  BTFSS  03.2
0889:  GOTO   149
....................             Time_showHoursMinutesRtc(withBlink); 
088A:  MOVF   1E,W
088B:  MOVWF  1F
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0947:  GOTO   1BB
0948:  BSF    03.6
0949:  MOVLW  16
094A:  ADDWF  1C,W
094B:  MOVWF  04
094C:  BCF    03.7
094D:  BTFSC  1D.0
094E:  BSF    03.7
094F:  MOVF   00,W
0950:  ANDLW  01
0951:  SUBLW  01
0952:  BTFSS  03.2
0953:  GOTO   1BC
....................             Time_showMinutesSecondsRtc(); 
....................         } 
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
*
09BC:  GOTO   2C6
09BD:  MOVLW  16
09BE:  ADDWF  1C,W
09BF:  MOVWF  04
09C0:  BCF    03.7
09C1:  BTFSC  1D.0
09C2:  BSF    03.7
09C3:  MOVF   00,W
09C4:  MOVWF  77
09C5:  RRF    77,W
09C6:  ANDLW  01
09C7:  SUBLW  01
09C8:  BTFSS  03.2
09C9:  GOTO   2C6
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
09CA:  MOVLW  16
09CB:  ADDWF  1C,W
09CC:  MOVWF  04
09CD:  BCF    03.7
09CE:  BTFSC  1D.0
09CF:  BSF    03.7
09D0:  MOVF   00,W
09D1:  ANDLW  01
09D2:  BTFSS  03.2
09D3:  GOTO   23C
....................             Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
09D4:  MOVF   1C,W
09D5:  MOVWF  78
09D6:  MOVF   1D,W
09D7:  MOVWF  7A
09D8:  MOVF   78,W
09D9:  MOVWF  1F
09DA:  MOVF   7A,W
09DB:  MOVWF  20
09DC:  MOVF   20,W
09DD:  MOVWF  22
09DE:  MOVF   1F,W
09DF:  MOVWF  21
09E0:  MOVF   1E,W
09E1:  MOVWF  23
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0A3A:  GOTO   2C5
0A3B:  BSF    03.6
0A3C:  MOVLW  16
0A3D:  ADDWF  1C,W
0A3E:  MOVWF  04
0A3F:  BCF    03.7
0A40:  BTFSC  1D.0
0A41:  BSF    03.7
0A42:  MOVF   00,W
0A43:  ANDLW  01
0A44:  SUBLW  01
0A45:  BTFSS  03.2
0A46:  GOTO   2C6
....................             Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0A47:  MOVF   1C,W
0A48:  MOVWF  78
0A49:  MOVF   1D,W
0A4A:  MOVWF  7A
0A4B:  MOVF   78,W
0A4C:  MOVWF  1F
0A4D:  MOVF   7A,W
0A4E:  MOVWF  20
0A4F:  MOVF   20,W
0A50:  MOVWF  22
0A51:  MOVF   1F,W
0A52:  MOVWF  21
....................         } 
....................     } 
*
0AC6:  BCF    03.6
0AC7:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0C41:  MOVLW  16
0C42:  BSF    03.6
0C43:  ADDWF  1C,W
0C44:  MOVWF  04
0C45:  BCF    03.7
0C46:  BTFSC  1D.0
0C47:  BSF    03.7
0C48:  MOVF   00,W
0C49:  ANDLW  01
0C4A:  BTFSS  03.2
0C4B:  GOTO   4A2
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0C4C:  MOVF   1C,W
0C4D:  MOVWF  1E
0C4E:  MOVF   1D,W
0C4F:  MOVWF  1F
0C50:  MOVF   1F,W
0C51:  MOVWF  21
0C52:  MOVF   1E,W
0C53:  MOVWF  20
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0CA0:  GOTO   501
0CA1:  BSF    03.6
0CA2:  MOVLW  16
0CA3:  ADDWF  1C,W
0CA4:  MOVWF  04
0CA5:  BCF    03.7
0CA6:  BTFSC  1D.0
0CA7:  BSF    03.7
0CA8:  MOVF   00,W
0CA9:  ANDLW  01
0CAA:  SUBLW  01
0CAB:  BTFSS  03.2
0CAC:  GOTO   502
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0CAD:  MOVF   1C,W
0CAE:  MOVWF  1E
0CAF:  MOVF   1D,W
0CB0:  MOVWF  1F
0CB1:  MOVF   1F,W
0CB2:  MOVWF  21
0CB3:  MOVF   1E,W
0CB4:  MOVWF  20
....................     } 
*
0D02:  BCF    03.6
0D03:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_hideBrightness(void) { 
....................     int numbersToSend[4] = {0}; 
*
1E76:  BSF    03.6
1E77:  CLRF   1C
1E78:  CLRF   1D
1E79:  CLRF   1E
1E7A:  CLRF   1F
....................  
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1E7B:  MOVLW  37
1E7C:  MOVWF  1E
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1E7D:  MOVLW  01
1E7E:  MOVWF  37
1E7F:  MOVLW  1C
1E80:  MOVWF  36
1E81:  MOVLW  04
1E82:  MOVWF  38
1E83:  BCF    0A.4
1E84:  BCF    0A.3
1E85:  BCF    03.6
1E86:  CALL   786
1E87:  BSF    0A.4
1E88:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_showBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0D36:  BSF    03.6
0D37:  CLRF   1E
0D38:  CLRF   1F
0D39:  CLRF   20
0D3A:  CLRF   21
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) % 10]; 
0D3B:  MOVLW  19
0D3C:  ADDWF  1C,W
0D3D:  MOVWF  04
0D3E:  BCF    03.7
0D3F:  BTFSC  1D.0
0D40:  BSF    03.7
0D41:  MOVLW  01
0D42:  ADDWF  00,W
0D43:  MOVWF  23
0D44:  BSF    03.5
0D45:  MOVWF  28
0D46:  MOVLW  0A
0D47:  MOVWF  29
0D48:  BCF    0A.3
0D49:  BCF    03.5
0D4A:  BCF    03.6
0D4B:  CALL   03D
0D4C:  BSF    0A.3
0D4D:  MOVF   77,W
0D4E:  BCF    0A.3
0D4F:  CALL   004
0D50:  BSF    0A.3
0D51:  MOVWF  78
0D52:  BSF    03.6
0D53:  MOVWF  1E
....................     numbersToSend[1] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) / 10] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0D54:  MOVLW  19
0D55:  ADDWF  1C,W
0D56:  MOVWF  04
0D57:  BCF    03.7
0D58:  BTFSC  1D.0
0D59:  BSF    03.7
0D5A:  MOVLW  01
0D5B:  ADDWF  00,W
0D5C:  MOVWF  23
0D5D:  BSF    03.5
0D5E:  MOVWF  28
0D5F:  MOVLW  0A
0D60:  MOVWF  29
0D61:  BCF    0A.3
0D62:  BCF    03.5
0D63:  BCF    03.6
0D64:  CALL   03D
0D65:  BSF    0A.3
0D66:  MOVF   78,W
0D67:  BCF    0A.3
0D68:  CALL   004
0D69:  BSF    0A.3
0D6A:  IORLW  08
0D6B:  BSF    03.6
0D6C:  MOVWF  1F
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
0D6D:  MOVLW  37
0D6E:  MOVWF  20
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
0D6F:  MOVLW  01
0D70:  MOVWF  37
0D71:  MOVLW  1E
0D72:  MOVWF  36
0D73:  MOVLW  04
0D74:  MOVWF  38
0D75:  BCF    0A.3
0D76:  BCF    03.6
0D77:  CALL   786
0D78:  BSF    0A.3
0D79:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
19FC:  MOVLW  16
19FD:  ADDWF  1C,W
19FE:  MOVWF  04
19FF:  BCF    03.7
1A00:  BTFSC  1D.0
1A01:  BSF    03.7
1A02:  MOVF   00,W
1A03:  ANDLW  01
1A04:  BTFSS  03.2
1A05:  GOTO   272
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
1A06:  MOVF   1C,W
1A07:  MOVWF  78
1A08:  MOVF   1D,W
1A09:  MOVWF  7A
1A0A:  MOVF   78,W
1A0B:  MOVWF  1E
1A0C:  MOVF   7A,W
1A0D:  MOVWF  1F
1A0E:  MOVF   1F,W
1A0F:  MOVWF  21
1A10:  MOVF   1E,W
1A11:  MOVWF  20
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1A70:  GOTO   2E7
1A71:  BSF    03.6
1A72:  MOVLW  16
1A73:  ADDWF  1C,W
1A74:  MOVWF  04
1A75:  BCF    03.7
1A76:  BTFSC  1D.0
1A77:  BSF    03.7
1A78:  MOVF   00,W
1A79:  ANDLW  01
1A7A:  SUBLW  01
1A7B:  BTFSS  03.2
1A7C:  GOTO   2E8
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1A7D:  MOVF   1C,W
1A7E:  MOVWF  78
1A7F:  MOVF   1D,W
1A80:  MOVWF  7A
1A81:  MOVF   78,W
1A82:  MOVWF  1E
1A83:  MOVF   7A,W
1A84:  MOVWF  1F
1A85:  MOVF   1F,W
1A86:  MOVWF  21
1A87:  MOVF   1E,W
1A88:  MOVWF  20
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
185D:  MOVLW  16
185E:  ADDWF  1C,W
185F:  MOVWF  04
1860:  BCF    03.7
1861:  BTFSC  1D.0
1862:  BSF    03.7
1863:  MOVF   00,W
1864:  ANDLW  01
1865:  BTFSS  03.2
1866:  GOTO   0D1
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1867:  MOVF   1C,W
1868:  MOVWF  78
1869:  MOVF   1D,W
186A:  MOVWF  7A
186B:  MOVF   78,W
186C:  MOVWF  1E
186D:  MOVF   7A,W
186E:  MOVWF  1F
186F:  MOVF   1F,W
1870:  MOVWF  21
1871:  MOVF   1E,W
1872:  MOVWF  20
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
18CF:  GOTO   144
18D0:  BSF    03.6
18D1:  MOVLW  16
18D2:  ADDWF  1C,W
18D3:  MOVWF  04
18D4:  BCF    03.7
18D5:  BTFSC  1D.0
18D6:  BSF    03.7
18D7:  MOVF   00,W
18D8:  ANDLW  01
18D9:  SUBLW  01
18DA:  BTFSS  03.2
18DB:  GOTO   145
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
18DC:  MOVF   1C,W
18DD:  MOVWF  78
18DE:  MOVF   1D,W
18DF:  MOVWF  7A
18E0:  MOVF   78,W
18E1:  MOVWF  1E
18E2:  MOVF   7A,W
18E3:  MOVWF  1F
18E4:  MOVF   1F,W
18E5:  MOVWF  21
18E6:  MOVF   1E,W
18E7:  MOVWF  20
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1BD5:  CLRF   1E
1BD6:  CLRF   1F
1BD7:  CLRF   20
1BD8:  CLRF   21
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1BD9:  MOVLW  16
1BDA:  ADDWF  1C,W
1BDB:  MOVWF  04
1BDC:  BCF    03.7
1BDD:  BTFSC  1D.0
1BDE:  BSF    03.7
1BDF:  MOVF   00,W
1BE0:  ANDLW  01
1BE1:  BTFSS  03.2
1BE2:  GOTO   3EB
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BE3:  MOVLW  25
1BE4:  MOVWF  1E
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BE5:  MOVLW  2D
1BE6:  MOVWF  1F
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BE7:  MOVLW  67
1BE8:  MOVWF  20
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BE9:  MOVWF  21
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1BEA:  GOTO   3FD
1BEB:  MOVLW  16
1BEC:  ADDWF  1C,W
1BED:  MOVWF  04
1BEE:  BCF    03.7
1BEF:  BTFSC  1D.0
1BF0:  BSF    03.7
1BF1:  MOVF   00,W
1BF2:  ANDLW  01
1BF3:  SUBLW  01
1BF4:  BTFSS  03.2
1BF5:  GOTO   3FD
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
1BF6:  MOVLW  B3
1BF7:  MOVWF  1E
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BF8:  MOVLW  BB
1BF9:  MOVWF  1F
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BFA:  MOVLW  25
1BFB:  MOVWF  20
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BFC:  MOVWF  21
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1BFD:  MOVLW  01
1BFE:  MOVWF  37
1BFF:  MOVLW  1E
1C00:  MOVWF  36
1C01:  MOVLW  04
1C02:  MOVWF  38
1C03:  BCF    0A.4
1C04:  BCF    0A.3
1C05:  BCF    03.6
1C06:  CALL   786
1C07:  BSF    0A.4
1C08:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_increaseBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->brightness = (polyoneDisplayPtr->brightness + 1) % 10; 
*
1E97:  MOVLW  19
1E98:  ADDWF  1C,W
1E99:  MOVWF  78
1E9A:  MOVF   1D,W
1E9B:  MOVWF  7A
1E9C:  BTFSC  03.0
1E9D:  INCF   7A,F
1E9E:  MOVF   78,W
1E9F:  MOVWF  1E
1EA0:  MOVF   7A,W
1EA1:  MOVWF  1F
1EA2:  MOVLW  19
1EA3:  ADDWF  1C,W
1EA4:  MOVWF  04
1EA5:  BCF    03.7
1EA6:  BTFSC  1D.0
1EA7:  BSF    03.7
1EA8:  MOVLW  01
1EA9:  ADDWF  00,W
1EAA:  MOVWF  21
1EAB:  BSF    03.5
1EAC:  MOVWF  28
1EAD:  MOVLW  0A
1EAE:  MOVWF  29
1EAF:  BCF    0A.4
1EB0:  BCF    0A.3
1EB1:  BCF    03.5
1EB2:  BCF    03.6
1EB3:  CALL   03D
1EB4:  BSF    0A.4
1EB5:  BSF    0A.3
1EB6:  MOVF   77,W
1EB7:  BSF    03.6
1EB8:  MOVWF  20
1EB9:  MOVF   1E,W
1EBA:  MOVWF  04
1EBB:  BCF    03.7
1EBC:  BTFSC  1F.0
1EBD:  BSF    03.7
1EBE:  MOVF   20,W
1EBF:  MOVWF  00
....................     set_pwm1_duty(brightnessLevels[polyoneDisplayPtr->brightness]); 
1EC0:  MOVLW  19
1EC1:  ADDWF  1C,W
1EC2:  MOVWF  04
1EC3:  BCF    03.7
1EC4:  BTFSC  1D.0
1EC5:  BSF    03.7
1EC6:  MOVF   00,W
1EC7:  BCF    0A.4
1EC8:  BCF    0A.3
1EC9:  BCF    03.6
1ECA:  CALL   023
1ECB:  BSF    0A.4
1ECC:  BSF    0A.3
1ECD:  BSF    03.6
1ECE:  MOVWF  1E
1ECF:  BCF    03.6
1ED0:  MOVWF  15
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1954:  MOVLW  16
1955:  ADDWF  1C,W
1956:  MOVWF  04
1957:  BCF    03.7
1958:  BTFSC  1D.0
1959:  BSF    03.7
195A:  MOVF   00,W
195B:  ANDLW  01
195C:  BTFSS  03.2
195D:  GOTO   19A
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
195E:  MOVF   1C,W
195F:  MOVWF  78
1960:  MOVF   1D,W
1961:  MOVWF  7A
1962:  MOVF   78,W
1963:  MOVWF  1E
1964:  MOVF   7A,W
1965:  MOVWF  1F
1966:  MOVF   1F,W
1967:  MOVWF  21
1968:  MOVF   1E,W
1969:  MOVWF  20
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1999:  GOTO   1B5
199A:  MOVLW  16
199B:  ADDWF  1C,W
199C:  MOVWF  04
199D:  BCF    03.7
199E:  BTFSC  1D.0
199F:  BSF    03.7
19A0:  MOVF   00,W
19A1:  ANDLW  01
19A2:  SUBLW  01
19A3:  BTFSS  03.2
19A4:  GOTO   1B5
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
19A5:  MOVF   1C,W
19A6:  MOVWF  78
19A7:  MOVF   1D,W
19A8:  MOVWF  7A
19A9:  MOVF   1C,W
19AA:  MOVWF  1E
19AB:  MOVF   1D,W
19AC:  MOVWF  1F
19AD:  MOVWF  21
19AE:  MOVF   1C,W
19AF:  MOVWF  20
19B0:  BCF    0A.4
19B1:  BCF    03.6
19B2:  CALL   504
19B3:  BSF    0A.4
19B4:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1AF7:  MOVLW  16
1AF8:  ADDWF  1C,W
1AF9:  MOVWF  04
1AFA:  BCF    03.7
1AFB:  BTFSC  1D.0
1AFC:  BSF    03.7
1AFD:  MOVF   00,W
1AFE:  ANDLW  01
1AFF:  BTFSS  03.2
1B00:  GOTO   312
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1B01:  MOVF   1C,W
1B02:  MOVWF  78
1B03:  MOVF   1D,W
1B04:  MOVWF  7A
1B05:  MOVF   78,W
1B06:  MOVWF  1E
1B07:  MOVF   1D,W
1B08:  MOVWF  1F
1B09:  MOVWF  21
1B0A:  MOVF   1E,W
1B0B:  MOVWF  20
1B0C:  BCF    0A.4
1B0D:  BCF    03.6
1B0E:  CALL   504
1B0F:  BSF    0A.4
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B10:  GOTO   359
1B11:  BSF    03.6
1B12:  MOVLW  16
1B13:  ADDWF  1C,W
1B14:  MOVWF  04
1B15:  BCF    03.7
1B16:  BTFSC  1D.0
1B17:  BSF    03.7
1B18:  MOVF   00,W
1B19:  ANDLW  01
1B1A:  SUBLW  01
1B1B:  BTFSS  03.2
1B1C:  GOTO   358
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
1B1D:  MOVF   1C,W
1B1E:  MOVWF  78
1B1F:  MOVF   1D,W
1B20:  MOVWF  7A
1B21:  MOVF   78,W
1B22:  MOVWF  1E
1B23:  MOVF   7A,W
1B24:  MOVWF  1F
1B25:  MOVF   1F,W
1B26:  MOVWF  21
1B27:  MOVF   1E,W
1B28:  MOVWF  20
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
1C14:  MOVLW  16
1C15:  ADDWF  1C,W
1C16:  MOVWF  78
1C17:  MOVF   1D,W
1C18:  MOVWF  7A
1C19:  BTFSC  03.0
1C1A:  INCF   7A,F
1C1B:  MOVF   78,W
1C1C:  MOVWF  1E
1C1D:  MOVF   7A,W
1C1E:  MOVWF  1F
1C1F:  MOVLW  16
1C20:  ADDWF  1C,W
1C21:  MOVWF  04
1C22:  BCF    03.7
1C23:  BTFSC  1D.0
1C24:  BSF    03.7
1C25:  BTFSS  00.0
1C26:  GOTO   42E
1C27:  MOVF   1E,W
1C28:  MOVWF  04
1C29:  BCF    03.7
1C2A:  BTFSC  1F.0
1C2B:  BSF    03.7
1C2C:  BCF    00.0
1C2D:  GOTO   434
1C2E:  MOVF   1E,W
1C2F:  MOVWF  04
1C30:  BCF    03.7
1C31:  BTFSC  1F.0
1C32:  BSF    03.7
1C33:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1C34:  MOVLW  16
1C35:  ADDWF  1C,W
1C36:  MOVWF  04
1C37:  BCF    03.7
1C38:  BTFSC  1D.0
1C39:  BSF    03.7
1C3A:  MOVF   00,W
1C3B:  ANDLW  01
1C3C:  BTFSS  03.2
1C3D:  GOTO   4BE
....................         polyoneDisplayPtr->timer.alarmTime.hour = polyoneDisplayPtr->timer.alarmTime.minute; 
1C3E:  MOVLW  09
1C3F:  ADDWF  1C,W
1C40:  MOVWF  78
1C41:  MOVF   1D,W
1C42:  MOVWF  7A
1C43:  BTFSC  03.0
1C44:  INCF   7A,F
1C45:  MOVF   78,W
1C46:  MOVWF  1E
1C47:  MOVF   7A,W
1C48:  MOVWF  1F
1C49:  MOVLW  0A
1C4A:  ADDWF  1C,W
1C4B:  MOVWF  04
1C4C:  BCF    03.7
1C4D:  BTFSC  1D.0
1C4E:  BSF    03.7
1C4F:  MOVF   00,W
1C50:  MOVWF  20
1C51:  MOVF   1E,W
1C52:  MOVWF  04
1C53:  BCF    03.7
1C54:  BTFSC  1F.0
1C55:  BSF    03.7
1C56:  MOVF   20,W
1C57:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.second; 
1C58:  MOVLW  0A
1C59:  ADDWF  1C,W
1C5A:  MOVWF  78
1C5B:  MOVF   1D,W
1C5C:  MOVWF  7A
1C5D:  BTFSC  03.0
1C5E:  INCF   7A,F
1C5F:  MOVF   78,W
1C60:  MOVWF  1E
1C61:  MOVF   7A,W
1C62:  MOVWF  1F
1C63:  MOVLW  0B
1C64:  ADDWF  1C,W
1C65:  MOVWF  04
1C66:  BCF    03.7
1C67:  BTFSC  1D.0
1C68:  BSF    03.7
1C69:  MOVF   00,W
1C6A:  MOVWF  20
1C6B:  MOVF   1E,W
1C6C:  MOVWF  04
1C6D:  BCF    03.7
1C6E:  BTFSC  1F.0
1C6F:  BSF    03.7
1C70:  MOVF   20,W
1C71:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.second = 0; 
1C72:  MOVLW  0B
1C73:  ADDWF  1C,W
1C74:  MOVWF  04
1C75:  BCF    03.7
1C76:  BTFSC  1D.0
1C77:  BSF    03.7
1C78:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1C79:  MOVLW  13
1C7A:  ADDWF  1C,W
1C7B:  MOVWF  04
1C7C:  BCF    03.7
1C7D:  BTFSC  1D.0
1C7E:  BSF    03.7
1C7F:  MOVLW  63
1C80:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
1C81:  MOVLW  14
1C82:  ADDWF  1C,W
1C83:  MOVWF  04
1C84:  BCF    03.7
1C85:  BTFSC  1D.0
1C86:  BSF    03.7
1C87:  MOVLW  3B
1C88:  MOVWF  00
....................  
....................         polyoneDisplayPtr->timer.addressAlarmHours = polyoneDisplayPtr->timer.addressAlarmMinutes; 
1C89:  MOVLW  0F
1C8A:  ADDWF  1C,W
1C8B:  MOVWF  78
1C8C:  MOVF   1D,W
1C8D:  MOVWF  7A
1C8E:  BTFSC  03.0
1C8F:  INCF   7A,F
1C90:  MOVF   78,W
1C91:  MOVWF  1E
1C92:  MOVF   7A,W
1C93:  MOVWF  1F
1C94:  MOVLW  0E
1C95:  ADDWF  1C,W
1C96:  MOVWF  04
1C97:  BCF    03.7
1C98:  BTFSC  1D.0
1C99:  BSF    03.7
1C9A:  MOVF   00,W
1C9B:  MOVWF  20
1C9C:  MOVF   1E,W
1C9D:  MOVWF  04
1C9E:  BCF    03.7
1C9F:  BTFSC  1F.0
1CA0:  BSF    03.7
1CA1:  MOVF   20,W
1CA2:  MOVWF  00
....................         polyoneDisplayPtr->timer.addressAlarmMinutes = polyoneDisplayPtr->timer.addressAlarmSeconds; 
1CA3:  MOVLW  0E
1CA4:  ADDWF  1C,W
1CA5:  MOVWF  78
1CA6:  MOVF   1D,W
1CA7:  MOVWF  7A
1CA8:  BTFSC  03.0
1CA9:  INCF   7A,F
1CAA:  MOVF   78,W
1CAB:  MOVWF  1E
1CAC:  MOVF   7A,W
1CAD:  MOVWF  1F
1CAE:  MOVLW  0D
1CAF:  ADDWF  1C,W
1CB0:  MOVWF  04
1CB1:  BCF    03.7
1CB2:  BTFSC  1D.0
1CB3:  BSF    03.7
1CB4:  MOVF   00,W
1CB5:  MOVWF  20
1CB6:  MOVF   1E,W
1CB7:  MOVWF  04
1CB8:  BCF    03.7
1CB9:  BTFSC  1F.0
1CBA:  BSF    03.7
1CBB:  MOVF   20,W
1CBC:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1CBD:  GOTO   553
1CBE:  MOVLW  16
1CBF:  ADDWF  1C,W
1CC0:  MOVWF  04
1CC1:  BCF    03.7
1CC2:  BTFSC  1D.0
1CC3:  BSF    03.7
1CC4:  MOVF   00,W
1CC5:  ANDLW  01
1CC6:  SUBLW  01
1CC7:  BTFSS  03.2
1CC8:  GOTO   553
....................         setDate(1, 1, 1, 1); 
1CC9:  MOVLW  01
1CCA:  MOVWF  54
1CCB:  MOVWF  55
1CCC:  MOVWF  56
1CCD:  MOVWF  57
1CCE:  BCF    0A.4
1CCF:  BCF    0A.3
1CD0:  BCF    03.6
1CD1:  CALL   39E
1CD2:  BSF    0A.4
1CD3:  BSF    0A.3
....................         polyoneDisplayPtr->timer.alarmTime.second = polyoneDisplayPtr->timer.alarmTime.minute; 
1CD4:  MOVLW  0B
1CD5:  BSF    03.6
1CD6:  ADDWF  1C,W
1CD7:  MOVWF  78
1CD8:  MOVF   1D,W
1CD9:  MOVWF  7A
1CDA:  BTFSC  03.0
1CDB:  INCF   7A,F
1CDC:  MOVF   78,W
1CDD:  MOVWF  1E
1CDE:  MOVF   7A,W
1CDF:  MOVWF  1F
1CE0:  MOVLW  0A
1CE1:  ADDWF  1C,W
1CE2:  MOVWF  04
1CE3:  BCF    03.7
1CE4:  BTFSC  1D.0
1CE5:  BSF    03.7
1CE6:  MOVF   00,W
1CE7:  MOVWF  20
1CE8:  MOVF   1E,W
1CE9:  MOVWF  04
1CEA:  BCF    03.7
1CEB:  BTFSC  1F.0
1CEC:  BSF    03.7
1CED:  MOVF   20,W
1CEE:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.hour; 
1CEF:  MOVLW  0A
1CF0:  ADDWF  1C,W
1CF1:  MOVWF  78
1CF2:  MOVF   1D,W
1CF3:  MOVWF  7A
1CF4:  BTFSC  03.0
1CF5:  INCF   7A,F
1CF6:  MOVF   78,W
1CF7:  MOVWF  1E
1CF8:  MOVF   7A,W
1CF9:  MOVWF  1F
1CFA:  MOVLW  09
1CFB:  ADDWF  1C,W
1CFC:  MOVWF  04
1CFD:  BCF    03.7
1CFE:  BTFSC  1D.0
1CFF:  BSF    03.7
1D00:  MOVF   00,W
1D01:  MOVWF  20
1D02:  MOVF   1E,W
1D03:  MOVWF  04
1D04:  BCF    03.7
1D05:  BTFSC  1F.0
1D06:  BSF    03.7
1D07:  MOVF   20,W
1D08:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.hour = 0; 
1D09:  MOVLW  09
1D0A:  ADDWF  1C,W
1D0B:  MOVWF  04
1D0C:  BCF    03.7
1D0D:  BTFSC  1D.0
1D0E:  BSF    03.7
1D0F:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
1D10:  MOVLW  13
1D11:  ADDWF  1C,W
1D12:  MOVWF  04
1D13:  BCF    03.7
1D14:  BTFSC  1D.0
1D15:  BSF    03.7
1D16:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1D17:  MOVLW  14
1D18:  ADDWF  1C,W
1D19:  MOVWF  04
1D1A:  BCF    03.7
1D1B:  BTFSC  1D.0
1D1C:  BSF    03.7
1D1D:  MOVLW  63
1D1E:  MOVWF  00
....................  
....................         polyoneDisplayPtr->timer.addressAlarmSeconds = polyoneDisplayPtr->timer.addressAlarmMinutes; 
1D1F:  MOVLW  0D
1D20:  ADDWF  1C,W
1D21:  MOVWF  78
1D22:  MOVF   1D,W
1D23:  MOVWF  7A
1D24:  BTFSC  03.0
1D25:  INCF   7A,F
1D26:  MOVF   78,W
1D27:  MOVWF  1E
1D28:  MOVF   7A,W
1D29:  MOVWF  1F
1D2A:  MOVLW  0E
1D2B:  ADDWF  1C,W
1D2C:  MOVWF  04
1D2D:  BCF    03.7
1D2E:  BTFSC  1D.0
1D2F:  BSF    03.7
1D30:  MOVF   00,W
1D31:  MOVWF  20
1D32:  MOVF   1E,W
1D33:  MOVWF  04
1D34:  BCF    03.7
1D35:  BTFSC  1F.0
1D36:  BSF    03.7
1D37:  MOVF   20,W
1D38:  MOVWF  00
....................         polyoneDisplayPtr->timer.addressAlarmMinutes = polyoneDisplayPtr->timer.addressAlarmHours; 
1D39:  MOVLW  0E
1D3A:  ADDWF  1C,W
1D3B:  MOVWF  78
1D3C:  MOVF   1D,W
1D3D:  MOVWF  7A
1D3E:  BTFSC  03.0
1D3F:  INCF   7A,F
1D40:  MOVF   78,W
1D41:  MOVWF  1E
1D42:  MOVF   7A,W
1D43:  MOVWF  1F
1D44:  MOVLW  0F
1D45:  ADDWF  1C,W
1D46:  MOVWF  04
1D47:  BCF    03.7
1D48:  BTFSC  1D.0
1D49:  BSF    03.7
1D4A:  MOVF   00,W
1D4B:  MOVWF  20
1D4C:  MOVF   1E,W
1D4D:  MOVWF  04
1D4E:  BCF    03.7
1D4F:  BTFSC  1F.0
1D50:  BSF    03.7
1D51:  MOVF   20,W
1D52:  MOVWF  00
1D53:  BCF    03.6
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1B76:  MOVLW  16
1B77:  ADDWF  1C,W
1B78:  MOVWF  04
1B79:  BCF    03.7
1B7A:  BTFSC  1D.0
1B7B:  BSF    03.7
1B7C:  MOVF   00,W
1B7D:  ANDLW  01
1B7E:  BTFSS  03.2
1B7F:  GOTO   398
....................         return (polyoneDisplayPtr->timer.alarmTime.hour != 0) || (polyoneDisplayPtr->timer.alarmTime.minute != 0); 
1B80:  MOVLW  09
1B81:  ADDWF  1C,W
1B82:  MOVWF  04
1B83:  BCF    03.7
1B84:  BTFSC  1D.0
1B85:  BSF    03.7
1B86:  MOVF   00,F
1B87:  BTFSS  03.2
1B88:  GOTO   394
1B89:  MOVLW  0A
1B8A:  ADDWF  1C,W
1B8B:  MOVWF  04
1B8C:  BCF    03.7
1B8D:  BTFSC  1D.0
1B8E:  BSF    03.7
1B8F:  MOVF   00,F
1B90:  BTFSS  03.2
1B91:  GOTO   394
1B92:  MOVLW  00
1B93:  GOTO   395
1B94:  MOVLW  01
1B95:  MOVWF  78
1B96:  GOTO   3B9
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B97:  GOTO   3B9
1B98:  MOVLW  16
1B99:  ADDWF  1C,W
1B9A:  MOVWF  04
1B9B:  BCF    03.7
1B9C:  BTFSC  1D.0
1B9D:  BSF    03.7
1B9E:  MOVF   00,W
1B9F:  ANDLW  01
1BA0:  SUBLW  01
1BA1:  BTFSS  03.2
1BA2:  GOTO   3B9
....................         return (polyoneDisplayPtr->timer.alarmTime.minute != 0) || (polyoneDisplayPtr->timer.alarmTime.second != 0); 
1BA3:  MOVLW  0A
1BA4:  ADDWF  1C,W
1BA5:  MOVWF  04
1BA6:  BCF    03.7
1BA7:  BTFSC  1D.0
1BA8:  BSF    03.7
1BA9:  MOVF   00,F
1BAA:  BTFSS  03.2
1BAB:  GOTO   3B7
1BAC:  MOVLW  0B
1BAD:  ADDWF  1C,W
1BAE:  MOVWF  04
1BAF:  BCF    03.7
1BB0:  BTFSC  1D.0
1BB1:  BSF    03.7
1BB2:  MOVF   00,F
1BB3:  BTFSS  03.2
1BB4:  GOTO   3B7
1BB5:  MOVLW  00
1BB6:  GOTO   3B8
1BB7:  MOVLW  01
1BB8:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0B8E:  BSF    03.6
0B8F:  MOVF   1C,W
0B90:  MOVWF  78
0B91:  MOVF   1D,W
0B92:  MOVWF  7A
0B93:  MOVF   78,W
0B94:  MOVWF  1E
0B95:  MOVF   7A,W
0B96:  MOVWF  1F
0B97:  MOVF   1F,W
0B98:  MOVWF  21
0B99:  MOVF   1E,W
0B9A:  MOVWF  20
*
0C15:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveTypeOfCount(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressTypeOfCount, polyoneDisplayPtr->typeOfCount); 
0C16:  MOVLW  1E
0C17:  BSF    03.6
0C18:  ADDWF  1C,W
0C19:  MOVWF  04
0C1A:  BCF    03.7
0C1B:  BTFSC  1D.0
0C1C:  BSF    03.7
0C1D:  MOVF   00,W
0C1E:  MOVWF  1E
0C1F:  MOVLW  16
0C20:  ADDWF  1C,W
0C21:  MOVWF  04
0C22:  BCF    03.7
0C23:  BTFSC  1D.0
0C24:  BSF    03.7
0C25:  CLRF   1F
0C26:  BTFSC  00.1
0C27:  INCF   1F,F
0C28:  BCF    03.6
0C29:  MOVF   0B,W
0C2A:  MOVWF  77
0C2B:  BCF    0B.7
0C2C:  BSF    03.6
0C2D:  MOVF   1E,W
0C2E:  MOVWF  0D
0C2F:  MOVF   1F,W
0C30:  MOVWF  0C
0C31:  BSF    03.5
0C32:  BCF    0C.7
0C33:  BSF    0C.2
0C34:  MOVLW  55
0C35:  MOVWF  0D
0C36:  MOVLW  AA
0C37:  MOVWF  0D
0C38:  BSF    0C.1
0C39:  BTFSC  0C.1
0C3A:  GOTO   439
0C3B:  BCF    0C.2
0C3C:  MOVF   77,W
0C3D:  BCF    03.5
0C3E:  BCF    03.6
0C3F:  IORWF  0B,F
0C40:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressBrightness, polyoneDisplayPtr->brightness); 
*
0D7A:  MOVLW  1D
0D7B:  BSF    03.6
0D7C:  ADDWF  1C,W
0D7D:  MOVWF  04
0D7E:  BCF    03.7
0D7F:  BTFSC  1D.0
0D80:  BSF    03.7
0D81:  MOVF   00,W
0D82:  MOVWF  1E
0D83:  MOVLW  19
0D84:  ADDWF  1C,W
0D85:  MOVWF  04
0D86:  BCF    03.7
0D87:  BTFSC  1D.0
0D88:  BSF    03.7
0D89:  MOVF   00,W
0D8A:  MOVWF  1F
0D8B:  BCF    03.6
0D8C:  MOVF   0B,W
0D8D:  MOVWF  77
0D8E:  BCF    0B.7
0D8F:  BSF    03.6
0D90:  MOVF   1E,W
0D91:  MOVWF  0D
0D92:  MOVF   1F,W
0D93:  MOVWF  0C
0D94:  BSF    03.5
0D95:  BCF    0C.7
0D96:  BSF    0C.2
0D97:  MOVLW  55
0D98:  MOVWF  0D
0D99:  MOVLW  AA
0D9A:  MOVWF  0D
0D9B:  BSF    0C.1
0D9C:  BTFSC  0C.1
0D9D:  GOTO   59C
0D9E:  BCF    0C.2
0D9F:  MOVF   77,W
0DA0:  BCF    03.5
0DA1:  BCF    03.6
0DA2:  IORWF  0B,F
0DA3:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0B45:  MOVLW  18
0B46:  BSF    03.6
0B47:  ADDWF  1C,W
0B48:  MOVWF  78
0B49:  MOVF   1D,W
0B4A:  MOVWF  7A
0B4B:  BTFSC  03.0
0B4C:  INCF   7A,F
0B4D:  MOVF   78,W
0B4E:  MOVWF  1F
0B4F:  MOVF   7A,W
0B50:  MOVWF  20
0B51:  MOVLW  17
0B52:  ADDWF  1C,W
0B53:  MOVWF  04
0B54:  BCF    03.7
0B55:  BTFSC  1D.0
0B56:  BSF    03.7
0B57:  MOVF   00,W
0B58:  MOVWF  21
0B59:  MOVF   1F,W
0B5A:  MOVWF  04
0B5B:  BCF    03.7
0B5C:  BTFSC  20.0
0B5D:  BSF    03.7
0B5E:  MOVF   21,W
0B5F:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
0B60:  MOVLW  17
0B61:  ADDWF  1C,W
0B62:  MOVWF  04
0B63:  BCF    03.7
0B64:  BTFSC  1D.0
0B65:  BSF    03.7
0B66:  MOVF   1E,W
0B67:  MOVWF  00
0B68:  BCF    03.6
0B69:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
0B6A:  MOVLW  18
0B6B:  BSF    03.6
0B6C:  ADDWF  1C,W
0B6D:  MOVWF  78
0B6E:  MOVF   1D,W
0B6F:  MOVWF  7A
0B70:  BTFSC  03.0
0B71:  INCF   7A,F
0B72:  MOVF   78,W
0B73:  MOVWF  1E
0B74:  MOVF   7A,W
0B75:  MOVWF  1F
0B76:  MOVLW  17
0B77:  ADDWF  1C,W
0B78:  MOVWF  04
0B79:  BCF    03.7
0B7A:  BTFSC  1D.0
0B7B:  BSF    03.7
0B7C:  MOVF   00,W
0B7D:  MOVWF  20
0B7E:  MOVF   1E,W
0B7F:  MOVWF  04
0B80:  BCF    03.7
0B81:  BTFSC  1F.0
0B82:  BSF    03.7
0B83:  MOVF   20,W
0B84:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0B85:  MOVLW  17
0B86:  ADDWF  1C,W
0B87:  MOVWF  04
0B88:  BCF    03.7
0B89:  BTFSC  1D.0
0B8A:  BSF    03.7
0B8B:  CLRF   00
0B8C:  BCF    03.6
0B8D:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0AC8:  MOVLW  1A
0AC9:  BSF    03.6
0ACA:  ADDWF  1C,W
0ACB:  MOVWF  04
0ACC:  BCF    03.7
0ACD:  BTFSC  1D.0
0ACE:  BSF    03.7
0ACF:  MOVF   00,W
0AD0:  MOVWF  1E
0AD1:  MOVLW  17
0AD2:  ADDWF  1C,W
0AD3:  MOVWF  04
0AD4:  BCF    03.7
0AD5:  BTFSC  1D.0
0AD6:  BSF    03.7
0AD7:  MOVF   00,W
0AD8:  MOVWF  1F
0AD9:  BCF    03.6
0ADA:  MOVF   0B,W
0ADB:  MOVWF  77
0ADC:  BCF    0B.7
0ADD:  BSF    03.6
0ADE:  MOVF   1E,W
0ADF:  MOVWF  0D
0AE0:  MOVF   1F,W
0AE1:  MOVWF  0C
0AE2:  BSF    03.5
0AE3:  BCF    0C.7
0AE4:  BSF    0C.2
0AE5:  MOVLW  55
0AE6:  MOVWF  0D
0AE7:  MOVLW  AA
0AE8:  MOVWF  0D
0AE9:  BSF    0C.1
0AEA:  BTFSC  0C.1
0AEB:  GOTO   2EA
0AEC:  BCF    0C.2
0AED:  MOVF   77,W
0AEE:  BCF    03.5
0AEF:  BCF    03.6
0AF0:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0AF1:  MOVLW  1B
0AF2:  BSF    03.6
0AF3:  ADDWF  1C,W
0AF4:  MOVWF  04
0AF5:  BCF    03.7
0AF6:  BTFSC  1D.0
0AF7:  BSF    03.7
0AF8:  MOVF   00,W
0AF9:  MOVWF  1E
0AFA:  MOVLW  18
0AFB:  ADDWF  1C,W
0AFC:  MOVWF  04
0AFD:  BCF    03.7
0AFE:  BTFSC  1D.0
0AFF:  BSF    03.7
0B00:  MOVF   00,W
0B01:  MOVWF  1F
0B02:  BCF    03.6
0B03:  MOVF   0B,W
0B04:  MOVWF  77
0B05:  BCF    0B.7
0B06:  BSF    03.6
0B07:  MOVF   1E,W
0B08:  MOVWF  0D
0B09:  MOVF   1F,W
0B0A:  MOVWF  0C
0B0B:  BSF    03.5
0B0C:  BCF    0C.7
0B0D:  BSF    0C.2
0B0E:  MOVLW  55
0B0F:  MOVWF  0D
0B10:  MOVLW  AA
0B11:  MOVWF  0D
0B12:  BSF    0C.1
0B13:  BTFSC  0C.1
0B14:  GOTO   313
0B15:  BCF    0C.2
0B16:  MOVF   77,W
0B17:  BCF    03.5
0B18:  BCF    03.6
0B19:  IORWF  0B,F
0B1A:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressFormat, polyoneDisplayPtr->format); 
*
1E1C:  MOVLW  1C
1E1D:  ADDWF  1C,W
1E1E:  MOVWF  04
1E1F:  BCF    03.7
1E20:  BTFSC  1D.0
1E21:  BSF    03.7
1E22:  MOVF   00,W
1E23:  MOVWF  1E
1E24:  MOVLW  16
1E25:  ADDWF  1C,W
1E26:  MOVWF  04
1E27:  BCF    03.7
1E28:  BTFSC  1D.0
1E29:  BSF    03.7
1E2A:  CLRF   1F
1E2B:  BTFSC  00.0
1E2C:  INCF   1F,F
1E2D:  BCF    03.6
1E2E:  MOVF   0B,W
1E2F:  MOVWF  77
1E30:  BCF    0B.7
1E31:  BSF    03.6
1E32:  MOVF   1E,W
1E33:  MOVWF  0D
1E34:  MOVF   1F,W
1E35:  MOVWF  0C
1E36:  BSF    03.5
1E37:  BCF    0C.7
1E38:  BSF    0C.2
1E39:  MOVLW  55
1E3A:  MOVWF  0D
1E3B:  MOVLW  AA
1E3C:  MOVWF  0D
1E3D:  BSF    0C.1
1E3E:  BTFSC  0C.1
1E3F:  GOTO   63E
1E40:  BCF    0C.2
1E41:  MOVF   77,W
1E42:  BCF    03.5
1E43:  BCF    03.6
1E44:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_saveAlarm(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1D5F:  MOVLW  16
1D60:  ADDWF  1C,W
1D61:  MOVWF  04
1D62:  BCF    03.7
1D63:  BTFSC  1D.0
1D64:  BSF    03.7
1D65:  MOVF   00,W
1D66:  ANDLW  01
1D67:  BTFSS  03.2
1D68:  GOTO   5BC
....................         write_eeprom(polyoneDisplayPtr->addressFirstNumber, polyoneDisplayPtr->timer.alarmTime.hour); 
1D69:  MOVLW  1F
1D6A:  ADDWF  1C,W
1D6B:  MOVWF  04
1D6C:  BCF    03.7
1D6D:  BTFSC  1D.0
1D6E:  BSF    03.7
1D6F:  MOVF   00,W
1D70:  MOVWF  1E
1D71:  MOVLW  09
1D72:  ADDWF  1C,W
1D73:  MOVWF  04
1D74:  BCF    03.7
1D75:  BTFSC  1D.0
1D76:  BSF    03.7
1D77:  MOVF   00,W
1D78:  MOVWF  1F
1D79:  BCF    03.6
1D7A:  MOVF   0B,W
1D7B:  MOVWF  77
1D7C:  BCF    0B.7
1D7D:  BSF    03.6
1D7E:  MOVF   1E,W
1D7F:  MOVWF  0D
1D80:  MOVF   1F,W
1D81:  MOVWF  0C
1D82:  BSF    03.5
1D83:  BCF    0C.7
1D84:  BSF    0C.2
1D85:  MOVLW  55
1D86:  MOVWF  0D
1D87:  MOVLW  AA
1D88:  MOVWF  0D
1D89:  BSF    0C.1
1D8A:  BTFSC  0C.1
1D8B:  GOTO   58A
1D8C:  BCF    0C.2
1D8D:  MOVF   77,W
1D8E:  BCF    03.5
1D8F:  BCF    03.6
1D90:  IORWF  0B,F
....................         write_eeprom(polyoneDisplayPtr->addressSecondNumber, polyoneDisplayPtr->timer.alarmTime.minute); 
1D91:  MOVLW  20
1D92:  BSF    03.6
1D93:  ADDWF  1C,W
1D94:  MOVWF  04
1D95:  BCF    03.7
1D96:  BTFSC  1D.0
1D97:  BSF    03.7
1D98:  MOVF   00,W
1D99:  MOVWF  1E
1D9A:  MOVLW  0A
1D9B:  ADDWF  1C,W
1D9C:  MOVWF  04
1D9D:  BCF    03.7
1D9E:  BTFSC  1D.0
1D9F:  BSF    03.7
1DA0:  MOVF   00,W
1DA1:  MOVWF  1F
1DA2:  BCF    03.6
1DA3:  MOVF   0B,W
1DA4:  MOVWF  77
1DA5:  BCF    0B.7
1DA6:  BSF    03.6
1DA7:  MOVF   1E,W
1DA8:  MOVWF  0D
1DA9:  MOVF   1F,W
1DAA:  MOVWF  0C
1DAB:  BSF    03.5
1DAC:  BCF    0C.7
1DAD:  BSF    0C.2
1DAE:  MOVLW  55
1DAF:  MOVWF  0D
1DB0:  MOVLW  AA
1DB1:  MOVWF  0D
1DB2:  BSF    0C.1
1DB3:  BTFSC  0C.1
1DB4:  GOTO   5B3
1DB5:  BCF    0C.2
1DB6:  MOVF   77,W
1DB7:  BCF    03.5
1DB8:  BCF    03.6
1DB9:  IORWF  0B,F
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1DBA:  GOTO   618
1DBB:  BSF    03.6
1DBC:  MOVLW  16
1DBD:  ADDWF  1C,W
1DBE:  MOVWF  04
1DBF:  BCF    03.7
1DC0:  BTFSC  1D.0
1DC1:  BSF    03.7
1DC2:  MOVF   00,W
1DC3:  ANDLW  01
1DC4:  SUBLW  01
1DC5:  BTFSS  03.2
1DC6:  GOTO   619
....................         write_eeprom(polyoneDisplayPtr->addressFirstNumber, polyoneDisplayPtr->timer.alarmTime.minute); 
1DC7:  MOVLW  1F
1DC8:  ADDWF  1C,W
1DC9:  MOVWF  04
1DCA:  BCF    03.7
1DCB:  BTFSC  1D.0
1DCC:  BSF    03.7
1DCD:  MOVF   00,W
1DCE:  MOVWF  1E
1DCF:  MOVLW  0A
1DD0:  ADDWF  1C,W
1DD1:  MOVWF  04
1DD2:  BCF    03.7
1DD3:  BTFSC  1D.0
1DD4:  BSF    03.7
1DD5:  MOVF   00,W
1DD6:  MOVWF  1F
1DD7:  BCF    03.6
1DD8:  MOVF   0B,W
1DD9:  MOVWF  77
1DDA:  BCF    0B.7
1DDB:  BSF    03.6
1DDC:  MOVF   1E,W
1DDD:  MOVWF  0D
1DDE:  MOVF   1F,W
1DDF:  MOVWF  0C
1DE0:  BSF    03.5
1DE1:  BCF    0C.7
1DE2:  BSF    0C.2
1DE3:  MOVLW  55
1DE4:  MOVWF  0D
1DE5:  MOVLW  AA
1DE6:  MOVWF  0D
1DE7:  BSF    0C.1
1DE8:  BTFSC  0C.1
1DE9:  GOTO   5E8
1DEA:  BCF    0C.2
1DEB:  MOVF   77,W
1DEC:  BCF    03.5
1DED:  BCF    03.6
1DEE:  IORWF  0B,F
....................         write_eeprom(polyoneDisplayPtr->addressSecondNumber, polyoneDisplayPtr->timer.alarmTime.second); 
1DEF:  MOVLW  20
1DF0:  BSF    03.6
1DF1:  ADDWF  1C,W
1DF2:  MOVWF  04
1DF3:  BCF    03.7
1DF4:  BTFSC  1D.0
1DF5:  BSF    03.7
1DF6:  MOVF   00,W
1DF7:  MOVWF  1E
1DF8:  MOVLW  0B
1DF9:  ADDWF  1C,W
1DFA:  MOVWF  04
1DFB:  BCF    03.7
1DFC:  BTFSC  1D.0
1DFD:  BSF    03.7
1DFE:  MOVF   00,W
1DFF:  MOVWF  1F
1E00:  BCF    03.6
1E01:  MOVF   0B,W
1E02:  MOVWF  77
1E03:  BCF    0B.7
1E04:  BSF    03.6
1E05:  MOVF   1E,W
1E06:  MOVWF  0D
1E07:  MOVF   1F,W
1E08:  MOVWF  0C
1E09:  BSF    03.5
1E0A:  BCF    0C.7
1E0B:  BSF    0C.2
1E0C:  MOVLW  55
1E0D:  MOVWF  0D
1E0E:  MOVLW  AA
1E0F:  MOVWF  0D
1E10:  BSF    0C.1
1E11:  BTFSC  0C.1
1E12:  GOTO   611
1E13:  BCF    0C.2
1E14:  MOVF   77,W
1E15:  BCF    03.5
1E16:  BCF    03.6
1E17:  IORWF  0B,F
1E18:  BSF    03.6
....................     } 
....................     //    if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
....................     //        Timer_saveAlarmHoursMinutes(&polyoneDisplayPtr.timer); 
....................     //    } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
....................     //        Timer_saveAlarmMinutesSeconds(&polyoneDisplayPtr->timer); 
....................     //    } 
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
1320:  MOVLW  18
1321:  ADDWF  1C,W
1322:  MOVWF  78
1323:  MOVF   1D,W
1324:  MOVWF  7A
1325:  BTFSC  03.0
1326:  INCF   7A,F
1327:  MOVF   78,W
1328:  MOVWF  1E
1329:  MOVF   7A,W
132A:  MOVWF  1F
132B:  MOVLW  17
132C:  ADDWF  1C,W
132D:  MOVWF  04
132E:  BCF    03.7
132F:  BTFSC  1D.0
1330:  BSF    03.7
1331:  MOVF   00,W
1332:  MOVWF  20
1333:  MOVF   1E,W
1334:  MOVWF  04
1335:  BCF    03.7
1336:  BTFSC  1F.0
1337:  BSF    03.7
1338:  MOVF   20,W
1339:  MOVWF  00
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
133A:  MOVLW  16
133B:  ADDWF  1C,W
133C:  MOVWF  04
133D:  BCF    03.7
133E:  BTFSC  1D.0
133F:  BSF    03.7
1340:  MOVF   00,W
1341:  MOVWF  77
1342:  RRF    77,W
1343:  ANDLW  01
1344:  BTFSS  03.2
1345:  GOTO   34F
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_UP; 
1346:  MOVLW  17
1347:  ADDWF  1C,W
1348:  MOVWF  04
1349:  BCF    03.7
134A:  BTFSC  1D.0
134B:  BSF    03.7
134C:  MOVLW  01
134D:  MOVWF  00
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
134E:  GOTO   364
134F:  MOVLW  16
1350:  ADDWF  1C,W
1351:  MOVWF  04
1352:  BCF    03.7
1353:  BTFSC  1D.0
1354:  BSF    03.7
1355:  MOVF   00,W
1356:  MOVWF  77
1357:  RRF    77,W
1358:  ANDLW  01
1359:  SUBLW  01
135A:  BTFSS  03.2
135B:  GOTO   364
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_DOWN; 
135C:  MOVLW  17
135D:  ADDWF  1C,W
135E:  MOVWF  04
135F:  BCF    03.7
1360:  BTFSC  1D.0
1361:  BSF    03.7
1362:  MOVLW  02
1363:  MOVWF  00
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
1400:  MOVF   1C,W
1401:  MOVWF  78
1402:  MOVF   1D,W
1403:  MOVWF  7A
1404:  MOVF   78,W
1405:  MOVWF  1E
1406:  MOVF   7A,W
1407:  MOVWF  1F
1408:  MOVF   1F,W
1409:  MOVWF  21
140A:  MOVF   1E,W
140B:  MOVWF  20
*
1438:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isCountUpDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
14B6:  MOVLW  16
14B7:  ADDWF  1C,W
14B8:  MOVWF  04
14B9:  BCF    03.7
14BA:  BTFSC  1D.0
14BB:  BSF    03.7
14BC:  MOVF   00,W
14BD:  ANDLW  01
14BE:  BTFSS  03.2
14BF:  GOTO   4E4
....................         return polyoneDisplayPtr->timer.currentTime.hour == 99 && 
....................                 polyoneDisplayPtr->timer.currentTime.minute == 59 && 
....................                 polyoneDisplayPtr->timer.currentTime.second == 59; 
14C0:  MOVLW  05
14C1:  ADDWF  1C,W
14C2:  MOVWF  04
14C3:  BCF    03.7
14C4:  BTFSC  1D.0
14C5:  BSF    03.7
14C6:  MOVF   00,W
14C7:  SUBLW  63
14C8:  BTFSS  03.2
14C9:  GOTO   4DE
14CA:  MOVLW  06
14CB:  ADDWF  1C,W
14CC:  MOVWF  04
14CD:  BCF    03.7
14CE:  BTFSC  1D.0
14CF:  BSF    03.7
14D0:  MOVF   00,W
14D1:  SUBLW  3B
14D2:  BTFSS  03.2
14D3:  GOTO   4DE
14D4:  MOVLW  07
14D5:  ADDWF  1C,W
14D6:  MOVWF  04
14D7:  BCF    03.7
14D8:  BTFSC  1D.0
14D9:  BSF    03.7
14DA:  MOVF   00,W
14DB:  SUBLW  3B
14DC:  BTFSC  03.2
14DD:  GOTO   4E0
14DE:  MOVLW  00
14DF:  GOTO   4E1
14E0:  MOVLW  01
14E1:  MOVWF  78
14E2:  GOTO   507
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
14E3:  GOTO   507
14E4:  MOVLW  16
14E5:  ADDWF  1C,W
14E6:  MOVWF  04
14E7:  BCF    03.7
14E8:  BTFSC  1D.0
14E9:  BSF    03.7
14EA:  MOVF   00,W
14EB:  ANDLW  01
14EC:  SUBLW  01
14ED:  BTFSS  03.2
14EE:  GOTO   507
....................         return polyoneDisplayPtr->timer.currentTime.minute == 99 && 
....................                 polyoneDisplayPtr->timer.currentTime.second == 59; 
14EF:  MOVLW  06
14F0:  ADDWF  1C,W
14F1:  MOVWF  04
14F2:  BCF    03.7
14F3:  BTFSC  1D.0
14F4:  BSF    03.7
14F5:  MOVF   00,W
14F6:  SUBLW  63
14F7:  BTFSS  03.2
14F8:  GOTO   503
14F9:  MOVLW  07
14FA:  ADDWF  1C,W
14FB:  MOVWF  04
14FC:  BCF    03.7
14FD:  BTFSC  1D.0
14FE:  BSF    03.7
14FF:  MOVF   00,W
1500:  SUBLW  3B
1501:  BTFSC  03.2
1502:  GOTO   505
1503:  MOVLW  00
1504:  GOTO   506
1505:  MOVLW  01
1506:  MOVWF  78
....................     } 
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... //#define DELAY_INCREASE_NUMBER_MILISECONDS 100 
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 200 
....................  
.................... // Buttons 
.................... #define  PIN_BUTTON_START   PIN_B1 
.................... #define  PIN_BUTTON_MENU    PIN_B0 
.................... #define  PIN_BUZZER         PIN_C5 
.................... #define PIN_LED PIN_B3 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
....................     EEPROM_BRIGHTNESS, 
....................     EEPROM_TYPE_OF_COUNT, 
....................     EEPROM_NUMBER_OF_DAYS 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void turnOnBuzzer(void); 
.................... void blinkDisplay(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=5ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=25ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
0DF1:  MOVF   03,W
0DF2:  ANDLW  1F
0DF3:  MOVWF  03
0DF4:  MOVLW  FF
0DF5:  MOVWF  20
0DF6:  BSF    3E.0
0DF7:  BSF    3E.1
0DF8:  BSF    3E.2
0DF9:  BSF    3E.3
0DFA:  BSF    3E.4
0DFB:  CLRF   61
0DFC:  CLRF   62
0DFD:  CLRF   63
0DFE:  BSF    03.5
0DFF:  BSF    03.6
0E00:  MOVF   09,W
0E01:  ANDLW  C0
0E02:  MOVWF  09
0E03:  BCF    03.6
0E04:  BCF    1F.4
0E05:  BCF    1F.5
0E06:  MOVLW  00
0E07:  BSF    03.6
0E08:  MOVWF  08
0E09:  BCF    03.5
0E0A:  CLRF   07
0E0B:  CLRF   08
0E0C:  CLRF   09
0E0D:  BCF    03.7
....................     setupHardware(); 
....................     myPolyoneDisplay.currentState = STATE_INIT; 
*
0E31:  MOVLW  03
0E32:  BCF    03.5
0E33:  MOVWF  56
....................     rtos_run(); 
0E34:  CLRF   22
0E35:  CLRF   24
0E36:  MOVLW  0A
0E37:  MOVWF  23
0E38:  CLRF   26
0E39:  MOVLW  01
0E3A:  MOVWF  25
0E3B:  MOVLW  A4
0E3C:  MOVWF  27
0E3D:  MOVLW  0D
0E3E:  MOVWF  28
0E3F:  CLRF   29
0E40:  CLRF   2B
0E41:  MOVLW  0A
0E42:  MOVWF  2A
0E43:  CLRF   2D
0E44:  MOVLW  02
0E45:  MOVWF  2C
0E46:  MOVLW  C2
0E47:  MOVWF  2E
0E48:  MOVLW  0D
0E49:  MOVWF  2F
0E4A:  CLRF   30
0E4B:  CLRF   32
0E4C:  MOVLW  01
0E4D:  MOVWF  31
0E4E:  CLRF   34
0E4F:  CLRF   33
0E50:  MOVLW  00
0E51:  MOVWF  35
0E52:  MOVLW  18
0E53:  MOVWF  36
0E54:  CLRF   37
0E55:  CLRF   39
0E56:  MOVLW  05
0E57:  MOVWF  38
0E58:  CLRF   3B
0E59:  CLRF   3A
0E5A:  MOVLW  E0
0E5B:  MOVWF  3C
0E5C:  MOVLW  0D
0E5D:  MOVWF  3D
0E5E:  CLRF   21
0E5F:  BSF    03.5
0E60:  MOVF   01,W
0E61:  ANDLW  C0
0E62:  IORLW  06
0E63:  MOVWF  01
0E64:  MOVLW  3D
0E65:  BCF    03.5
0E66:  MOVWF  01
0E67:  BCF    0B.2
0E68:  BCF    03.0
0E69:  RLF    21,W
0E6A:  MOVWF  77
0E6B:  BCF    0A.3
0E6C:  CALL   031
0E6D:  BSF    0A.3
0E6E:  MOVWF  79
0E6F:  MOVLW  01
0E70:  ADDWF  77,W
0E71:  BCF    0A.3
0E72:  CALL   031
0E73:  BSF    0A.3
0E74:  MOVWF  7A
0E75:  MOVF   79,W
0E76:  MOVWF  04
0E77:  BCF    03.7
0E78:  BTFSC  7A.0
0E79:  BSF    03.7
0E7A:  MOVF   00,W
0E7B:  MOVWF  79
0E7C:  INCF   04,F
0E7D:  MOVF   00,W
0E7E:  MOVWF  77
0E7F:  INCF   04,F
0E80:  MOVF   00,W
0E81:  MOVWF  78
0E82:  INCF   04,F
0E83:  INCF   00,F
0E84:  MOVF   00,W
0E85:  MOVWF  7A
0E86:  BTFSS  03.2
0E87:  GOTO   68B
0E88:  INCF   04,F
0E89:  INCF   00,F
0E8A:  DECF   04,F
0E8B:  INCF   04,F
0E8C:  MOVF   00,W
0E8D:  SUBWF  78,W
0E8E:  BTFSS  03.2
0E8F:  GOTO   6A3
0E90:  MOVF   77,W
0E91:  SUBWF  7A,W
0E92:  BTFSS  03.2
0E93:  GOTO   6A3
0E94:  DECF   04,F
0E95:  CLRF   00
0E96:  INCF   04,F
0E97:  CLRF   00
0E98:  INCF   04,F
0E99:  BTFSC  79.7
0E9A:  GOTO   6A3
0E9B:  INCF   04,F
0E9C:  MOVF   00,W
0E9D:  MOVWF  0A
0E9E:  DECF   04,F
0E9F:  MOVF   00,W
0EA0:  MOVWF  02
0EA1:  BCF    03.5
0EA2:  BCF    03.6
0EA3:  INCF   21,F
0EA4:  MOVLW  04
0EA5:  SUBWF  21,W
0EA6:  BTFSS  03.2
0EA7:  GOTO   668
0EA8:  CLRF   21
0EA9:  MOVF   01,W
0EAA:  BTFSS  0B.2
0EAB:  GOTO   6AE
0EAC:  BSF    03.5
0EAD:  GOTO   664
0EAE:  GOTO   6A9
0EAF:  MOVLW  FF
0EB0:  MOVWF  21
.................... } 
....................  
0EB1:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
1000:  MOVF   56,W
1001:  ADDLW  F5
1002:  BTFSC  03.0
1003:  GOTO   5F2
1004:  ADDLW  0B
1005:  GOTO   5F5
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new( 
....................                     EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS, 
....................                     EEPROM_BRIGHTNESS, 
....................                     EEPROM_TYPE_OF_COUNT); 
1006:  BSF    03.6
1007:  CLRF   22
1008:  MOVLW  01
1009:  MOVWF  23
100A:  MOVLW  02
100B:  MOVWF  24
100C:  MOVLW  03
100D:  MOVWF  25
100E:  MOVLW  04
100F:  MOVWF  26
1010:  MOVLW  05
1011:  MOVWF  27
1012:  MOVLW  06
1013:  MOVWF  28
1014:  MOVLW  07
1015:  MOVWF  29
1016:  MOVLW  08
1017:  MOVWF  2A
1018:  MOVLW  09
1019:  MOVWF  2B
*
12E8:  MOVF   79,W
12E9:  MOVWF  7A
12EA:  MOVF   78,W
12EB:  BSF    03.6
12EC:  MOVWF  1C
12ED:  MOVF   7A,W
12EE:  MOVWF  1D
12EF:  CLRF   1F
12F0:  MOVLW  3F
12F1:  MOVWF  1E
12F2:  MOVLW  21
12F3:  MOVWF  78
12F4:  MOVF   1C,W
12F5:  MOVWF  04
12F6:  BCF    03.7
12F7:  BTFSC  1D.0
12F8:  BSF    03.7
12F9:  MOVF   00,W
12FA:  MOVWF  77
12FB:  MOVF   1E,W
12FC:  MOVWF  04
12FD:  BCF    03.7
12FE:  BTFSC  1F.0
12FF:  BSF    03.7
1300:  MOVF   77,W
1301:  MOVWF  00
1302:  INCF   1E,F
1303:  BTFSC  03.2
1304:  INCF   1F,F
1305:  INCF   1C,F
1306:  BTFSC  03.2
1307:  INCF   1D,F
1308:  DECFSZ 78,F
1309:  GOTO   2F4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
130A:  CLRF   1D
130B:  MOVLW  3F
130C:  MOVWF  1C
130D:  CLRF   1E
130E:  BCF    0A.4
130F:  BSF    0A.3
1310:  BCF    03.6
1311:  CALL   073
1312:  BSF    0A.4
1313:  BCF    0A.3
....................             break; 
1314:  GOTO   5F2
....................  
....................         case STATE_IDLE: 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1315:  BSF    03.5
1316:  BSF    06.1
1317:  BCF    03.5
1318:  BTFSS  06.1
1319:  GOTO   385
131A:  BTFSC  3E.3
131B:  GOTO   385
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
131C:  BSF    03.6
131D:  CLRF   1D
131E:  MOVLW  3F
131F:  MOVWF  1C
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1364:  CLRF   1D
1365:  MOVLW  3F
1366:  MOVWF  1C
1367:  BCF    0A.4
1368:  BSF    0A.3
1369:  BCF    03.6
136A:  CALL   2C8
136B:  BSF    0A.4
136C:  BCF    0A.3
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
136D:  BSF    03.6
136E:  CLRF   4E
136F:  MOVLW  3F
1370:  MOVWF  4D
1371:  BCF    0A.4
1372:  BCF    03.6
1373:  CALL   402
1374:  BSF    0A.4
....................                 blinkDisplay(); 
1375:  BCF    0A.4
1376:  BSF    0A.3
1377:  CALL   31B
1378:  BSF    0A.4
1379:  BCF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
137A:  BSF    03.6
137B:  CLRF   1D
137C:  MOVLW  3F
137D:  MOVWF  1C
137E:  CLRF   1E
137F:  BCF    0A.4
1380:  BSF    0A.3
1381:  BCF    03.6
1382:  CALL   073
1383:  BSF    0A.4
1384:  BCF    0A.3
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1385:  BTFSC  3E.1
1386:  GOTO   394
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1387:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1388:  BSF    03.6
1389:  CLRF   1D
138A:  MOVLW  3F
138B:  MOVWF  1C
138C:  MOVLW  04
138D:  MOVWF  1E
138E:  BCF    0A.4
138F:  BSF    0A.3
1390:  BCF    03.6
1391:  CALL   345
1392:  BSF    0A.4
1393:  BCF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1394:  BTFSC  3E.2
1395:  GOTO   3A3
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1396:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1397:  BSF    03.6
1398:  CLRF   1D
1399:  MOVLW  3F
139A:  MOVWF  1C
139B:  MOVLW  09
139C:  MOVWF  1E
139D:  BCF    0A.4
139E:  BSF    0A.3
139F:  BCF    03.6
13A0:  CALL   345
13A1:  BSF    0A.4
13A2:  BCF    0A.3
....................             } 
....................             break; 
13A3:  GOTO   5F2
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
13A4:  BSF    03.6
13A5:  CLRF   4E
13A6:  MOVLW  3F
13A7:  MOVWF  4D
13A8:  BCF    0A.4
13A9:  BCF    03.6
13AA:  CALL   5E9
13AB:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
13AC:  BSF    03.6
13AD:  CLRF   1D
13AE:  MOVLW  3F
13AF:  MOVWF  1C
13B0:  MOVLW  01
13B1:  MOVWF  1E
13B2:  BCF    0A.4
13B3:  BSF    0A.3
13B4:  BCF    03.6
13B5:  CALL   073
13B6:  BSF    0A.4
13B7:  BCF    0A.3
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
13B8:  BTFSC  3E.1
13B9:  GOTO   3C7
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
13BA:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
13BB:  BSF    03.6
13BC:  CLRF   1D
13BD:  MOVLW  3F
13BE:  MOVWF  1C
13BF:  MOVLW  04
13C0:  MOVWF  1E
13C1:  BCF    0A.4
13C2:  BSF    0A.3
13C3:  BCF    03.6
13C4:  CALL   345
13C5:  BSF    0A.4
13C6:  BCF    0A.3
....................             } 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
13C7:  BSF    03.5
13C8:  BSF    06.1
13C9:  BCF    03.5
13CA:  BTFSS  06.1
13CB:  GOTO   3FC
13CC:  BTFSC  3E.3
13CD:  GOTO   3FC
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
13CE:  BSF    03.6
13CF:  CLRF   1D
13D0:  MOVLW  3F
13D1:  MOVWF  1C
13D2:  BCF    0A.4
13D3:  BSF    0A.3
13D4:  BCF    03.6
13D5:  CALL   36A
13D6:  BSF    0A.4
13D7:  BCF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
13D8:  BSF    03.6
13D9:  CLRF   1D
13DA:  MOVLW  3F
13DB:  MOVWF  1C
13DC:  BCF    0A.4
13DD:  BSF    0A.3
13DE:  BCF    03.6
13DF:  CALL   38E
13E0:  BSF    0A.4
13E1:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
13E2:  BSF    03.6
13E3:  CLRF   1D
13E4:  MOVLW  3F
13E5:  MOVWF  1C
13E6:  BCF    0A.4
13E7:  BSF    0A.3
13E8:  BCF    03.6
13E9:  CALL   2C8
13EA:  BSF    0A.4
13EB:  BCF    0A.3
....................                 blinkDisplay(); 
13EC:  BCF    0A.4
13ED:  BSF    0A.3
13EE:  CALL   31B
13EF:  BSF    0A.4
13F0:  BCF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
13F1:  BSF    03.6
13F2:  CLRF   1D
13F3:  MOVLW  3F
13F4:  MOVWF  1C
13F5:  CLRF   1E
13F6:  BCF    0A.4
13F7:  BSF    0A.3
13F8:  BCF    03.6
13F9:  CALL   073
13FA:  BSF    0A.4
13FB:  BCF    0A.3
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
13FC:  BSF    03.6
13FD:  CLRF   1D
13FE:  MOVLW  3F
13FF:  MOVWF  1C
*
1439:  MOVF   78,F
143A:  BTFSC  03.2
143B:  GOTO   4A1
....................                 turnOnBuzzer(); 
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
*
146A:  BSF    03.6
146B:  CLRF   1D
146C:  MOVLW  3F
146D:  MOVWF  1C
146E:  MOVLW  01
146F:  MOVWF  1E
1470:  BCF    0A.4
1471:  BSF    0A.3
1472:  BCF    03.6
1473:  CALL   345
1474:  BSF    0A.4
1475:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1476:  BSF    03.6
1477:  CLRF   1D
1478:  MOVLW  3F
1479:  MOVWF  1C
147A:  BCF    0A.4
147B:  BSF    0A.3
147C:  BCF    03.6
147D:  CALL   2C8
147E:  BSF    0A.4
147F:  BCF    0A.3
....................                 myPolyoneDisplay.typeOfCount = COUNTUP; 
1480:  BCF    55.1
....................                 PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
1481:  BSF    03.6
1482:  CLRF   1D
1483:  MOVLW  3F
1484:  MOVWF  1C
1485:  BCF    0A.4
1486:  BSF    0A.3
1487:  BCF    03.6
1488:  CALL   416
1489:  BSF    0A.4
148A:  BCF    0A.3
....................                 Time_clearRtcTime(); 
148B:  BCF    0A.4
148C:  CALL   7EF
148D:  BSF    0A.4
....................                 setDate(1, 1, 1, 1); 
148E:  MOVLW  01
148F:  BSF    03.6
1490:  MOVWF  54
1491:  MOVWF  55
1492:  MOVWF  56
1493:  MOVWF  57
1494:  BCF    0A.4
1495:  BCF    03.6
1496:  CALL   39E
1497:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1498:  BSF    03.6
1499:  CLRF   4E
149A:  MOVLW  3F
149B:  MOVWF  4D
149C:  BCF    0A.4
149D:  BCF    03.6
149E:  CALL   5E9
149F:  BSF    0A.4
14A0:  BSF    03.6
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
14A1:  BCF    03.6
14A2:  BTFSC  3E.2
14A3:  GOTO   4B1
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
14A4:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
14A5:  BSF    03.6
14A6:  CLRF   1D
14A7:  MOVLW  3F
14A8:  MOVWF  1C
14A9:  MOVLW  09
14AA:  MOVWF  1E
14AB:  BCF    0A.4
14AC:  BSF    0A.3
14AD:  BCF    03.6
14AE:  CALL   345
14AF:  BSF    0A.4
14B0:  BCF    0A.3
....................             } 
....................             break; 
14B1:  GOTO   5F2
....................  
....................         case STATE_COUNTING_UP: 
....................             if (!PolyoneDisplay_isCountUpDone(&myPolyoneDisplay)) { 
14B2:  BSF    03.6
14B3:  CLRF   1D
14B4:  MOVLW  3F
14B5:  MOVWF  1C
*
1507:  MOVF   78,F
1508:  BTFSS  03.2
1509:  GOTO   553
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
150A:  CLRF   4E
150B:  MOVLW  3F
150C:  MOVWF  4D
150D:  BCF    0A.4
150E:  BCF    03.6
150F:  CALL   5E9
1510:  BSF    0A.4
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
1511:  BSF    03.6
1512:  CLRF   1D
1513:  MOVLW  3F
1514:  MOVWF  1C
1515:  MOVLW  01
1516:  MOVWF  1E
1517:  BCF    0A.4
1518:  BSF    0A.3
1519:  BCF    03.6
151A:  CALL   073
151B:  BSF    0A.4
151C:  BCF    0A.3
....................                 if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
151D:  BSF    03.5
151E:  BSF    06.1
151F:  BCF    03.5
1520:  BTFSS  06.1
1521:  GOTO   552
1522:  BTFSC  3E.3
1523:  GOTO   552
....................                     PolyoneDisplay_stop(&myPolyoneDisplay); 
1524:  BSF    03.6
1525:  CLRF   1D
1526:  MOVLW  3F
1527:  MOVWF  1C
1528:  BCF    0A.4
1529:  BSF    0A.3
152A:  BCF    03.6
152B:  CALL   36A
152C:  BSF    0A.4
152D:  BCF    0A.3
....................                     PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
152E:  BSF    03.6
152F:  CLRF   1D
1530:  MOVLW  3F
1531:  MOVWF  1C
1532:  BCF    0A.4
1533:  BSF    0A.3
1534:  BCF    03.6
1535:  CALL   38E
1536:  BSF    0A.4
1537:  BCF    0A.3
....................                     PolyoneDisplay_saveState(&myPolyoneDisplay); 
1538:  BSF    03.6
1539:  CLRF   1D
153A:  MOVLW  3F
153B:  MOVWF  1C
153C:  BCF    0A.4
153D:  BSF    0A.3
153E:  BCF    03.6
153F:  CALL   2C8
1540:  BSF    0A.4
1541:  BCF    0A.3
....................                     blinkDisplay(); 
1542:  BCF    0A.4
1543:  BSF    0A.3
1544:  CALL   31B
1545:  BSF    0A.4
1546:  BCF    0A.3
....................                     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1547:  BSF    03.6
1548:  CLRF   1D
1549:  MOVLW  3F
154A:  MOVWF  1C
154B:  CLRF   1E
154C:  BCF    0A.4
154D:  BSF    0A.3
154E:  BCF    03.6
154F:  CALL   073
1550:  BSF    0A.4
1551:  BCF    0A.3
1552:  BSF    03.6
....................                 } 
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1553:  BCF    03.6
1554:  BTFSC  3E.1
1555:  GOTO   563
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1556:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1557:  BSF    03.6
1558:  CLRF   1D
1559:  MOVLW  3F
155A:  MOVWF  1C
155B:  MOVLW  04
155C:  MOVWF  1E
155D:  BCF    0A.4
155E:  BSF    0A.3
155F:  BCF    03.6
1560:  CALL   345
1561:  BSF    0A.4
1562:  BCF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1563:  BTFSC  3E.2
1564:  GOTO   572
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1565:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1566:  BSF    03.6
1567:  CLRF   1D
1568:  MOVLW  3F
1569:  MOVWF  1C
156A:  MOVLW  09
156B:  MOVWF  1E
156C:  BCF    0A.4
156D:  BSF    0A.3
156E:  BCF    03.6
156F:  CALL   345
1570:  BSF    0A.4
1571:  BCF    0A.3
....................             }            
....................             break; 
1572:  GOTO   5F2
....................  
....................         case STATE_RESETTING: 
....................             myPolyoneDisplay.typeOfCount = COUNTDOWN; 
1573:  BSF    55.1
....................             PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
1574:  BSF    03.6
1575:  CLRF   1D
1576:  MOVLW  3F
1577:  MOVWF  1C
1578:  BCF    0A.4
1579:  BSF    0A.3
157A:  BCF    03.6
157B:  CALL   416
157C:  BSF    0A.4
157D:  BCF    0A.3
....................             Time_clearRtcTime(); 
157E:  BCF    0A.4
157F:  CALL   7EF
1580:  BSF    0A.4
....................             setDate(1, 1, 1, 1); 
1581:  MOVLW  01
1582:  BSF    03.6
1583:  MOVWF  54
1584:  MOVWF  55
1585:  MOVWF  56
1586:  MOVWF  57
1587:  BCF    0A.4
1588:  BCF    03.6
1589:  CALL   39E
158A:  BSF    0A.4
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
15A0:  MOVLW  08
15A1:  BSF    03.6
15A2:  MOVWF  1C
15A3:  MOVLW  FA
15A4:  MOVWF  1D
15A5:  BCF    0A.4
15A6:  BCF    03.6
15A7:  CALL   7CD
15A8:  BSF    0A.4
15A9:  BSF    03.6
15AA:  DECFSZ 1C,F
15AB:  GOTO   5A3
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
15AC:  CLRF   1D
15AD:  MOVLW  3F
15AE:  MOVWF  1C
15AF:  MOVLW  0A
15B0:  MOVWF  1E
15B1:  BCF    0A.4
15B2:  BSF    0A.3
15B3:  BCF    03.6
15B4:  CALL   345
15B5:  BSF    0A.4
15B6:  BCF    0A.3
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
15B7:  MOVLW  05
15B8:  MOVWF  60
....................             Time_clearRtcTime(); 
15B9:  BCF    0A.4
15BA:  CALL   7EF
15BB:  BSF    0A.4
....................             setDate(1, 1, 1, 1); 
15BC:  MOVLW  01
15BD:  BSF    03.6
15BE:  MOVWF  54
15BF:  MOVWF  55
15C0:  MOVWF  56
15C1:  MOVWF  57
15C2:  BCF    0A.4
15C3:  BCF    03.6
15C4:  CALL   39E
15C5:  BSF    0A.4
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
15C6:  BSF    03.6
15C7:  CLRF   4E
15C8:  MOVLW  3F
15C9:  MOVWF  4D
15CA:  BCF    0A.4
15CB:  BCF    03.6
15CC:  CALL   5E9
15CD:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
15CE:  BSF    03.6
15CF:  CLRF   1D
15D0:  MOVLW  3F
15D1:  MOVWF  1C
15D2:  CLRF   1E
15D3:  BCF    0A.4
15D4:  BSF    0A.3
15D5:  BCF    03.6
15D6:  CALL   073
15D7:  BSF    0A.4
15D8:  BCF    0A.3
....................             break; 
15D9:  GOTO   5F2
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(PIN_BUTTON_START) && input(PIN_BUTTON_MENU)) { 
15DA:  BSF    03.5
15DB:  BSF    06.1
15DC:  BCF    03.5
15DD:  BTFSS  06.1
15DE:  GOTO   5F2
15DF:  BSF    03.5
15E0:  BSF    06.0
15E1:  BCF    03.5
15E2:  BTFSS  06.0
15E3:  GOTO   5F2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
15E4:  BSF    03.6
15E5:  CLRF   1D
15E6:  MOVLW  3F
15E7:  MOVWF  1C
15E8:  BCF    03.6
15E9:  MOVF   60,W
15EA:  BSF    03.6
15EB:  MOVWF  1E
15EC:  BCF    0A.4
15ED:  BSF    0A.3
15EE:  BCF    03.6
15EF:  CALL   345
15F0:  BSF    0A.4
15F1:  BCF    0A.3
....................             } 
....................             break; 
....................     } 
15F2:  BSF    0A.3
15F3:  BSF    0A.4
15F4:  GOTO   002 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1800:  BCF    0A.3
1801:  GOTO   000
1802:  BSF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1803:  MOVLW  05
1804:  SUBWF  56,W
1805:  ADDLW  FB
1806:  BTFSC  03.0
1807:  GOTO   724
1808:  ADDLW  05
1809:  GOTO   73F
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
180A:  BSF    03.6
180B:  CLRF   1D
180C:  MOVLW  3F
180D:  MOVWF  1C
180E:  CLRF   1E
180F:  BCF    0A.4
1810:  BCF    03.6
1811:  CALL   073
1812:  BSF    0A.4
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1813:  BSF    03.5
1814:  BSF    06.1
1815:  BCF    03.5
1816:  BTFSS  06.1
1817:  GOTO   040
1818:  BTFSC  3E.3
1819:  GOTO   040
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
181A:  BSF    03.6
181B:  CLRF   1D
181C:  MOVLW  3F
181D:  MOVWF  1C
181E:  MOVLW  02
181F:  MOVWF  1E
1820:  BCF    0A.4
1821:  BCF    03.6
1822:  CALL   345
1823:  BSF    0A.4
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1824:  BSF    03.6
1825:  CLRF   1D
1826:  MOVLW  3F
1827:  MOVWF  1C
1828:  BCF    0A.4
1829:  BCF    03.6
182A:  CALL   2C8
182B:  BSF    0A.4
....................                 blinkDisplay(); 
182C:  BCF    0A.4
182D:  CALL   31B
182E:  BSF    0A.4
....................                 Time_clearRtcTime(); 
182F:  BCF    0A.4
1830:  BCF    0A.3
1831:  CALL   7EF
1832:  BSF    0A.4
1833:  BSF    0A.3
....................                 setDate(1, 1, 1, 1); 
1834:  MOVLW  01
1835:  BSF    03.6
1836:  MOVWF  54
1837:  MOVWF  55
1838:  MOVWF  56
1839:  MOVWF  57
183A:  BCF    0A.4
183B:  BCF    0A.3
183C:  BCF    03.6
183D:  CALL   39E
183E:  BSF    0A.4
183F:  BSF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1840:  BTFSC  3E.2
1841:  GOTO   04D
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1842:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1843:  BSF    03.6
1844:  CLRF   1D
1845:  MOVLW  3F
1846:  MOVWF  1C
1847:  MOVLW  06
1848:  MOVWF  1E
1849:  BCF    0A.4
184A:  BCF    03.6
184B:  CALL   345
184C:  BSF    0A.4
....................             } 
....................             break; 
184D:  GOTO   724
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             if (showDisplayCompletely) { 
184E:  BTFSS  3E.0
184F:  GOTO   059
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1850:  BSF    03.6
1851:  CLRF   1D
1852:  MOVLW  3F
1853:  MOVWF  1C
1854:  BCF    0A.4
1855:  BCF    03.6
1856:  CALL   441
1857:  BSF    0A.4
....................             } else { 
1858:  GOTO   144
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
1859:  BSF    03.6
185A:  CLRF   1D
185B:  MOVLW  3F
185C:  MOVWF  1C
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1945:  BSF    03.5
1946:  BCF    03.6
1947:  BSF    06.1
1948:  BCF    03.5
1949:  BTFSC  06.1
194A:  GOTO   1C6
....................                 while (!input(PIN_BUTTON_START)) { 
194B:  BSF    03.5
194C:  BSF    06.1
194D:  BCF    03.5
194E:  BTFSC  06.1
194F:  GOTO   1C6
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
1950:  BSF    03.6
1951:  CLRF   1D
1952:  MOVLW  3F
1953:  MOVWF  1C
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
19B5:  CLRF   1D
19B6:  MOVLW  3F
19B7:  MOVWF  1C
19B8:  BCF    0A.4
19B9:  BCF    03.6
19BA:  CALL   441
19BB:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
19BC:  MOVLW  C8
19BD:  BSF    03.6
19BE:  MOVWF  1D
19BF:  BCF    0A.4
19C0:  BCF    0A.3
19C1:  BCF    03.6
19C2:  CALL   7CD
19C3:  BSF    0A.4
19C4:  BSF    0A.3
19C5:  GOTO   14B
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
19C6:  BTFSC  3E.4
19C7:  GOTO   1DD
19C8:  BSF    03.5
19C9:  BSF    06.0
19CA:  BCF    03.5
19CB:  BTFSS  06.0
19CC:  GOTO   1DD
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
19CD:  MOVF   57,W
19CE:  SUBLW  05
19CF:  BTFSS  03.2
19D0:  GOTO   1D3
....................                     numberOfMenuButtonHasBeenReleased++; 
19D1:  INCF   61,F
....................                 } else { 
19D2:  GOTO   1DD
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19D3:  BSF    03.6
19D4:  CLRF   1D
19D5:  MOVLW  3F
19D6:  MOVWF  1C
19D7:  MOVLW  07
19D8:  MOVWF  1E
19D9:  BCF    0A.4
19DA:  BCF    03.6
19DB:  CALL   345
19DC:  BSF    0A.4
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
19DD:  MOVF   61,W
19DE:  SUBLW  01
19DF:  BTFSC  03.0
19E0:  GOTO   1EC
....................                 numberOfMenuButtonHasBeenReleased = 0; 
19E1:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19E2:  BSF    03.6
19E3:  CLRF   1D
19E4:  MOVLW  3F
19E5:  MOVWF  1C
19E6:  MOVLW  07
19E7:  MOVWF  1E
19E8:  BCF    0A.4
19E9:  BCF    03.6
19EA:  CALL   345
19EB:  BSF    0A.4
....................             } 
....................  
....................             break; 
19EC:  GOTO   724
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
19ED:  BTFSS  3E.0
19EE:  GOTO   1F8
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
19EF:  BSF    03.6
19F0:  CLRF   1D
19F1:  MOVLW  3F
19F2:  MOVWF  1C
19F3:  BCF    0A.4
19F4:  BCF    03.6
19F5:  CALL   441
19F6:  BSF    0A.4
....................             } else { 
19F7:  GOTO   2E7
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
19F8:  BSF    03.6
19F9:  CLRF   1D
19FA:  MOVLW  3F
19FB:  MOVWF  1C
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1AE8:  BSF    03.5
1AE9:  BCF    03.6
1AEA:  BSF    06.1
1AEB:  BCF    03.5
1AEC:  BTFSC  06.1
1AED:  GOTO   36B
....................                 while (!input(PIN_BUTTON_START)) { 
1AEE:  BSF    03.5
1AEF:  BSF    06.1
1AF0:  BCF    03.5
1AF1:  BTFSC  06.1
1AF2:  GOTO   36B
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1AF3:  BSF    03.6
1AF4:  CLRF   1D
1AF5:  MOVLW  3F
1AF6:  MOVWF  1C
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1B59:  BSF    03.6
1B5A:  CLRF   1D
1B5B:  MOVLW  3F
1B5C:  MOVWF  1C
1B5D:  BCF    0A.4
1B5E:  BCF    03.6
1B5F:  CALL   441
1B60:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1B61:  MOVLW  C8
1B62:  BSF    03.6
1B63:  MOVWF  1D
1B64:  BCF    0A.4
1B65:  BCF    0A.3
1B66:  BCF    03.6
1B67:  CALL   7CD
1B68:  BSF    0A.4
1B69:  BSF    0A.3
1B6A:  GOTO   2EE
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1B6B:  BTFSC  3E.4
1B6C:  GOTO   3D0
1B6D:  BSF    03.5
1B6E:  BSF    06.0
1B6F:  BCF    03.5
1B70:  BTFSS  06.0
1B71:  GOTO   3D0
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
1B72:  BSF    03.6
1B73:  CLRF   1D
1B74:  MOVLW  3F
1B75:  MOVWF  1C
*
1BB9:  MOVF   78,F
1BBA:  BTFSC  03.2
1BBB:  GOTO   3C7
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
1BBC:  CLRF   1D
1BBD:  MOVLW  3F
1BBE:  MOVWF  1C
1BBF:  MOVLW  08
1BC0:  MOVWF  1E
1BC1:  BCF    0A.4
1BC2:  BCF    03.6
1BC3:  CALL   345
1BC4:  BSF    0A.4
....................                 } else { 
1BC5:  GOTO   3D0
1BC6:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1BC7:  CLRF   1D
1BC8:  MOVLW  3F
1BC9:  MOVWF  1C
1BCA:  MOVLW  06
1BCB:  MOVWF  1E
1BCC:  BCF    0A.4
1BCD:  BCF    03.6
1BCE:  CALL   345
1BCF:  BSF    0A.4
....................                 } 
....................             } 
....................             break; 
1BD0:  GOTO   724
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
1BD1:  BSF    03.6
1BD2:  CLRF   1D
1BD3:  MOVLW  3F
1BD4:  MOVWF  1C
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
*
1C09:  BSF    03.5
1C0A:  BSF    06.1
1C0B:  BCF    03.5
1C0C:  BTFSS  06.1
1C0D:  GOTO   554
1C0E:  BTFSC  3E.3
1C0F:  GOTO   554
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1C10:  BSF    03.6
1C11:  CLRF   1D
1C12:  MOVLW  3F
1C13:  MOVWF  1C
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
*
1D54:  BTFSC  3E.4
1D55:  GOTO   66A
1D56:  BSF    03.5
1D57:  BSF    06.0
1D58:  BCF    03.5
1D59:  BTFSS  06.0
1D5A:  GOTO   66A
....................                 PolyoneDisplay_saveAlarm(&myPolyoneDisplay); 
1D5B:  BSF    03.6
1D5C:  CLRF   1D
1D5D:  MOVLW  3F
1D5E:  MOVWF  1C
....................                 PolyoneDisplay_saveFormat(&myPolyoneDisplay); 
*
1E19:  CLRF   1D
1E1A:  MOVLW  3F
1E1B:  MOVWF  1C
....................                 setDate(1, 1, 1, 1); 
*
1E45:  MOVLW  01
1E46:  BSF    03.6
1E47:  MOVWF  54
1E48:  MOVWF  55
1E49:  MOVWF  56
1E4A:  MOVWF  57
1E4B:  BCF    0A.4
1E4C:  BCF    0A.3
1E4D:  BCF    03.6
1E4E:  CALL   39E
1E4F:  BSF    0A.4
1E50:  BSF    0A.3
....................                 Time_clearRtcTime(); 
1E51:  BCF    0A.4
1E52:  BCF    0A.3
1E53:  CALL   7EF
1E54:  BSF    0A.4
1E55:  BSF    0A.3
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1E56:  BSF    03.6
1E57:  CLRF   4E
1E58:  MOVLW  3F
1E59:  MOVWF  4D
1E5A:  BCF    0A.4
1E5B:  BCF    0A.3
1E5C:  BCF    03.6
1E5D:  CALL   5E9
1E5E:  BSF    0A.4
1E5F:  BSF    0A.3
....................  
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1E60:  BSF    03.6
1E61:  CLRF   1D
1E62:  MOVLW  3F
1E63:  MOVWF  1C
1E64:  MOVLW  09
1E65:  MOVWF  1E
1E66:  BCF    0A.4
1E67:  BCF    03.6
1E68:  CALL   345
1E69:  BSF    0A.4
....................             } 
....................             break; 
1E6A:  GOTO   724
....................  
....................         case STATE_SETTING_BRIGHTNESS: 
....................             if (showDisplayCompletely) { 
1E6B:  BTFSS  3E.0
1E6C:  GOTO   676
....................                 PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
1E6D:  BSF    03.6
1E6E:  CLRF   1D
1E6F:  MOVLW  3F
1E70:  MOVWF  1C
1E71:  BCF    0A.4
1E72:  BCF    03.6
1E73:  CALL   536
1E74:  BSF    0A.4
....................             } else { 
1E75:  GOTO   689
....................                 PolyoneDisplay_hideBrightness(); 
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1E89:  BSF    03.5
1E8A:  BSF    06.1
1E8B:  BCF    03.5
1E8C:  BTFSC  06.1
1E8D:  GOTO   6E3
....................                 while (!input(PIN_BUTTON_START)) { 
1E8E:  BSF    03.5
1E8F:  BSF    06.1
1E90:  BCF    03.5
1E91:  BTFSC  06.1
1E92:  GOTO   6E3
....................                     PolyoneDisplay_increaseBrightness(&myPolyoneDisplay); 
1E93:  BSF    03.6
1E94:  CLRF   1D
1E95:  MOVLW  3F
1E96:  MOVWF  1C
....................                     PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
*
1ED1:  BSF    03.6
1ED2:  CLRF   1D
1ED3:  MOVLW  3F
1ED4:  MOVWF  1C
1ED5:  BCF    0A.4
1ED6:  BCF    03.6
1ED7:  CALL   536
1ED8:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1ED9:  MOVLW  C8
1EDA:  BSF    03.6
1EDB:  MOVWF  1D
1EDC:  BCF    0A.4
1EDD:  BCF    0A.3
1EDE:  BCF    03.6
1EDF:  CALL   7CD
1EE0:  BSF    0A.4
1EE1:  BSF    0A.3
1EE2:  GOTO   68E
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1EE3:  BTFSC  3E.4
1EE4:  GOTO   702
1EE5:  BSF    03.5
1EE6:  BSF    06.0
1EE7:  BCF    03.5
1EE8:  BTFSS  06.0
1EE9:  GOTO   702
....................                 if (myPolyoneDisplay.previousState == STATE_SETTING_FORMAT) { 
1EEA:  MOVF   57,W
1EEB:  SUBLW  08
1EEC:  BTFSS  03.2
1EED:  GOTO   701
....................                     PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1EEE:  BSF    03.6
1EEF:  CLRF   1D
1EF0:  MOVLW  3F
1EF1:  MOVWF  1C
1EF2:  BCF    0A.4
1EF3:  BCF    03.6
1EF4:  CALL   57A
1EF5:  BSF    0A.4
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
1EF6:  BSF    03.6
1EF7:  CLRF   1D
1EF8:  MOVLW  3F
1EF9:  MOVWF  1C
1EFA:  MOVLW  05
1EFB:  MOVWF  1E
1EFC:  BCF    0A.4
1EFD:  BCF    03.6
1EFE:  CALL   345
1EFF:  BSF    0A.4
....................                 } else { 
1F00:  GOTO   702
....................                     numberOfMenuButtonHasBeenReleased++; 
1F01:  INCF   61,F
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1F02:  MOVF   61,W
1F03:  SUBLW  01
1F04:  BTFSC  03.0
1F05:  GOTO   724
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1F06:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, myPolyoneDisplay.previousState); 
1F07:  BSF    03.6
1F08:  CLRF   1D
1F09:  MOVLW  3F
1F0A:  MOVWF  1C
1F0B:  BCF    03.6
1F0C:  MOVF   57,W
1F0D:  BSF    03.6
1F0E:  MOVWF  1E
1F0F:  BCF    0A.4
1F10:  BCF    03.6
1F11:  CALL   345
1F12:  BSF    0A.4
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1F13:  BSF    03.6
1F14:  CLRF   1D
1F15:  MOVLW  3F
1F16:  MOVWF  1C
1F17:  CLRF   1E
1F18:  BCF    0A.4
1F19:  BCF    03.6
1F1A:  CALL   073
1F1B:  BSF    0A.4
....................                 PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1F1C:  BSF    03.6
1F1D:  CLRF   1D
1F1E:  MOVLW  3F
1F1F:  MOVWF  1C
1F20:  BCF    0A.4
1F21:  BCF    03.6
1F22:  CALL   57A
1F23:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(PIN_BUTTON_START); 
1F24:  BSF    03.5
1F25:  BSF    06.1
1F26:  BCF    03.5
1F27:  BCF    3E.3
1F28:  BTFSC  06.1
1F29:  BSF    3E.3
....................     menuButtonState = input(PIN_BUTTON_MENU); 
1F2A:  BSF    03.5
1F2B:  BSF    06.0
1F2C:  BCF    03.5
1F2D:  BCF    3E.4
1F2E:  BTFSC  06.0
1F2F:  BSF    3E.4
....................     rtos_yield(); 
1F30:  MOVLW  37
1F31:  MOVWF  35
1F32:  MOVLW  1F
1F33:  MOVWF  36
1F34:  BSF    0A.3
1F35:  BCF    0A.4
1F36:  GOTO   6A1
1F37:  MOVLW  00
1F38:  MOVWF  35
1F39:  MOVLW  18
1F3A:  MOVWF  36
1F3B:  BSF    0A.3
1F3C:  BCF    0A.4
1F3D:  GOTO   6A1
1F3E:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(PIN_BUTTON_START)) { 
*
0DA4:  BSF    03.5
0DA5:  BSF    06.1
0DA6:  BCF    03.5
0DA7:  BTFSC  06.1
0DA8:  GOTO   5AB
....................         nextUpButtonCounter++; 
0DA9:  INCF   62,F
....................     } else { 
0DAA:  GOTO   5AD
....................         nextUpButtonCounter = 0; 
0DAB:  CLRF   62
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0DAC:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0DAD:  MOVF   62,W
0DAE:  SUBLW  13
0DAF:  BTFSC  03.0
0DB0:  GOTO   5B3
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0DB1:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0DB2:  CLRF   62
....................     } 
....................     rtos_yield(); 
0DB3:  MOVLW  BA
0DB4:  MOVWF  27
0DB5:  MOVLW  0D
0DB6:  MOVWF  28
0DB7:  BSF    0A.3
0DB8:  BCF    0A.4
0DB9:  GOTO   6A1
0DBA:  MOVLW  A4
0DBB:  MOVWF  27
0DBC:  MOVLW  0D
0DBD:  MOVWF  28
0DBE:  BSF    0A.3
0DBF:  BCF    0A.4
0DC0:  GOTO   6A1
0DC1:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(PIN_BUTTON_MENU)) { 
0DC2:  BSF    03.5
0DC3:  BSF    06.0
0DC4:  BCF    03.5
0DC5:  BTFSC  06.0
0DC6:  GOTO   5C9
....................         menuButtonCounter++; 
0DC7:  INCF   63,F
....................     } else { 
0DC8:  GOTO   5CB
....................         menuButtonCounter = 0; 
0DC9:  CLRF   63
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0DCA:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0DCB:  MOVF   63,W
0DCC:  SUBLW  0C
0DCD:  BTFSC  03.0
0DCE:  GOTO   5D1
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0DCF:  BCF    3E.2
....................         menuButtonCounter = 0; 
0DD0:  CLRF   63
....................     } 
....................     rtos_yield(); 
0DD1:  MOVLW  D8
0DD2:  MOVWF  2E
0DD3:  MOVLW  0D
0DD4:  MOVWF  2F
0DD5:  BSF    0A.3
0DD6:  BCF    0A.4
0DD7:  GOTO   6A1
0DD8:  MOVLW  C2
0DD9:  MOVWF  2E
0DDA:  MOVLW  0D
0DDB:  MOVWF  2F
0DDC:  BSF    0A.3
0DDD:  BCF    0A.4
0DDE:  GOTO   6A1
0DDF:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0DE0:  MOVLW  01
0DE1:  XORWF  3E,F
....................     rtos_yield(); 
0DE2:  MOVLW  E9
0DE3:  MOVWF  3C
0DE4:  MOVLW  0D
0DE5:  MOVWF  3D
0DE6:  BSF    0A.3
0DE7:  BCF    0A.4
0DE8:  GOTO   6A1
0DE9:  MOVLW  E0
0DEA:  MOVWF  3C
0DEB:  MOVLW  0D
0DEC:  MOVWF  3D
0DED:  BSF    0A.3
0DEE:  BCF    0A.4
0DEF:  GOTO   6A1
0DF0:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
*
0E0E:  MOVLW  00
0E0F:  MOVWF  78
0E10:  IORLW  06
0E11:  BCF    03.6
0E12:  MOVWF  12
0E13:  MOVLW  FF
0E14:  BSF    03.5
0E15:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0E16:  BCF    03.5
0E17:  BCF    20.2
0E18:  MOVF   20,W
0E19:  BSF    03.5
0E1A:  MOVWF  07
0E1B:  BCF    03.5
0E1C:  BCF    07.2
0E1D:  MOVLW  0E
0E1E:  MOVWF  17
0E1F:  BSF    03.5
0E20:  CLRF   1B
0E21:  CLRF   1C
0E22:  MOVLW  01
0E23:  MOVWF  1D
....................  
....................     delay_ms(200); 
0E24:  MOVLW  C8
0E25:  BCF    03.5
0E26:  BSF    03.6
0E27:  MOVWF  1D
0E28:  BCF    0A.3
0E29:  BCF    03.6
0E2A:  CALL   7CD
0E2B:  BSF    0A.3
....................     port_b_pullups(0xFF); 
0E2C:  MOVLW  FF
0E2D:  BSF    03.5
0E2E:  MOVWF  15
0E2F:  BCF    01.7
....................     WPUB = 0xFF; 
0E30:  MOVWF  15
.................... } 
....................  
.................... void turnOnBuzzer(void) { 
....................     output_high(PIN_BUZZER); 
*
143C:  BCF    03.6
143D:  BCF    20.5
143E:  MOVF   20,W
143F:  BSF    03.5
1440:  MOVWF  07
1441:  BCF    03.5
1442:  BSF    07.5
....................     delay_ms(200); 
1443:  MOVLW  C8
1444:  BSF    03.6
1445:  MOVWF  1D
1446:  BCF    0A.4
1447:  BCF    03.6
1448:  CALL   7CD
1449:  BSF    0A.4
....................     output_low(PIN_BUZZER); 
144A:  BCF    20.5
144B:  MOVF   20,W
144C:  BSF    03.5
144D:  MOVWF  07
144E:  BCF    03.5
144F:  BCF    07.5
....................     delay_ms(100); 
1450:  MOVLW  64
1451:  BSF    03.6
1452:  MOVWF  1D
1453:  BCF    0A.4
1454:  BCF    03.6
1455:  CALL   7CD
1456:  BSF    0A.4
....................     output_high(PIN_BUZZER); 
1457:  BCF    20.5
1458:  MOVF   20,W
1459:  BSF    03.5
145A:  MOVWF  07
145B:  BCF    03.5
145C:  BSF    07.5
....................     delay_ms(200); 
145D:  MOVLW  C8
145E:  BSF    03.6
145F:  MOVWF  1D
1460:  BCF    0A.4
1461:  BCF    03.6
1462:  CALL   7CD
1463:  BSF    0A.4
....................     output_low(PIN_BUZZER); 
1464:  BCF    20.5
1465:  MOVF   20,W
1466:  BSF    03.5
1467:  MOVWF  07
1468:  BCF    03.5
1469:  BCF    07.5
.................... } 
....................  
.................... void blinkDisplay(void) { 
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
*
0B1B:  BSF    03.6
0B1C:  CLRF   1D
0B1D:  MOVLW  3F
0B1E:  MOVWF  1C
0B1F:  CLRF   1E
0B20:  BCF    03.6
0B21:  CALL   073
....................     delay_ms(200); 
0B22:  MOVLW  C8
0B23:  BSF    03.6
0B24:  MOVWF  1D
0B25:  BCF    0A.3
0B26:  BCF    03.6
0B27:  CALL   7CD
0B28:  BSF    0A.3
....................     SevenSegmentDisplay_clearDisplay(); 
0B29:  BCF    0A.3
0B2A:  CALL   7E1
0B2B:  BSF    0A.3
....................     delay_ms(200); 
0B2C:  MOVLW  C8
0B2D:  BSF    03.6
0B2E:  MOVWF  1D
0B2F:  BCF    0A.3
0B30:  BCF    03.6
0B31:  CALL   7CD
0B32:  BSF    0A.3
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0B33:  BSF    03.6
0B34:  CLRF   1D
0B35:  MOVLW  3F
0B36:  MOVWF  1C
0B37:  CLRF   1E
0B38:  BCF    03.6
0B39:  CALL   073
....................     delay_ms(200); 
0B3A:  MOVLW  C8
0B3B:  BSF    03.6
0B3C:  MOVWF  1D
0B3D:  BCF    0A.3
0B3E:  BCF    03.6
0B3F:  CALL   7CD
0B40:  BSF    0A.3
....................     SevenSegmentDisplay_clearDisplay(); 
0B41:  BCF    0A.3
0B42:  CALL   7E1
0B43:  BSF    0A.3
0B44:  RETURN
.................... } 

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
