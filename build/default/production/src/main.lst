CCS PCM C Compiler, Version 5.015, 5967               08-Nov-17 16:15

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   4710 words (57%)
                           Largest free fragment is 2048
               RAM used:   73 (20%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (2 in main + 6 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   580
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  22
0028:  RETLW  00
0029:  RETLW  29
002A:  RETLW  00
002B:  RETLW  30
002C:  RETLW  00
002D:  RETLW  37
002E:  RETLW  00
002F:  BSF    03.5
0030:  BSF    03.6
0031:  MOVF   2C,W
0032:  CLRF   78
0033:  SUBWF  2B,W
0034:  BTFSC  03.0
0035:  GOTO   039
0036:  MOVF   2B,W
0037:  MOVWF  77
0038:  GOTO   045
0039:  CLRF   77
003A:  MOVLW  08
003B:  MOVWF  2D
003C:  RLF    2B,F
003D:  RLF    77,F
003E:  MOVF   2C,W
003F:  SUBWF  77,W
0040:  BTFSC  03.0
0041:  MOVWF  77
0042:  RLF    78,F
0043:  DECFSZ 2D,F
0044:  GOTO   03C
0045:  BCF    03.5
0046:  BCF    03.6
0047:  RETURN
*
015F:  CLRF   77
0160:  CLRF   78
0161:  MOVF   13,W
0162:  BCF    03.0
0163:  BTFSC  14.0
0164:  ADDWF  77,F
0165:  RRF    77,F
0166:  RRF    78,F
0167:  BTFSC  14.1
0168:  ADDWF  77,F
0169:  RRF    77,F
016A:  RRF    78,F
016B:  BTFSC  14.2
016C:  ADDWF  77,F
016D:  RRF    77,F
016E:  RRF    78,F
016F:  BTFSC  14.3
0170:  ADDWF  77,F
0171:  RRF    77,F
0172:  RRF    78,F
0173:  BTFSC  14.4
0174:  ADDWF  77,F
0175:  RRF    77,F
0176:  RRF    78,F
0177:  BTFSC  14.5
0178:  ADDWF  77,F
0179:  RRF    77,F
017A:  RRF    78,F
017B:  BTFSC  14.6
017C:  ADDWF  77,F
017D:  RRF    77,F
017E:  RRF    78,F
017F:  BTFSC  14.7
0180:  ADDWF  77,F
0181:  RRF    77,F
0182:  RRF    78,F
*
0189:  MOVLW  20
018A:  BSF    03.5
018B:  BSF    03.6
018C:  MOVWF  32
018D:  CLRF   2E
018E:  CLRF   2F
018F:  CLRF   30
0190:  CLRF   31
0191:  MOVF   29,W
0192:  MOVWF  7A
0193:  MOVF   28,W
0194:  MOVWF  79
0195:  MOVF   27,W
0196:  MOVWF  78
0197:  MOVF   26,W
0198:  MOVWF  77
0199:  BCF    03.0
019A:  BTFSS  77.0
019B:  GOTO   1AA
019C:  MOVF   2A,W
019D:  ADDWF  2E,F
019E:  MOVF   2B,W
019F:  BTFSC  03.0
01A0:  INCFSZ 2B,W
01A1:  ADDWF  2F,F
01A2:  MOVF   2C,W
01A3:  BTFSC  03.0
01A4:  INCFSZ 2C,W
01A5:  ADDWF  30,F
01A6:  MOVF   2D,W
01A7:  BTFSC  03.0
01A8:  INCFSZ 2D,W
01A9:  ADDWF  31,F
01AA:  RRF    31,F
01AB:  RRF    30,F
01AC:  RRF    2F,F
01AD:  RRF    2E,F
01AE:  RRF    7A,F
01AF:  RRF    79,F
01B0:  RRF    78,F
01B1:  RRF    77,F
01B2:  DECFSZ 32,F
01B3:  GOTO   199
01B4:  BCF    03.5
01B5:  BCF    03.6
01B6:  RETURN
*
0254:  BTFSC  03.1
0255:  GOTO   259
0256:  MOVLW  AA
0257:  MOVWF  04
0258:  BSF    03.7
0259:  BSF    03.5
025A:  BSF    03.6
025B:  MOVF   25,W
025C:  XORWF  29,W
025D:  ANDLW  80
025E:  MOVWF  2F
025F:  BTFSS  25.7
0260:  GOTO   26C
0261:  COMF   22,F
0262:  COMF   23,F
0263:  COMF   24,F
0264:  COMF   25,F
0265:  INCF   22,F
0266:  BTFSC  03.2
0267:  INCF   23,F
0268:  BTFSC  03.2
0269:  INCF   24,F
026A:  BTFSC  03.2
026B:  INCF   25,F
026C:  BTFSS  29.7
026D:  GOTO   279
026E:  COMF   26,F
026F:  COMF   27,F
0270:  COMF   28,F
0271:  COMF   29,F
0272:  INCF   26,F
0273:  BTFSC  03.2
0274:  INCF   27,F
0275:  BTFSC  03.2
0276:  INCF   28,F
0277:  BTFSC  03.2
0278:  INCF   29,F
0279:  CLRF   77
027A:  CLRF   78
027B:  CLRF   79
027C:  CLRF   7A
027D:  CLRF   2A
027E:  CLRF   2B
027F:  CLRF   2C
0280:  CLRF   2D
0281:  MOVF   29,W
0282:  IORWF  28,W
0283:  IORWF  27,W
0284:  IORWF  26,W
0285:  BTFSC  03.2
0286:  GOTO   2B7
0287:  MOVLW  20
0288:  MOVWF  2E
0289:  BCF    03.0
028A:  RLF    22,F
028B:  RLF    23,F
028C:  RLF    24,F
028D:  RLF    25,F
028E:  RLF    2A,F
028F:  RLF    2B,F
0290:  RLF    2C,F
0291:  RLF    2D,F
0292:  MOVF   29,W
0293:  SUBWF  2D,W
0294:  BTFSS  03.2
0295:  GOTO   2A0
0296:  MOVF   28,W
0297:  SUBWF  2C,W
0298:  BTFSS  03.2
0299:  GOTO   2A0
029A:  MOVF   27,W
029B:  SUBWF  2B,W
029C:  BTFSS  03.2
029D:  GOTO   2A0
029E:  MOVF   26,W
029F:  SUBWF  2A,W
02A0:  BTFSS  03.0
02A1:  GOTO   2B1
02A2:  MOVF   26,W
02A3:  SUBWF  2A,F
02A4:  MOVF   27,W
02A5:  BTFSS  03.0
02A6:  INCFSZ 27,W
02A7:  SUBWF  2B,F
02A8:  MOVF   28,W
02A9:  BTFSS  03.0
02AA:  INCFSZ 28,W
02AB:  SUBWF  2C,F
02AC:  MOVF   29,W
02AD:  BTFSS  03.0
02AE:  INCFSZ 29,W
02AF:  SUBWF  2D,F
02B0:  BSF    03.0
02B1:  RLF    77,F
02B2:  RLF    78,F
02B3:  RLF    79,F
02B4:  RLF    7A,F
02B5:  DECFSZ 2E,F
02B6:  GOTO   289
02B7:  BTFSS  2F.7
02B8:  GOTO   2C4
02B9:  COMF   77,F
02BA:  COMF   78,F
02BB:  COMF   79,F
02BC:  COMF   7A,F
02BD:  INCF   77,F
02BE:  BTFSC  03.2
02BF:  INCF   78,F
02C0:  BTFSC  03.2
02C1:  INCF   79,F
02C2:  BTFSC  03.2
02C3:  INCF   7A,F
02C4:  MOVF   2A,W
02C5:  MOVWF  00
02C6:  INCF   04,F
02C7:  MOVF   2B,W
02C8:  MOVWF  00
02C9:  INCF   04,F
02CA:  MOVF   2C,W
02CB:  MOVWF  00
02CC:  INCF   04,F
02CD:  MOVF   2D,W
02CE:  MOVWF  00
02CF:  BCF    03.5
02D0:  BCF    03.6
02D1:  RETURN
*
057D:  CLRF   78
057E:  CLRF   79
057F:  CLRF   77
0580:  CLRF   7A
0581:  BSF    03.6
0582:  MOVF   4E,W
0583:  BTFSS  03.2
0584:  GOTO   588
0585:  MOVF   4D,W
0586:  BTFSC  03.2
0587:  GOTO   5A2
0588:  MOVLW  10
0589:  MOVWF  4F
058A:  BCF    03.0
058B:  RLF    4B,F
058C:  RLF    4C,F
058D:  RLF    77,F
058E:  RLF    7A,F
058F:  MOVF   4E,W
0590:  SUBWF  7A,W
0591:  BTFSS  03.2
0592:  GOTO   595
0593:  MOVF   4D,W
0594:  SUBWF  77,W
0595:  BTFSS  03.0
0596:  GOTO   59E
0597:  MOVF   4D,W
0598:  SUBWF  77,F
0599:  BTFSS  03.0
059A:  DECF   7A,F
059B:  MOVF   4E,W
059C:  SUBWF  7A,F
059D:  BSF    03.0
059E:  RLF    78,F
059F:  RLF    79,F
05A0:  DECFSZ 4F,F
05A1:  GOTO   58A
05A2:  BCF    03.6
05A3:  RETURN
*
0BF7:  BSF    0A.0
0BF8:  BSF    0A.1
0BF9:  BCF    0A.2
0BFA:  ADDLW  FE
0BFB:  BTFSC  03.0
0BFC:  INCF   0A,F
0BFD:  MOVWF  02
0BFE:  GOTO   240
0BFF:  GOTO   3A8
0C00:  GOTO   288
0C01:  GOTO   059
0C02:  GOTO   3A9
0C03:  GOTO   3F4
0C04:  GOTO   3F4
0C05:  GOTO   3F4
0C06:  GOTO   3F4
0C07:  GOTO   3E8
*
144D:  BCF    0A.0
144E:  BCF    0A.1
144F:  BSF    0A.2
1450:  ADDWF  02,F
1451:  GOTO   00C
1452:  GOTO   058
1453:  GOTO   1D9
1454:  GOTO   35B
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #device *=16 
.................... #use delay(clock=20M) 
*
07DE:  MOVLW  20
07DF:  MOVWF  04
07E0:  BSF    03.7
07E1:  MOVF   00,W
07E2:  BTFSC  03.2
07E3:  GOTO   7F1
07E4:  MOVLW  06
07E5:  MOVWF  78
07E6:  CLRF   77
07E7:  DECFSZ 77,F
07E8:  GOTO   7E7
07E9:  DECFSZ 78,F
07EA:  GOTO   7E6
07EB:  MOVLW  7B
07EC:  MOVWF  77
07ED:  DECFSZ 77,F
07EE:  GOTO   7ED
07EF:  DECFSZ 00,F
07F0:  GOTO   7E4
07F1:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0048:  MOVLW  08
0049:  MOVWF  78
004A:  NOP
004B:  BCF    07.3
004C:  BCF    20.3
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  NOP
0051:  BCF    03.5
0052:  BSF    03.6
0053:  RLF    6F,F
0054:  BCF    03.6
0055:  BCF    07.4
0056:  BTFSS  03.0
0057:  GOTO   05E
0058:  BSF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
005C:  GOTO   062
005D:  BCF    03.5
005E:  BCF    20.4
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  NOP
0063:  BCF    03.5
0064:  BSF    20.3
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
0068:  BCF    03.5
0069:  BTFSS  07.3
006A:  GOTO   069
006B:  DECFSZ 78,F
006C:  GOTO   04A
006D:  NOP
006E:  BCF    07.3
006F:  BCF    20.3
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  NOP
0074:  BCF    03.5
0075:  BSF    20.4
0076:  MOVF   20,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  NOP
007A:  NOP
007B:  BCF    03.5
007C:  BSF    20.3
007D:  MOVF   20,W
007E:  BSF    03.5
007F:  MOVWF  07
0080:  BCF    03.5
0081:  BTFSS  07.3
0082:  GOTO   081
0083:  CLRF   78
0084:  NOP
0085:  BTFSC  07.4
0086:  BSF    78.0
0087:  BCF    07.3
0088:  BCF    20.3
0089:  MOVF   20,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  BCF    03.5
008D:  BCF    07.4
008E:  BCF    20.4
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  BCF    03.5
0093:  RETURN
*
00DB:  MOVLW  08
00DC:  BSF    03.5
00DD:  BSF    03.6
00DE:  MOVWF  10
00DF:  MOVF   77,W
00E0:  MOVWF  11
00E1:  BCF    03.5
00E2:  BCF    03.6
00E3:  BSF    20.4
00E4:  MOVF   20,W
00E5:  BSF    03.5
00E6:  MOVWF  07
00E7:  NOP
00E8:  BCF    03.5
00E9:  BSF    20.3
00EA:  MOVF   20,W
00EB:  BSF    03.5
00EC:  MOVWF  07
00ED:  BCF    03.5
00EE:  BTFSS  07.3
00EF:  GOTO   0EE
00F0:  BTFSC  07.4
00F1:  BSF    03.0
00F2:  BTFSS  07.4
00F3:  BCF    03.0
00F4:  RLF    78,F
00F5:  NOP
00F6:  BCF    20.3
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
00FA:  BCF    03.5
00FB:  BCF    07.3
00FC:  BSF    03.5
00FD:  BSF    03.6
00FE:  DECFSZ 10,F
00FF:  GOTO   0E1
0100:  BCF    03.5
0101:  BCF    03.6
0102:  BSF    20.4
0103:  MOVF   20,W
0104:  BSF    03.5
0105:  MOVWF  07
0106:  NOP
0107:  BCF    03.5
0108:  BCF    07.4
0109:  BSF    03.5
010A:  BSF    03.6
010B:  MOVF   11,W
010C:  BTFSC  03.2
010D:  GOTO   115
010E:  BCF    03.5
010F:  BCF    03.6
0110:  BCF    20.4
0111:  MOVF   20,W
0112:  BSF    03.5
0113:  MOVWF  07
0114:  BSF    03.6
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BSF    20.3
0119:  MOVF   20,W
011A:  BSF    03.5
011B:  MOVWF  07
011C:  BCF    03.5
011D:  BTFSS  07.3
011E:  GOTO   11D
011F:  NOP
0120:  BCF    07.3
0121:  BCF    20.3
0122:  MOVF   20,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  NOP
0126:  BCF    03.5
0127:  BCF    07.4
0128:  BCF    20.4
0129:  MOVF   20,W
012A:  BSF    03.5
012B:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
014C:  BSF    03.6
014D:  MOVF   6D,W
014E:  ANDLW  0F
014F:  BSF    03.5
0150:  MOVWF  10
0151:  BCF    03.5
0152:  MOVF   6D,W
0153:  ANDLW  F0
0154:  MOVWF  77
0155:  SWAPF  77,F
0156:  MOVLW  0F
0157:  ANDWF  77,F
0158:  MOVF   77,W
0159:  BSF    03.5
015A:  MOVWF  12
015B:  MOVF   12,W
015C:  MOVWF  13
015D:  MOVLW  0A
015E:  MOVWF  14
*
0183:  MOVF   78,W
0184:  ADDWF  10,W
0185:  MOVWF  78
0186:  BCF    03.5
0187:  BCF    03.6
0188:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
04B7:  BSF    03.6
04B8:  MOVF   64,W
04B9:  BSF    03.5
04BA:  MOVWF  2B
04BB:  MOVLW  0A
04BC:  MOVWF  2C
04BD:  BCF    03.5
04BE:  BCF    03.6
04BF:  CALL   02F
04C0:  SWAPF  78,W
04C1:  MOVWF  77
04C2:  MOVLW  F0
04C3:  ANDWF  77,F
04C4:  MOVF   77,W
04C5:  ANDLW  F0
04C6:  BSF    03.6
04C7:  MOVWF  65
04C8:  MOVF   64,W
04C9:  BSF    03.5
04CA:  MOVWF  2B
04CB:  MOVLW  0A
04CC:  MOVWF  2C
04CD:  BCF    03.5
04CE:  BCF    03.6
04CF:  CALL   02F
04D0:  MOVF   77,W
04D1:  ANDLW  0F
04D2:  BSF    03.6
04D3:  IORWF  65,W
04D4:  MOVWF  78
04D5:  BCF    03.6
04D6:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
0094:  BSF    03.6
0095:  CLRF   6E
....................     int value = 0; 
....................     I2C_start(); 
0096:  BCF    03.6
0097:  BSF    20.4
0098:  MOVF   20,W
0099:  BSF    03.5
009A:  MOVWF  07
009B:  NOP
009C:  BCF    03.5
009D:  BSF    20.3
009E:  MOVF   20,W
009F:  BSF    03.5
00A0:  MOVWF  07
00A1:  NOP
00A2:  BCF    03.5
00A3:  BCF    07.4
00A4:  BCF    20.4
00A5:  MOVF   20,W
00A6:  BSF    03.5
00A7:  MOVWF  07
00A8:  NOP
00A9:  BCF    03.5
00AA:  BCF    07.3
00AB:  BCF    20.3
00AC:  MOVF   20,W
00AD:  BSF    03.5
00AE:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
00AF:  MOVLW  D0
00B0:  BCF    03.5
00B1:  BSF    03.6
00B2:  MOVWF  6F
00B3:  BCF    03.6
00B4:  CALL   048
....................     I2C_write(address); 
00B5:  BSF    03.6
00B6:  MOVF   6D,W
00B7:  MOVWF  6F
00B8:  BCF    03.6
00B9:  CALL   048
....................     I2C_start(); 
00BA:  BSF    20.4
00BB:  MOVF   20,W
00BC:  BSF    03.5
00BD:  MOVWF  07
00BE:  NOP
00BF:  BCF    03.5
00C0:  BSF    20.3
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  NOP
00C5:  BCF    03.5
00C6:  BTFSS  07.3
00C7:  GOTO   0C6
00C8:  BCF    07.4
00C9:  BCF    20.4
00CA:  MOVF   20,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  NOP
00CE:  BCF    03.5
00CF:  BCF    07.3
00D0:  BCF    20.3
00D1:  MOVF   20,W
00D2:  BSF    03.5
00D3:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
00D4:  MOVLW  D1
00D5:  BCF    03.5
00D6:  BSF    03.6
00D7:  MOVWF  6F
00D8:  BCF    03.6
00D9:  CALL   048
....................     value = I2C_read(0); 
00DA:  CLRF   77
*
012C:  MOVF   78,W
012D:  BCF    03.5
012E:  BSF    03.6
012F:  MOVWF  6E
....................     I2C_stop(); 
0130:  BCF    03.6
0131:  BCF    20.4
0132:  MOVF   20,W
0133:  BSF    03.5
0134:  MOVWF  07
0135:  NOP
0136:  BCF    03.5
0137:  BSF    20.3
0138:  MOVF   20,W
0139:  BSF    03.5
013A:  MOVWF  07
013B:  BCF    03.5
013C:  BTFSS  07.3
013D:  GOTO   13C
013E:  NOP
013F:  GOTO   140
0140:  NOP
0141:  BSF    20.4
0142:  MOVF   20,W
0143:  BSF    03.5
0144:  MOVWF  07
0145:  NOP
....................     return value; 
0146:  BCF    03.5
0147:  BSF    03.6
0148:  MOVF   6E,W
0149:  MOVWF  78
014A:  BCF    03.6
014B:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
04D7:  BSF    20.4
04D8:  MOVF   20,W
04D9:  BSF    03.5
04DA:  MOVWF  07
04DB:  NOP
04DC:  BCF    03.5
04DD:  BSF    20.3
04DE:  MOVF   20,W
04DF:  BSF    03.5
04E0:  MOVWF  07
04E1:  NOP
04E2:  BCF    03.5
04E3:  BCF    07.4
04E4:  BCF    20.4
04E5:  MOVF   20,W
04E6:  BSF    03.5
04E7:  MOVWF  07
04E8:  NOP
04E9:  BCF    03.5
04EA:  BCF    07.3
04EB:  BCF    20.3
04EC:  MOVF   20,W
04ED:  BSF    03.5
04EE:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
04EF:  MOVLW  D0
04F0:  BCF    03.5
04F1:  BSF    03.6
04F2:  MOVWF  6F
04F3:  BCF    03.6
04F4:  CALL   048
....................     I2C_write(address); 
04F5:  BSF    03.6
04F6:  MOVF   65,W
04F7:  MOVWF  6F
04F8:  BCF    03.6
04F9:  CALL   048
....................     I2C_write(value); 
04FA:  BSF    03.6
04FB:  MOVF   66,W
04FC:  MOVWF  6F
04FD:  BCF    03.6
04FE:  CALL   048
....................     I2C_stop(); 
04FF:  BCF    20.4
0500:  MOVF   20,W
0501:  BSF    03.5
0502:  MOVWF  07
0503:  NOP
0504:  BCF    03.5
0505:  BSF    20.3
0506:  MOVF   20,W
0507:  BSF    03.5
0508:  MOVWF  07
0509:  BCF    03.5
050A:  BTFSS  07.3
050B:  GOTO   50A
050C:  NOP
050D:  GOTO   50E
050E:  NOP
050F:  BSF    20.4
0510:  MOVF   20,W
0511:  BSF    03.5
0512:  MOVWF  07
0513:  NOP
0514:  BCF    03.5
0515:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
02ED:  CLRF   6D
02EE:  BCF    03.6
02EF:  CALL   094
02F0:  MOVF   78,W
02F1:  BSF    03.6
02F2:  MOVWF  69
....................     sec = bcd_to_decimal(sec); 
02F3:  MOVF   69,W
02F4:  MOVWF  6D
02F5:  BCF    03.6
02F6:  CALL   14C
02F7:  MOVF   78,W
02F8:  BSF    03.6
02F9:  MOVWF  69
....................     min = DS3231_Read(minuteREG); 
02FA:  MOVLW  01
02FB:  MOVWF  6D
02FC:  BCF    03.6
02FD:  CALL   094
02FE:  MOVF   78,W
02FF:  BSF    03.6
0300:  MOVWF  68
....................     min = bcd_to_decimal(min); 
0301:  MOVF   68,W
0302:  MOVWF  6D
0303:  BCF    03.6
0304:  CALL   14C
0305:  MOVF   78,W
0306:  BSF    03.6
0307:  MOVWF  68
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0308:  MOVLW  02
0309:  MOVWF  6D
030A:  BCF    03.6
030B:  CALL   094
030C:  MOVF   78,W
030D:  ANDLW  3F
030E:  BSF    03.6
030F:  MOVWF  67
....................     hora = bcd_to_decimal(hora); 
0310:  MOVF   67,W
0311:  MOVWF  6D
0312:  BCF    03.6
0313:  CALL   14C
0314:  MOVF   78,W
0315:  BSF    03.6
0316:  MOVWF  67
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
0516:  BSF    03.6
0517:  MOVF   63,W
0518:  MOVWF  64
0519:  BCF    03.6
051A:  CALL   4B7
051B:  MOVF   78,W
051C:  BSF    03.6
051D:  MOVWF  64
051E:  CLRF   65
051F:  MOVF   64,W
0520:  MOVWF  66
0521:  BCF    03.6
0522:  CALL   4D7
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0523:  BSF    03.6
0524:  MOVF   62,W
0525:  MOVWF  64
0526:  BCF    03.6
0527:  CALL   4B7
0528:  MOVF   78,W
0529:  BSF    03.6
052A:  MOVWF  64
052B:  MOVLW  01
052C:  MOVWF  65
052D:  MOVF   64,W
052E:  MOVWF  66
052F:  BCF    03.6
0530:  CALL   4D7
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0531:  BSF    03.6
0532:  MOVF   61,W
0533:  MOVWF  64
0534:  BCF    03.6
0535:  CALL   4B7
0536:  MOVF   78,W
0537:  ANDLW  3F
0538:  BSF    03.6
0539:  MOVWF  64
053A:  MOVLW  02
053B:  MOVWF  65
053C:  MOVF   64,W
053D:  MOVWF  66
053E:  BCF    03.6
053F:  CALL   4D7
0540:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05AB:  CLRF   4E
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05AC:  CLRF   4E
05AD:  MOVF   4D,W
05AE:  SUBWF  4E,W
05AF:  BTFSC  03.0
05B0:  GOTO   5BA
....................         array[i] = 0; 
05B1:  MOVF   4E,W
05B2:  ADDWF  4B,W
05B3:  MOVWF  04
05B4:  BCF    03.7
05B5:  BTFSC  4C.0
05B6:  BSF    03.7
05B7:  CLRF   00
05B8:  INCF   4E,F
05B9:  GOTO   5AD
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05A4:  BSF    03.6
05A5:  MOVF   47,W
05A6:  MOVWF  4C
05A7:  MOVF   46,W
05A8:  MOVWF  4B
05A9:  MOVF   48,W
05AA:  MOVWF  4D
....................  
....................     int index = 0; 
*
05BA:  CLRF   49
....................     while (number > 0) { 
05BB:  MOVF   44,F
05BC:  BTFSS  03.2
05BD:  GOTO   5C1
05BE:  MOVF   45,F
05BF:  BTFSC  03.2
05C0:  GOTO   5E5
....................         int digit = number % 10; 
05C1:  MOVF   45,W
05C2:  MOVWF  4C
05C3:  MOVF   44,W
05C4:  MOVWF  4B
05C5:  CLRF   4E
05C6:  MOVLW  0A
05C7:  MOVWF  4D
05C8:  BCF    03.6
05C9:  CALL   57D
05CA:  MOVF   77,W
05CB:  BSF    03.6
05CC:  MOVWF  4A
....................         digits[index] = digit; 
05CD:  MOVF   49,W
05CE:  ADDWF  46,W
05CF:  MOVWF  04
05D0:  BCF    03.7
05D1:  BTFSC  47.0
05D2:  BSF    03.7
05D3:  MOVF   4A,W
05D4:  MOVWF  00
....................         index++; 
05D5:  INCF   49,F
....................         number /= 10; 
05D6:  MOVF   45,W
05D7:  MOVWF  4C
05D8:  MOVF   44,W
05D9:  MOVWF  4B
05DA:  CLRF   4E
05DB:  MOVLW  0A
05DC:  MOVWF  4D
05DD:  BCF    03.6
05DE:  CALL   57D
05DF:  MOVF   79,W
05E0:  BSF    03.6
05E1:  MOVWF  45
05E2:  MOVF   78,W
05E3:  MOVWF  44
05E4:  GOTO   5BB
....................     } 
05E5:  BCF    03.6
05E6:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     Format format; 
....................     char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
0322:  MOVF   10,W
0323:  MOVWF  13
....................     time.minute = minute; 
0324:  MOVF   11,W
0325:  MOVWF  14
....................     time.second = second; 
0326:  MOVF   12,W
0327:  MOVWF  15
....................     return time; 
0328:  MOVLW  93
0329:  MOVWF  78
032A:  MOVLW  01
032B:  MOVWF  79
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
02EA:  CLRF   67
02EB:  CLRF   68
02EC:  CLRF   69
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0317:  MOVF   67,W
0318:  BSF    03.5
0319:  MOVWF  10
031A:  BCF    03.5
031B:  MOVF   68,W
031C:  BSF    03.5
031D:  MOVWF  11
031E:  BCF    03.5
031F:  MOVF   69,W
0320:  BSF    03.5
0321:  MOVWF  12
*
032C:  MOVF   78,W
032D:  MOVWF  04
032E:  BCF    03.7
032F:  BTFSC  79.0
0330:  BSF    03.7
0331:  MOVF   00,W
0332:  BCF    03.5
0333:  MOVWF  62
0334:  INCF   04,F
0335:  MOVF   00,W
0336:  MOVWF  63
0337:  INCF   04,F
0338:  MOVF   00,W
0339:  MOVWF  64
033A:  INCF   04,F
033B:  MOVF   00,W
033C:  MOVWF  65
033D:  INCF   04,F
033E:  MOVF   00,W
033F:  MOVWF  66
....................  
....................     return currentTime; 
0340:  MOVLW  62
0341:  MOVWF  78
0342:  MOVLW  01
0343:  MOVWF  79
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
05E7:  BSF    03.6
05E8:  MOVF   39,W
05E9:  MOVWF  04
05EA:  BCF    03.7
05EB:  BTFSC  3A.0
05EC:  BSF    03.7
05ED:  MOVF   00,W
05EE:  MOVWF  42
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
05EF:  MOVF   3B,F
05F0:  BTFSC  03.2
05F1:  GOTO   619
....................         if (timePtr->format == FORMAT_12) { 
05F2:  MOVLW  03
05F3:  ADDWF  39,W
05F4:  MOVWF  04
05F5:  BCF    03.7
05F6:  BTFSC  3A.0
05F7:  BSF    03.7
05F8:  MOVF   00,W
05F9:  ANDLW  01
05FA:  SUBLW  01
05FB:  BTFSS  03.2
05FC:  GOTO   619
....................             if (timePtr->hour == 0) { 
05FD:  MOVF   39,W
05FE:  MOVWF  04
05FF:  BCF    03.7
0600:  BTFSC  3A.0
0601:  BSF    03.7
0602:  MOVF   00,F
0603:  BTFSS  03.2
0604:  GOTO   608
....................                 hour = 12; 
0605:  MOVLW  0C
0606:  MOVWF  42
....................             } else if (timePtr->hour > 12) { 
0607:  GOTO   619
0608:  MOVF   39,W
0609:  MOVWF  04
060A:  BCF    03.7
060B:  BTFSC  3A.0
060C:  BSF    03.7
060D:  MOVF   00,W
060E:  SUBLW  0C
060F:  BTFSC  03.0
0610:  GOTO   619
....................                 hour = timePtr->hour - 12; 
0611:  MOVF   39,W
0612:  MOVWF  04
0613:  BCF    03.7
0614:  BTFSC  3A.0
0615:  BSF    03.7
0616:  MOVLW  0C
0617:  SUBWF  00,W
0618:  MOVWF  42
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             getArraySize(newTimeInDigits.hour) 
....................             ); 
0619:  CLRF   45
061A:  MOVF   42,W
061B:  MOVWF  44
061C:  MOVLW  01
061D:  MOVWF  47
061E:  MOVLW  3C
061F:  MOVWF  46
0620:  MOVLW  02
0621:  MOVWF  48
0622:  BCF    03.6
0623:  CALL   5A4
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             getArraySize(newTimeInDigits.minute) 
....................             ); 
0624:  MOVLW  01
0625:  BSF    03.6
0626:  ADDWF  39,W
0627:  MOVWF  04
0628:  BCF    03.7
0629:  BTFSC  3A.0
062A:  BSF    03.7
062B:  MOVF   00,W
062C:  MOVWF  43
062D:  CLRF   45
062E:  MOVF   43,W
062F:  MOVWF  44
0630:  MOVLW  01
0631:  MOVWF  47
0632:  MOVLW  3E
0633:  MOVWF  46
0634:  MOVLW  02
0635:  MOVWF  48
0636:  BCF    03.6
0637:  CALL   5A4
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             getArraySize(newTimeInDigits.second) 
....................             ); 
0638:  MOVLW  02
0639:  BSF    03.6
063A:  ADDWF  39,W
063B:  MOVWF  04
063C:  BCF    03.7
063D:  BTFSC  3A.0
063E:  BSF    03.7
063F:  MOVF   00,W
0640:  MOVWF  43
0641:  CLRF   45
0642:  MOVF   43,W
0643:  MOVWF  44
0644:  MOVLW  01
0645:  MOVWF  47
0646:  MOVLW  40
0647:  MOVWF  46
0648:  MOVLW  02
0649:  MOVWF  48
064A:  BCF    03.6
064B:  CALL   5A4
....................  
....................     return newTimeInDigits; 
064C:  MOVLW  3C
064D:  MOVWF  78
064E:  MOVLW  01
064F:  MOVWF  79
0650:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
0B7F:  MOVF   27,W
0B80:  MOVWF  04
0B81:  BCF    03.7
0B82:  BTFSC  28.0
0B83:  BSF    03.7
0B84:  MOVF   00,F
0B85:  BTFSS  03.2
0B86:  GOTO   399
0B87:  MOVLW  01
0B88:  ADDWF  27,W
0B89:  MOVWF  04
0B8A:  BCF    03.7
0B8B:  BTFSC  28.0
0B8C:  BSF    03.7
0B8D:  MOVF   00,F
0B8E:  BTFSS  03.2
0B8F:  GOTO   399
0B90:  MOVLW  02
0B91:  ADDWF  27,W
0B92:  MOVWF  04
0B93:  BCF    03.7
0B94:  BTFSC  28.0
0B95:  BSF    03.7
0B96:  MOVF   00,F
0B97:  BTFSC  03.2
0B98:  GOTO   39B
0B99:  MOVLW  00
0B9A:  GOTO   39C
0B9B:  MOVLW  01
0B9C:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
.................... //////// 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
055D:  MOVF   5C,W
055E:  MOVWF  04
055F:  BCF    03.7
0560:  BTFSC  5D.0
0561:  BSF    03.7
0562:  MOVF   00,W
0563:  MOVWF  5E
0564:  MOVLW  01
0565:  ADDWF  5C,W
0566:  MOVWF  04
0567:  BCF    03.7
0568:  BTFSC  5D.0
0569:  BSF    03.7
056A:  MOVF   00,W
056B:  MOVWF  5F
056C:  MOVLW  02
056D:  ADDWF  5C,W
056E:  MOVWF  04
056F:  BCF    03.7
0570:  BTFSC  5D.0
0571:  BSF    03.7
0572:  MOVF   00,W
0573:  MOVWF  60
0574:  MOVF   5E,W
0575:  MOVWF  61
0576:  MOVF   5F,W
0577:  MOVWF  62
0578:  MOVF   60,W
0579:  MOVWF  63
057A:  BCF    03.6
057B:  CALL   516
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01B7:  BSF    03.5
01B8:  BSF    03.6
01B9:  MOVF   12,W
01BA:  MOVWF  04
01BB:  BCF    03.7
01BC:  BTFSC  13.0
01BD:  BSF    03.7
01BE:  MOVF   00,W
01BF:  CLRF   23
01C0:  CLRF   22
01C1:  CLRF   21
01C2:  MOVWF  20
01C3:  CLRF   25
01C4:  MOVF   04,W
01C5:  MOVWF  24
01C6:  BCF    25.0
01C7:  BTFSC  03.7
01C8:  BSF    25.0
01C9:  MOVF   23,W
01CA:  MOVWF  29
01CB:  MOVF   22,W
01CC:  MOVWF  28
01CD:  MOVF   21,W
01CE:  MOVWF  27
01CF:  MOVF   20,W
01D0:  MOVWF  26
01D1:  CLRF   2D
01D2:  CLRF   2C
01D3:  MOVLW  0E
01D4:  MOVWF  2B
01D5:  MOVLW  10
01D6:  MOVWF  2A
01D7:  BCF    03.5
01D8:  BCF    03.6
01D9:  CALL   189
01DA:  BSF    03.5
01DB:  BSF    03.6
01DC:  MOVF   24,W
01DD:  MOVWF  04
01DE:  BCF    03.7
01DF:  BTFSC  25.0
01E0:  BSF    03.7
01E1:  MOVF   7A,W
01E2:  MOVWF  17
01E3:  MOVF   79,W
01E4:  MOVWF  16
01E5:  MOVF   78,W
01E6:  MOVWF  15
01E7:  MOVF   77,W
01E8:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01E9:  MOVLW  01
01EA:  ADDWF  12,W
01EB:  MOVWF  04
01EC:  BCF    03.7
01ED:  BTFSC  13.0
01EE:  BSF    03.7
01EF:  MOVF   00,W
01F0:  CLRF   23
01F1:  CLRF   22
01F2:  CLRF   21
01F3:  MOVWF  20
01F4:  CLRF   25
01F5:  MOVF   04,W
01F6:  MOVWF  24
01F7:  BCF    25.0
01F8:  BTFSC  03.7
01F9:  BSF    25.0
01FA:  MOVF   23,W
01FB:  MOVWF  29
01FC:  MOVF   22,W
01FD:  MOVWF  28
01FE:  MOVF   21,W
01FF:  MOVWF  27
0200:  MOVF   20,W
0201:  MOVWF  26
0202:  CLRF   2D
0203:  CLRF   2C
0204:  CLRF   2B
0205:  MOVLW  3C
0206:  MOVWF  2A
0207:  BCF    03.5
0208:  BCF    03.6
0209:  CALL   189
020A:  BSF    03.5
020B:  BSF    03.6
020C:  MOVF   24,W
020D:  MOVWF  04
020E:  BCF    03.7
020F:  BTFSC  25.0
0210:  BSF    03.7
0211:  MOVF   7A,W
0212:  MOVWF  1B
0213:  MOVF   79,W
0214:  MOVWF  1A
0215:  MOVF   78,W
0216:  MOVWF  19
0217:  MOVF   77,W
0218:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0219:  MOVF   18,W
021A:  ADDWF  14,W
021B:  MOVWF  20
021C:  MOVF   15,W
021D:  MOVWF  21
021E:  MOVF   19,W
021F:  BTFSC  03.0
0220:  INCFSZ 19,W
0221:  ADDWF  21,F
0222:  MOVF   16,W
0223:  MOVWF  22
0224:  MOVF   1A,W
0225:  BTFSC  03.0
0226:  INCFSZ 1A,W
0227:  ADDWF  22,F
0228:  MOVF   17,W
0229:  MOVWF  23
022A:  MOVF   1B,W
022B:  BTFSC  03.0
022C:  INCFSZ 1B,W
022D:  ADDWF  23,F
022E:  MOVLW  02
022F:  ADDWF  12,W
0230:  MOVWF  04
0231:  BCF    03.7
0232:  BTFSC  13.0
0233:  BSF    03.7
0234:  MOVF   00,W
0235:  ADDWF  20,W
0236:  MOVWF  1C
0237:  MOVF   21,W
0238:  MOVWF  1D
0239:  MOVLW  00
023A:  BTFSC  03.0
023B:  MOVLW  01
023C:  ADDWF  1D,F
023D:  MOVF   22,W
023E:  MOVWF  1E
023F:  MOVLW  00
0240:  BTFSC  03.0
0241:  MOVLW  01
0242:  ADDWF  1E,F
0243:  MOVF   23,W
0244:  MOVWF  1F
0245:  MOVLW  00
0246:  BTFSC  03.0
0247:  MOVLW  01
0248:  ADDWF  1F,F
....................  
....................     return seconds; 
0249:  MOVF   1C,W
024A:  MOVWF  77
024B:  MOVF   1D,W
024C:  MOVWF  78
024D:  MOVF   1E,W
024E:  MOVWF  79
024F:  MOVF   1F,W
0250:  MOVWF  7A
0251:  BCF    03.5
0252:  BCF    03.6
0253:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07D7:  BSF    03.6
07D8:  CLRF   61
07D9:  CLRF   62
07DA:  CLRF   63
07DB:  BCF    03.6
07DC:  CALL   516
07DD:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
068E:  BSF    03.5
068F:  BCF    03.6
0690:  BCF    05.1
0691:  BCF    03.5
0692:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
0693:  BSF    03.5
0694:  BCF    05.1
0695:  BCF    03.5
0696:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0651:  MOVLW  01
0652:  BSF    03.6
0653:  MOVWF  38
0654:  CLRF   39
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
0655:  BSF    03.5
0656:  BCF    03.6
0657:  BCF    05.3
0658:  BCF    03.5
0659:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
065A:  BSF    03.5
065B:  BCF    05.1
065C:  BCF    03.5
065D:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
065E:  BSF    03.6
065F:  CLRF   39
0660:  MOVF   37,W
0661:  SUBWF  39,W
0662:  BTFSC  03.0
0663:  GOTO   68E
....................         int character = charactersArray[j]; 
0664:  MOVF   39,W
0665:  ADDWF  35,W
0666:  MOVWF  04
0667:  BCF    03.7
0668:  BTFSC  36.0
0669:  BSF    03.7
066A:  MOVF   00,W
066B:  MOVWF  3A
....................  
....................         for (i = 1; i <= 8; i++) { 
066C:  MOVLW  01
066D:  MOVWF  38
066E:  MOVF   38,W
066F:  SUBLW  08
0670:  BTFSS  03.0
0671:  GOTO   68C
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0672:  BTFSC  3A.0
0673:  GOTO   678
0674:  BCF    03.6
0675:  BCF    05.0
0676:  GOTO   67A
0677:  BSF    03.6
0678:  BCF    03.6
0679:  BSF    05.0
067A:  BSF    03.5
067B:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
067C:  BCF    03.0
067D:  BCF    03.5
067E:  BSF    03.6
067F:  RRF    3A,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
0680:  BSF    03.5
0681:  BCF    03.6
0682:  BCF    05.3
0683:  BCF    03.5
0684:  BSF    05.3
....................             output_low(PIN_CLOCK); 
0685:  BSF    03.5
0686:  BCF    05.3
0687:  BCF    03.5
0688:  BCF    05.3
0689:  BSF    03.6
068A:  INCF   38,F
068B:  GOTO   66E
....................         } 
068C:  INCF   39,F
068D:  GOTO   660
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
0697:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06D7:  CLRF   38
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06D8:  CLRF   38
06D9:  MOVF   37,W
06DA:  SUBWF  38,W
06DB:  BTFSC  03.0
06DC:  GOTO   6FC
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06DD:  MOVF   38,W
06DE:  ADDWF  35,W
06DF:  MOVWF  78
06E0:  MOVF   36,W
06E1:  MOVWF  7A
06E2:  BTFSC  03.0
06E3:  INCF   7A,F
06E4:  MOVF   78,W
06E5:  MOVWF  39
06E6:  MOVF   7A,W
06E7:  MOVWF  3A
06E8:  MOVF   38,W
06E9:  ADDWF  35,W
06EA:  MOVWF  04
06EB:  BCF    03.7
06EC:  BTFSC  36.0
06ED:  BSF    03.7
06EE:  MOVF   00,W
06EF:  BCF    03.6
06F0:  CALL   004
06F1:  MOVWF  78
06F2:  BSF    03.6
06F3:  MOVF   39,W
06F4:  MOVWF  04
06F5:  BCF    03.7
06F6:  BTFSC  3A.0
06F7:  BSF    03.7
06F8:  MOVF   78,W
06F9:  MOVWF  00
06FA:  INCF   38,F
06FB:  GOTO   6D9
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06A2:  CLRF   38
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06A3:  CLRF   38
06A4:  MOVF   37,W
06A5:  SUBWF  38,W
06A6:  BTFSC  03.0
06A7:  GOTO   6D0
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06A8:  MOVF   38,W
06A9:  ADDWF  35,W
06AA:  MOVWF  78
06AB:  MOVF   36,W
06AC:  MOVWF  7A
06AD:  BTFSC  03.0
06AE:  INCF   7A,F
06AF:  MOVF   78,W
06B0:  MOVWF  39
06B1:  MOVF   7A,W
06B2:  MOVWF  3A
06B3:  MOVF   38,W
06B4:  ADDWF  35,W
06B5:  MOVWF  04
06B6:  BCF    03.7
06B7:  BTFSC  36.0
06B8:  BSF    03.7
06B9:  MOVF   00,W
06BA:  BCF    03.6
06BB:  CALL   004
06BC:  MOVWF  78
06BD:  BSF    03.6
06BE:  MOVF   39,W
06BF:  MOVWF  04
06C0:  BCF    03.7
06C1:  BTFSC  3A.0
06C2:  BSF    03.7
06C3:  MOVF   78,W
06C4:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06C5:  MOVF   38,W
06C6:  ADDWF  35,W
06C7:  MOVWF  04
06C8:  BCF    03.7
06C9:  BTFSC  36.0
06CA:  BSF    03.7
06CB:  MOVF   00,W
06CC:  IORLW  08
06CD:  MOVWF  00
06CE:  INCF   38,F
06CF:  GOTO   6A4
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
0698:  BSF    03.6
0699:  MOVF   34,F
069A:  BTFSC  03.2
069B:  GOTO   6D1
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
069C:  MOVF   32,W
069D:  MOVWF  36
069E:  MOVF   31,W
069F:  MOVWF  35
06A0:  MOVF   33,W
06A1:  MOVWF  37
....................     } else { 
*
06D0:  GOTO   6FC
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06D1:  MOVF   32,W
06D2:  MOVWF  36
06D3:  MOVF   31,W
06D4:  MOVWF  35
06D5:  MOVF   33,W
06D6:  MOVWF  37
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
06FC:  MOVF   32,W
06FD:  MOVWF  36
06FE:  MOVF   31,W
06FF:  MOVWF  35
0700:  MOVF   33,W
0701:  MOVWF  37
0702:  BCF    03.6
0703:  CALL   651
0704:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
0BAC:  BSF    03.6
0BAD:  CLRF   1F
0BAE:  CLRF   20
0BAF:  CLRF   21
0BB0:  CLRF   22
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BB1:  MOVLW  01
0BB2:  MOVWF  1F
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
0BB3:  MOVLW  09
0BB4:  MOVWF  20
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BB5:  MOVLW  01
0BB6:  MOVWF  21
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BB7:  MOVWF  22
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
0BB8:  MOVWF  36
0BB9:  MOVLW  1F
0BBA:  MOVWF  35
0BBB:  MOVLW  04
0BBC:  MOVWF  37
0BBD:  BCF    0A.3
0BBE:  BCF    03.6
0BBF:  CALL   651
0BC0:  BSF    0A.3
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time limitTime; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
.................... } Timer; 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.limitTime.hour = read_eeprom(alarmHourAddress) % (maximumHours + 1); 
*
08DD:  MOVF   64,W
08DE:  MOVWF  0D
08DF:  BSF    03.5
08E0:  BCF    0C.7
08E1:  BSF    0C.0
08E2:  BCF    03.5
08E3:  MOVF   0C,W
08E4:  MOVWF  6E
08E5:  MOVLW  01
08E6:  ADDWF  62,W
08E7:  MOVWF  6F
08E8:  MOVF   6E,W
08E9:  BSF    03.5
08EA:  MOVWF  2B
08EB:  BCF    03.5
08EC:  MOVF   6F,W
08ED:  BSF    03.5
08EE:  MOVWF  2C
08EF:  BCF    0A.3
08F0:  BCF    03.5
08F1:  BCF    03.6
08F2:  CALL   02F
08F3:  BSF    0A.3
08F4:  MOVF   77,W
08F5:  BSF    03.5
08F6:  BSF    03.6
08F7:  MOVWF  1A
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
08F8:  BCF    03.5
08F9:  MOVF   66,W
08FA:  MOVWF  0D
08FB:  BSF    03.5
08FC:  BCF    0C.7
08FD:  BSF    0C.0
08FE:  BCF    03.5
08FF:  MOVF   0C,W
0900:  MOVWF  6E
0901:  MOVLW  01
0902:  ADDWF  63,W
0903:  MOVWF  6F
0904:  MOVF   6E,W
0905:  BSF    03.5
0906:  MOVWF  2B
0907:  BCF    03.5
0908:  MOVF   6F,W
0909:  BSF    03.5
090A:  MOVWF  2C
090B:  BCF    0A.3
090C:  BCF    03.5
090D:  BCF    03.6
090E:  CALL   02F
090F:  BSF    0A.3
0910:  MOVF   77,W
0911:  BSF    03.5
0912:  BSF    03.6
0913:  MOVWF  1B
....................     newTimer.limitTime.second = 0; 
0914:  CLRF   1C
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
0915:  BCF    03.5
0916:  MOVF   62,W
0917:  BSF    03.5
0918:  MOVWF  1F
....................     newTimer.minutesUpperBound = maximumMinutes; 
0919:  BCF    03.5
091A:  MOVF   63,W
091B:  BSF    03.5
091C:  MOVWF  20
....................     newTimer.secondsUpperBound = 59; 
091D:  MOVLW  3B
091E:  MOVWF  21
....................  
....................     newTimer.addressAlarmHours = alarmHourAddress; 
091F:  BCF    03.5
0920:  MOVF   64,W
0921:  BSF    03.5
0922:  MOVWF  25
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
0923:  BCF    03.5
0924:  MOVF   66,W
0925:  BSF    03.5
0926:  MOVWF  24
....................     newTimer.addressRtcHours = rtcHour; 
0927:  BCF    03.5
0928:  MOVF   68,W
0929:  BSF    03.5
092A:  MOVWF  26
....................     newTimer.addressRtcMinutes = rtcMinutes; 
092B:  BCF    03.5
092C:  MOVF   6A,W
092D:  BSF    03.5
092E:  MOVWF  27
....................     newTimer.addressRtcSeconds = rtcSeconds; 
092F:  BCF    03.5
0930:  MOVF   6C,W
0931:  BSF    03.5
0932:  MOVWF  28
....................  
....................     return newTimer; 
0933:  MOVLW  90
0934:  MOVWF  78
0935:  MOVLW  01
0936:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.hoursUpperBound = 0; 
*
0973:  BSF    03.5
0974:  CLRF   1F
....................     newTimer.minutesUpperBound = maximumMinutes; 
0975:  BCF    03.5
0976:  MOVF   62,W
0977:  BSF    03.5
0978:  MOVWF  20
....................     newTimer.secondsUpperBound = 59; 
0979:  MOVLW  3B
097A:  MOVWF  21
....................  
....................     newTimer.limitTime.hour = 0; 
097B:  CLRF   1A
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
097C:  BCF    03.5
097D:  MOVF   63,W
097E:  MOVWF  0D
097F:  BSF    03.5
0980:  BCF    0C.7
0981:  BSF    0C.0
0982:  BCF    03.5
0983:  MOVF   0C,W
0984:  MOVWF  6D
0985:  MOVLW  01
0986:  ADDWF  62,W
0987:  MOVWF  6E
0988:  MOVF   6D,W
0989:  BSF    03.5
098A:  MOVWF  2B
098B:  BCF    03.5
098C:  MOVF   6E,W
098D:  BSF    03.5
098E:  MOVWF  2C
098F:  BCF    0A.3
0990:  BCF    03.5
0991:  BCF    03.6
0992:  CALL   02F
0993:  BSF    0A.3
0994:  MOVF   77,W
0995:  BSF    03.5
0996:  BSF    03.6
0997:  MOVWF  1B
....................     newTimer.limitTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
0998:  BCF    03.5
0999:  MOVF   65,W
099A:  MOVWF  0D
099B:  BSF    03.5
099C:  BCF    0C.7
099D:  BSF    0C.0
099E:  BCF    03.5
099F:  MOVF   0C,W
09A0:  MOVWF  6D
09A1:  MOVLW  01
09A2:  BSF    03.5
09A3:  ADDWF  21,W
09A4:  BCF    03.5
09A5:  MOVWF  6E
09A6:  MOVF   6D,W
09A7:  BSF    03.5
09A8:  MOVWF  2B
09A9:  BCF    03.5
09AA:  MOVF   6E,W
09AB:  BSF    03.5
09AC:  MOVWF  2C
09AD:  BCF    0A.3
09AE:  BCF    03.5
09AF:  BCF    03.6
09B0:  CALL   02F
09B1:  BSF    0A.3
09B2:  MOVF   77,W
09B3:  BSF    03.5
09B4:  BSF    03.6
09B5:  MOVWF  1C
....................  
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
09B6:  BCF    03.5
09B7:  MOVF   63,W
09B8:  BSF    03.5
09B9:  MOVWF  24
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
09BA:  BCF    03.5
09BB:  MOVF   65,W
09BC:  BSF    03.5
09BD:  MOVWF  23
....................     newTimer.addressRtcHours = rtcHour; 
09BE:  BCF    03.5
09BF:  MOVF   67,W
09C0:  BSF    03.5
09C1:  MOVWF  26
....................     newTimer.addressRtcMinutes = rtcMinutes; 
09C2:  BCF    03.5
09C3:  MOVF   69,W
09C4:  BSF    03.5
09C5:  MOVWF  27
....................     newTimer.addressRtcSeconds = rtcSeconds; 
09C6:  BCF    03.5
09C7:  MOVF   6B,W
09C8:  BSF    03.5
09C9:  MOVWF  28
....................  
....................     return newTimer; 
09CA:  MOVLW  90
09CB:  MOVWF  78
09CC:  MOVLW  01
09CD:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_updateRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
054E:  MOVLW  05
054F:  ADDWF  58,W
0550:  MOVWF  78
0551:  MOVF   59,W
0552:  MOVWF  7A
0553:  BTFSC  03.0
0554:  INCF   7A,F
0555:  MOVF   78,W
0556:  MOVWF  5A
0557:  MOVF   7A,W
0558:  MOVWF  5B
0559:  MOVF   5B,W
055A:  MOVWF  5D
055B:  MOVF   5A,W
055C:  MOVWF  5C
.................... } 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
0366:  MOVLW  05
0367:  ADDWF  5A,W
0368:  MOVWF  78
0369:  MOVF   5B,W
036A:  MOVWF  7A
036B:  BTFSC  03.0
036C:  INCF   7A,F
036D:  MOVF   78,W
036E:  BSF    03.5
036F:  MOVWF  10
0370:  MOVF   7A,W
0371:  MOVWF  11
0372:  MOVWF  13
0373:  MOVF   10,W
0374:  MOVWF  12
0375:  BCF    03.5
0376:  BCF    03.6
0377:  CALL   1B7
0378:  MOVF   7A,W
0379:  BSF    03.6
037A:  MOVWF  5F
037B:  MOVF   79,W
037C:  MOVWF  5E
037D:  MOVF   78,W
037E:  MOVWF  5D
037F:  MOVF   77,W
0380:  MOVWF  5C
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->limitTime); 
0381:  MOVLW  0A
0382:  ADDWF  5A,W
0383:  MOVWF  78
0384:  MOVF   5B,W
0385:  MOVWF  7A
0386:  BTFSC  03.0
0387:  INCF   7A,F
0388:  MOVF   78,W
0389:  BSF    03.5
038A:  MOVWF  10
038B:  MOVF   7A,W
038C:  MOVWF  11
038D:  MOVWF  13
038E:  MOVF   10,W
038F:  MOVWF  12
0390:  BCF    03.5
0391:  BCF    03.6
0392:  CALL   1B7
0393:  MOVF   7A,W
0394:  BSF    03.6
0395:  MOVWF  63
0396:  MOVF   79,W
0397:  MOVWF  62
0398:  MOVF   78,W
0399:  MOVWF  61
039A:  MOVF   77,W
039B:  MOVWF  60
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
039C:  MOVF   5C,W
039D:  SUBWF  60,W
039E:  MOVWF  64
039F:  MOVF   61,W
03A0:  MOVWF  65
03A1:  MOVF   5D,W
03A2:  BTFSS  03.0
03A3:  INCFSZ 5D,W
03A4:  SUBWF  65,F
03A5:  MOVF   62,W
03A6:  MOVWF  66
03A7:  MOVF   5E,W
03A8:  BTFSS  03.0
03A9:  INCFSZ 5E,W
03AA:  SUBWF  66,F
03AB:  MOVF   63,W
03AC:  MOVWF  67
03AD:  MOVF   5F,W
03AE:  BTFSS  03.0
03AF:  INCFSZ 5F,W
03B0:  SUBWF  67,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
03B1:  BTFSS  67.7
03B2:  GOTO   3B8
03B3:  CLRF   77
03B4:  CLRF   78
03B5:  CLRF   79
03B6:  CLRF   7A
03B7:  GOTO   3C0
03B8:  MOVF   64,W
03B9:  MOVWF  77
03BA:  MOVF   65,W
03BB:  MOVWF  78
03BC:  MOVF   66,W
03BD:  MOVWF  79
03BE:  MOVF   67,W
03BF:  MOVWF  7A
03C0:  MOVF   7A,W
03C1:  MOVWF  67
03C2:  MOVF   79,W
03C3:  MOVWF  66
03C4:  MOVF   78,W
03C5:  MOVWF  65
03C6:  MOVF   77,W
03C7:  MOVWF  64
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
03C8:  BCF    03.1
03C9:  MOVF   67,W
03CA:  BSF    03.5
03CB:  MOVWF  25
03CC:  BCF    03.5
03CD:  MOVF   66,W
03CE:  BSF    03.5
03CF:  MOVWF  24
03D0:  BCF    03.5
03D1:  MOVF   65,W
03D2:  BSF    03.5
03D3:  MOVWF  23
03D4:  BCF    03.5
03D5:  MOVF   64,W
03D6:  BSF    03.5
03D7:  MOVWF  22
03D8:  CLRF   29
03D9:  CLRF   28
03DA:  MOVLW  0E
03DB:  MOVWF  27
03DC:  MOVLW  10
03DD:  MOVWF  26
03DE:  BCF    03.5
03DF:  BCF    03.6
03E0:  CALL   254
03E1:  MOVF   7A,W
03E2:  BSF    03.6
03E3:  MOVWF  6B
03E4:  MOVF   79,W
03E5:  MOVWF  6A
03E6:  MOVF   78,W
03E7:  MOVWF  69
03E8:  MOVF   77,W
03E9:  MOVWF  68
03EA:  BSF    03.1
03EB:  MOVLW  90
03EC:  MOVWF  04
03ED:  BSF    03.7
03EE:  MOVF   67,W
03EF:  BSF    03.5
03F0:  MOVWF  25
03F1:  BCF    03.5
03F2:  MOVF   66,W
03F3:  BSF    03.5
03F4:  MOVWF  24
03F5:  BCF    03.5
03F6:  MOVF   65,W
03F7:  BSF    03.5
03F8:  MOVWF  23
03F9:  BCF    03.5
03FA:  MOVF   64,W
03FB:  BSF    03.5
03FC:  MOVWF  22
03FD:  CLRF   29
03FE:  CLRF   28
03FF:  MOVLW  0E
0400:  MOVWF  27
0401:  MOVLW  10
0402:  MOVWF  26
0403:  BCF    03.5
0404:  BCF    03.6
0405:  CALL   254
0406:  BSF    03.5
0407:  BSF    03.6
0408:  MOVF   13,W
0409:  MOVWF  17
040A:  MOVF   12,W
040B:  MOVWF  16
040C:  MOVF   11,W
040D:  MOVWF  15
040E:  MOVF   10,W
040F:  MOVWF  14
0410:  CLRF   19
0411:  MOVF   04,W
0412:  MOVWF  18
0413:  BCF    19.0
0414:  BTFSC  03.7
0415:  BSF    19.0
0416:  BCF    03.1
0417:  MOVF   13,W
0418:  MOVWF  25
0419:  MOVF   12,W
041A:  MOVWF  24
041B:  MOVF   11,W
041C:  MOVWF  23
041D:  MOVF   10,W
041E:  MOVWF  22
041F:  CLRF   29
0420:  CLRF   28
0421:  CLRF   27
0422:  MOVLW  3C
0423:  MOVWF  26
0424:  BCF    03.5
0425:  BCF    03.6
0426:  CALL   254
0427:  BSF    03.5
0428:  BSF    03.6
0429:  MOVF   18,W
042A:  MOVWF  04
042B:  BCF    03.7
042C:  BTFSC  19.0
042D:  BSF    03.7
042E:  MOVF   7A,W
042F:  BCF    03.5
0430:  MOVWF  6F
0431:  MOVF   79,W
0432:  MOVWF  6E
0433:  MOVF   78,W
0434:  MOVWF  6D
0435:  MOVF   77,W
0436:  MOVWF  6C
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
0437:  MOVLW  02
0438:  ADDWF  5A,W
0439:  MOVWF  78
043A:  MOVF   5B,W
043B:  MOVWF  7A
043C:  BTFSC  03.0
043D:  INCF   7A,F
043E:  MOVF   78,W
043F:  BSF    03.5
0440:  MOVWF  10
0441:  MOVF   7A,W
0442:  MOVWF  11
0443:  CLRF   13
0444:  MOVF   04,W
0445:  MOVWF  12
0446:  BCF    13.0
0447:  BTFSC  03.7
0448:  BSF    13.0
0449:  BSF    03.1
044A:  MOVLW  94
044B:  MOVWF  04
044C:  BSF    03.7
044D:  BCF    03.5
044E:  MOVF   67,W
044F:  BSF    03.5
0450:  MOVWF  25
0451:  BCF    03.5
0452:  MOVF   66,W
0453:  BSF    03.5
0454:  MOVWF  24
0455:  BCF    03.5
0456:  MOVF   65,W
0457:  BSF    03.5
0458:  MOVWF  23
0459:  BCF    03.5
045A:  MOVF   64,W
045B:  BSF    03.5
045C:  MOVWF  22
045D:  CLRF   29
045E:  CLRF   28
045F:  MOVLW  0E
0460:  MOVWF  27
0461:  MOVLW  10
0462:  MOVWF  26
0463:  BCF    03.5
0464:  BCF    03.6
0465:  CALL   254
0466:  BSF    03.5
0467:  BSF    03.6
0468:  MOVF   14,W
0469:  MOVWF  77
046A:  MOVF   15,W
046B:  MOVWF  78
046C:  MOVF   16,W
046D:  MOVWF  79
046E:  MOVF   17,W
046F:  MOVWF  7A
0470:  MOVF   12,W
0471:  MOVWF  04
0472:  BCF    03.7
0473:  BTFSC  13.0
0474:  BSF    03.7
0475:  MOVF   17,W
0476:  MOVWF  1B
0477:  MOVF   16,W
0478:  MOVWF  1A
0479:  MOVF   15,W
047A:  MOVWF  19
047B:  MOVF   14,W
047C:  MOVWF  18
047D:  CLRF   1D
047E:  MOVF   04,W
047F:  MOVWF  1C
0480:  BCF    1D.0
0481:  BTFSC  03.7
0482:  BSF    1D.0
0483:  BSF    03.1
0484:  MOVLW  9E
0485:  MOVWF  04
0486:  BSF    03.7
0487:  MOVF   17,W
0488:  MOVWF  25
0489:  MOVF   16,W
048A:  MOVWF  24
048B:  MOVF   15,W
048C:  MOVWF  23
048D:  MOVF   14,W
048E:  MOVWF  22
048F:  CLRF   29
0490:  CLRF   28
0491:  CLRF   27
0492:  MOVLW  3C
0493:  MOVWF  26
0494:  BCF    03.5
0495:  BCF    03.6
0496:  CALL   254
0497:  BSF    03.5
0498:  BSF    03.6
0499:  MOVF   1C,W
049A:  MOVWF  04
049B:  BCF    03.7
049C:  BTFSC  1D.0
049D:  BSF    03.7
049E:  MOVF   10,W
049F:  MOVWF  04
04A0:  BCF    03.7
04A1:  BTFSC  11.0
04A2:  BSF    03.7
04A3:  MOVF   1E,W
04A4:  MOVWF  00
....................  
....................     //    if ((minute + 60) <= 99 && (hour > 0)) { 
....................     //        hour -= 1; 
....................     //        minute += 60; 
....................     //    } 
....................     timerPtr->countdownTime.hour = hour; 
04A5:  BCF    03.5
04A6:  MOVF   5A,W
04A7:  MOVWF  04
04A8:  BCF    03.7
04A9:  BTFSC  5B.0
04AA:  BSF    03.7
04AB:  MOVF   68,W
04AC:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
04AD:  MOVLW  01
04AE:  ADDWF  5A,W
04AF:  MOVWF  04
04B0:  BCF    03.7
04B1:  BTFSC  5B.0
04B2:  BSF    03.7
04B3:  MOVF   6C,W
04B4:  MOVWF  00
....................  
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
02DF:  MOVLW  05
02E0:  ADDWF  58,W
02E1:  MOVWF  78
02E2:  MOVF   59,W
02E3:  MOVWF  7A
02E4:  BTFSC  03.0
02E5:  INCF   7A,F
02E6:  MOVF   78,W
02E7:  MOVWF  5A
02E8:  MOVF   7A,W
02E9:  MOVWF  5B
*
0344:  MOVF   79,W
0345:  MOVWF  7A
0346:  MOVF   78,W
0347:  MOVWF  5C
0348:  MOVF   7A,W
0349:  MOVWF  5D
034A:  MOVLW  05
034B:  MOVWF  78
034C:  MOVF   5C,W
034D:  MOVWF  04
034E:  BCF    03.7
034F:  BTFSC  5D.0
0350:  BSF    03.7
0351:  MOVF   00,W
0352:  MOVWF  77
0353:  MOVF   5A,W
0354:  MOVWF  04
0355:  BCF    03.7
0356:  BTFSC  5B.0
0357:  BSF    03.7
0358:  MOVF   77,W
0359:  MOVWF  00
035A:  INCF   5A,F
035B:  BTFSC  03.2
035C:  INCF   5B,F
035D:  INCF   5C,F
035E:  BTFSC  03.2
035F:  INCF   5D,F
0360:  DECFSZ 78,F
0361:  GOTO   34C
....................     Timer_updateCountdownTime(timerPtr); 
0362:  MOVF   59,W
0363:  MOVWF  5B
0364:  MOVF   58,W
0365:  MOVWF  5A
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->limitTime.hour + 1; 
*
1167:  MOVLW  0A
1168:  ADDWF  23,W
1169:  MOVWF  78
116A:  MOVF   24,W
116B:  MOVWF  7A
116C:  BTFSC  03.0
116D:  INCF   7A,F
116E:  MOVF   78,W
116F:  MOVWF  25
1170:  MOVF   7A,W
1171:  MOVWF  26
1172:  MOVLW  0A
1173:  ADDWF  23,W
1174:  MOVWF  04
1175:  BCF    03.7
1176:  BTFSC  24.0
1177:  BSF    03.7
1178:  MOVF   00,W
1179:  MOVWF  27
117A:  MOVLW  0F
117B:  ADDWF  23,W
117C:  MOVWF  04
117D:  BCF    03.7
117E:  BTFSC  24.0
117F:  BSF    03.7
1180:  MOVF   00,W
1181:  SUBWF  27,W
1182:  BTFSS  03.2
1183:  GOTO   186
1184:  MOVLW  00
1185:  GOTO   18E
1186:  MOVLW  0A
1187:  ADDWF  23,W
1188:  MOVWF  04
1189:  BCF    03.7
118A:  BTFSC  24.0
118B:  BSF    03.7
118C:  MOVLW  01
118D:  ADDWF  00,W
118E:  MOVWF  27
118F:  MOVF   25,W
1190:  MOVWF  04
1191:  BCF    03.7
1192:  BTFSC  26.0
1193:  BSF    03.7
1194:  MOVF   27,W
1195:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->limitTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->limitTime.minute + 1; 
*
0CD7:  MOVLW  0B
0CD8:  BSF    03.6
0CD9:  ADDWF  23,W
0CDA:  MOVWF  78
0CDB:  MOVF   24,W
0CDC:  MOVWF  7A
0CDD:  BTFSC  03.0
0CDE:  INCF   7A,F
0CDF:  MOVF   78,W
0CE0:  MOVWF  25
0CE1:  MOVF   7A,W
0CE2:  MOVWF  26
0CE3:  MOVLW  0B
0CE4:  ADDWF  23,W
0CE5:  MOVWF  04
0CE6:  BCF    03.7
0CE7:  BTFSC  24.0
0CE8:  BSF    03.7
0CE9:  MOVF   00,W
0CEA:  MOVWF  27
0CEB:  MOVLW  10
0CEC:  ADDWF  23,W
0CED:  MOVWF  04
0CEE:  BCF    03.7
0CEF:  BTFSC  24.0
0CF0:  BSF    03.7
0CF1:  MOVF   00,W
0CF2:  SUBWF  27,W
0CF3:  BTFSS  03.2
0CF4:  GOTO   4F7
0CF5:  MOVLW  00
0CF6:  GOTO   4FF
0CF7:  MOVLW  0B
0CF8:  ADDWF  23,W
0CF9:  MOVWF  04
0CFA:  BCF    03.7
0CFB:  BTFSC  24.0
0CFC:  BSF    03.7
0CFD:  MOVLW  01
0CFE:  ADDWF  00,W
0CFF:  MOVWF  27
0D00:  MOVF   25,W
0D01:  MOVWF  04
0D02:  BCF    03.7
0D03:  BTFSC  26.0
0D04:  BSF    03.7
0D05:  MOVF   27,W
0D06:  MOVWF  00
0D07:  BCF    03.6
0D08:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->limitTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->limitTime.second + 1; 
*
1309:  MOVLW  0C
130A:  ADDWF  23,W
130B:  MOVWF  78
130C:  MOVF   24,W
130D:  MOVWF  7A
130E:  BTFSC  03.0
130F:  INCF   7A,F
1310:  MOVF   78,W
1311:  MOVWF  25
1312:  MOVF   7A,W
1313:  MOVWF  26
1314:  MOVLW  0C
1315:  ADDWF  23,W
1316:  MOVWF  04
1317:  BCF    03.7
1318:  BTFSC  24.0
1319:  BSF    03.7
131A:  MOVF   00,W
131B:  MOVWF  27
131C:  MOVLW  11
131D:  ADDWF  23,W
131E:  MOVWF  04
131F:  BCF    03.7
1320:  BTFSC  24.0
1321:  BSF    03.7
1322:  MOVF   00,W
1323:  SUBWF  27,W
1324:  BTFSS  03.2
1325:  GOTO   328
1326:  MOVLW  00
1327:  GOTO   330
1328:  MOVLW  0C
1329:  ADDWF  23,W
132A:  MOVWF  04
132B:  BCF    03.7
132C:  BTFSC  24.0
132D:  BSF    03.7
132E:  MOVLW  01
132F:  ADDWF  00,W
1330:  MOVWF  27
1331:  MOVF   25,W
1332:  MOVWF  04
1333:  BCF    03.7
1334:  BTFSC  26.0
1335:  BSF    03.7
1336:  MOVF   27,W
1337:  MOVWF  00
1338:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->limitTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0ADA:  MOVLW  16
0ADB:  ADDWF  23,W
0ADC:  MOVWF  04
0ADD:  BCF    03.7
0ADE:  BTFSC  24.0
0ADF:  BSF    03.7
0AE0:  MOVF   00,W
0AE1:  MOVWF  25
0AE2:  MOVLW  05
0AE3:  ADDWF  23,W
0AE4:  MOVWF  04
0AE5:  BCF    03.7
0AE6:  BTFSC  24.0
0AE7:  BSF    03.7
0AE8:  MOVF   00,W
0AE9:  MOVWF  26
0AEA:  BCF    03.6
0AEB:  MOVF   0B,W
0AEC:  MOVWF  77
0AED:  BCF    0B.7
0AEE:  BSF    03.6
0AEF:  MOVF   25,W
0AF0:  MOVWF  0D
0AF1:  MOVF   26,W
0AF2:  MOVWF  0C
0AF3:  BSF    03.5
0AF4:  BCF    0C.7
0AF5:  BSF    0C.2
0AF6:  MOVLW  55
0AF7:  MOVWF  0D
0AF8:  MOVLW  AA
0AF9:  MOVWF  0D
0AFA:  BSF    0C.1
0AFB:  BTFSC  0C.1
0AFC:  GOTO   2FB
0AFD:  BCF    0C.2
0AFE:  MOVF   77,W
0AFF:  BCF    03.5
0B00:  BCF    03.6
0B01:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0B02:  MOVLW  17
0B03:  BSF    03.6
0B04:  ADDWF  23,W
0B05:  MOVWF  04
0B06:  BCF    03.7
0B07:  BTFSC  24.0
0B08:  BSF    03.7
0B09:  MOVF   00,W
0B0A:  MOVWF  25
0B0B:  MOVLW  06
0B0C:  ADDWF  23,W
0B0D:  MOVWF  04
0B0E:  BCF    03.7
0B0F:  BTFSC  24.0
0B10:  BSF    03.7
0B11:  MOVF   00,W
0B12:  MOVWF  26
0B13:  BCF    03.6
0B14:  MOVF   0B,W
0B15:  MOVWF  77
0B16:  BCF    0B.7
0B17:  BSF    03.6
0B18:  MOVF   25,W
0B19:  MOVWF  0D
0B1A:  MOVF   26,W
0B1B:  MOVWF  0C
0B1C:  BSF    03.5
0B1D:  BCF    0C.7
0B1E:  BSF    0C.2
0B1F:  MOVLW  55
0B20:  MOVWF  0D
0B21:  MOVLW  AA
0B22:  MOVWF  0D
0B23:  BSF    0C.1
0B24:  BTFSC  0C.1
0B25:  GOTO   324
0B26:  BCF    0C.2
0B27:  MOVF   77,W
0B28:  BCF    03.5
0B29:  BCF    03.6
0B2A:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0B2B:  MOVLW  18
0B2C:  BSF    03.6
0B2D:  ADDWF  23,W
0B2E:  MOVWF  04
0B2F:  BCF    03.7
0B30:  BTFSC  24.0
0B31:  BSF    03.7
0B32:  MOVF   00,W
0B33:  MOVWF  25
0B34:  MOVLW  07
0B35:  ADDWF  23,W
0B36:  MOVWF  04
0B37:  BCF    03.7
0B38:  BTFSC  24.0
0B39:  BSF    03.7
0B3A:  MOVF   00,W
0B3B:  MOVWF  26
0B3C:  BCF    03.6
0B3D:  MOVF   0B,W
0B3E:  MOVWF  77
0B3F:  BCF    0B.7
0B40:  BSF    03.6
0B41:  MOVF   25,W
0B42:  MOVWF  0D
0B43:  MOVF   26,W
0B44:  MOVWF  0C
0B45:  BSF    03.5
0B46:  BCF    0C.7
0B47:  BSF    0C.2
0B48:  MOVLW  55
0B49:  MOVWF  0D
0B4A:  MOVLW  AA
0B4B:  MOVWF  0D
0B4C:  BSF    0C.1
0B4D:  BTFSC  0C.1
0B4E:  GOTO   34D
0B4F:  BCF    0C.2
0B50:  MOVF   77,W
0B51:  BCF    03.5
0B52:  BCF    03.6
0B53:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveLimitTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->limitTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->limitTime.minute); 
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
0B73:  MOVF   23,W
0B74:  MOVWF  78
0B75:  MOVF   24,W
0B76:  MOVWF  7A
0B77:  MOVF   78,W
0B78:  MOVWF  25
0B79:  MOVF   7A,W
0B7A:  MOVWF  26
0B7B:  MOVF   26,W
0B7C:  MOVWF  28
0B7D:  MOVF   25,W
0B7E:  MOVWF  27
*
0B9D:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->limitTime.hour == 0)&& (timerPtr->limitTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
071F:  CLRF   27
0720:  CLRF   28
0721:  CLRF   29
0722:  CLRF   2A
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0723:  MOVF   24,W
0724:  MOVWF  78
0725:  MOVF   25,W
0726:  MOVWF  7A
0727:  MOVF   78,W
0728:  MOVWF  31
0729:  MOVF   7A,W
072A:  MOVWF  32
072B:  MOVWF  3A
072C:  MOVF   31,W
072D:  MOVWF  39
072E:  CLRF   3B
072F:  BCF    03.6
0730:  CALL   5E7
0731:  MOVF   79,W
0732:  MOVWF  7A
0733:  MOVF   78,W
0734:  BSF    03.6
0735:  MOVWF  31
0736:  MOVF   7A,W
0737:  MOVWF  32
0738:  MOVLW  01
0739:  MOVWF  34
073A:  MOVLW  2B
073B:  MOVWF  33
073C:  MOVLW  06
073D:  MOVWF  78
073E:  MOVF   31,W
073F:  MOVWF  04
0740:  BCF    03.7
0741:  BTFSC  32.0
0742:  BSF    03.7
0743:  MOVF   00,W
0744:  MOVWF  77
0745:  MOVF   33,W
0746:  MOVWF  04
0747:  BCF    03.7
0748:  BTFSC  34.0
0749:  BSF    03.7
074A:  MOVF   77,W
074B:  MOVWF  00
074C:  INCF   33,F
074D:  BTFSC  03.2
074E:  INCF   34,F
074F:  INCF   31,F
0750:  BTFSC  03.2
0751:  INCF   32,F
0752:  DECFSZ 78,F
0753:  GOTO   73E
....................     timeToSend[0] = timeInDigits.minute[0]; 
0754:  MOVF   2D,W
0755:  MOVWF  27
....................     timeToSend[1] = timeInDigits.minute[1]; 
0756:  MOVF   2E,W
0757:  MOVWF  28
....................     timeToSend[2] = timeInDigits.hour[0]; 
0758:  MOVF   2B,W
0759:  MOVWF  29
....................     timeToSend[3] = timeInDigits.hour[1]; 
075A:  MOVF   2C,W
075B:  MOVWF  2A
....................  
....................     if (blink) { 
075C:  MOVF   26,F
075D:  BTFSC  03.2
075E:  GOTO   769
....................         blink = timerPtr->currentTime.second % 2; 
075F:  MOVLW  07
0760:  ADDWF  24,W
0761:  MOVWF  04
0762:  BCF    03.7
0763:  BTFSC  25.0
0764:  BSF    03.7
0765:  MOVF   00,W
0766:  ANDLW  01
0767:  MOVWF  26
....................     } else { 
0768:  GOTO   76B
....................         blink = TRUE; 
0769:  MOVLW  01
076A:  MOVWF  26
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             blink 
....................             ); 
076B:  MOVLW  01
076C:  MOVWF  32
076D:  MOVLW  27
076E:  MOVWF  31
076F:  MOVLW  04
0770:  MOVWF  33
0771:  MOVF   26,W
0772:  MOVWF  34
0773:  BCF    03.6
0774:  CALL   698
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
078D:  CLRF   26
078E:  CLRF   27
078F:  CLRF   28
0790:  CLRF   29
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0791:  MOVF   24,W
0792:  MOVWF  78
0793:  MOVF   25,W
0794:  MOVWF  7A
0795:  MOVF   78,W
0796:  MOVWF  30
0797:  MOVF   7A,W
0798:  MOVWF  31
0799:  MOVWF  3A
079A:  MOVF   30,W
079B:  MOVWF  39
079C:  CLRF   3B
079D:  BCF    03.6
079E:  CALL   5E7
079F:  MOVF   79,W
07A0:  MOVWF  7A
07A1:  MOVF   78,W
07A2:  BSF    03.6
07A3:  MOVWF  30
07A4:  MOVF   7A,W
07A5:  MOVWF  31
07A6:  MOVLW  01
07A7:  MOVWF  33
07A8:  MOVLW  2A
07A9:  MOVWF  32
07AA:  MOVLW  06
07AB:  MOVWF  78
07AC:  MOVF   30,W
07AD:  MOVWF  04
07AE:  BCF    03.7
07AF:  BTFSC  31.0
07B0:  BSF    03.7
07B1:  MOVF   00,W
07B2:  MOVWF  77
07B3:  MOVF   32,W
07B4:  MOVWF  04
07B5:  BCF    03.7
07B6:  BTFSC  33.0
07B7:  BSF    03.7
07B8:  MOVF   77,W
07B9:  MOVWF  00
07BA:  INCF   32,F
07BB:  BTFSC  03.2
07BC:  INCF   33,F
07BD:  INCF   30,F
07BE:  BTFSC  03.2
07BF:  INCF   31,F
07C0:  DECFSZ 78,F
07C1:  GOTO   7AC
....................     timeToSend[0] = timeInDigits.second[0]; 
07C2:  MOVF   2E,W
07C3:  MOVWF  26
....................     timeToSend[1] = timeInDigits.second[1]; 
07C4:  MOVF   2F,W
07C5:  MOVWF  27
....................     timeToSend[2] = timeInDigits.minute[0]; 
07C6:  MOVF   2C,W
07C7:  MOVWF  28
....................     timeToSend[3] = timeInDigits.minute[1]; 
07C8:  MOVF   2D,W
07C9:  MOVWF  29
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
07CA:  MOVLW  01
07CB:  MOVWF  32
07CC:  MOVLW  26
07CD:  MOVWF  31
07CE:  MOVLW  04
07CF:  MOVWF  33
07D0:  MOVLW  01
07D1:  MOVWF  34
07D2:  BCF    03.6
07D3:  CALL   698
07D4:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1080:  CLRF   25
1081:  CLRF   26
1082:  CLRF   27
1083:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1084:  MOVLW  0A
1085:  ADDWF  23,W
1086:  MOVWF  78
1087:  MOVF   24,W
1088:  MOVWF  7A
1089:  BTFSC  03.0
108A:  INCF   7A,F
108B:  MOVF   78,W
108C:  MOVWF  2F
108D:  MOVF   7A,W
108E:  MOVWF  30
108F:  MOVWF  3A
1090:  MOVF   2F,W
1091:  MOVWF  39
1092:  CLRF   3B
1093:  BCF    0A.4
1094:  BCF    03.6
1095:  CALL   5E7
1096:  BSF    0A.4
1097:  MOVF   79,W
1098:  MOVWF  7A
1099:  MOVF   78,W
109A:  BSF    03.6
109B:  MOVWF  2F
109C:  MOVF   7A,W
109D:  MOVWF  30
109E:  MOVLW  01
109F:  MOVWF  32
10A0:  MOVLW  29
10A1:  MOVWF  31
10A2:  MOVLW  06
10A3:  MOVWF  78
10A4:  MOVF   2F,W
10A5:  MOVWF  04
10A6:  BCF    03.7
10A7:  BTFSC  30.0
10A8:  BSF    03.7
10A9:  MOVF   00,W
10AA:  MOVWF  77
10AB:  MOVF   31,W
10AC:  MOVWF  04
10AD:  BCF    03.7
10AE:  BTFSC  32.0
10AF:  BSF    03.7
10B0:  MOVF   77,W
10B1:  MOVWF  00
10B2:  INCF   31,F
10B3:  BTFSC  03.2
10B4:  INCF   32,F
10B5:  INCF   2F,F
10B6:  BTFSC  03.2
10B7:  INCF   30,F
10B8:  DECFSZ 78,F
10B9:  GOTO   0A4
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
10BA:  MOVF   2B,W
10BB:  BCF    0A.4
10BC:  BCF    03.6
10BD:  CALL   004
10BE:  BSF    0A.4
10BF:  MOVWF  78
10C0:  BSF    03.6
10C1:  MOVWF  25
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
10C2:  MOVF   2C,W
10C3:  BCF    0A.4
10C4:  BCF    03.6
10C5:  CALL   004
10C6:  BSF    0A.4
10C7:  IORLW  08
10C8:  BSF    03.6
10C9:  MOVWF  26
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
10CA:  MOVLW  01
10CB:  MOVWF  36
10CC:  MOVLW  25
10CD:  MOVWF  35
10CE:  MOVLW  04
10CF:  MOVWF  37
10D0:  BCF    0A.4
10D1:  BCF    03.6
10D2:  CALL   651
10D3:  BSF    0A.4
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
10EC:  CLRF   25
10ED:  CLRF   26
10EE:  CLRF   27
10EF:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
10F0:  MOVLW  0A
10F1:  ADDWF  23,W
10F2:  MOVWF  78
10F3:  MOVF   24,W
10F4:  MOVWF  7A
10F5:  BTFSC  03.0
10F6:  INCF   7A,F
10F7:  MOVF   78,W
10F8:  MOVWF  2F
10F9:  MOVF   7A,W
10FA:  MOVWF  30
10FB:  MOVWF  3A
10FC:  MOVF   2F,W
10FD:  MOVWF  39
10FE:  CLRF   3B
10FF:  BCF    0A.4
1100:  BCF    03.6
1101:  CALL   5E7
1102:  BSF    0A.4
1103:  MOVF   79,W
1104:  MOVWF  7A
1105:  MOVF   78,W
1106:  BSF    03.6
1107:  MOVWF  2F
1108:  MOVF   7A,W
1109:  MOVWF  30
110A:  MOVLW  01
110B:  MOVWF  32
110C:  MOVLW  29
110D:  MOVWF  31
110E:  MOVLW  06
110F:  MOVWF  78
1110:  MOVF   2F,W
1111:  MOVWF  04
1112:  BCF    03.7
1113:  BTFSC  30.0
1114:  BSF    03.7
1115:  MOVF   00,W
1116:  MOVWF  77
1117:  MOVF   31,W
1118:  MOVWF  04
1119:  BCF    03.7
111A:  BTFSC  32.0
111B:  BSF    03.7
111C:  MOVF   77,W
111D:  MOVWF  00
111E:  INCF   31,F
111F:  BTFSC  03.2
1120:  INCF   32,F
1121:  INCF   2F,F
1122:  BTFSC  03.2
1123:  INCF   30,F
1124:  DECFSZ 78,F
1125:  GOTO   110
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1126:  MOVF   2D,W
1127:  BCF    0A.4
1128:  BCF    03.6
1129:  CALL   004
112A:  BSF    0A.4
112B:  MOVWF  78
112C:  BSF    03.6
112D:  MOVWF  25
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
112E:  MOVF   2E,W
112F:  BCF    0A.4
1130:  BCF    03.6
1131:  CALL   004
1132:  BSF    0A.4
1133:  IORLW  08
1134:  BSF    03.6
1135:  MOVWF  26
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
1136:  MOVLW  01
1137:  MOVWF  36
1138:  MOVLW  25
1139:  MOVWF  35
113A:  MOVLW  04
113B:  MOVWF  37
113C:  BCF    0A.4
113D:  BCF    03.6
113E:  CALL   651
113F:  BSF    0A.4
1140:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C20:  CLRF   25
0C21:  CLRF   26
0C22:  CLRF   27
0C23:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0C24:  MOVLW  0A
0C25:  ADDWF  23,W
0C26:  MOVWF  78
0C27:  MOVF   24,W
0C28:  MOVWF  7A
0C29:  BTFSC  03.0
0C2A:  INCF   7A,F
0C2B:  MOVF   78,W
0C2C:  MOVWF  2F
0C2D:  MOVF   7A,W
0C2E:  MOVWF  30
0C2F:  MOVWF  3A
0C30:  MOVF   2F,W
0C31:  MOVWF  39
0C32:  CLRF   3B
0C33:  BCF    0A.3
0C34:  BCF    03.6
0C35:  CALL   5E7
0C36:  BSF    0A.3
0C37:  MOVF   79,W
0C38:  MOVWF  7A
0C39:  MOVF   78,W
0C3A:  BSF    03.6
0C3B:  MOVWF  2F
0C3C:  MOVF   7A,W
0C3D:  MOVWF  30
0C3E:  MOVLW  01
0C3F:  MOVWF  32
0C40:  MOVLW  29
0C41:  MOVWF  31
0C42:  MOVLW  06
0C43:  MOVWF  78
0C44:  MOVF   2F,W
0C45:  MOVWF  04
0C46:  BCF    03.7
0C47:  BTFSC  30.0
0C48:  BSF    03.7
0C49:  MOVF   00,W
0C4A:  MOVWF  77
0C4B:  MOVF   31,W
0C4C:  MOVWF  04
0C4D:  BCF    03.7
0C4E:  BTFSC  32.0
0C4F:  BSF    03.7
0C50:  MOVF   77,W
0C51:  MOVWF  00
0C52:  INCF   31,F
0C53:  BTFSC  03.2
0C54:  INCF   32,F
0C55:  INCF   2F,F
0C56:  BTFSC  03.2
0C57:  INCF   30,F
0C58:  DECFSZ 78,F
0C59:  GOTO   444
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0C5A:  MOVF   2B,W
0C5B:  MOVWF  25
....................     numbersToSend[1] = displayableTime.minute[1]; 
0C5C:  MOVF   2C,W
0C5D:  MOVWF  26
....................     numbersToSend[2] = displayableTime.hour[0]; 
0C5E:  MOVF   29,W
0C5F:  MOVWF  27
....................     numbersToSend[3] = displayableTime.hour[1]; 
0C60:  MOVF   2A,W
0C61:  MOVWF  28
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0C62:  MOVLW  01
0C63:  MOVWF  32
0C64:  MOVLW  25
0C65:  MOVWF  31
0C66:  MOVLW  04
0C67:  MOVWF  33
0C68:  MOVLW  01
0C69:  MOVWF  34
0C6A:  BCF    0A.3
0C6B:  BCF    03.6
0C6C:  CALL   698
0C6D:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C86:  CLRF   25
0C87:  CLRF   26
0C88:  CLRF   27
0C89:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0C8A:  MOVLW  0A
0C8B:  ADDWF  23,W
0C8C:  MOVWF  78
0C8D:  MOVF   24,W
0C8E:  MOVWF  7A
0C8F:  BTFSC  03.0
0C90:  INCF   7A,F
0C91:  MOVF   78,W
0C92:  MOVWF  2F
0C93:  MOVF   7A,W
0C94:  MOVWF  30
0C95:  MOVWF  3A
0C96:  MOVF   2F,W
0C97:  MOVWF  39
0C98:  CLRF   3B
0C99:  BCF    0A.3
0C9A:  BCF    03.6
0C9B:  CALL   5E7
0C9C:  BSF    0A.3
0C9D:  MOVF   79,W
0C9E:  MOVWF  7A
0C9F:  MOVF   78,W
0CA0:  BSF    03.6
0CA1:  MOVWF  2F
0CA2:  MOVF   7A,W
0CA3:  MOVWF  30
0CA4:  MOVLW  01
0CA5:  MOVWF  32
0CA6:  MOVLW  29
0CA7:  MOVWF  31
0CA8:  MOVLW  06
0CA9:  MOVWF  78
0CAA:  MOVF   2F,W
0CAB:  MOVWF  04
0CAC:  BCF    03.7
0CAD:  BTFSC  30.0
0CAE:  BSF    03.7
0CAF:  MOVF   00,W
0CB0:  MOVWF  77
0CB1:  MOVF   31,W
0CB2:  MOVWF  04
0CB3:  BCF    03.7
0CB4:  BTFSC  32.0
0CB5:  BSF    03.7
0CB6:  MOVF   77,W
0CB7:  MOVWF  00
0CB8:  INCF   31,F
0CB9:  BTFSC  03.2
0CBA:  INCF   32,F
0CBB:  INCF   2F,F
0CBC:  BTFSC  03.2
0CBD:  INCF   30,F
0CBE:  DECFSZ 78,F
0CBF:  GOTO   4AA
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0CC0:  MOVF   2D,W
0CC1:  MOVWF  25
....................     numbersToSend[1] = displayableTime.second[1]; 
0CC2:  MOVF   2E,W
0CC3:  MOVWF  26
....................     numbersToSend[2] = displayableTime.minute[0]; 
0CC4:  MOVF   2B,W
0CC5:  MOVWF  27
....................     numbersToSend[3] = displayableTime.minute[1]; 
0CC6:  MOVF   2C,W
0CC7:  MOVWF  28
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0CC8:  MOVLW  01
0CC9:  MOVWF  32
0CCA:  MOVLW  25
0CCB:  MOVWF  31
0CCC:  MOVLW  04
0CCD:  MOVWF  33
0CCE:  MOVLW  01
0CCF:  MOVWF  34
0CD0:  BCF    0A.3
0CD1:  BCF    03.6
0CD2:  CALL   698
0CD3:  BSF    0A.3
0CD4:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1201:  CLRF   25
1202:  CLRF   26
1203:  CLRF   27
1204:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1205:  MOVLW  0A
1206:  ADDWF  23,W
1207:  MOVWF  78
1208:  MOVF   24,W
1209:  MOVWF  7A
120A:  BTFSC  03.0
120B:  INCF   7A,F
120C:  MOVF   78,W
120D:  MOVWF  2F
120E:  MOVF   7A,W
120F:  MOVWF  30
1210:  MOVWF  3A
1211:  MOVF   2F,W
1212:  MOVWF  39
1213:  CLRF   3B
1214:  BCF    0A.4
1215:  BCF    03.6
1216:  CALL   5E7
1217:  BSF    0A.4
1218:  MOVF   79,W
1219:  MOVWF  7A
121A:  MOVF   78,W
121B:  BSF    03.6
121C:  MOVWF  2F
121D:  MOVF   7A,W
121E:  MOVWF  30
121F:  MOVLW  01
1220:  MOVWF  32
1221:  MOVLW  29
1222:  MOVWF  31
1223:  MOVLW  06
1224:  MOVWF  78
1225:  MOVF   2F,W
1226:  MOVWF  04
1227:  BCF    03.7
1228:  BTFSC  30.0
1229:  BSF    03.7
122A:  MOVF   00,W
122B:  MOVWF  77
122C:  MOVF   31,W
122D:  MOVWF  04
122E:  BCF    03.7
122F:  BTFSC  32.0
1230:  BSF    03.7
1231:  MOVF   77,W
1232:  MOVWF  00
1233:  INCF   31,F
1234:  BTFSC  03.2
1235:  INCF   32,F
1236:  INCF   2F,F
1237:  BTFSC  03.2
1238:  INCF   30,F
1239:  DECFSZ 78,F
123A:  GOTO   225
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
123B:  MOVLW  08
123C:  MOVWF  26
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
123D:  MOVF   29,W
123E:  BCF    0A.4
123F:  BCF    03.6
1240:  CALL   004
1241:  BSF    0A.4
1242:  MOVWF  78
1243:  BSF    03.6
1244:  MOVWF  27
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
1245:  MOVF   2A,W
1246:  BCF    0A.4
1247:  BCF    03.6
1248:  CALL   004
1249:  BSF    0A.4
124A:  MOVWF  78
124B:  BSF    03.6
124C:  MOVWF  28
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
124D:  MOVLW  01
124E:  MOVWF  36
124F:  MOVLW  25
1250:  MOVWF  35
1251:  MOVLW  04
1252:  MOVWF  37
1253:  BCF    0A.4
1254:  BCF    03.6
1255:  CALL   651
1256:  BSF    0A.4
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
126F:  CLRF   25
1270:  CLRF   26
1271:  CLRF   27
1272:  CLRF   28
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1273:  MOVLW  0A
1274:  ADDWF  23,W
1275:  MOVWF  78
1276:  MOVF   24,W
1277:  MOVWF  7A
1278:  BTFSC  03.0
1279:  INCF   7A,F
127A:  MOVF   78,W
127B:  MOVWF  2F
127C:  MOVF   7A,W
127D:  MOVWF  30
127E:  MOVWF  3A
127F:  MOVF   2F,W
1280:  MOVWF  39
1281:  CLRF   3B
1282:  BCF    0A.4
1283:  BCF    03.6
1284:  CALL   5E7
1285:  BSF    0A.4
1286:  MOVF   79,W
1287:  MOVWF  7A
1288:  MOVF   78,W
1289:  BSF    03.6
128A:  MOVWF  2F
128B:  MOVF   7A,W
128C:  MOVWF  30
128D:  MOVLW  01
128E:  MOVWF  32
128F:  MOVLW  29
1290:  MOVWF  31
1291:  MOVLW  06
1292:  MOVWF  78
1293:  MOVF   2F,W
1294:  MOVWF  04
1295:  BCF    03.7
1296:  BTFSC  30.0
1297:  BSF    03.7
1298:  MOVF   00,W
1299:  MOVWF  77
129A:  MOVF   31,W
129B:  MOVWF  04
129C:  BCF    03.7
129D:  BTFSC  32.0
129E:  BSF    03.7
129F:  MOVF   77,W
12A0:  MOVWF  00
12A1:  INCF   31,F
12A2:  BTFSC  03.2
12A3:  INCF   32,F
12A4:  INCF   2F,F
12A5:  BTFSC  03.2
12A6:  INCF   30,F
12A7:  DECFSZ 78,F
12A8:  GOTO   293
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
12A9:  MOVLW  08
12AA:  MOVWF  26
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
12AB:  MOVF   2B,W
12AC:  BCF    0A.4
12AD:  BCF    03.6
12AE:  CALL   004
12AF:  BSF    0A.4
12B0:  MOVWF  78
12B1:  BSF    03.6
12B2:  MOVWF  27
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
12B3:  MOVF   2C,W
12B4:  BCF    0A.4
12B5:  BCF    03.6
12B6:  CALL   004
12B7:  BSF    0A.4
12B8:  MOVWF  78
12B9:  BSF    03.6
12BA:  MOVWF  28
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
12BB:  MOVLW  01
12BC:  MOVWF  36
12BD:  MOVLW  25
12BE:  MOVWF  35
12BF:  MOVLW  04
12C0:  MOVWF  37
12C1:  BCF    0A.4
12C2:  BCF    03.6
12C3:  CALL   651
12C4:  BSF    0A.4
12C5:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS = 0, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE=0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY,    
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
.................... } PolyoneDisplay; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateRtc(&polyoneDisplayPtr->timer); 
*
0541:  BSF    03.6
0542:  MOVF   54,W
0543:  MOVWF  78
0544:  MOVF   55,W
0545:  MOVWF  7A
0546:  MOVF   78,W
0547:  MOVWF  56
0548:  MOVF   7A,W
0549:  MOVWF  57
054A:  MOVF   57,W
054B:  MOVWF  59
054C:  MOVF   56,W
054D:  MOVWF  58
*
057C:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
02D2:  BSF    03.6
02D3:  MOVF   54,W
02D4:  MOVWF  78
02D5:  MOVF   55,W
02D6:  MOVWF  7A
02D7:  MOVF   78,W
02D8:  MOVWF  56
02D9:  MOVF   7A,W
02DA:  MOVWF  57
02DB:  MOVF   57,W
02DC:  MOVWF  59
02DD:  MOVF   56,W
02DE:  MOVWF  58
*
04B5:  BCF    03.6
04B6:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(__EEADDRESS__ addressCurrentState, 
....................         __EEADDRESS__ addressPreviousState, __EEADDRESS__ addressFormat, 
....................         __EEADDRESS__ addressFirstNumberAlarm, 
....................         __EEADDRESS__ addressSecondNumberAlarm, __EEADDRESS__ addressRtcHours, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
0875:  MOVF   25,W
0876:  MOVWF  51
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
0877:  MOVF   27,W
0878:  MOVWF  52
....................     polyoneDisplay.addressFormat = addressFormat; 
0879:  MOVF   29,W
087A:  MOVWF  53
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
087B:  MOVF   29,W
087C:  MOVWF  0D
087D:  BSF    03.5
087E:  BCF    0C.7
087F:  BSF    0C.0
0880:  BCF    03.5
0881:  MOVF   0C,W
0882:  ANDLW  01
0883:  MOVWF  78
0884:  BCF    4E.0
0885:  BTFSC  78.0
0886:  BSF    4E.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
0887:  MOVF   25,W
0888:  MOVWF  0D
0889:  BSF    03.5
088A:  BCF    0C.7
088B:  BSF    0C.0
088C:  BCF    03.5
088D:  MOVF   0C,W
088E:  MOVWF  55
088F:  MOVF   55,W
0890:  BSF    03.5
0891:  MOVWF  2B
0892:  MOVLW  03
0893:  MOVWF  2C
0894:  BCF    0A.3
0895:  BCF    03.5
0896:  BCF    03.6
0897:  CALL   02F
0898:  BSF    0A.3
0899:  MOVF   77,W
089A:  BSF    03.6
089B:  MOVWF  4F
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
089C:  MOVF   27,W
089D:  MOVWF  0D
089E:  BSF    03.5
089F:  BCF    0C.7
08A0:  BSF    0C.0
08A1:  BCF    03.5
08A2:  MOVF   0C,W
08A3:  MOVWF  55
08A4:  MOVF   55,W
08A5:  BSF    03.5
08A6:  MOVWF  2B
08A7:  MOVLW  03
08A8:  MOVWF  2C
08A9:  BCF    0A.3
08AA:  BCF    03.5
08AB:  BCF    03.6
08AC:  CALL   02F
08AD:  BSF    0A.3
08AE:  MOVF   77,W
08AF:  BSF    03.6
08B0:  MOVWF  50
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
08B1:  MOVF   50,F
08B2:  BTFSS  03.2
08B3:  GOTO   0B9
08B4:  MOVF   4F,F
08B5:  BTFSS  03.2
08B6:  GOTO   0B9
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
08B7:  MOVLW  02
08B8:  MOVWF  50
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
08B9:  MOVLW  00
08BA:  BTFSC  4E.0
08BB:  MOVLW  01
08BC:  XORLW  01
08BD:  BCF    03.6
08BE:  BTFSC  03.2
08BF:  GOTO   0C4
08C0:  XORLW  01
08C1:  BTFSC  03.2
08C2:  GOTO   15C
08C3:  GOTO   1F2
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
08C4:  MOVLW  63
08C5:  BSF    03.6
08C6:  MOVWF  62
08C7:  MOVLW  3B
08C8:  MOVWF  63
08C9:  MOVF   2C,W
08CA:  MOVWF  65
08CB:  MOVF   2B,W
08CC:  MOVWF  64
08CD:  MOVF   2E,W
08CE:  MOVWF  67
08CF:  MOVF   2D,W
08D0:  MOVWF  66
08D1:  MOVF   30,W
08D2:  MOVWF  69
08D3:  MOVF   2F,W
08D4:  MOVWF  68
08D5:  MOVF   32,W
08D6:  MOVWF  6B
08D7:  MOVF   31,W
08D8:  MOVWF  6A
08D9:  MOVF   34,W
08DA:  MOVWF  6D
08DB:  MOVF   33,W
08DC:  MOVWF  6C
*
0937:  MOVF   79,W
0938:  MOVWF  7A
0939:  MOVF   78,W
093A:  BCF    03.5
093B:  MOVWF  5C
093C:  MOVF   7A,W
093D:  MOVWF  5D
093E:  MOVLW  01
093F:  MOVWF  5F
0940:  MOVLW  35
0941:  MOVWF  5E
0942:  MOVLW  19
0943:  MOVWF  78
0944:  MOVF   5C,W
0945:  MOVWF  04
0946:  BCF    03.7
0947:  BTFSC  5D.0
0948:  BSF    03.7
0949:  MOVF   00,W
094A:  MOVWF  77
094B:  MOVF   5E,W
094C:  MOVWF  04
094D:  BCF    03.7
094E:  BTFSC  5F.0
094F:  BSF    03.7
0950:  MOVF   77,W
0951:  MOVWF  00
0952:  INCF   5E,F
0953:  BTFSC  03.2
0954:  INCF   5F,F
0955:  INCF   5C,F
0956:  BTFSC  03.2
0957:  INCF   5D,F
0958:  DECFSZ 78,F
0959:  GOTO   144
....................             break; 
095A:  BCF    03.6
095B:  GOTO   1F2
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
095C:  MOVLW  63
095D:  BSF    03.6
095E:  MOVWF  62
095F:  MOVF   2C,W
0960:  MOVWF  64
0961:  MOVF   2B,W
0962:  MOVWF  63
0963:  MOVF   2E,W
0964:  MOVWF  66
0965:  MOVF   2D,W
0966:  MOVWF  65
0967:  MOVF   30,W
0968:  MOVWF  68
0969:  MOVF   2F,W
096A:  MOVWF  67
096B:  MOVF   32,W
096C:  MOVWF  6A
096D:  MOVF   31,W
096E:  MOVWF  69
096F:  MOVF   34,W
0970:  MOVWF  6C
0971:  MOVF   33,W
0972:  MOVWF  6B
*
09CE:  MOVF   79,W
09CF:  MOVWF  7A
09D0:  MOVF   78,W
09D1:  BCF    03.5
09D2:  MOVWF  5C
09D3:  MOVF   7A,W
09D4:  MOVWF  5D
09D5:  MOVLW  01
09D6:  MOVWF  5F
09D7:  MOVLW  35
09D8:  MOVWF  5E
09D9:  MOVLW  19
09DA:  MOVWF  78
09DB:  MOVF   5C,W
09DC:  MOVWF  04
09DD:  BCF    03.7
09DE:  BTFSC  5D.0
09DF:  BSF    03.7
09E0:  MOVF   00,W
09E1:  MOVWF  77
09E2:  MOVF   5E,W
09E3:  MOVWF  04
09E4:  BCF    03.7
09E5:  BTFSC  5F.0
09E6:  BSF    03.7
09E7:  MOVF   77,W
09E8:  MOVWF  00
09E9:  INCF   5E,F
09EA:  BTFSC  03.2
09EB:  INCF   5F,F
09EC:  INCF   5C,F
09ED:  BTFSC  03.2
09EE:  INCF   5D,F
09EF:  DECFSZ 78,F
09F0:  GOTO   1DB
....................  
....................             break; 
09F1:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
09F2:  BSF    03.6
09F3:  MOVF   4F,F
09F4:  BTFSS  03.2
09F5:  GOTO   209
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
09F6:  MOVLW  01
09F7:  MOVWF  55
09F8:  MOVLW  35
09F9:  MOVWF  54
09FA:  BCF    0A.3
09FB:  BCF    03.6
09FC:  CALL   2D2
09FD:  BSF    0A.3
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
09FE:  MOVLW  01
09FF:  BSF    03.6
0A00:  MOVWF  55
0A01:  MOVLW  35
0A02:  MOVWF  54
0A03:  BCF    0A.3
0A04:  BCF    03.6
0A05:  CALL   541
0A06:  BSF    0A.3
....................     } else { 
0A07:  GOTO   211
0A08:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0A09:  MOVLW  01
0A0A:  MOVWF  55
0A0B:  MOVLW  35
0A0C:  MOVWF  54
0A0D:  BCF    0A.3
0A0E:  BCF    03.6
0A0F:  CALL   2D2
0A10:  BSF    0A.3
....................     } 
....................  
....................     return polyoneDisplay; 
0A11:  MOVLW  35
0A12:  MOVWF  78
0A13:  MOVLW  01
0A14:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0705:  MOVLW  19
0706:  BSF    03.6
0707:  ADDWF  1F,W
0708:  MOVWF  04
0709:  BCF    03.7
070A:  BTFSC  20.0
070B:  BSF    03.7
070C:  MOVF   00,W
070D:  ANDLW  01
070E:  SUBLW  01
070F:  BTFSS  03.2
0710:  GOTO   777
....................         Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0711:  MOVF   1F,W
0712:  MOVWF  78
0713:  MOVF   20,W
0714:  MOVWF  7A
0715:  MOVF   78,W
0716:  MOVWF  22
0717:  MOVF   7A,W
0718:  MOVWF  23
0719:  MOVF   23,W
071A:  MOVWF  25
071B:  MOVF   22,W
071C:  MOVWF  24
071D:  MOVF   21,W
071E:  MOVWF  26
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0775:  GOTO   7D4
0776:  BSF    03.6
0777:  MOVLW  19
0778:  ADDWF  1F,W
0779:  MOVWF  04
077A:  BCF    03.7
077B:  BTFSC  20.0
077C:  BSF    03.7
077D:  MOVF   00,W
077E:  ANDLW  01
077F:  BTFSS  03.2
0780:  GOTO   7D5
....................  
....................         Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0781:  MOVF   1F,W
0782:  MOVWF  78
0783:  MOVF   20,W
0784:  MOVWF  7A
0785:  MOVF   78,W
0786:  MOVWF  22
0787:  MOVF   7A,W
0788:  MOVWF  23
0789:  MOVF   23,W
078A:  MOVWF  25
078B:  MOVF   22,W
078C:  MOVWF  24
....................     } 
*
07D5:  BCF    03.6
07D6:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0C08:  MOVLW  19
0C09:  BSF    03.6
0C0A:  ADDWF  1F,W
0C0B:  MOVWF  04
0C0C:  BCF    03.7
0C0D:  BTFSC  20.0
0C0E:  BSF    03.7
0C0F:  MOVF   00,W
0C10:  ANDLW  01
0C11:  SUBLW  01
0C12:  BTFSS  03.2
0C13:  GOTO   470
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0C14:  MOVF   1F,W
0C15:  MOVWF  78
0C16:  MOVF   20,W
0C17:  MOVWF  7A
0C18:  MOVF   78,W
0C19:  MOVWF  21
0C1A:  MOVF   7A,W
0C1B:  MOVWF  22
0C1C:  MOVF   22,W
0C1D:  MOVWF  24
0C1E:  MOVF   21,W
0C1F:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0C6E:  GOTO   4D4
0C6F:  BSF    03.6
0C70:  MOVLW  19
0C71:  ADDWF  1F,W
0C72:  MOVWF  04
0C73:  BCF    03.7
0C74:  BTFSC  20.0
0C75:  BSF    03.7
0C76:  MOVF   00,W
0C77:  ANDLW  01
0C78:  BTFSS  03.2
0C79:  GOTO   4D5
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0C7A:  MOVF   1F,W
0C7B:  MOVWF  78
0C7C:  MOVF   20,W
0C7D:  MOVWF  7A
0C7E:  MOVF   78,W
0C7F:  MOVWF  21
0C80:  MOVF   7A,W
0C81:  MOVWF  22
0C82:  MOVF   22,W
0C83:  MOVWF  24
0C84:  MOVF   21,W
0C85:  MOVWF  23
....................     } 
*
0CD5:  BCF    03.6
0CD6:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
11EA:  MOVLW  19
11EB:  ADDWF  1F,W
11EC:  MOVWF  04
11ED:  BCF    03.7
11EE:  BTFSC  20.0
11EF:  BSF    03.7
11F0:  MOVF   00,W
11F1:  ANDLW  01
11F2:  SUBLW  01
11F3:  BTFSS  03.2
11F4:  GOTO   259
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
11F5:  MOVF   1F,W
11F6:  MOVWF  78
11F7:  MOVF   20,W
11F8:  MOVWF  7A
11F9:  MOVF   78,W
11FA:  MOVWF  21
11FB:  MOVF   7A,W
11FC:  MOVWF  22
11FD:  MOVF   22,W
11FE:  MOVWF  24
11FF:  MOVF   21,W
1200:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1257:  GOTO   2C5
1258:  BSF    03.6
1259:  MOVLW  19
125A:  ADDWF  1F,W
125B:  MOVWF  04
125C:  BCF    03.7
125D:  BTFSC  20.0
125E:  BSF    03.7
125F:  MOVF   00,W
1260:  ANDLW  01
1261:  BTFSS  03.2
1262:  GOTO   2C6
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1263:  MOVF   1F,W
1264:  MOVWF  78
1265:  MOVF   20,W
1266:  MOVWF  7A
1267:  MOVF   78,W
1268:  MOVWF  21
1269:  MOVF   7A,W
126A:  MOVWF  22
126B:  MOVF   22,W
126C:  MOVWF  24
126D:  MOVF   21,W
126E:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1069:  MOVLW  19
106A:  ADDWF  1F,W
106B:  MOVWF  04
106C:  BCF    03.7
106D:  BTFSC  20.0
106E:  BSF    03.7
106F:  MOVF   00,W
1070:  ANDLW  01
1071:  SUBLW  01
1072:  BTFSS  03.2
1073:  GOTO   0D6
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1074:  MOVF   1F,W
1075:  MOVWF  78
1076:  MOVF   20,W
1077:  MOVWF  7A
1078:  MOVF   78,W
1079:  MOVWF  21
107A:  MOVF   7A,W
107B:  MOVWF  22
107C:  MOVF   22,W
107D:  MOVWF  24
107E:  MOVF   21,W
107F:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
10D4:  GOTO   140
10D5:  BSF    03.6
10D6:  MOVLW  19
10D7:  ADDWF  1F,W
10D8:  MOVWF  04
10D9:  BCF    03.7
10DA:  BTFSC  20.0
10DB:  BSF    03.7
10DC:  MOVF   00,W
10DD:  ANDLW  01
10DE:  BTFSS  03.2
10DF:  GOTO   141
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
10E0:  MOVF   1F,W
10E1:  MOVWF  78
10E2:  MOVF   20,W
10E3:  MOVWF  7A
10E4:  MOVF   78,W
10E5:  MOVWF  21
10E6:  MOVF   7A,W
10E7:  MOVWF  22
10E8:  MOVF   22,W
10E9:  MOVWF  24
10EA:  MOVF   21,W
10EB:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
135F:  CLRF   21
1360:  CLRF   22
1361:  CLRF   23
1362:  CLRF   24
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1363:  MOVLW  19
1364:  ADDWF  1F,W
1365:  MOVWF  04
1366:  BCF    03.7
1367:  BTFSC  20.0
1368:  BSF    03.7
1369:  MOVF   00,W
136A:  ANDLW  01
136B:  SUBLW  01
136C:  BTFSS  03.2
136D:  GOTO   376
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
136E:  MOVLW  25
136F:  MOVWF  21
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1370:  MOVLW  2D
1371:  MOVWF  22
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1372:  MOVLW  67
1373:  MOVWF  23
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1374:  MOVWF  24
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1375:  GOTO   387
1376:  MOVLW  19
1377:  ADDWF  1F,W
1378:  MOVWF  04
1379:  BCF    03.7
137A:  BTFSC  20.0
137B:  BSF    03.7
137C:  MOVF   00,W
137D:  ANDLW  01
137E:  BTFSS  03.2
137F:  GOTO   387
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
1380:  MOVLW  B3
1381:  MOVWF  21
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1382:  MOVLW  BB
1383:  MOVWF  22
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1384:  MOVLW  25
1385:  MOVWF  23
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1386:  MOVWF  24
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
1387:  MOVLW  01
1388:  MOVWF  36
1389:  MOVLW  21
138A:  MOVWF  35
138B:  MOVLW  04
138C:  MOVWF  37
138D:  BCF    0A.4
138E:  BCF    03.6
138F:  CALL   651
1390:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1150:  MOVLW  19
1151:  ADDWF  1F,W
1152:  MOVWF  04
1153:  BCF    03.7
1154:  BTFSC  20.0
1155:  BSF    03.7
1156:  MOVF   00,W
1157:  ANDLW  01
1158:  SUBLW  01
1159:  BTFSS  03.2
115A:  GOTO   197
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
115B:  MOVF   1F,W
115C:  MOVWF  78
115D:  MOVF   20,W
115E:  MOVWF  7A
115F:  MOVF   78,W
1160:  MOVWF  21
1161:  MOVF   7A,W
1162:  MOVWF  22
1163:  MOVF   22,W
1164:  MOVWF  24
1165:  MOVF   21,W
1166:  MOVWF  23
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1196:  GOTO   1B3
1197:  MOVLW  19
1198:  ADDWF  1F,W
1199:  MOVWF  04
119A:  BCF    03.7
119B:  BTFSC  20.0
119C:  BSF    03.7
119D:  MOVF   00,W
119E:  ANDLW  01
119F:  BTFSS  03.2
11A0:  GOTO   1B3
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
11A1:  MOVF   1F,W
11A2:  MOVWF  78
11A3:  MOVF   20,W
11A4:  MOVWF  7A
11A5:  MOVF   78,W
11A6:  MOVWF  21
11A7:  MOVF   20,W
11A8:  MOVWF  22
11A9:  MOVWF  24
11AA:  MOVF   21,W
11AB:  MOVWF  23
11AC:  BCF    0A.4
11AD:  BSF    0A.3
11AE:  BCF    03.6
11AF:  CALL   4D7
11B0:  BSF    0A.4
11B1:  BCF    0A.3
11B2:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
12D5:  MOVLW  19
12D6:  ADDWF  1F,W
12D7:  MOVWF  04
12D8:  BCF    03.7
12D9:  BTFSC  20.0
12DA:  BSF    03.7
12DB:  MOVF   00,W
12DC:  ANDLW  01
12DD:  SUBLW  01
12DE:  BTFSS  03.2
12DF:  GOTO   2F3
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
12E0:  MOVF   1F,W
12E1:  MOVWF  78
12E2:  MOVF   20,W
12E3:  MOVWF  7A
12E4:  MOVF   1F,W
12E5:  MOVWF  21
12E6:  MOVF   20,W
12E7:  MOVWF  22
12E8:  MOVWF  24
12E9:  MOVF   1F,W
12EA:  MOVWF  23
12EB:  BCF    0A.4
12EC:  BSF    0A.3
12ED:  BCF    03.6
12EE:  CALL   4D7
12EF:  BSF    0A.4
12F0:  BCF    0A.3
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
12F1:  GOTO   339
12F2:  BSF    03.6
12F3:  MOVLW  19
12F4:  ADDWF  1F,W
12F5:  MOVWF  04
12F6:  BCF    03.7
12F7:  BTFSC  20.0
12F8:  BSF    03.7
12F9:  MOVF   00,W
12FA:  ANDLW  01
12FB:  BTFSS  03.2
12FC:  GOTO   338
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
12FD:  MOVF   1F,W
12FE:  MOVWF  78
12FF:  MOVF   20,W
1300:  MOVWF  7A
1301:  MOVF   78,W
1302:  MOVWF  21
1303:  MOVF   7A,W
1304:  MOVWF  22
1305:  MOVF   22,W
1306:  MOVWF  24
1307:  MOVF   21,W
1308:  MOVWF  23
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
139C:  MOVLW  19
139D:  ADDWF  1F,W
139E:  MOVWF  04
139F:  BCF    03.7
13A0:  BTFSC  20.0
13A1:  BSF    03.7
13A2:  MOVF   00,W
13A3:  ANDLW  01
13A4:  SUBLW  01
13A5:  BTFSS  03.2
13A6:  GOTO   3E3
....................         polyoneDisplayPtr->timer.limitTime.second = polyoneDisplayPtr->timer.limitTime.minute; 
13A7:  MOVLW  0C
13A8:  ADDWF  1F,W
13A9:  MOVWF  78
13AA:  MOVF   20,W
13AB:  MOVWF  7A
13AC:  BTFSC  03.0
13AD:  INCF   7A,F
13AE:  MOVF   78,W
13AF:  MOVWF  21
13B0:  MOVF   7A,W
13B1:  MOVWF  22
13B2:  MOVLW  0B
13B3:  ADDWF  1F,W
13B4:  MOVWF  04
13B5:  BCF    03.7
13B6:  BTFSC  20.0
13B7:  BSF    03.7
13B8:  MOVF   00,W
13B9:  MOVWF  23
13BA:  MOVF   21,W
13BB:  MOVWF  04
13BC:  BCF    03.7
13BD:  BTFSC  22.0
13BE:  BSF    03.7
13BF:  MOVF   23,W
13C0:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.hour; 
13C1:  MOVLW  0B
13C2:  ADDWF  1F,W
13C3:  MOVWF  78
13C4:  MOVF   20,W
13C5:  MOVWF  7A
13C6:  BTFSC  03.0
13C7:  INCF   7A,F
13C8:  MOVF   78,W
13C9:  MOVWF  21
13CA:  MOVF   7A,W
13CB:  MOVWF  22
13CC:  MOVLW  0A
13CD:  ADDWF  1F,W
13CE:  MOVWF  04
13CF:  BCF    03.7
13D0:  BTFSC  20.0
13D1:  BSF    03.7
13D2:  MOVF   00,W
13D3:  MOVWF  23
13D4:  MOVF   21,W
13D5:  MOVWF  04
13D6:  BCF    03.7
13D7:  BTFSC  22.0
13D8:  BSF    03.7
13D9:  MOVF   23,W
13DA:  MOVWF  00
....................         polyoneDisplayPtr->format = FORMAT_MINUTES_SECONDS; 
13DB:  MOVLW  19
13DC:  ADDWF  1F,W
13DD:  MOVWF  04
13DE:  BCF    03.7
13DF:  BTFSC  20.0
13E0:  BSF    03.7
13E1:  BCF    00.0
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
13E2:  GOTO   428
13E3:  MOVLW  19
13E4:  ADDWF  1F,W
13E5:  MOVWF  04
13E6:  BCF    03.7
13E7:  BTFSC  20.0
13E8:  BSF    03.7
13E9:  MOVF   00,W
13EA:  ANDLW  01
13EB:  BTFSS  03.2
13EC:  GOTO   428
....................         polyoneDisplayPtr->timer.limitTime.hour = polyoneDisplayPtr->timer.limitTime.minute; 
13ED:  MOVLW  0A
13EE:  ADDWF  1F,W
13EF:  MOVWF  78
13F0:  MOVF   20,W
13F1:  MOVWF  7A
13F2:  BTFSC  03.0
13F3:  INCF   7A,F
13F4:  MOVF   78,W
13F5:  MOVWF  21
13F6:  MOVF   7A,W
13F7:  MOVWF  22
13F8:  MOVLW  0B
13F9:  ADDWF  1F,W
13FA:  MOVWF  04
13FB:  BCF    03.7
13FC:  BTFSC  20.0
13FD:  BSF    03.7
13FE:  MOVF   00,W
13FF:  MOVWF  23
1400:  MOVF   21,W
1401:  MOVWF  04
1402:  BCF    03.7
1403:  BTFSC  22.0
1404:  BSF    03.7
1405:  MOVF   23,W
1406:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.second; 
1407:  MOVLW  0B
1408:  ADDWF  1F,W
1409:  MOVWF  78
140A:  MOVF   20,W
140B:  MOVWF  7A
140C:  BTFSC  03.0
140D:  INCF   7A,F
140E:  MOVF   78,W
140F:  MOVWF  21
1410:  MOVF   7A,W
1411:  MOVWF  22
1412:  MOVLW  0C
1413:  ADDWF  1F,W
1414:  MOVWF  04
1415:  BCF    03.7
1416:  BTFSC  20.0
1417:  BSF    03.7
1418:  MOVF   00,W
1419:  MOVWF  23
141A:  MOVF   21,W
141B:  MOVWF  04
141C:  BCF    03.7
141D:  BTFSC  22.0
141E:  BSF    03.7
141F:  MOVF   23,W
1420:  MOVWF  00
....................          polyoneDisplayPtr->format = FORMAT_HOURS_MINUTES; 
1421:  MOVLW  19
1422:  ADDWF  1F,W
1423:  MOVWF  04
1424:  BCF    03.7
1425:  BTFSC  20.0
1426:  BSF    03.7
1427:  BSF    00.0
1428:  BCF    03.6
....................     } 
....................     //    polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0ACE:  MOVF   1F,W
0ACF:  MOVWF  78
0AD0:  MOVF   20,W
0AD1:  MOVWF  7A
0AD2:  MOVF   78,W
0AD3:  MOVWF  21
0AD4:  MOVF   7A,W
0AD5:  MOVWF  22
0AD6:  MOVF   22,W
0AD7:  MOVWF  24
0AD8:  MOVF   21,W
0AD9:  MOVWF  23
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
1022:  MOVLW  1B
1023:  ADDWF  1F,W
1024:  MOVWF  78
1025:  MOVF   20,W
1026:  MOVWF  7A
1027:  BTFSC  03.0
1028:  INCF   7A,F
1029:  MOVF   78,W
102A:  MOVWF  22
102B:  MOVF   7A,W
102C:  MOVWF  23
102D:  MOVLW  1A
102E:  ADDWF  1F,W
102F:  MOVWF  04
1030:  BCF    03.7
1031:  BTFSC  20.0
1032:  BSF    03.7
1033:  MOVF   00,W
1034:  MOVWF  24
1035:  MOVF   22,W
1036:  MOVWF  04
1037:  BCF    03.7
1038:  BTFSC  23.0
1039:  BSF    03.7
103A:  MOVF   24,W
103B:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
103C:  MOVLW  1A
103D:  ADDWF  1F,W
103E:  MOVWF  04
103F:  BCF    03.7
1040:  BTFSC  20.0
1041:  BSF    03.7
1042:  MOVF   21,W
1043:  MOVWF  00
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0AAA:  MOVLW  1B
0AAB:  ADDWF  1F,W
0AAC:  MOVWF  78
0AAD:  MOVF   20,W
0AAE:  MOVWF  7A
0AAF:  BTFSC  03.0
0AB0:  INCF   7A,F
0AB1:  MOVF   78,W
0AB2:  MOVWF  21
0AB3:  MOVF   7A,W
0AB4:  MOVWF  22
0AB5:  MOVLW  1A
0AB6:  ADDWF  1F,W
0AB7:  MOVWF  04
0AB8:  BCF    03.7
0AB9:  BTFSC  20.0
0ABA:  BSF    03.7
0ABB:  MOVF   00,W
0ABC:  MOVWF  23
0ABD:  MOVF   21,W
0ABE:  MOVWF  04
0ABF:  BCF    03.7
0AC0:  BTFSC  22.0
0AC1:  BSF    03.7
0AC2:  MOVF   23,W
0AC3:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0AC4:  MOVLW  1A
0AC5:  ADDWF  1F,W
0AC6:  MOVWF  04
0AC7:  BCF    03.7
0AC8:  BTFSC  20.0
0AC9:  BSF    03.7
0ACA:  CLRF   00
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0800:  MOVLW  1C
0801:  BSF    03.6
0802:  ADDWF  1F,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  20.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  21
0809:  MOVLW  1A
080A:  ADDWF  1F,W
080B:  MOVWF  04
080C:  BCF    03.7
080D:  BTFSC  20.0
080E:  BSF    03.7
080F:  MOVF   00,W
0810:  MOVWF  22
0811:  BCF    03.6
0812:  MOVF   0B,W
0813:  MOVWF  77
0814:  BCF    0B.7
0815:  BSF    03.6
0816:  MOVF   21,W
0817:  MOVWF  0D
0818:  MOVF   22,W
0819:  MOVWF  0C
081A:  BSF    03.5
081B:  BCF    0C.7
081C:  BSF    0C.2
081D:  MOVLW  55
081E:  MOVWF  0D
081F:  MOVLW  AA
0820:  MOVWF  0D
0821:  BSF    0C.1
0822:  BTFSC  0C.1
0823:  GOTO   022
0824:  BCF    0C.2
0825:  MOVF   77,W
0826:  BCF    03.5
0827:  BCF    03.6
0828:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0829:  MOVLW  1D
082A:  BSF    03.6
082B:  ADDWF  1F,W
082C:  MOVWF  04
082D:  BCF    03.7
082E:  BTFSC  20.0
082F:  BSF    03.7
0830:  MOVF   00,W
0831:  MOVWF  21
0832:  MOVLW  1B
0833:  ADDWF  1F,W
0834:  MOVWF  04
0835:  BCF    03.7
0836:  BTFSC  20.0
0837:  BSF    03.7
0838:  MOVF   00,W
0839:  MOVWF  22
083A:  BCF    03.6
083B:  MOVF   0B,W
083C:  MOVWF  77
083D:  BCF    0B.7
083E:  BSF    03.6
083F:  MOVF   21,W
0840:  MOVWF  0D
0841:  MOVF   22,W
0842:  MOVWF  0C
0843:  BSF    03.5
0844:  BCF    0C.7
0845:  BSF    0C.2
0846:  MOVLW  55
0847:  MOVWF  0D
0848:  MOVLW  AA
0849:  MOVWF  0D
084A:  BSF    0C.1
084B:  BTFSC  0C.1
084C:  GOTO   04B
084D:  BCF    0C.2
084E:  MOVF   77,W
084F:  BCF    03.5
0850:  BCF    03.6
0851:  IORWF  0B,F
0852:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
0A4B:  MOVLW  1A
0A4C:  ADDWF  1F,W
0A4D:  MOVWF  04
0A4E:  BCF    03.7
0A4F:  BTFSC  20.0
0A50:  BSF    03.7
0A51:  MOVF   00,W
0A52:  MOVWF  21
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
0A53:  MOVLW  1A
0A54:  ADDWF  1F,W
0A55:  MOVWF  78
0A56:  MOVF   20,W
0A57:  MOVWF  7A
0A58:  BTFSC  03.0
0A59:  INCF   7A,F
0A5A:  MOVF   78,W
0A5B:  MOVWF  22
0A5C:  MOVF   7A,W
0A5D:  MOVWF  23
0A5E:  MOVLW  1B
0A5F:  ADDWF  1F,W
0A60:  MOVWF  04
0A61:  BCF    03.7
0A62:  BTFSC  20.0
0A63:  BSF    03.7
0A64:  MOVF   00,W
0A65:  MOVWF  24
0A66:  MOVF   22,W
0A67:  MOVWF  04
0A68:  BCF    03.7
0A69:  BTFSC  23.0
0A6A:  BSF    03.7
0A6B:  MOVF   24,W
0A6C:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
0A6D:  MOVLW  1B
0A6E:  ADDWF  1F,W
0A6F:  MOVWF  04
0A70:  BCF    03.7
0A71:  BTFSC  20.0
0A72:  BSF    03.7
0A73:  MOVF   21,W
0A74:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
0B67:  MOVF   1F,W
0B68:  MOVWF  78
0B69:  MOVF   20,W
0B6A:  MOVWF  7A
0B6B:  MOVF   78,W
0B6C:  MOVWF  21
0B6D:  MOVF   7A,W
0B6E:  MOVWF  22
0B6F:  MOVF   22,W
0B70:  MOVWF  24
0B71:  MOVF   21,W
0B72:  MOVWF  23
*
0B9E:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  BUTTON_START_STOP_RESET    PIN_B1 
.................... #define  BUTTON_MENU                PIN_B0 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
.................... } EEPROM_ADDRESS; 
....................  
.................... typedef void (*StateMachineFunction)(void); 
....................  
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void StateMachine_idle(void); 
.................... void StateMachine_countingUp(void); 
.................... void StateMachine_countingDown(void); 
.................... void StateMachine_init(void); 
.................... void StateMachine_resetting(void); 
.................... void StateMachine_ready(void); 
.................... void StateMachine_settingFirstNumber(void); 
.................... void StateMachine_settingSecondNumber(void); 
.................... void StateMachine_settingFormat(void); 
.................... void StateMachine_waitingForButtonBeingReleased(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void (*functionPtr)(void); 
....................  
.................... void main(void) { 
*
0D80:  MOVF   03,W
0D81:  ANDLW  1F
0D82:  MOVWF  03
0D83:  MOVLW  FF
0D84:  MOVWF  20
0D85:  BSF    3E.0
0D86:  BSF    3E.1
0D87:  BSF    3E.2
0D88:  BSF    3E.3
0D89:  BSF    3E.4
0D8A:  CLRF   5F
0D8B:  CLRF   62
0D8C:  CLRF   63
0D8D:  BSF    03.5
0D8E:  BSF    03.6
0D8F:  MOVF   09,W
0D90:  ANDLW  C0
0D91:  MOVWF  09
0D92:  BCF    03.6
0D93:  BCF    1F.4
0D94:  BCF    1F.5
0D95:  MOVLW  00
0D96:  BSF    03.6
0D97:  MOVWF  08
0D98:  BCF    03.5
0D99:  CLRF   07
0D9A:  CLRF   08
0D9B:  CLRF   09
0D9C:  BCF    03.7
....................     setupHardware(); 
0D9D:  BCF    03.6
0D9E:  GOTO   556
....................  
....................     myPolyoneDisplay.currentState = STATE_INIT; 
0D9F:  MOVLW  03
0DA0:  MOVWF  59
....................     //    functionPtr = StateMachine_init; 
....................  
....................     rtos_run(); 
0DA1:  CLRF   22
0DA2:  CLRF   24
0DA3:  MOVLW  05
0DA4:  MOVWF  23
0DA5:  CLRF   26
0DA6:  CLRF   25
0DA7:  MOVLW  09
0DA8:  MOVWF  27
0DA9:  MOVLW  0D
0DAA:  MOVWF  28
0DAB:  CLRF   29
0DAC:  CLRF   2B
0DAD:  MOVLW  05
0DAE:  MOVWF  2A
0DAF:  CLRF   2D
0DB0:  MOVLW  01
0DB1:  MOVWF  2C
0DB2:  MOVLW  27
0DB3:  MOVWF  2E
0DB4:  MOVLW  0D
0DB5:  MOVWF  2F
0DB6:  CLRF   30
0DB7:  CLRF   32
0DB8:  MOVLW  01
0DB9:  MOVWF  31
0DBA:  CLRF   34
0DBB:  CLRF   33
0DBC:  MOVLW  00
0DBD:  MOVWF  35
0DBE:  MOVLW  10
0DBF:  MOVWF  36
0DC0:  CLRF   37
0DC1:  CLRF   39
0DC2:  MOVLW  14
0DC3:  MOVWF  38
0DC4:  CLRF   3B
0DC5:  MOVLW  02
0DC6:  MOVWF  3A
0DC7:  MOVLW  45
0DC8:  MOVWF  3C
0DC9:  MOVLW  0D
0DCA:  MOVWF  3D
0DCB:  CLRF   21
0DCC:  BSF    03.5
0DCD:  MOVF   01,W
0DCE:  ANDLW  C0
0DCF:  IORLW  07
0DD0:  MOVWF  01
0DD1:  MOVLW  3D
0DD2:  BCF    03.5
0DD3:  MOVWF  01
0DD4:  BCF    0B.2
0DD5:  BCF    03.0
0DD6:  RLF    21,W
0DD7:  MOVWF  77
0DD8:  BCF    0A.3
0DD9:  CALL   023
0DDA:  BSF    0A.3
0DDB:  MOVWF  79
0DDC:  MOVLW  01
0DDD:  ADDWF  77,W
0DDE:  BCF    0A.3
0DDF:  CALL   023
0DE0:  BSF    0A.3
0DE1:  MOVWF  7A
0DE2:  MOVF   79,W
0DE3:  MOVWF  04
0DE4:  BCF    03.7
0DE5:  BTFSC  7A.0
0DE6:  BSF    03.7
0DE7:  MOVF   00,W
0DE8:  MOVWF  79
0DE9:  INCF   04,F
0DEA:  MOVF   00,W
0DEB:  MOVWF  77
0DEC:  INCF   04,F
0DED:  MOVF   00,W
0DEE:  MOVWF  78
0DEF:  INCF   04,F
0DF0:  INCF   00,F
0DF1:  MOVF   00,W
0DF2:  MOVWF  7A
0DF3:  BTFSS  03.2
0DF4:  GOTO   5F8
0DF5:  INCF   04,F
0DF6:  INCF   00,F
0DF7:  DECF   04,F
0DF8:  INCF   04,F
0DF9:  MOVF   00,W
0DFA:  SUBWF  78,W
0DFB:  BTFSS  03.2
0DFC:  GOTO   610
0DFD:  MOVF   77,W
0DFE:  SUBWF  7A,W
0DFF:  BTFSS  03.2
0E00:  GOTO   610
0E01:  DECF   04,F
0E02:  CLRF   00
0E03:  INCF   04,F
0E04:  CLRF   00
0E05:  INCF   04,F
0E06:  BTFSC  79.7
0E07:  GOTO   610
0E08:  INCF   04,F
0E09:  MOVF   00,W
0E0A:  MOVWF  0A
0E0B:  DECF   04,F
0E0C:  MOVF   00,W
0E0D:  MOVWF  02
0E0E:  BCF    03.5
0E0F:  BCF    03.6
0E10:  INCF   21,F
0E11:  MOVLW  04
0E12:  SUBWF  21,W
0E13:  BTFSS  03.2
0E14:  GOTO   5D5
0E15:  CLRF   21
0E16:  MOVF   01,W
0E17:  BTFSS  0B.2
0E18:  GOTO   61B
0E19:  BSF    03.5
0E1A:  GOTO   5D1
0E1B:  GOTO   616
0E1C:  MOVLW  FF
0E1D:  MOVWF  21
.................... } 
....................  
0E1E:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
0853:  MOVF   59,W
0854:  ADDLW  F6
0855:  BTFSC  03.0
0856:  GOTO   3F4
0857:  ADDLW  0A
0858:  GOTO   3F7
....................         case STATE_INIT: 
....................             StateMachine_init(); 
....................             break; 
*
0A3F:  GOTO   3F4
....................  
....................         case STATE_IDLE: 
....................             StateMachine_idle(); 
....................             break; 
*
0A87:  GOTO   3F4
....................  
....................         case STATE_COUNTING_DOWN: 
....................             StateMachine_countingDown(); 
....................             break; 
*
0BA6:  BCF    03.6
0BA7:  GOTO   3F4
....................  
....................         case STATE_COUNTING_UP: 
....................  
....................             break; 
0BA8:  GOTO   3F4
....................  
....................         case STATE_RESETTING: 
....................             StateMachine_resetting(); 
....................             break; 
*
0BE7:  GOTO   3F4
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             StateMachine_waitingForButtonBeingReleased(); 
....................             break; 
....................     } 
*
0BF4:  BCF    0A.3
0BF5:  BSF    0A.4
0BF6:  GOTO   003 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1000:  BCF    0A.4
1001:  BSF    0A.3
1002:  GOTO   053
1003:  BSF    0A.4
1004:  BCF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1005:  MOVLW  05
1006:  SUBWF  59,W
1007:  ADDLW  FC
1008:  BTFSC  03.0
1009:  GOTO   432
100A:  ADDLW  04
100B:  GOTO   44D
....................  
....................         case STATE_READY: 
....................             StateMachine_ready(); 
....................             break; 
*
1057:  GOTO   432
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             StateMachine_settingFirstNumber(); 
....................  
....................             break; 
*
11D8:  GOTO   432
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             StateMachine_settingSecondNumber(); 
....................             break; 
*
135A:  GOTO   432
....................  
....................         case STATE_SETTING_FORMAT: 
....................             StateMachine_settingFormat(); 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(BUTTON_START_STOP_RESET); 
*
1432:  BSF    03.5
1433:  BSF    06.1
1434:  BCF    03.5
1435:  BCF    3E.3
1436:  BTFSC  06.1
1437:  BSF    3E.3
....................     menuButtonState = input(BUTTON_MENU); 
1438:  BSF    03.5
1439:  BSF    06.0
143A:  BCF    03.5
143B:  BCF    3E.4
143C:  BTFSC  06.0
143D:  BSF    3E.4
....................     rtos_yield(); 
143E:  MOVLW  45
143F:  MOVWF  35
1440:  MOVLW  14
1441:  MOVWF  36
1442:  BSF    0A.3
1443:  BCF    0A.4
1444:  GOTO   60E
1445:  MOVLW  00
1446:  MOVWF  35
1447:  MOVLW  10
1448:  MOVWF  36
1449:  BSF    0A.3
144A:  BCF    0A.4
144B:  GOTO   60E
144C:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
0D09:  BSF    03.5
0D0A:  BSF    06.1
0D0B:  BCF    03.5
0D0C:  BTFSC  06.1
0D0D:  GOTO   510
....................         nextUpButtonCounter++; 
0D0E:  INCF   62,F
....................     } else { 
0D0F:  GOTO   512
....................         nextUpButtonCounter = 0; 
0D10:  CLRF   62
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D11:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0D12:  MOVF   62,W
0D13:  SUBLW  13
0D14:  BTFSC  03.0
0D15:  GOTO   518
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0D16:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0D17:  CLRF   62
....................     } 
....................     rtos_yield(); 
0D18:  MOVLW  1F
0D19:  MOVWF  27
0D1A:  MOVLW  0D
0D1B:  MOVWF  28
0D1C:  BSF    0A.3
0D1D:  BCF    0A.4
0D1E:  GOTO   60E
0D1F:  MOVLW  09
0D20:  MOVWF  27
0D21:  MOVLW  0D
0D22:  MOVWF  28
0D23:  BSF    0A.3
0D24:  BCF    0A.4
0D25:  GOTO   60E
0D26:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(BUTTON_MENU)) { 
0D27:  BSF    03.5
0D28:  BSF    06.0
0D29:  BCF    03.5
0D2A:  BTFSC  06.0
0D2B:  GOTO   52E
....................         menuButtonCounter++; 
0D2C:  INCF   63,F
....................     } else { 
0D2D:  GOTO   530
....................         menuButtonCounter = 0; 
0D2E:  CLRF   63
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0D2F:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0D30:  MOVF   63,W
0D31:  SUBLW  0C
0D32:  BTFSC  03.0
0D33:  GOTO   536
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0D34:  BCF    3E.2
....................         menuButtonCounter = 0; 
0D35:  CLRF   63
....................     } 
....................     rtos_yield(); 
0D36:  MOVLW  3D
0D37:  MOVWF  2E
0D38:  MOVLW  0D
0D39:  MOVWF  2F
0D3A:  BSF    0A.3
0D3B:  BCF    0A.4
0D3C:  GOTO   60E
0D3D:  MOVLW  27
0D3E:  MOVWF  2E
0D3F:  MOVLW  0D
0D40:  MOVWF  2F
0D41:  BSF    0A.3
0D42:  BCF    0A.4
0D43:  GOTO   60E
0D44:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0D45:  MOVLW  01
0D46:  XORWF  3E,F
....................     rtos_yield(); 
0D47:  MOVLW  4E
0D48:  MOVWF  3C
0D49:  MOVLW  0D
0D4A:  MOVWF  3D
0D4B:  BSF    0A.3
0D4C:  BCF    0A.4
0D4D:  GOTO   60E
0D4E:  MOVLW  45
0D4F:  MOVWF  3C
0D50:  MOVLW  0D
0D51:  MOVWF  3D
0D52:  BSF    0A.3
0D53:  BCF    0A.4
0D54:  GOTO   60E
0D55:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
0D56:  MOVLW  00
0D57:  MOVWF  78
0D58:  IORLW  06
0D59:  MOVWF  12
0D5A:  MOVLW  FF
0D5B:  BSF    03.5
0D5C:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0D5D:  BCF    03.5
0D5E:  BCF    20.2
0D5F:  MOVF   20,W
0D60:  BSF    03.5
0D61:  MOVWF  07
0D62:  BCF    03.5
0D63:  BCF    07.2
0D64:  MOVLW  0E
0D65:  MOVWF  17
0D66:  BSF    03.5
0D67:  CLRF   1B
0D68:  CLRF   1C
0D69:  MOVLW  01
0D6A:  MOVWF  1D
....................  
....................     delay_ms(500); 
0D6B:  MOVLW  02
0D6C:  BCF    03.5
0D6D:  MOVWF  64
0D6E:  MOVLW  FA
0D6F:  BSF    03.6
0D70:  MOVWF  20
0D71:  BCF    0A.3
0D72:  BCF    03.6
0D73:  CALL   7DE
0D74:  BSF    0A.3
0D75:  DECFSZ 64,F
0D76:  GOTO   56E
....................     port_b_pullups(0xFF); 
0D77:  MOVLW  FF
0D78:  BSF    03.5
0D79:  MOVWF  15
0D7A:  BCF    01.7
....................     WPUB = 0xFF; 
0D7B:  MOVWF  15
0D7C:  BCF    03.5
0D7D:  BSF    0A.3
0D7E:  BCF    0A.4
0D7F:  GOTO   59F (RETURN)
.................... } 
....................  
.................... void StateMachine_init(void) { 
....................     output_high(PIN_B3); 
*
0859:  BSF    03.5
085A:  BCF    06.3
085B:  BCF    03.5
085C:  BSF    06.3
....................     myPolyoneDisplay = PolyoneDisplay_new( 
....................             EEPROM_CURRENT_STATE, 
....................             EEPROM_PREVIOUS_STATE, 
....................             EEPROM_FORMAT, 
....................             EEPROM_FIRST_NUMBER, 
....................             EEPROM_SECOND_NUMBER, 
....................             EEPROM_RTC_HOURS, 
....................             EEPROM_RTC_MINUTES, 
....................             EEPROM_RTC_SECONDS 
....................             ); 
085D:  BSF    03.6
085E:  CLRF   26
085F:  CLRF   25
0860:  CLRF   28
0861:  MOVLW  01
0862:  MOVWF  27
0863:  CLRF   2A
0864:  MOVLW  02
0865:  MOVWF  29
0866:  CLRF   2C
0867:  MOVLW  03
0868:  MOVWF  2B
0869:  CLRF   2E
086A:  MOVLW  04
086B:  MOVWF  2D
086C:  CLRF   30
086D:  MOVLW  05
086E:  MOVWF  2F
086F:  CLRF   32
0870:  MOVLW  06
0871:  MOVWF  31
0872:  CLRF   34
0873:  MOVLW  07
0874:  MOVWF  33
*
0A15:  MOVF   79,W
0A16:  MOVWF  7A
0A17:  MOVF   78,W
0A18:  BSF    03.6
0A19:  MOVWF  1F
0A1A:  MOVF   7A,W
0A1B:  MOVWF  20
0A1C:  CLRF   22
0A1D:  MOVLW  3F
0A1E:  MOVWF  21
0A1F:  MOVLW  1F
0A20:  MOVWF  78
0A21:  MOVF   1F,W
0A22:  MOVWF  04
0A23:  BCF    03.7
0A24:  BTFSC  20.0
0A25:  BSF    03.7
0A26:  MOVF   00,W
0A27:  MOVWF  77
0A28:  MOVF   21,W
0A29:  MOVWF  04
0A2A:  BCF    03.7
0A2B:  BTFSC  22.0
0A2C:  BSF    03.7
0A2D:  MOVF   77,W
0A2E:  MOVWF  00
0A2F:  INCF   21,F
0A30:  BTFSC  03.2
0A31:  INCF   22,F
0A32:  INCF   1F,F
0A33:  BTFSC  03.2
0A34:  INCF   20,F
0A35:  DECFSZ 78,F
0A36:  GOTO   221
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0A37:  CLRF   20
0A38:  MOVLW  3F
0A39:  MOVWF  1F
0A3A:  CLRF   21
0A3B:  BCF    0A.3
0A3C:  BCF    03.6
0A3D:  CALL   705
0A3E:  BSF    0A.3
....................      
.................... } 
....................  
.................... void StateMachine_idle(void) { 
....................  
....................     if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
*
0A40:  BSF    03.5
0A41:  BSF    06.1
0A42:  BCF    03.5
0A43:  BTFSS  06.1
0A44:  GOTO   282
0A45:  BTFSC  3E.3
0A46:  GOTO   282
....................         PolyoneDisplay_resume(&myPolyoneDisplay); 
0A47:  BSF    03.6
0A48:  CLRF   20
0A49:  MOVLW  3F
0A4A:  MOVWF  1F
....................         PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0A75:  CLRF   20
0A76:  MOVLW  3F
0A77:  MOVWF  1F
0A78:  BCF    03.6
0A79:  CALL   000
....................         PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
0A7A:  BSF    03.6
0A7B:  CLRF   55
0A7C:  MOVLW  3F
0A7D:  MOVWF  54
0A7E:  BCF    0A.3
0A7F:  BCF    03.6
0A80:  CALL   541
0A81:  BSF    0A.3
....................  
....................     } 
....................     if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0A82:  BTFSC  3E.1
0A83:  GOTO   287
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0A84:  BSF    3E.1
....................         myPolyoneDisplay.currentState = STATE_RESETTING; 
0A85:  MOVLW  04
0A86:  MOVWF  59
....................     } 
.................... } 
....................  
.................... void StateMachine_countingUp(void) { 
....................  
.................... } 
....................  
.................... void StateMachine_countingDown(void) { 
....................     PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
*
0A88:  BSF    03.6
0A89:  CLRF   55
0A8A:  MOVLW  3F
0A8B:  MOVWF  54
0A8C:  BCF    0A.3
0A8D:  BCF    03.6
0A8E:  CALL   2D2
0A8F:  BSF    0A.3
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0A90:  BSF    03.6
0A91:  CLRF   20
0A92:  MOVLW  3F
0A93:  MOVWF  1F
0A94:  MOVLW  01
0A95:  MOVWF  21
0A96:  BCF    0A.3
0A97:  BCF    03.6
0A98:  CALL   705
0A99:  BSF    0A.3
....................  
....................     if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0A9A:  BTFSC  3E.1
0A9B:  GOTO   29F
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0A9C:  BSF    3E.1
....................         myPolyoneDisplay.currentState = STATE_RESETTING; 
0A9D:  MOVLW  04
0A9E:  MOVWF  59
....................     } 
....................     if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0A9F:  BSF    03.5
0AA0:  BSF    06.1
0AA1:  BCF    03.5
0AA2:  BTFSS  06.1
0AA3:  GOTO   363
0AA4:  BTFSC  3E.3
0AA5:  GOTO   363
....................         PolyoneDisplay_stop(&myPolyoneDisplay); 
0AA6:  BSF    03.6
0AA7:  CLRF   20
0AA8:  MOVLW  3F
0AA9:  MOVWF  1F
....................         PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
*
0ACB:  CLRF   20
0ACC:  MOVLW  3F
0ACD:  MOVWF  1F
....................         PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0B54:  BSF    03.6
0B55:  CLRF   20
0B56:  MOVLW  3F
0B57:  MOVWF  1F
0B58:  BCF    03.6
0B59:  CALL   000
....................         PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0B5A:  BSF    03.6
0B5B:  CLRF   20
0B5C:  MOVLW  3F
0B5D:  MOVWF  1F
0B5E:  CLRF   21
0B5F:  BCF    0A.3
0B60:  BCF    03.6
0B61:  CALL   705
0B62:  BSF    0A.3
....................     } 
....................     if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
0B63:  BSF    03.6
0B64:  CLRF   20
0B65:  MOVLW  3F
0B66:  MOVWF  1F
*
0B9F:  MOVF   78,F
0BA0:  BTFSC  03.2
0BA1:  GOTO   3A6
....................  
....................         myPolyoneDisplay.currentState = STATE_COUNTING_UP; 
0BA2:  MOVLW  01
0BA3:  BCF    03.6
0BA4:  MOVWF  59
0BA5:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void StateMachine_resetting(void) { 
....................     Time_clearRtcTime(); 
*
0BA9:  BCF    0A.3
0BAA:  CALL   7D7
0BAB:  BSF    0A.3
....................     SeventSegmentDisplay_showHyphens(); 
....................     delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
0BC1:  MOVLW  08
0BC2:  BSF    03.6
0BC3:  MOVWF  1F
0BC4:  MOVLW  FA
0BC5:  MOVWF  20
0BC6:  BCF    0A.3
0BC7:  BCF    03.6
0BC8:  CALL   7DE
0BC9:  BSF    0A.3
0BCA:  BSF    03.6
0BCB:  DECFSZ 1F,F
0BCC:  GOTO   3C4
....................     myPolyoneDisplay.currentState = STATE_WAITING_FOR_BUTTON_BEING_RELEASED; 
0BCD:  MOVLW  09
0BCE:  BCF    03.6
0BCF:  MOVWF  59
....................     nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
0BD0:  MOVLW  05
0BD1:  MOVWF  5E
....................     Time_clearRtcTime(); 
0BD2:  BCF    0A.3
0BD3:  CALL   7D7
0BD4:  BSF    0A.3
....................     PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0BD5:  BSF    03.6
0BD6:  CLRF   55
0BD7:  MOVLW  3F
0BD8:  MOVWF  54
0BD9:  BCF    0A.3
0BDA:  BCF    03.6
0BDB:  CALL   2D2
0BDC:  BSF    0A.3
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0BDD:  BSF    03.6
0BDE:  CLRF   20
0BDF:  MOVLW  3F
0BE0:  MOVWF  1F
0BE1:  CLRF   21
0BE2:  BCF    0A.3
0BE3:  BCF    03.6
0BE4:  CALL   705
0BE5:  BSF    0A.3
....................     rtos_enable(Task_checkIfMenuButtonIsHeld); 
0BE6:  BCF    29.7
.................... } 
....................  
.................... void StateMachine_ready(void) { 
....................     PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
*
100C:  BSF    03.6
100D:  CLRF   20
100E:  MOVLW  3F
100F:  MOVWF  1F
1010:  CLRF   21
1011:  BCF    0A.4
1012:  BCF    03.6
1013:  CALL   705
1014:  BSF    0A.4
....................     if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
1015:  BSF    03.5
1016:  BSF    06.1
1017:  BCF    03.5
1018:  BTFSS  06.1
1019:  GOTO   050
101A:  BTFSC  3E.3
101B:  GOTO   050
....................         PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
101C:  BSF    03.6
101D:  CLRF   20
101E:  MOVLW  3F
101F:  MOVWF  1F
1020:  MOVLW  02
1021:  MOVWF  21
....................         PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1044:  CLRF   20
1045:  MOVLW  3F
1046:  MOVWF  1F
1047:  BCF    0A.4
1048:  BSF    0A.3
1049:  BCF    03.6
104A:  CALL   000
104B:  BSF    0A.4
104C:  BCF    0A.3
....................         Time_clearRtcTime(); 
104D:  BCF    0A.4
104E:  CALL   7D7
104F:  BSF    0A.4
....................     } 
....................     if (buttonStateMenu == BUTTON_STATE_HELD) { 
1050:  BTFSC  3E.2
1051:  GOTO   057
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1052:  BSF    3E.2
....................         myPolyoneDisplay.currentState = STATE_SETTING_FIRST_NUMBER; 
1053:  MOVLW  06
1054:  MOVWF  59
....................         rtos_enable(Task_blinkDisplay); 
1055:  BCF    37.7
....................         rtos_disable(Task_checkIfMenuButtonIsHeld); 
1056:  BSF    29.7
....................     } 
.................... } 
....................  
.................... void StateMachine_settingFirstNumber(void) { 
....................     if (showDisplayCompletely) { 
*
1058:  BTFSS  3E.0
1059:  GOTO   065
....................         PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
105A:  BSF    03.6
105B:  CLRF   20
105C:  MOVLW  3F
105D:  MOVWF  1F
105E:  BCF    0A.4
105F:  BSF    0A.3
1060:  BCF    03.6
1061:  CALL   408
1062:  BSF    0A.4
1063:  BCF    0A.3
....................     } else { 
1064:  GOTO   140
....................         PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
1065:  BSF    03.6
1066:  CLRF   20
1067:  MOVLW  3F
1068:  MOVWF  1F
....................     } 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
1141:  BSF    03.5
1142:  BCF    03.6
1143:  BSF    06.1
1144:  BCF    03.5
1145:  BTFSC  06.1
1146:  GOTO   1CA
....................         while (!input(BUTTON_START_STOP_RESET)) { 
1147:  BSF    03.5
1148:  BSF    06.1
1149:  BCF    03.5
114A:  BTFSC  06.1
114B:  GOTO   1CA
....................             PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
114C:  BSF    03.6
114D:  CLRF   20
114E:  MOVLW  3F
114F:  MOVWF  1F
....................             PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
11B3:  CLRF   20
11B4:  MOVLW  3F
11B5:  MOVWF  1F
11B6:  BCF    0A.4
11B7:  BSF    0A.3
11B8:  BCF    03.6
11B9:  CALL   408
11BA:  BSF    0A.4
11BB:  BCF    0A.3
....................             delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
11BC:  MOVLW  02
11BD:  BSF    03.6
11BE:  MOVWF  1F
11BF:  MOVLW  96
11C0:  MOVWF  20
11C1:  BCF    0A.4
11C2:  BCF    03.6
11C3:  CALL   7DE
11C4:  BSF    0A.4
11C5:  BSF    03.6
11C6:  DECFSZ 1F,F
11C7:  GOTO   1BF
11C8:  BCF    03.6
11C9:  GOTO   147
....................         } 
....................     } 
....................  
....................     if (!menuButtonState && input(BUTTON_MENU)) { 
11CA:  BTFSC  3E.4
11CB:  GOTO   1D1
11CC:  BSF    03.5
11CD:  BSF    06.0
11CE:  BCF    03.5
11CF:  BTFSC  06.0
....................         numberOfMenuButtonHasBeenReleased++; 
11D0:  INCF   5F,F
....................     } 
....................     if (numberOfMenuButtonHasBeenReleased >= 2) { 
11D1:  MOVF   5F,W
11D2:  SUBLW  01
11D3:  BTFSC  03.0
11D4:  GOTO   1D8
....................         numberOfMenuButtonHasBeenReleased = 0; 
11D5:  CLRF   5F
....................         myPolyoneDisplay.currentState = STATE_SETTING_SECOND_NUMBER; 
11D6:  MOVLW  07
11D7:  MOVWF  59
....................     } 
.................... } 
....................  
.................... void StateMachine_settingSecondNumber(void) { 
....................     if (showDisplayCompletely) { 
*
11D9:  BTFSS  3E.0
11DA:  GOTO   1E6
....................         PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
11DB:  BSF    03.6
11DC:  CLRF   20
11DD:  MOVLW  3F
11DE:  MOVWF  1F
11DF:  BCF    0A.4
11E0:  BSF    0A.3
11E1:  BCF    03.6
11E2:  CALL   408
11E3:  BSF    0A.4
11E4:  BCF    0A.3
....................     } else { 
11E5:  GOTO   2C5
....................         PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
11E6:  BSF    03.6
11E7:  CLRF   20
11E8:  MOVLW  3F
11E9:  MOVWF  1F
....................     } 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
12C6:  BSF    03.5
12C7:  BCF    03.6
12C8:  BSF    06.1
12C9:  BCF    03.5
12CA:  BTFSC  06.1
12CB:  GOTO   351
....................         while (!input(BUTTON_START_STOP_RESET)) { 
12CC:  BSF    03.5
12CD:  BSF    06.1
12CE:  BCF    03.5
12CF:  BTFSC  06.1
12D0:  GOTO   351
....................             PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
12D1:  BSF    03.6
12D2:  CLRF   20
12D3:  MOVLW  3F
12D4:  MOVWF  1F
....................             PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1339:  BSF    03.6
133A:  CLRF   20
133B:  MOVLW  3F
133C:  MOVWF  1F
133D:  BCF    0A.4
133E:  BSF    0A.3
133F:  BCF    03.6
1340:  CALL   408
1341:  BSF    0A.4
1342:  BCF    0A.3
....................             delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1343:  MOVLW  02
1344:  BSF    03.6
1345:  MOVWF  1F
1346:  MOVLW  96
1347:  MOVWF  20
1348:  BCF    0A.4
1349:  BCF    03.6
134A:  CALL   7DE
134B:  BSF    0A.4
134C:  BSF    03.6
134D:  DECFSZ 1F,F
134E:  GOTO   346
134F:  BCF    03.6
1350:  GOTO   2CC
....................         } 
....................     } 
....................     if (!menuButtonState && input(BUTTON_MENU)) { 
1351:  BTFSC  3E.4
1352:  GOTO   35A
1353:  BSF    03.5
1354:  BSF    06.0
1355:  BCF    03.5
1356:  BTFSS  06.0
1357:  GOTO   35A
....................         myPolyoneDisplay.currentState = STATE_SETTING_FORMAT; 
1358:  MOVLW  08
1359:  MOVWF  59
....................     } 
.................... } 
....................  
.................... void StateMachine_settingFormat(void) { 
....................     PolyoneDisplay_showFormat(&myPolyoneDisplay); 
*
135B:  BSF    03.6
135C:  CLRF   20
135D:  MOVLW  3F
135E:  MOVWF  1F
....................     if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
*
1391:  BSF    03.5
1392:  BSF    06.1
1393:  BCF    03.5
1394:  BTFSS  06.1
1395:  GOTO   429
1396:  BTFSC  3E.3
1397:  GOTO   429
....................         PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1398:  BSF    03.6
1399:  CLRF   20
139A:  MOVLW  3F
139B:  MOVWF  1F
....................     } 
....................     if (!menuButtonState && input(BUTTON_MENU)) { 
*
1429:  BTFSC  3E.4
142A:  GOTO   432
142B:  BSF    03.5
142C:  BSF    06.0
142D:  BCF    03.5
142E:  BTFSS  06.0
142F:  GOTO   432
....................         myPolyoneDisplay.currentState = STATE_READY; 
1430:  MOVLW  05
1431:  MOVWF  59
....................     } 
.................... } 
....................  
.................... void StateMachine_waitingForButtonBeingReleased(void) { 
....................     if (input(BUTTON_START_STOP_RESET) && input(BUTTON_MENU)) { 
*
0BE8:  BSF    03.5
0BE9:  BSF    06.1
0BEA:  BCF    03.5
0BEB:  BTFSS  06.1
0BEC:  GOTO   3F4
0BED:  BSF    03.5
0BEE:  BSF    06.0
0BEF:  BCF    03.5
0BF0:  BTFSS  06.0
0BF1:  GOTO   3F4
....................         myPolyoneDisplay.currentState = nextStateAfterWaitingForButtonBeingReleased; 
0BF2:  MOVF   5E,W
0BF3:  MOVWF  59
....................     } 
.................... } 
....................  

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
