CCS PCM C Compiler, Version 5.015, 5967               09-Nov-17 18:52

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   6611 words (81%)
                           Largest free fragment is 653
               RAM used:   73 (20%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (1 in main + 7 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0C
0001:  MOVWF  0A
0002:  GOTO   4CA
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  0A
0028:  RETLW  22
0029:  RETLW  3A
002A:  RETLW  52
002B:  RETLW  6A
002C:  RETLW  82
002D:  RETLW  9A
002E:  RETLW  B2
002F:  RETLW  CA
0030:  RETLW  FF
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  22
0036:  RETLW  00
0037:  RETLW  29
0038:  RETLW  00
0039:  RETLW  30
003A:  RETLW  00
003B:  RETLW  37
003C:  RETLW  00
003D:  BSF    03.5
003E:  BSF    03.6
003F:  MOVF   29,W
0040:  CLRF   78
0041:  SUBWF  28,W
0042:  BTFSC  03.0
0043:  GOTO   047
0044:  MOVF   28,W
0045:  MOVWF  77
0046:  GOTO   053
0047:  CLRF   77
0048:  MOVLW  08
0049:  MOVWF  2A
004A:  RLF    28,F
004B:  RLF    77,F
004C:  MOVF   29,W
004D:  SUBWF  77,W
004E:  BTFSC  03.0
004F:  MOVWF  77
0050:  RLF    78,F
0051:  DECFSZ 2A,F
0052:  GOTO   04A
0053:  BCF    03.5
0054:  BCF    03.6
0055:  RETURN
*
0101:  MOVLW  20
0102:  BSF    03.5
0103:  BSF    03.6
0104:  MOVWF  32
0105:  CLRF   2E
0106:  CLRF   2F
0107:  CLRF   30
0108:  CLRF   31
0109:  MOVF   29,W
010A:  MOVWF  7A
010B:  MOVF   28,W
010C:  MOVWF  79
010D:  MOVF   27,W
010E:  MOVWF  78
010F:  MOVF   26,W
0110:  MOVWF  77
0111:  BCF    03.0
0112:  BTFSS  77.0
0113:  GOTO   122
0114:  MOVF   2A,W
0115:  ADDWF  2E,F
0116:  MOVF   2B,W
0117:  BTFSC  03.0
0118:  INCFSZ 2B,W
0119:  ADDWF  2F,F
011A:  MOVF   2C,W
011B:  BTFSC  03.0
011C:  INCFSZ 2C,W
011D:  ADDWF  30,F
011E:  MOVF   2D,W
011F:  BTFSC  03.0
0120:  INCFSZ 2D,W
0121:  ADDWF  31,F
0122:  RRF    31,F
0123:  RRF    30,F
0124:  RRF    2F,F
0125:  RRF    2E,F
0126:  RRF    7A,F
0127:  RRF    79,F
0128:  RRF    78,F
0129:  RRF    77,F
012A:  DECFSZ 32,F
012B:  GOTO   111
012C:  BCF    03.5
012D:  BCF    03.6
012E:  RETURN
*
01CD:  BTFSC  03.1
01CE:  GOTO   1D2
01CF:  MOVLW  AA
01D0:  MOVWF  04
01D1:  BSF    03.7
01D2:  BSF    03.5
01D3:  BSF    03.6
01D4:  MOVF   25,W
01D5:  XORWF  29,W
01D6:  ANDLW  80
01D7:  MOVWF  2F
01D8:  BTFSS  25.7
01D9:  GOTO   1E5
01DA:  COMF   22,F
01DB:  COMF   23,F
01DC:  COMF   24,F
01DD:  COMF   25,F
01DE:  INCF   22,F
01DF:  BTFSC  03.2
01E0:  INCF   23,F
01E1:  BTFSC  03.2
01E2:  INCF   24,F
01E3:  BTFSC  03.2
01E4:  INCF   25,F
01E5:  BTFSS  29.7
01E6:  GOTO   1F2
01E7:  COMF   26,F
01E8:  COMF   27,F
01E9:  COMF   28,F
01EA:  COMF   29,F
01EB:  INCF   26,F
01EC:  BTFSC  03.2
01ED:  INCF   27,F
01EE:  BTFSC  03.2
01EF:  INCF   28,F
01F0:  BTFSC  03.2
01F1:  INCF   29,F
01F2:  CLRF   77
01F3:  CLRF   78
01F4:  CLRF   79
01F5:  CLRF   7A
01F6:  CLRF   2A
01F7:  CLRF   2B
01F8:  CLRF   2C
01F9:  CLRF   2D
01FA:  MOVF   29,W
01FB:  IORWF  28,W
01FC:  IORWF  27,W
01FD:  IORWF  26,W
01FE:  BTFSC  03.2
01FF:  GOTO   230
0200:  MOVLW  20
0201:  MOVWF  2E
0202:  BCF    03.0
0203:  RLF    22,F
0204:  RLF    23,F
0205:  RLF    24,F
0206:  RLF    25,F
0207:  RLF    2A,F
0208:  RLF    2B,F
0209:  RLF    2C,F
020A:  RLF    2D,F
020B:  MOVF   29,W
020C:  SUBWF  2D,W
020D:  BTFSS  03.2
020E:  GOTO   219
020F:  MOVF   28,W
0210:  SUBWF  2C,W
0211:  BTFSS  03.2
0212:  GOTO   219
0213:  MOVF   27,W
0214:  SUBWF  2B,W
0215:  BTFSS  03.2
0216:  GOTO   219
0217:  MOVF   26,W
0218:  SUBWF  2A,W
0219:  BTFSS  03.0
021A:  GOTO   22A
021B:  MOVF   26,W
021C:  SUBWF  2A,F
021D:  MOVF   27,W
021E:  BTFSS  03.0
021F:  INCFSZ 27,W
0220:  SUBWF  2B,F
0221:  MOVF   28,W
0222:  BTFSS  03.0
0223:  INCFSZ 28,W
0224:  SUBWF  2C,F
0225:  MOVF   29,W
0226:  BTFSS  03.0
0227:  INCFSZ 29,W
0228:  SUBWF  2D,F
0229:  BSF    03.0
022A:  RLF    77,F
022B:  RLF    78,F
022C:  RLF    79,F
022D:  RLF    7A,F
022E:  DECFSZ 2E,F
022F:  GOTO   202
0230:  BTFSS  2F.7
0231:  GOTO   23D
0232:  COMF   77,F
0233:  COMF   78,F
0234:  COMF   79,F
0235:  COMF   7A,F
0236:  INCF   77,F
0237:  BTFSC  03.2
0238:  INCF   78,F
0239:  BTFSC  03.2
023A:  INCF   79,F
023B:  BTFSC  03.2
023C:  INCF   7A,F
023D:  MOVF   2A,W
023E:  MOVWF  00
023F:  INCF   04,F
0240:  MOVF   2B,W
0241:  MOVWF  00
0242:  INCF   04,F
0243:  MOVF   2C,W
0244:  MOVWF  00
0245:  INCF   04,F
0246:  MOVF   2D,W
0247:  MOVWF  00
0248:  BCF    03.5
0249:  BCF    03.6
024A:  RETURN
*
0519:  CLRF   77
051A:  CLRF   78
051B:  BSF    03.6
051C:  MOVF   60,W
051D:  BCF    03.0
051E:  BTFSC  61.0
051F:  ADDWF  77,F
0520:  RRF    77,F
0521:  RRF    78,F
0522:  BTFSC  61.1
0523:  ADDWF  77,F
0524:  RRF    77,F
0525:  RRF    78,F
0526:  BTFSC  61.2
0527:  ADDWF  77,F
0528:  RRF    77,F
0529:  RRF    78,F
052A:  BTFSC  61.3
052B:  ADDWF  77,F
052C:  RRF    77,F
052D:  RRF    78,F
052E:  BTFSC  61.4
052F:  ADDWF  77,F
0530:  RRF    77,F
0531:  RRF    78,F
0532:  BTFSC  61.5
0533:  ADDWF  77,F
0534:  RRF    77,F
0535:  RRF    78,F
0536:  BTFSC  61.6
0537:  ADDWF  77,F
0538:  RRF    77,F
0539:  RRF    78,F
053A:  BTFSC  61.7
053B:  ADDWF  77,F
053C:  RRF    77,F
053D:  RRF    78,F
053E:  BCF    03.6
053F:  RETURN
*
0601:  CLRF   78
0602:  CLRF   79
0603:  CLRF   77
0604:  CLRF   7A
0605:  BSF    03.6
0606:  MOVF   4B,W
0607:  BTFSS  03.2
0608:  GOTO   60C
0609:  MOVF   4A,W
060A:  BTFSC  03.2
060B:  GOTO   626
060C:  MOVLW  10
060D:  MOVWF  4C
060E:  BCF    03.0
060F:  RLF    48,F
0610:  RLF    49,F
0611:  RLF    77,F
0612:  RLF    7A,F
0613:  MOVF   4B,W
0614:  SUBWF  7A,W
0615:  BTFSS  03.2
0616:  GOTO   619
0617:  MOVF   4A,W
0618:  SUBWF  77,W
0619:  BTFSS  03.0
061A:  GOTO   622
061B:  MOVF   4A,W
061C:  SUBWF  77,F
061D:  BTFSS  03.0
061E:  DECF   7A,F
061F:  MOVF   4B,W
0620:  SUBWF  7A,F
0621:  BSF    03.0
0622:  RLF    78,F
0623:  RLF    79,F
0624:  DECFSZ 4C,F
0625:  GOTO   60E
0626:  BCF    03.6
0627:  RETURN
*
1564:  BSF    0A.0
1565:  BCF    0A.1
1566:  BSF    0A.2
1567:  ADDWF  02,F
1568:  GOTO   321
1569:  GOTO   497
156A:  GOTO   39A
156B:  GOTO   006
156C:  GOTO   4F4
156D:  GOTO   561
156E:  GOTO   561
156F:  GOTO   561
1570:  GOTO   561
1571:  GOTO   561
1572:  GOTO   54B
*
1ECA:  BCF    0A.0
1ECB:  BSF    0A.1
1ECC:  BSF    0A.2
1ECD:  ADDWF  02,F
1ECE:  GOTO   00A
1ECF:  GOTO   043
1ED0:  GOTO   1E4
1ED1:  GOTO   3CA
1ED2:  GOTO   5F4
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... //#device *=16 
.................... #use delay(clock=20M) 
*
0ACE:  MOVLW  1C
0ACF:  MOVWF  04
0AD0:  BSF    03.7
0AD1:  MOVF   00,W
0AD2:  BTFSC  03.2
0AD3:  GOTO   2E1
0AD4:  MOVLW  06
0AD5:  MOVWF  78
0AD6:  CLRF   77
0AD7:  DECFSZ 77,F
0AD8:  GOTO   2D7
0AD9:  DECFSZ 78,F
0ADA:  GOTO   2D6
0ADB:  MOVLW  7B
0ADC:  MOVWF  77
0ADD:  DECFSZ 77,F
0ADE:  GOTO   2DD
0ADF:  DECFSZ 00,F
0AE0:  GOTO   2D4
0AE1:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0076:  MOVLW  08
0077:  MOVWF  78
0078:  NOP
0079:  BCF    07.3
007A:  BCF    20.3
007B:  MOVF   20,W
007C:  BSF    03.5
007D:  MOVWF  07
007E:  NOP
007F:  BCF    03.5
0080:  BSF    03.6
0081:  RLF    65,F
0082:  BCF    03.6
0083:  BCF    07.4
0084:  BTFSS  03.0
0085:  GOTO   08C
0086:  BSF    20.4
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  GOTO   090
008B:  BCF    03.5
008C:  BCF    20.4
008D:  MOVF   20,W
008E:  BSF    03.5
008F:  MOVWF  07
0090:  NOP
0091:  BCF    03.5
0092:  BSF    20.3
0093:  MOVF   20,W
0094:  BSF    03.5
0095:  MOVWF  07
0096:  BCF    03.5
0097:  BTFSS  07.3
0098:  GOTO   097
0099:  DECFSZ 78,F
009A:  GOTO   078
009B:  NOP
009C:  BCF    07.3
009D:  BCF    20.3
009E:  MOVF   20,W
009F:  BSF    03.5
00A0:  MOVWF  07
00A1:  NOP
00A2:  BCF    03.5
00A3:  BSF    20.4
00A4:  MOVF   20,W
00A5:  BSF    03.5
00A6:  MOVWF  07
00A7:  NOP
00A8:  NOP
00A9:  BCF    03.5
00AA:  BSF    20.3
00AB:  MOVF   20,W
00AC:  BSF    03.5
00AD:  MOVWF  07
00AE:  BCF    03.5
00AF:  BTFSS  07.3
00B0:  GOTO   0AF
00B1:  CLRF   78
00B2:  NOP
00B3:  BTFSC  07.4
00B4:  BSF    78.0
00B5:  BCF    07.3
00B6:  BCF    20.3
00B7:  MOVF   20,W
00B8:  BSF    03.5
00B9:  MOVWF  07
00BA:  BCF    03.5
00BB:  BCF    07.4
00BC:  BCF    20.4
00BD:  MOVF   20,W
00BE:  BSF    03.5
00BF:  MOVWF  07
00C0:  BCF    03.5
00C1:  RETURN
*
04AE:  MOVLW  08
04AF:  BSF    03.6
04B0:  MOVWF  5F
04B1:  MOVF   77,W
04B2:  MOVWF  60
04B3:  BCF    03.6
04B4:  BSF    20.4
04B5:  MOVF   20,W
04B6:  BSF    03.5
04B7:  MOVWF  07
04B8:  NOP
04B9:  BCF    03.5
04BA:  BSF    20.3
04BB:  MOVF   20,W
04BC:  BSF    03.5
04BD:  MOVWF  07
04BE:  BCF    03.5
04BF:  BTFSS  07.3
04C0:  GOTO   4BF
04C1:  BTFSC  07.4
04C2:  BSF    03.0
04C3:  BTFSS  07.4
04C4:  BCF    03.0
04C5:  RLF    78,F
04C6:  NOP
04C7:  BCF    20.3
04C8:  MOVF   20,W
04C9:  BSF    03.5
04CA:  MOVWF  07
04CB:  BCF    03.5
04CC:  BCF    07.3
04CD:  BSF    03.6
04CE:  DECFSZ 5F,F
04CF:  GOTO   4B3
04D0:  BCF    03.6
04D1:  BSF    20.4
04D2:  MOVF   20,W
04D3:  BSF    03.5
04D4:  MOVWF  07
04D5:  NOP
04D6:  BCF    03.5
04D7:  BCF    07.4
04D8:  BSF    03.6
04D9:  MOVF   60,W
04DA:  BTFSC  03.2
04DB:  GOTO   4E3
04DC:  BCF    03.6
04DD:  BCF    20.4
04DE:  MOVF   20,W
04DF:  BSF    03.5
04E0:  MOVWF  07
04E1:  BCF    03.5
04E2:  BSF    03.6
04E3:  NOP
04E4:  BCF    03.6
04E5:  BSF    20.3
04E6:  MOVF   20,W
04E7:  BSF    03.5
04E8:  MOVWF  07
04E9:  BCF    03.5
04EA:  BTFSS  07.3
04EB:  GOTO   4EA
04EC:  NOP
04ED:  BCF    07.3
04EE:  BCF    20.3
04EF:  MOVF   20,W
04F0:  BSF    03.5
04F1:  MOVWF  07
04F2:  NOP
04F3:  BCF    03.5
04F4:  BCF    07.4
04F5:  BCF    20.4
04F6:  MOVF   20,W
04F7:  BSF    03.5
04F8:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
0540:  BSF    03.6
0541:  MOVF   5C,W
0542:  ANDLW  0F
0543:  MOVWF  5D
0544:  MOVF   5C,W
0545:  ANDLW  F0
0546:  MOVWF  77
0547:  SWAPF  77,F
0548:  MOVLW  0F
0549:  ANDWF  77,F
054A:  MOVF   77,W
054B:  MOVWF  5F
054C:  MOVWF  60
054D:  MOVLW  0A
054E:  MOVWF  61
054F:  BCF    03.6
0550:  CALL   519
0551:  MOVF   78,W
0552:  BSF    03.6
0553:  ADDWF  5D,W
0554:  MOVWF  78
0555:  BCF    03.6
0556:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
0056:  BSF    03.6
0057:  MOVF   62,W
0058:  BSF    03.5
0059:  MOVWF  28
005A:  MOVLW  0A
005B:  MOVWF  29
005C:  BCF    03.5
005D:  BCF    03.6
005E:  CALL   03D
005F:  SWAPF  78,W
0060:  MOVWF  77
0061:  MOVLW  F0
0062:  ANDWF  77,F
0063:  MOVF   77,W
0064:  ANDLW  F0
0065:  BSF    03.6
0066:  MOVWF  63
0067:  MOVF   62,W
0068:  BSF    03.5
0069:  MOVWF  28
006A:  MOVLW  0A
006B:  MOVWF  29
006C:  BCF    03.5
006D:  BCF    03.6
006E:  CALL   03D
006F:  MOVF   77,W
0070:  ANDLW  0F
0071:  BSF    03.6
0072:  IORWF  63,W
0073:  MOVWF  78
0074:  BCF    03.6
0075:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
0467:  BSF    03.6
0468:  CLRF   5D
....................     int value = 0; 
....................     I2C_start(); 
0469:  BCF    03.6
046A:  BSF    20.4
046B:  MOVF   20,W
046C:  BSF    03.5
046D:  MOVWF  07
046E:  NOP
046F:  BCF    03.5
0470:  BSF    20.3
0471:  MOVF   20,W
0472:  BSF    03.5
0473:  MOVWF  07
0474:  NOP
0475:  BCF    03.5
0476:  BCF    07.4
0477:  BCF    20.4
0478:  MOVF   20,W
0479:  BSF    03.5
047A:  MOVWF  07
047B:  NOP
047C:  BCF    03.5
047D:  BCF    07.3
047E:  BCF    20.3
047F:  MOVF   20,W
0480:  BSF    03.5
0481:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
0482:  MOVLW  D0
0483:  BCF    03.5
0484:  BSF    03.6
0485:  MOVWF  65
0486:  BCF    03.6
0487:  CALL   076
....................     I2C_write(address); 
0488:  BSF    03.6
0489:  MOVF   5C,W
048A:  MOVWF  65
048B:  BCF    03.6
048C:  CALL   076
....................     I2C_start(); 
048D:  BSF    20.4
048E:  MOVF   20,W
048F:  BSF    03.5
0490:  MOVWF  07
0491:  NOP
0492:  BCF    03.5
0493:  BSF    20.3
0494:  MOVF   20,W
0495:  BSF    03.5
0496:  MOVWF  07
0497:  NOP
0498:  BCF    03.5
0499:  BTFSS  07.3
049A:  GOTO   499
049B:  BCF    07.4
049C:  BCF    20.4
049D:  MOVF   20,W
049E:  BSF    03.5
049F:  MOVWF  07
04A0:  NOP
04A1:  BCF    03.5
04A2:  BCF    07.3
04A3:  BCF    20.3
04A4:  MOVF   20,W
04A5:  BSF    03.5
04A6:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
04A7:  MOVLW  D1
04A8:  BCF    03.5
04A9:  BSF    03.6
04AA:  MOVWF  65
04AB:  BCF    03.6
04AC:  CALL   076
....................     value = I2C_read(0); 
04AD:  CLRF   77
*
04F9:  MOVF   78,W
04FA:  BCF    03.5
04FB:  BSF    03.6
04FC:  MOVWF  5D
....................     I2C_stop(); 
04FD:  BCF    03.6
04FE:  BCF    20.4
04FF:  MOVF   20,W
0500:  BSF    03.5
0501:  MOVWF  07
0502:  NOP
0503:  BCF    03.5
0504:  BSF    20.3
0505:  MOVF   20,W
0506:  BSF    03.5
0507:  MOVWF  07
0508:  BCF    03.5
0509:  BTFSS  07.3
050A:  GOTO   509
050B:  NOP
050C:  GOTO   50D
050D:  NOP
050E:  BSF    20.4
050F:  MOVF   20,W
0510:  BSF    03.5
0511:  MOVWF  07
0512:  NOP
....................     return value; 
0513:  BCF    03.5
0514:  BSF    03.6
0515:  MOVF   5D,W
0516:  MOVWF  78
0517:  BCF    03.6
0518:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
00C2:  BSF    20.4
00C3:  MOVF   20,W
00C4:  BSF    03.5
00C5:  MOVWF  07
00C6:  NOP
00C7:  BCF    03.5
00C8:  BSF    20.3
00C9:  MOVF   20,W
00CA:  BSF    03.5
00CB:  MOVWF  07
00CC:  NOP
00CD:  BCF    03.5
00CE:  BCF    07.4
00CF:  BCF    20.4
00D0:  MOVF   20,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  NOP
00D4:  BCF    03.5
00D5:  BCF    07.3
00D6:  BCF    20.3
00D7:  MOVF   20,W
00D8:  BSF    03.5
00D9:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
00DA:  MOVLW  D0
00DB:  BCF    03.5
00DC:  BSF    03.6
00DD:  MOVWF  65
00DE:  BCF    03.6
00DF:  CALL   076
....................     I2C_write(address); 
00E0:  BSF    03.6
00E1:  MOVF   63,W
00E2:  MOVWF  65
00E3:  BCF    03.6
00E4:  CALL   076
....................     I2C_write(value); 
00E5:  BSF    03.6
00E6:  MOVF   64,W
00E7:  MOVWF  65
00E8:  BCF    03.6
00E9:  CALL   076
....................     I2C_stop(); 
00EA:  BCF    20.4
00EB:  MOVF   20,W
00EC:  BSF    03.5
00ED:  MOVWF  07
00EE:  NOP
00EF:  BCF    03.5
00F0:  BSF    20.3
00F1:  MOVF   20,W
00F2:  BSF    03.5
00F3:  MOVWF  07
00F4:  BCF    03.5
00F5:  BTFSS  07.3
00F6:  GOTO   0F5
00F7:  NOP
00F8:  GOTO   0F9
00F9:  NOP
00FA:  BSF    20.4
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
00FE:  NOP
00FF:  BCF    03.5
0100:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
055B:  CLRF   5C
055C:  BCF    03.6
055D:  CALL   467
055E:  MOVF   78,W
055F:  BSF    03.6
0560:  MOVWF  58
....................     sec = bcd_to_decimal(sec); 
0561:  MOVF   58,W
0562:  MOVWF  5C
0563:  BCF    03.6
0564:  CALL   540
0565:  MOVF   78,W
0566:  BSF    03.6
0567:  MOVWF  58
....................     min = DS3231_Read(minuteREG); 
0568:  MOVLW  01
0569:  MOVWF  5C
056A:  BCF    03.6
056B:  CALL   467
056C:  MOVF   78,W
056D:  BSF    03.6
056E:  MOVWF  57
....................     min = bcd_to_decimal(min); 
056F:  MOVF   57,W
0570:  MOVWF  5C
0571:  BCF    03.6
0572:  CALL   540
0573:  MOVF   78,W
0574:  BSF    03.6
0575:  MOVWF  57
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0576:  MOVLW  02
0577:  MOVWF  5C
0578:  BCF    03.6
0579:  CALL   467
057A:  MOVF   78,W
057B:  ANDLW  3F
057C:  BSF    03.6
057D:  MOVWF  56
....................     hora = bcd_to_decimal(hora); 
057E:  MOVF   56,W
057F:  MOVWF  5C
0580:  BCF    03.6
0581:  CALL   540
0582:  MOVF   78,W
0583:  BSF    03.6
0584:  MOVWF  56
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
039E:  BSF    03.6
039F:  MOVF   61,W
03A0:  MOVWF  62
03A1:  BCF    03.6
03A2:  CALL   056
03A3:  MOVF   78,W
03A4:  BSF    03.6
03A5:  MOVWF  62
03A6:  CLRF   63
03A7:  MOVF   62,W
03A8:  MOVWF  64
03A9:  BCF    03.6
03AA:  CALL   0C2
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
03AB:  BSF    03.6
03AC:  MOVF   60,W
03AD:  MOVWF  62
03AE:  BCF    03.6
03AF:  CALL   056
03B0:  MOVF   78,W
03B1:  BSF    03.6
03B2:  MOVWF  62
03B3:  MOVLW  01
03B4:  MOVWF  63
03B5:  MOVF   62,W
03B6:  MOVWF  64
03B7:  BCF    03.6
03B8:  CALL   0C2
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
03B9:  BSF    03.6
03BA:  MOVF   5F,W
03BB:  MOVWF  62
03BC:  BCF    03.6
03BD:  CALL   056
03BE:  MOVF   78,W
03BF:  ANDLW  3F
03C0:  BSF    03.6
03C1:  MOVWF  62
03C2:  MOVLW  02
03C3:  MOVWF  63
03C4:  MOVF   62,W
03C5:  MOVWF  64
03C6:  BCF    03.6
03C7:  CALL   0C2
03C8:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
*
1021:  MOVF   4E,W
1022:  MOVWF  62
1023:  BCF    0A.4
1024:  BCF    03.6
1025:  CALL   056
1026:  BSF    0A.4
1027:  MOVF   78,W
1028:  BSF    03.6
1029:  MOVWF  52
102A:  MOVLW  03
102B:  MOVWF  63
102C:  MOVF   52,W
102D:  MOVWF  64
102E:  BCF    0A.4
102F:  BCF    03.6
1030:  CALL   0C2
1031:  BSF    0A.4
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
1032:  BSF    03.6
1033:  MOVF   4F,W
1034:  MOVWF  62
1035:  BCF    0A.4
1036:  BCF    03.6
1037:  CALL   056
1038:  BSF    0A.4
1039:  MOVF   78,W
103A:  BSF    03.6
103B:  MOVWF  52
103C:  MOVLW  04
103D:  MOVWF  63
103E:  MOVF   52,W
103F:  MOVWF  64
1040:  BCF    0A.4
1041:  BCF    03.6
1042:  CALL   0C2
1043:  BSF    0A.4
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
1044:  BSF    03.6
1045:  MOVF   50,W
1046:  MOVWF  62
1047:  BCF    0A.4
1048:  BCF    03.6
1049:  CALL   056
104A:  BSF    0A.4
104B:  MOVF   78,W
104C:  BSF    03.6
104D:  MOVWF  52
104E:  MOVLW  05
104F:  MOVWF  63
1050:  MOVF   52,W
1051:  MOVWF  64
1052:  BCF    0A.4
1053:  BCF    03.6
1054:  CALL   0C2
1055:  BSF    0A.4
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
1056:  BSF    03.6
1057:  MOVF   51,W
1058:  MOVWF  62
1059:  BCF    0A.4
105A:  BCF    03.6
105B:  CALL   056
105C:  BSF    0A.4
105D:  MOVF   78,W
105E:  BSF    03.6
105F:  MOVWF  52
1060:  MOVLW  06
1061:  MOVWF  63
1062:  MOVF   52,W
1063:  MOVWF  64
1064:  BCF    0A.4
1065:  BCF    03.6
1066:  CALL   0C2
1067:  BSF    0A.4
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
062F:  CLRF   4B
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
0630:  CLRF   4B
0631:  MOVF   4A,W
0632:  SUBWF  4B,W
0633:  BTFSC  03.0
0634:  GOTO   63E
....................         array[i] = 0; 
0635:  MOVF   4B,W
0636:  ADDWF  48,W
0637:  MOVWF  04
0638:  BCF    03.7
0639:  BTFSC  49.0
063A:  BSF    03.7
063B:  CLRF   00
063C:  INCF   4B,F
063D:  GOTO   631
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
0628:  BSF    03.6
0629:  MOVF   44,W
062A:  MOVWF  49
062B:  MOVF   43,W
062C:  MOVWF  48
062D:  MOVF   45,W
062E:  MOVWF  4A
....................  
....................     int index = 0; 
*
063E:  CLRF   46
....................     while (number > 0) { 
063F:  MOVF   41,F
0640:  BTFSS  03.2
0641:  GOTO   645
0642:  MOVF   42,F
0643:  BTFSC  03.2
0644:  GOTO   669
....................         int digit = number % 10; 
0645:  MOVF   42,W
0646:  MOVWF  49
0647:  MOVF   41,W
0648:  MOVWF  48
0649:  CLRF   4B
064A:  MOVLW  0A
064B:  MOVWF  4A
064C:  BCF    03.6
064D:  CALL   601
064E:  MOVF   77,W
064F:  BSF    03.6
0650:  MOVWF  47
....................         digits[index] = digit; 
0651:  MOVF   46,W
0652:  ADDWF  43,W
0653:  MOVWF  04
0654:  BCF    03.7
0655:  BTFSC  44.0
0656:  BSF    03.7
0657:  MOVF   47,W
0658:  MOVWF  00
....................         index++; 
0659:  INCF   46,F
....................         number /= 10; 
065A:  MOVF   42,W
065B:  MOVWF  49
065C:  MOVF   41,W
065D:  MOVWF  48
065E:  CLRF   4B
065F:  MOVLW  0A
0660:  MOVWF  4A
0661:  BCF    03.6
0662:  CALL   601
0663:  MOVF   79,W
0664:  BSF    03.6
0665:  MOVWF  42
0666:  MOVF   78,W
0667:  MOVWF  41
0668:  GOTO   63F
....................     } 
0669:  BCF    03.6
066A:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
0715:  BSF    03.5
0716:  BCF    03.6
0717:  BCF    05.1
0718:  BCF    03.5
0719:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
071A:  BSF    03.5
071B:  BCF    05.1
071C:  BCF    03.5
071D:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
06D8:  MOVLW  01
06D9:  BSF    03.6
06DA:  MOVWF  37
06DB:  CLRF   38
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
06DC:  BSF    03.5
06DD:  BCF    03.6
06DE:  BCF    05.3
06DF:  BCF    03.5
06E0:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
06E1:  BSF    03.5
06E2:  BCF    05.1
06E3:  BCF    03.5
06E4:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
06E5:  BSF    03.6
06E6:  CLRF   38
06E7:  MOVF   36,W
06E8:  SUBWF  38,W
06E9:  BTFSC  03.0
06EA:  GOTO   715
....................         int character = charactersArray[j]; 
06EB:  MOVF   38,W
06EC:  ADDWF  34,W
06ED:  MOVWF  04
06EE:  BCF    03.7
06EF:  BTFSC  35.0
06F0:  BSF    03.7
06F1:  MOVF   00,W
06F2:  MOVWF  39
....................  
....................         for (i = 1; i <= 8; i++) { 
06F3:  MOVLW  01
06F4:  MOVWF  37
06F5:  MOVF   37,W
06F6:  SUBLW  08
06F7:  BTFSS  03.0
06F8:  GOTO   713
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
06F9:  BTFSC  39.0
06FA:  GOTO   6FF
06FB:  BCF    03.6
06FC:  BCF    05.0
06FD:  GOTO   701
06FE:  BSF    03.6
06FF:  BCF    03.6
0700:  BSF    05.0
0701:  BSF    03.5
0702:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
0703:  BCF    03.0
0704:  BCF    03.5
0705:  BSF    03.6
0706:  RRF    39,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
0707:  BSF    03.5
0708:  BCF    03.6
0709:  BCF    05.3
070A:  BCF    03.5
070B:  BSF    05.3
....................             output_low(PIN_CLOCK); 
070C:  BSF    03.5
070D:  BCF    05.3
070E:  BCF    03.5
070F:  BCF    05.3
0710:  BSF    03.6
0711:  INCF   37,F
0712:  GOTO   6F5
....................         } 
0713:  INCF   38,F
0714:  GOTO   6E7
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
071E:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
075E:  CLRF   37
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
075F:  CLRF   37
0760:  MOVF   36,W
0761:  SUBWF  37,W
0762:  BTFSC  03.0
0763:  GOTO   783
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0764:  MOVF   37,W
0765:  ADDWF  34,W
0766:  MOVWF  78
0767:  MOVF   35,W
0768:  MOVWF  7A
0769:  BTFSC  03.0
076A:  INCF   7A,F
076B:  MOVF   78,W
076C:  MOVWF  38
076D:  MOVF   7A,W
076E:  MOVWF  39
076F:  MOVF   37,W
0770:  ADDWF  34,W
0771:  MOVWF  04
0772:  BCF    03.7
0773:  BTFSC  35.0
0774:  BSF    03.7
0775:  MOVF   00,W
0776:  BCF    03.6
0777:  CALL   004
0778:  MOVWF  78
0779:  BSF    03.6
077A:  MOVF   38,W
077B:  MOVWF  04
077C:  BCF    03.7
077D:  BTFSC  39.0
077E:  BSF    03.7
077F:  MOVF   78,W
0780:  MOVWF  00
0781:  INCF   37,F
0782:  GOTO   760
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
0729:  CLRF   37
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
072A:  CLRF   37
072B:  MOVF   36,W
072C:  SUBWF  37,W
072D:  BTFSC  03.0
072E:  GOTO   757
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
072F:  MOVF   37,W
0730:  ADDWF  34,W
0731:  MOVWF  78
0732:  MOVF   35,W
0733:  MOVWF  7A
0734:  BTFSC  03.0
0735:  INCF   7A,F
0736:  MOVF   78,W
0737:  MOVWF  38
0738:  MOVF   7A,W
0739:  MOVWF  39
073A:  MOVF   37,W
073B:  ADDWF  34,W
073C:  MOVWF  04
073D:  BCF    03.7
073E:  BTFSC  35.0
073F:  BSF    03.7
0740:  MOVF   00,W
0741:  BCF    03.6
0742:  CALL   004
0743:  MOVWF  78
0744:  BSF    03.6
0745:  MOVF   38,W
0746:  MOVWF  04
0747:  BCF    03.7
0748:  BTFSC  39.0
0749:  BSF    03.7
074A:  MOVF   78,W
074B:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
074C:  MOVF   37,W
074D:  ADDWF  34,W
074E:  MOVWF  04
074F:  BCF    03.7
0750:  BTFSC  35.0
0751:  BSF    03.7
0752:  MOVF   00,W
0753:  IORLW  08
0754:  MOVWF  00
0755:  INCF   37,F
0756:  GOTO   72B
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
071F:  BSF    03.6
0720:  MOVF   33,F
0721:  BTFSC  03.2
0722:  GOTO   758
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
0723:  MOVF   31,W
0724:  MOVWF  35
0725:  MOVF   30,W
0726:  MOVWF  34
0727:  MOVF   32,W
0728:  MOVWF  36
....................     } else { 
*
0757:  GOTO   783
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
0758:  MOVF   31,W
0759:  MOVWF  35
075A:  MOVF   30,W
075B:  MOVWF  34
075C:  MOVF   32,W
075D:  MOVWF  36
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
0783:  MOVF   31,W
0784:  MOVWF  35
0785:  MOVF   30,W
0786:  MOVWF  34
0787:  MOVF   32,W
0788:  MOVWF  36
0789:  BCF    03.6
078A:  CALL   6D8
078B:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
1504:  BSF    03.6
1505:  CLRF   1B
1506:  CLRF   1C
1507:  CLRF   1D
1508:  CLRF   1E
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
1509:  MOVLW  01
150A:  MOVWF  1B
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
150B:  MOVLW  09
150C:  MOVWF  1C
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
150D:  MOVLW  01
150E:  MOVWF  1D
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
150F:  MOVWF  1E
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
1510:  MOVWF  35
1511:  MOVLW  1B
1512:  MOVWF  34
1513:  MOVLW  04
1514:  MOVWF  36
1515:  BCF    0A.4
1516:  BCF    03.6
1517:  CALL   6D8
1518:  BSF    0A.4
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... #define UPPER_BOUND_HOURS 23 
.................... #define UPPER_BOUND_MINUTES 59 
.................... #define UPPER_BOUND_SECONDS 59 
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     Format format; 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     //    char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time Time_new(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
058B:  MOVF   59,W
058C:  MOVWF  5D
....................     time.minute = minute; 
058D:  MOVF   5A,W
058E:  MOVWF  5E
....................     time.second = second; 
058F:  MOVF   5B,W
0590:  MOVWF  5F
....................     return time; 
0591:  MOVF   5C,W
0592:  MOVWF  77
0593:  MOVF   5D,W
0594:  MOVWF  78
0595:  MOVF   5E,W
0596:  MOVWF  79
0597:  MOVF   5F,W
0598:  MOVWF  7A
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
0557:  BSF    03.6
0558:  CLRF   56
0559:  CLRF   57
055A:  CLRF   58
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = Time_new(currentHour, currentMinute, currentSecond); 
*
0585:  MOVF   56,W
0586:  MOVWF  59
0587:  MOVF   57,W
0588:  MOVWF  5A
0589:  MOVF   58,W
058A:  MOVWF  5B
*
0599:  MOVF   7A,W
059A:  MOVWF  55
059B:  MOVF   79,W
059C:  MOVWF  54
059D:  MOVF   78,W
059E:  MOVWF  53
059F:  MOVF   77,W
05A0:  MOVWF  52
....................  
....................     return currentTime; 
05A1:  MOVF   52,W
05A2:  MOVWF  77
05A3:  MOVF   53,W
05A4:  MOVWF  78
05A5:  MOVF   54,W
05A6:  MOVWF  79
05A7:  MOVF   55,W
05A8:  MOVWF  7A
05A9:  BCF    03.6
05AA:  RETURN
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     //    newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     //    write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
066B:  MOVLW  01
066C:  BSF    03.6
066D:  ADDWF  36,W
066E:  MOVWF  04
066F:  BCF    03.7
0670:  BTFSC  37.0
0671:  BSF    03.7
0672:  MOVF   00,W
0673:  MOVWF  3F
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
0674:  MOVF   38,F
0675:  BTFSC  03.2
0676:  GOTO   6A0
....................         if (timePtr->format == FORMAT_12) { 
0677:  MOVF   36,W
0678:  MOVWF  04
0679:  BCF    03.7
067A:  BTFSC  37.0
067B:  BSF    03.7
067C:  MOVF   00,W
067D:  ANDLW  01
067E:  SUBLW  01
067F:  BTFSS  03.2
0680:  GOTO   6A0
....................             if (timePtr->hour == 0) { 
0681:  MOVLW  01
0682:  ADDWF  36,W
0683:  MOVWF  04
0684:  BCF    03.7
0685:  BTFSC  37.0
0686:  BSF    03.7
0687:  MOVF   00,F
0688:  BTFSS  03.2
0689:  GOTO   68D
....................                 hour = 12; 
068A:  MOVLW  0C
068B:  MOVWF  3F
....................             } else if (timePtr->hour > 12) { 
068C:  GOTO   6A0
068D:  MOVLW  01
068E:  ADDWF  36,W
068F:  MOVWF  04
0690:  BCF    03.7
0691:  BTFSC  37.0
0692:  BSF    03.7
0693:  MOVF   00,W
0694:  SUBLW  0C
0695:  BTFSC  03.0
0696:  GOTO   6A0
....................                 hour = timePtr->hour - 12; 
0697:  MOVLW  01
0698:  ADDWF  36,W
0699:  MOVWF  04
069A:  BCF    03.7
069B:  BTFSC  37.0
069C:  BSF    03.7
069D:  MOVLW  0C
069E:  SUBWF  00,W
069F:  MOVWF  3F
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             Array_getArraySize(newTimeInDigits.hour) 
....................             ); 
06A0:  CLRF   42
06A1:  MOVF   3F,W
06A2:  MOVWF  41
06A3:  MOVLW  01
06A4:  MOVWF  44
06A5:  MOVLW  39
06A6:  MOVWF  43
06A7:  MOVLW  02
06A8:  MOVWF  45
06A9:  BCF    03.6
06AA:  CALL   628
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             Array_getArraySize(newTimeInDigits.minute) 
....................             ); 
06AB:  MOVLW  02
06AC:  BSF    03.6
06AD:  ADDWF  36,W
06AE:  MOVWF  04
06AF:  BCF    03.7
06B0:  BTFSC  37.0
06B1:  BSF    03.7
06B2:  MOVF   00,W
06B3:  MOVWF  40
06B4:  CLRF   42
06B5:  MOVF   40,W
06B6:  MOVWF  41
06B7:  MOVLW  01
06B8:  MOVWF  44
06B9:  MOVLW  3B
06BA:  MOVWF  43
06BB:  MOVLW  02
06BC:  MOVWF  45
06BD:  BCF    03.6
06BE:  CALL   628
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             Array_getArraySize(newTimeInDigits.second) 
....................             ); 
06BF:  MOVLW  03
06C0:  BSF    03.6
06C1:  ADDWF  36,W
06C2:  MOVWF  04
06C3:  BCF    03.7
06C4:  BTFSC  37.0
06C5:  BSF    03.7
06C6:  MOVF   00,W
06C7:  MOVWF  40
06C8:  CLRF   42
06C9:  MOVF   40,W
06CA:  MOVWF  41
06CB:  MOVLW  01
06CC:  MOVWF  44
06CD:  MOVLW  3D
06CE:  MOVWF  43
06CF:  MOVLW  02
06D0:  MOVWF  45
06D1:  BCF    03.6
06D2:  CALL   628
....................  
....................     return newTimeInDigits; 
06D3:  MOVLW  39
06D4:  MOVWF  78
06D5:  MOVLW  01
06D6:  MOVWF  79
06D7:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
1405:  MOVLW  01
1406:  ADDWF  23,W
1407:  MOVWF  04
1408:  BCF    03.7
1409:  BTFSC  24.0
140A:  BSF    03.7
140B:  MOVF   00,F
140C:  BTFSS  03.2
140D:  GOTO   420
140E:  MOVLW  02
140F:  ADDWF  23,W
1410:  MOVWF  04
1411:  BCF    03.7
1412:  BTFSC  24.0
1413:  BSF    03.7
1414:  MOVF   00,F
1415:  BTFSS  03.2
1416:  GOTO   420
1417:  MOVLW  03
1418:  ADDWF  23,W
1419:  MOVWF  04
141A:  BCF    03.7
141B:  BTFSC  24.0
141C:  BSF    03.7
141D:  MOVF   00,F
141E:  BTFSC  03.2
141F:  GOTO   422
1420:  MOVLW  00
1421:  GOTO   423
1422:  MOVLW  01
1423:  MOVWF  78
.................... } 
....................  
.................... Time Time_getInitialTime() { 
....................     return Time_new(0, 0, 0); 
.................... } 
....................  
.................... Time Time_getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour % (UPPER_BOUND_HOURS + 1), 
....................             timePtr->minute % (UPPER_BOUND_MINUTES + 1), 
....................             timePtr->second % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
*
03C9:  MOVLW  01
03CA:  BSF    03.6
03CB:  ADDWF  5A,W
03CC:  MOVWF  04
03CD:  BCF    03.7
03CE:  BTFSC  5B.0
03CF:  BSF    03.7
03D0:  MOVF   00,W
03D1:  BSF    03.5
03D2:  MOVWF  28
03D3:  MOVLW  18
03D4:  MOVWF  29
03D5:  BCF    03.5
03D6:  BCF    03.6
03D7:  CALL   03D
03D8:  MOVF   77,W
03D9:  BSF    03.6
03DA:  MOVWF  5C
03DB:  MOVLW  02
03DC:  ADDWF  5A,W
03DD:  MOVWF  04
03DE:  BCF    03.7
03DF:  BTFSC  5B.0
03E0:  BSF    03.7
03E1:  MOVF   00,W
03E2:  BSF    03.5
03E3:  MOVWF  28
03E4:  MOVLW  3C
03E5:  MOVWF  29
03E6:  BCF    03.5
03E7:  BCF    03.6
03E8:  CALL   03D
03E9:  MOVF   77,W
03EA:  BSF    03.6
03EB:  MOVWF  5D
03EC:  MOVLW  03
03ED:  ADDWF  5A,W
03EE:  MOVWF  04
03EF:  BCF    03.7
03F0:  BTFSC  5B.0
03F1:  BSF    03.7
03F2:  MOVF   00,W
03F3:  BSF    03.5
03F4:  MOVWF  28
03F5:  MOVLW  3C
03F6:  MOVWF  29
03F7:  BCF    03.5
03F8:  BCF    03.6
03F9:  CALL   03D
03FA:  MOVF   77,W
03FB:  BSF    03.6
03FC:  MOVWF  5E
03FD:  MOVF   5C,W
03FE:  MOVWF  5F
03FF:  MOVF   5D,W
0400:  MOVWF  60
0401:  MOVF   5E,W
0402:  MOVWF  61
0403:  BCF    03.6
0404:  CALL   39E
0405:  RETURN
.................... } 
....................  
.................... void Time_setClockTime(int hour, int minutes, int seconds) { 
....................     setTime( 
....................             hour % (UPPER_BOUND_HOURS + 1), 
....................             minutes % (UPPER_BOUND_MINUTES + 1), 
....................             seconds % (UPPER_BOUND_SECONDS + 1) 
....................             ); 
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
012F:  MOVLW  01
0130:  BSF    03.5
0131:  BSF    03.6
0132:  ADDWF  12,W
0133:  MOVWF  04
0134:  BCF    03.7
0135:  BTFSC  13.0
0136:  BSF    03.7
0137:  MOVF   00,W
0138:  CLRF   23
0139:  CLRF   22
013A:  CLRF   21
013B:  MOVWF  20
013C:  CLRF   25
013D:  MOVF   04,W
013E:  MOVWF  24
013F:  BCF    25.0
0140:  BTFSC  03.7
0141:  BSF    25.0
0142:  MOVF   23,W
0143:  MOVWF  29
0144:  MOVF   22,W
0145:  MOVWF  28
0146:  MOVF   21,W
0147:  MOVWF  27
0148:  MOVF   20,W
0149:  MOVWF  26
014A:  CLRF   2D
014B:  CLRF   2C
014C:  MOVLW  0E
014D:  MOVWF  2B
014E:  MOVLW  10
014F:  MOVWF  2A
0150:  BCF    03.5
0151:  BCF    03.6
0152:  CALL   101
0153:  BSF    03.5
0154:  BSF    03.6
0155:  MOVF   24,W
0156:  MOVWF  04
0157:  BCF    03.7
0158:  BTFSC  25.0
0159:  BSF    03.7
015A:  MOVF   7A,W
015B:  MOVWF  17
015C:  MOVF   79,W
015D:  MOVWF  16
015E:  MOVF   78,W
015F:  MOVWF  15
0160:  MOVF   77,W
0161:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
0162:  MOVLW  02
0163:  ADDWF  12,W
0164:  MOVWF  04
0165:  BCF    03.7
0166:  BTFSC  13.0
0167:  BSF    03.7
0168:  MOVF   00,W
0169:  CLRF   23
016A:  CLRF   22
016B:  CLRF   21
016C:  MOVWF  20
016D:  CLRF   25
016E:  MOVF   04,W
016F:  MOVWF  24
0170:  BCF    25.0
0171:  BTFSC  03.7
0172:  BSF    25.0
0173:  MOVF   23,W
0174:  MOVWF  29
0175:  MOVF   22,W
0176:  MOVWF  28
0177:  MOVF   21,W
0178:  MOVWF  27
0179:  MOVF   20,W
017A:  MOVWF  26
017B:  CLRF   2D
017C:  CLRF   2C
017D:  CLRF   2B
017E:  MOVLW  3C
017F:  MOVWF  2A
0180:  BCF    03.5
0181:  BCF    03.6
0182:  CALL   101
0183:  BSF    03.5
0184:  BSF    03.6
0185:  MOVF   24,W
0186:  MOVWF  04
0187:  BCF    03.7
0188:  BTFSC  25.0
0189:  BSF    03.7
018A:  MOVF   7A,W
018B:  MOVWF  1B
018C:  MOVF   79,W
018D:  MOVWF  1A
018E:  MOVF   78,W
018F:  MOVWF  19
0190:  MOVF   77,W
0191:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0192:  MOVF   18,W
0193:  ADDWF  14,W
0194:  MOVWF  20
0195:  MOVF   15,W
0196:  MOVWF  21
0197:  MOVF   19,W
0198:  BTFSC  03.0
0199:  INCFSZ 19,W
019A:  ADDWF  21,F
019B:  MOVF   16,W
019C:  MOVWF  22
019D:  MOVF   1A,W
019E:  BTFSC  03.0
019F:  INCFSZ 1A,W
01A0:  ADDWF  22,F
01A1:  MOVF   17,W
01A2:  MOVWF  23
01A3:  MOVF   1B,W
01A4:  BTFSC  03.0
01A5:  INCFSZ 1B,W
01A6:  ADDWF  23,F
01A7:  MOVLW  03
01A8:  ADDWF  12,W
01A9:  MOVWF  04
01AA:  BCF    03.7
01AB:  BTFSC  13.0
01AC:  BSF    03.7
01AD:  MOVF   00,W
01AE:  ADDWF  20,W
01AF:  MOVWF  1C
01B0:  MOVF   21,W
01B1:  MOVWF  1D
01B2:  MOVLW  00
01B3:  BTFSC  03.0
01B4:  MOVLW  01
01B5:  ADDWF  1D,F
01B6:  MOVF   22,W
01B7:  MOVWF  1E
01B8:  MOVLW  00
01B9:  BTFSC  03.0
01BA:  MOVLW  01
01BB:  ADDWF  1E,F
01BC:  MOVF   23,W
01BD:  MOVWF  1F
01BE:  MOVLW  00
01BF:  BTFSC  03.0
01C0:  MOVLW  01
01C1:  ADDWF  1F,F
....................  
....................     return seconds; 
01C2:  MOVF   1C,W
01C3:  MOVWF  77
01C4:  MOVF   1D,W
01C5:  MOVWF  78
01C6:  MOVF   1E,W
01C7:  MOVWF  79
01C8:  MOVF   1F,W
01C9:  MOVWF  7A
01CA:  BCF    03.5
01CB:  BCF    03.6
01CC:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
0B0D:  BSF    03.6
0B0E:  CLRF   5F
0B0F:  CLRF   60
0B10:  CLRF   61
0B11:  BCF    0A.3
0B12:  BCF    03.6
0B13:  CALL   39E
0B14:  BSF    0A.3
0B15:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void Time_saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int Time_getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... void Time_showHoursMinutesRtc(BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
081A:  CLRF   1F
081B:  CLRF   20
081C:  CLRF   21
081D:  CLRF   22
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
081E:  BCF    0A.3
081F:  BCF    03.6
0820:  CALL   557
0821:  BSF    0A.3
0822:  MOVF   7A,W
0823:  BSF    03.6
0824:  MOVWF  2C
0825:  MOVF   79,W
0826:  MOVWF  2B
0827:  MOVF   78,W
0828:  MOVWF  2A
0829:  MOVF   77,W
082A:  MOVWF  29
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
082B:  MOVLW  01
082C:  MOVWF  37
082D:  MOVLW  29
082E:  MOVWF  36
082F:  CLRF   38
0830:  BCF    0A.3
0831:  BCF    03.6
0832:  CALL   66B
0833:  BSF    0A.3
0834:  MOVF   79,W
0835:  MOVWF  7A
0836:  MOVF   78,W
0837:  BSF    03.6
0838:  MOVWF  2D
0839:  MOVF   7A,W
083A:  MOVWF  2E
083B:  MOVLW  01
083C:  MOVWF  30
083D:  MOVLW  23
083E:  MOVWF  2F
083F:  MOVLW  06
0840:  MOVWF  78
0841:  MOVF   2D,W
0842:  MOVWF  04
0843:  BCF    03.7
0844:  BTFSC  2E.0
0845:  BSF    03.7
0846:  MOVF   00,W
0847:  MOVWF  77
0848:  MOVF   2F,W
0849:  MOVWF  04
084A:  BCF    03.7
084B:  BTFSC  30.0
084C:  BSF    03.7
084D:  MOVF   77,W
084E:  MOVWF  00
084F:  INCF   2F,F
0850:  BTFSC  03.2
0851:  INCF   30,F
0852:  INCF   2D,F
0853:  BTFSC  03.2
0854:  INCF   2E,F
0855:  DECFSZ 78,F
0856:  GOTO   041
....................     timeToSend[0] = timeInDigits.minute[0]; 
0857:  MOVF   25,W
0858:  MOVWF  1F
....................     timeToSend[1] = timeInDigits.minute[1]; 
0859:  MOVF   26,W
085A:  MOVWF  20
....................     timeToSend[2] = timeInDigits.hour[0]; 
085B:  MOVF   23,W
085C:  MOVWF  21
....................     timeToSend[3] = timeInDigits.hour[1]; 
085D:  MOVF   24,W
085E:  MOVWF  22
....................  
....................     if (blink) { 
085F:  MOVF   1E,F
0860:  BTFSC  03.2
0861:  GOTO   066
....................         blink = currentTime.second % 2; 
0862:  MOVF   2C,W
0863:  ANDLW  01
0864:  MOVWF  1E
....................     } else { 
0865:  GOTO   068
....................         blink = TRUE; 
0866:  MOVLW  01
0867:  MOVWF  1E
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
0868:  MOVLW  01
0869:  MOVWF  31
086A:  MOVLW  1F
086B:  MOVWF  30
086C:  MOVLW  04
086D:  MOVWF  32
086E:  MOVF   1E,W
086F:  MOVWF  33
0870:  BCF    0A.3
0871:  BCF    03.6
0872:  CALL   71F
0873:  BSF    0A.3
.................... } 
....................  
.................... void Time_showMinutesSecondsRtc(void) { 
....................     int timeToSend[4] = {0}; 
*
0881:  CLRF   1E
0882:  CLRF   1F
0883:  CLRF   20
0884:  CLRF   21
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0885:  BCF    0A.3
0886:  BCF    03.6
0887:  CALL   557
0888:  BSF    0A.3
0889:  MOVF   7A,W
088A:  BSF    03.6
088B:  MOVWF  2B
088C:  MOVF   79,W
088D:  MOVWF  2A
088E:  MOVF   78,W
088F:  MOVWF  29
0890:  MOVF   77,W
0891:  MOVWF  28
....................     currentTime.minute = (currentTime.minute + currentTime.hour * 60) % 100; 
0892:  MOVF   29,W
0893:  MOVWF  60
0894:  MOVLW  3C
0895:  MOVWF  61
0896:  BCF    0A.3
0897:  BCF    03.6
0898:  CALL   519
0899:  BSF    0A.3
089A:  MOVF   78,W
089B:  BSF    03.6
089C:  ADDWF  2A,W
089D:  MOVWF  2D
089E:  BSF    03.5
089F:  MOVWF  28
08A0:  MOVLW  64
08A1:  MOVWF  29
08A2:  BCF    0A.3
08A3:  BCF    03.5
08A4:  BCF    03.6
08A5:  CALL   03D
08A6:  BSF    0A.3
08A7:  MOVF   77,W
08A8:  BSF    03.6
08A9:  MOVWF  2A
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
08AA:  MOVLW  01
08AB:  MOVWF  37
08AC:  MOVLW  28
08AD:  MOVWF  36
08AE:  CLRF   38
08AF:  BCF    0A.3
08B0:  BCF    03.6
08B1:  CALL   66B
08B2:  BSF    0A.3
08B3:  MOVF   79,W
08B4:  MOVWF  7A
08B5:  MOVF   78,W
08B6:  BSF    03.6
08B7:  MOVWF  2C
08B8:  MOVF   7A,W
08B9:  MOVWF  2D
08BA:  MOVLW  01
08BB:  MOVWF  2F
08BC:  MOVLW  22
08BD:  MOVWF  2E
08BE:  MOVLW  06
08BF:  MOVWF  78
08C0:  MOVF   2C,W
08C1:  MOVWF  04
08C2:  BCF    03.7
08C3:  BTFSC  2D.0
08C4:  BSF    03.7
08C5:  MOVF   00,W
08C6:  MOVWF  77
08C7:  MOVF   2E,W
08C8:  MOVWF  04
08C9:  BCF    03.7
08CA:  BTFSC  2F.0
08CB:  BSF    03.7
08CC:  MOVF   77,W
08CD:  MOVWF  00
08CE:  INCF   2E,F
08CF:  BTFSC  03.2
08D0:  INCF   2F,F
08D1:  INCF   2C,F
08D2:  BTFSC  03.2
08D3:  INCF   2D,F
08D4:  DECFSZ 78,F
08D5:  GOTO   0C0
....................     timeToSend[0] = timeInDigits.second[0]; 
08D6:  MOVF   26,W
08D7:  MOVWF  1E
....................     timeToSend[1] = timeInDigits.second[1]; 
08D8:  MOVF   27,W
08D9:  MOVWF  1F
....................     timeToSend[2] = timeInDigits.minute[0]; 
08DA:  MOVF   24,W
08DB:  MOVWF  20
....................     timeToSend[3] = timeInDigits.minute[1]; 
08DC:  MOVF   25,W
08DD:  MOVWF  21
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
08DE:  MOVLW  01
08DF:  MOVWF  31
08E0:  MOVLW  1E
08E1:  MOVWF  30
08E2:  MOVLW  04
08E3:  MOVWF  32
08E4:  MOVLW  01
08E5:  MOVWF  33
08E6:  BCF    0A.3
08E7:  BCF    03.6
08E8:  CALL   71F
08E9:  BSF    0A.3
08EA:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time alarmTime; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
.................... } Timer; 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
024B:  MOVLW  04
024C:  BSF    03.6
024D:  ADDWF  52,W
024E:  MOVWF  78
024F:  MOVF   53,W
0250:  MOVWF  7A
0251:  BTFSC  03.0
0252:  INCF   7A,F
0253:  MOVF   78,W
0254:  BSF    03.5
0255:  MOVWF  10
0256:  MOVF   7A,W
0257:  MOVWF  11
0258:  MOVWF  13
0259:  MOVF   10,W
025A:  MOVWF  12
025B:  BCF    03.5
025C:  BCF    03.6
025D:  CALL   12F
025E:  MOVF   7A,W
025F:  BSF    03.6
0260:  MOVWF  57
0261:  MOVF   79,W
0262:  MOVWF  56
0263:  MOVF   78,W
0264:  MOVWF  55
0265:  MOVF   77,W
0266:  MOVWF  54
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
0267:  MOVLW  08
0268:  ADDWF  52,W
0269:  MOVWF  78
026A:  MOVF   53,W
026B:  MOVWF  7A
026C:  BTFSC  03.0
026D:  INCF   7A,F
026E:  MOVF   78,W
026F:  BSF    03.5
0270:  MOVWF  10
0271:  MOVF   7A,W
0272:  MOVWF  11
0273:  MOVWF  13
0274:  MOVF   10,W
0275:  MOVWF  12
0276:  BCF    03.5
0277:  BCF    03.6
0278:  CALL   12F
0279:  MOVF   7A,W
027A:  BSF    03.6
027B:  MOVWF  5B
027C:  MOVF   79,W
027D:  MOVWF  5A
027E:  MOVF   78,W
027F:  MOVWF  59
0280:  MOVF   77,W
0281:  MOVWF  58
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
0282:  MOVF   54,W
0283:  SUBWF  58,W
0284:  MOVWF  5C
0285:  MOVF   59,W
0286:  MOVWF  5D
0287:  MOVF   55,W
0288:  BTFSS  03.0
0289:  INCFSZ 55,W
028A:  SUBWF  5D,F
028B:  MOVF   5A,W
028C:  MOVWF  5E
028D:  MOVF   56,W
028E:  BTFSS  03.0
028F:  INCFSZ 56,W
0290:  SUBWF  5E,F
0291:  MOVF   5B,W
0292:  MOVWF  5F
0293:  MOVF   57,W
0294:  BTFSS  03.0
0295:  INCFSZ 57,W
0296:  SUBWF  5F,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
0297:  BTFSS  5F.7
0298:  GOTO   29E
0299:  CLRF   77
029A:  CLRF   78
029B:  CLRF   79
029C:  CLRF   7A
029D:  GOTO   2A6
029E:  MOVF   5C,W
029F:  MOVWF  77
02A0:  MOVF   5D,W
02A1:  MOVWF  78
02A2:  MOVF   5E,W
02A3:  MOVWF  79
02A4:  MOVF   5F,W
02A5:  MOVWF  7A
02A6:  MOVF   7A,W
02A7:  MOVWF  5F
02A8:  MOVF   79,W
02A9:  MOVWF  5E
02AA:  MOVF   78,W
02AB:  MOVWF  5D
02AC:  MOVF   77,W
02AD:  MOVWF  5C
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
02AE:  BCF    03.1
02AF:  MOVF   5F,W
02B0:  BSF    03.5
02B1:  MOVWF  25
02B2:  BCF    03.5
02B3:  MOVF   5E,W
02B4:  BSF    03.5
02B5:  MOVWF  24
02B6:  BCF    03.5
02B7:  MOVF   5D,W
02B8:  BSF    03.5
02B9:  MOVWF  23
02BA:  BCF    03.5
02BB:  MOVF   5C,W
02BC:  BSF    03.5
02BD:  MOVWF  22
02BE:  CLRF   29
02BF:  CLRF   28
02C0:  MOVLW  0E
02C1:  MOVWF  27
02C2:  MOVLW  10
02C3:  MOVWF  26
02C4:  BCF    03.5
02C5:  BCF    03.6
02C6:  CALL   1CD
02C7:  MOVF   7A,W
02C8:  BSF    03.6
02C9:  MOVWF  63
02CA:  MOVF   79,W
02CB:  MOVWF  62
02CC:  MOVF   78,W
02CD:  MOVWF  61
02CE:  MOVF   77,W
02CF:  MOVWF  60
02D0:  BSF    03.1
02D1:  MOVLW  90
02D2:  MOVWF  04
02D3:  BSF    03.7
02D4:  MOVF   5F,W
02D5:  BSF    03.5
02D6:  MOVWF  25
02D7:  BCF    03.5
02D8:  MOVF   5E,W
02D9:  BSF    03.5
02DA:  MOVWF  24
02DB:  BCF    03.5
02DC:  MOVF   5D,W
02DD:  BSF    03.5
02DE:  MOVWF  23
02DF:  BCF    03.5
02E0:  MOVF   5C,W
02E1:  BSF    03.5
02E2:  MOVWF  22
02E3:  CLRF   29
02E4:  CLRF   28
02E5:  MOVLW  0E
02E6:  MOVWF  27
02E7:  MOVLW  10
02E8:  MOVWF  26
02E9:  BCF    03.5
02EA:  BCF    03.6
02EB:  CALL   1CD
02EC:  BSF    03.5
02ED:  BSF    03.6
02EE:  MOVF   13,W
02EF:  MOVWF  17
02F0:  MOVF   12,W
02F1:  MOVWF  16
02F2:  MOVF   11,W
02F3:  MOVWF  15
02F4:  MOVF   10,W
02F5:  MOVWF  14
02F6:  CLRF   19
02F7:  MOVF   04,W
02F8:  MOVWF  18
02F9:  BCF    19.0
02FA:  BTFSC  03.7
02FB:  BSF    19.0
02FC:  BCF    03.1
02FD:  MOVF   13,W
02FE:  MOVWF  25
02FF:  MOVF   12,W
0300:  MOVWF  24
0301:  MOVF   11,W
0302:  MOVWF  23
0303:  MOVF   10,W
0304:  MOVWF  22
0305:  CLRF   29
0306:  CLRF   28
0307:  CLRF   27
0308:  MOVLW  3C
0309:  MOVWF  26
030A:  BCF    03.5
030B:  BCF    03.6
030C:  CALL   1CD
030D:  BSF    03.5
030E:  BSF    03.6
030F:  MOVF   18,W
0310:  MOVWF  04
0311:  BCF    03.7
0312:  BTFSC  19.0
0313:  BSF    03.7
0314:  MOVF   7A,W
0315:  BCF    03.5
0316:  MOVWF  67
0317:  MOVF   79,W
0318:  MOVWF  66
0319:  MOVF   78,W
031A:  MOVWF  65
031B:  MOVF   77,W
031C:  MOVWF  64
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
031D:  MOVLW  03
031E:  ADDWF  52,W
031F:  MOVWF  78
0320:  MOVF   53,W
0321:  MOVWF  7A
0322:  BTFSC  03.0
0323:  INCF   7A,F
0324:  MOVF   78,W
0325:  BSF    03.5
0326:  MOVWF  10
0327:  MOVF   7A,W
0328:  MOVWF  11
0329:  CLRF   13
032A:  MOVF   04,W
032B:  MOVWF  12
032C:  BCF    13.0
032D:  BTFSC  03.7
032E:  BSF    13.0
032F:  BSF    03.1
0330:  MOVLW  94
0331:  MOVWF  04
0332:  BSF    03.7
0333:  BCF    03.5
0334:  MOVF   5F,W
0335:  BSF    03.5
0336:  MOVWF  25
0337:  BCF    03.5
0338:  MOVF   5E,W
0339:  BSF    03.5
033A:  MOVWF  24
033B:  BCF    03.5
033C:  MOVF   5D,W
033D:  BSF    03.5
033E:  MOVWF  23
033F:  BCF    03.5
0340:  MOVF   5C,W
0341:  BSF    03.5
0342:  MOVWF  22
0343:  CLRF   29
0344:  CLRF   28
0345:  MOVLW  0E
0346:  MOVWF  27
0347:  MOVLW  10
0348:  MOVWF  26
0349:  BCF    03.5
034A:  BCF    03.6
034B:  CALL   1CD
034C:  BSF    03.5
034D:  BSF    03.6
034E:  MOVF   14,W
034F:  MOVWF  77
0350:  MOVF   15,W
0351:  MOVWF  78
0352:  MOVF   16,W
0353:  MOVWF  79
0354:  MOVF   17,W
0355:  MOVWF  7A
0356:  MOVF   12,W
0357:  MOVWF  04
0358:  BCF    03.7
0359:  BTFSC  13.0
035A:  BSF    03.7
035B:  MOVF   17,W
035C:  MOVWF  1B
035D:  MOVF   16,W
035E:  MOVWF  1A
035F:  MOVF   15,W
0360:  MOVWF  19
0361:  MOVF   14,W
0362:  MOVWF  18
0363:  CLRF   1D
0364:  MOVF   04,W
0365:  MOVWF  1C
0366:  BCF    1D.0
0367:  BTFSC  03.7
0368:  BSF    1D.0
0369:  BSF    03.1
036A:  MOVLW  9E
036B:  MOVWF  04
036C:  BSF    03.7
036D:  MOVF   17,W
036E:  MOVWF  25
036F:  MOVF   16,W
0370:  MOVWF  24
0371:  MOVF   15,W
0372:  MOVWF  23
0373:  MOVF   14,W
0374:  MOVWF  22
0375:  CLRF   29
0376:  CLRF   28
0377:  CLRF   27
0378:  MOVLW  3C
0379:  MOVWF  26
037A:  BCF    03.5
037B:  BCF    03.6
037C:  CALL   1CD
037D:  BSF    03.5
037E:  BSF    03.6
037F:  MOVF   1C,W
0380:  MOVWF  04
0381:  BCF    03.7
0382:  BTFSC  1D.0
0383:  BSF    03.7
0384:  MOVF   10,W
0385:  MOVWF  04
0386:  BCF    03.7
0387:  BTFSC  11.0
0388:  BSF    03.7
0389:  MOVF   1E,W
038A:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
038B:  MOVLW  01
038C:  BCF    03.5
038D:  ADDWF  52,W
038E:  MOVWF  04
038F:  BCF    03.7
0390:  BTFSC  53.0
0391:  BSF    03.7
0392:  MOVF   60,W
0393:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
0394:  MOVLW  02
0395:  ADDWF  52,W
0396:  MOVWF  04
0397:  BCF    03.7
0398:  BTFSC  53.0
0399:  BSF    03.7
039A:  MOVF   64,W
039B:  MOVWF  00
039C:  BCF    03.6
039D:  RETURN
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int hoursUpperBound, int minutesUpperBound, __EEADDRESS__ addressAlarmHour, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressRtcHour, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmHours = addressAlarmHour; 
*
1108:  MOVF   5A,W
1109:  BSF    03.5
110A:  MOVWF  1F
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
110B:  BCF    03.5
110C:  MOVF   5C,W
110D:  BSF    03.5
110E:  MOVWF  1E
....................     newTimer.addressRtcHours = addressRtcHour; 
110F:  BCF    03.5
1110:  MOVF   5E,W
1111:  BSF    03.5
1112:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
1113:  BCF    03.5
1114:  MOVF   60,W
1115:  BSF    03.5
1116:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
1117:  BCF    03.5
1118:  MOVF   62,W
1119:  BSF    03.5
111A:  MOVWF  22
....................  
....................     newTimer.alarmTime.hour = read_eeprom(addressAlarmHour) % (hoursUpperBound + 1); 
111B:  BCF    03.5
111C:  MOVF   5A,W
111D:  MOVWF  0D
111E:  BSF    03.5
111F:  BCF    0C.7
1120:  BSF    0C.0
1121:  BCF    03.5
1122:  MOVF   0C,W
1123:  MOVWF  64
1124:  MOVLW  01
1125:  ADDWF  58,W
1126:  MOVWF  65
1127:  MOVF   64,W
1128:  BSF    03.5
1129:  MOVWF  28
112A:  BCF    03.5
112B:  MOVF   65,W
112C:  BSF    03.5
112D:  MOVWF  29
112E:  BCF    0A.4
112F:  BCF    03.5
1130:  BCF    03.6
1131:  CALL   03D
1132:  BSF    0A.4
1133:  MOVF   77,W
1134:  BSF    03.5
1135:  BSF    03.6
1136:  MOVWF  19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
1137:  BCF    03.5
1138:  MOVF   5C,W
1139:  MOVWF  0D
113A:  BSF    03.5
113B:  BCF    0C.7
113C:  BSF    0C.0
113D:  BCF    03.5
113E:  MOVF   0C,W
113F:  MOVWF  64
1140:  MOVLW  01
1141:  ADDWF  59,W
1142:  MOVWF  65
1143:  MOVF   64,W
1144:  BSF    03.5
1145:  MOVWF  28
1146:  BCF    03.5
1147:  MOVF   65,W
1148:  BSF    03.5
1149:  MOVWF  29
114A:  BCF    0A.4
114B:  BCF    03.5
114C:  BCF    03.6
114D:  CALL   03D
114E:  BSF    0A.4
114F:  MOVF   77,W
1150:  BSF    03.5
1151:  BSF    03.6
1152:  MOVWF  1A
....................     newTimer.alarmTime.second = 0; 
1153:  CLRF   1B
....................  
....................     newTimer.hoursUpperBound = hoursUpperBound; 
1154:  BCF    03.5
1155:  MOVF   58,W
1156:  BSF    03.5
1157:  MOVWF  23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
1158:  BCF    03.5
1159:  MOVF   59,W
115A:  BSF    03.5
115B:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
115C:  MOVLW  3B
115D:  MOVWF  25
....................  
.................... //    newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 100; 
.................... //    newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (minutesUpperBound + 1); 
.................... //    newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
....................  
....................     return newTimer; 
115E:  MOVLW  90
115F:  MOVWF  78
1160:  MOVLW  01
1161:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int minutesUpperBound, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
*
1199:  MOVF   59,W
119A:  BSF    03.5
119B:  MOVWF  1E
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
119C:  BCF    03.5
119D:  MOVF   5B,W
119E:  BSF    03.5
119F:  MOVWF  1D
....................     newTimer.addressRtcHours = addressRtcHour; 
11A0:  BCF    03.5
11A1:  MOVF   5D,W
11A2:  BSF    03.5
11A3:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
11A4:  BCF    03.5
11A5:  MOVF   5F,W
11A6:  BSF    03.5
11A7:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
11A8:  BCF    03.5
11A9:  MOVF   61,W
11AA:  BSF    03.5
11AB:  MOVWF  22
....................  
....................     newTimer.hoursUpperBound = 0; 
11AC:  CLRF   23
....................     newTimer.minutesUpperBound = minutesUpperBound; 
11AD:  BCF    03.5
11AE:  MOVF   58,W
11AF:  BSF    03.5
11B0:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
11B1:  MOVLW  3B
11B2:  MOVWF  25
....................  
....................     newTimer.alarmTime.hour = 0; 
11B3:  CLRF   19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (minutesUpperBound + 1); 
11B4:  BCF    03.5
11B5:  MOVF   59,W
11B6:  MOVWF  0D
11B7:  BSF    03.5
11B8:  BCF    0C.7
11B9:  BSF    0C.0
11BA:  BCF    03.5
11BB:  MOVF   0C,W
11BC:  MOVWF  63
11BD:  MOVLW  01
11BE:  ADDWF  58,W
11BF:  MOVWF  64
11C0:  MOVF   63,W
11C1:  BSF    03.5
11C2:  MOVWF  28
11C3:  BCF    03.5
11C4:  MOVF   64,W
11C5:  BSF    03.5
11C6:  MOVWF  29
11C7:  BCF    0A.4
11C8:  BCF    03.5
11C9:  BCF    03.6
11CA:  CALL   03D
11CB:  BSF    0A.4
11CC:  MOVF   77,W
11CD:  BSF    03.5
11CE:  BSF    03.6
11CF:  MOVWF  1A
....................     newTimer.alarmTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
11D0:  BCF    03.5
11D1:  MOVF   5B,W
11D2:  MOVWF  0D
11D3:  BSF    03.5
11D4:  BCF    0C.7
11D5:  BSF    0C.0
11D6:  BCF    03.5
11D7:  MOVF   0C,W
11D8:  MOVWF  63
11D9:  MOVLW  01
11DA:  BSF    03.5
11DB:  ADDWF  25,W
11DC:  BCF    03.5
11DD:  MOVWF  64
11DE:  MOVF   63,W
11DF:  BSF    03.5
11E0:  MOVWF  28
11E1:  BCF    03.5
11E2:  MOVF   64,W
11E3:  BSF    03.5
11E4:  MOVWF  29
11E5:  BCF    0A.4
11E6:  BCF    03.5
11E7:  BCF    03.6
11E8:  CALL   03D
11E9:  BSF    0A.4
11EA:  MOVF   77,W
11EB:  BSF    03.5
11EC:  BSF    03.6
11ED:  MOVWF  1B
....................  
....................  
.................... //    newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 2; 
.................... //    newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (minutesUpperBound + 1); 
.................... //    newTimer.currentTime.minute = (newTimer.currentTime.minute + newTimer.currentTime.hour * 60) % 100; 
.................... //    newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
....................  
....................     return newTimer; 
11EE:  MOVLW  90
11EF:  MOVWF  78
11F0:  MOVLW  01
11F1:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_setRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
0454:  MOVLW  04
0455:  ADDWF  56,W
0456:  MOVWF  78
0457:  MOVF   57,W
0458:  MOVWF  7A
0459:  BTFSC  03.0
045A:  INCF   7A,F
045B:  MOVF   78,W
045C:  MOVWF  58
045D:  MOVF   7A,W
045E:  MOVWF  59
045F:  MOVWF  5B
0460:  MOVF   58,W
0461:  MOVWF  5A
0462:  BCF    03.6
0463:  CALL   3C9
0464:  BSF    03.6
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
*
121E:  MOVLW  05
121F:  ADDWF  4E,W
1220:  MOVWF  78
1221:  MOVF   4F,W
1222:  MOVWF  7A
1223:  BTFSC  03.0
1224:  INCF   7A,F
1225:  MOVF   78,W
1226:  MOVWF  50
1227:  MOVF   7A,W
1228:  MOVWF  51
1229:  MOVLW  10
122A:  ADDWF  4E,W
122B:  MOVWF  04
122C:  BCF    03.7
122D:  BTFSC  4F.0
122E:  BSF    03.7
122F:  MOVF   00,W
1230:  MOVWF  52
1231:  MOVF   52,W
1232:  MOVWF  0D
1233:  BSF    03.5
1234:  BCF    0C.7
1235:  BSF    0C.0
1236:  BCF    03.5
1237:  MOVF   0C,W
1238:  MOVWF  52
1239:  MOVLW  13
123A:  ADDWF  4E,W
123B:  MOVWF  04
123C:  BCF    03.7
123D:  BTFSC  4F.0
123E:  BSF    03.7
123F:  MOVLW  01
1240:  ADDWF  00,W
1241:  MOVWF  53
1242:  MOVF   52,W
1243:  BSF    03.5
1244:  MOVWF  28
1245:  BCF    03.5
1246:  MOVF   53,W
1247:  BSF    03.5
1248:  MOVWF  29
1249:  BCF    0A.4
124A:  BCF    03.5
124B:  BCF    03.6
124C:  CALL   03D
124D:  BSF    0A.4
124E:  MOVF   77,W
124F:  BSF    03.6
1250:  MOVWF  52
1251:  MOVF   50,W
1252:  MOVWF  04
1253:  BCF    03.7
1254:  BTFSC  51.0
1255:  BSF    03.7
1256:  MOVF   52,W
1257:  MOVWF  00
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
1258:  MOVLW  06
1259:  ADDWF  4E,W
125A:  MOVWF  78
125B:  MOVF   4F,W
125C:  MOVWF  7A
125D:  BTFSC  03.0
125E:  INCF   7A,F
125F:  MOVF   78,W
1260:  MOVWF  50
1261:  MOVF   7A,W
1262:  MOVWF  51
1263:  MOVLW  11
1264:  ADDWF  4E,W
1265:  MOVWF  04
1266:  BCF    03.7
1267:  BTFSC  4F.0
1268:  BSF    03.7
1269:  MOVF   00,W
126A:  MOVWF  52
126B:  MOVF   52,W
126C:  MOVWF  0D
126D:  BSF    03.5
126E:  BCF    0C.7
126F:  BSF    0C.0
1270:  BCF    03.5
1271:  MOVF   0C,W
1272:  MOVWF  52
1273:  MOVLW  14
1274:  ADDWF  4E,W
1275:  MOVWF  04
1276:  BCF    03.7
1277:  BTFSC  4F.0
1278:  BSF    03.7
1279:  MOVLW  01
127A:  ADDWF  00,W
127B:  MOVWF  53
127C:  MOVF   52,W
127D:  BSF    03.5
127E:  MOVWF  28
127F:  BCF    03.5
1280:  MOVF   53,W
1281:  BSF    03.5
1282:  MOVWF  29
1283:  BCF    0A.4
1284:  BCF    03.5
1285:  BCF    03.6
1286:  CALL   03D
1287:  BSF    0A.4
1288:  MOVF   77,W
1289:  BSF    03.6
128A:  MOVWF  52
128B:  MOVF   50,W
128C:  MOVWF  04
128D:  BCF    03.7
128E:  BTFSC  51.0
128F:  BSF    03.7
1290:  MOVF   52,W
1291:  MOVWF  00
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
1292:  MOVLW  07
1293:  ADDWF  4E,W
1294:  MOVWF  78
1295:  MOVF   4F,W
1296:  MOVWF  7A
1297:  BTFSC  03.0
1298:  INCF   7A,F
1299:  MOVF   78,W
129A:  MOVWF  50
129B:  MOVF   7A,W
129C:  MOVWF  51
129D:  MOVLW  12
129E:  ADDWF  4E,W
129F:  MOVWF  04
12A0:  BCF    03.7
12A1:  BTFSC  4F.0
12A2:  BSF    03.7
12A3:  MOVF   00,W
12A4:  MOVWF  52
12A5:  MOVF   52,W
12A6:  MOVWF  0D
12A7:  BSF    03.5
12A8:  BCF    0C.7
12A9:  BSF    0C.0
12AA:  BCF    03.5
12AB:  MOVF   0C,W
12AC:  MOVWF  52
12AD:  MOVLW  15
12AE:  ADDWF  4E,W
12AF:  MOVWF  04
12B0:  BCF    03.7
12B1:  BTFSC  4F.0
12B2:  BSF    03.7
12B3:  MOVLW  01
12B4:  ADDWF  00,W
12B5:  MOVWF  53
12B6:  MOVF   52,W
12B7:  BSF    03.5
12B8:  MOVWF  28
12B9:  BCF    03.5
12BA:  MOVF   53,W
12BB:  BSF    03.5
12BC:  MOVWF  29
12BD:  BCF    0A.4
12BE:  BCF    03.5
12BF:  BCF    03.6
12C0:  CALL   03D
12C1:  BSF    0A.4
12C2:  MOVF   77,W
12C3:  BSF    03.6
12C4:  MOVWF  52
12C5:  MOVF   50,W
12C6:  MOVWF  04
12C7:  BCF    03.7
12C8:  BTFSC  51.0
12C9:  BSF    03.7
12CA:  MOVF   52,W
12CB:  MOVWF  00
....................     Timer_updateCountdownTime(timerPtr); 
12CC:  MOVF   4F,W
12CD:  MOVWF  53
12CE:  MOVF   4E,W
12CF:  MOVWF  52
12D0:  BCF    0A.4
12D1:  BCF    03.6
12D2:  CALL   24B
12D3:  BSF    0A.4
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->alarmTime.hour + 1; 
*
195F:  MOVLW  09
1960:  ADDWF  1F,W
1961:  MOVWF  78
1962:  MOVF   20,W
1963:  MOVWF  7A
1964:  BTFSC  03.0
1965:  INCF   7A,F
1966:  MOVF   78,W
1967:  MOVWF  21
1968:  MOVF   7A,W
1969:  MOVWF  22
196A:  MOVLW  09
196B:  ADDWF  1F,W
196C:  MOVWF  04
196D:  BCF    03.7
196E:  BTFSC  20.0
196F:  BSF    03.7
1970:  MOVF   00,W
1971:  MOVWF  23
1972:  MOVLW  13
1973:  ADDWF  1F,W
1974:  MOVWF  04
1975:  BCF    03.7
1976:  BTFSC  20.0
1977:  BSF    03.7
1978:  MOVF   00,W
1979:  SUBWF  23,W
197A:  BTFSS  03.2
197B:  GOTO   17E
197C:  MOVLW  00
197D:  GOTO   186
197E:  MOVLW  09
197F:  ADDWF  1F,W
1980:  MOVWF  04
1981:  BCF    03.7
1982:  BTFSC  20.0
1983:  BSF    03.7
1984:  MOVLW  01
1985:  ADDWF  00,W
1986:  MOVWF  23
1987:  MOVF   21,W
1988:  MOVWF  04
1989:  BCF    03.7
198A:  BTFSC  22.0
198B:  BSF    03.7
198C:  MOVF   23,W
198D:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->alarmTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->alarmTime.minute + 1; 
*
0BDD:  MOVLW  0A
0BDE:  BSF    03.6
0BDF:  ADDWF  1F,W
0BE0:  MOVWF  78
0BE1:  MOVF   20,W
0BE2:  MOVWF  7A
0BE3:  BTFSC  03.0
0BE4:  INCF   7A,F
0BE5:  MOVF   78,W
0BE6:  MOVWF  21
0BE7:  MOVF   7A,W
0BE8:  MOVWF  22
0BE9:  MOVLW  0A
0BEA:  ADDWF  1F,W
0BEB:  MOVWF  04
0BEC:  BCF    03.7
0BED:  BTFSC  20.0
0BEE:  BSF    03.7
0BEF:  MOVF   00,W
0BF0:  MOVWF  23
0BF1:  MOVLW  14
0BF2:  ADDWF  1F,W
0BF3:  MOVWF  04
0BF4:  BCF    03.7
0BF5:  BTFSC  20.0
0BF6:  BSF    03.7
0BF7:  MOVF   00,W
0BF8:  SUBWF  23,W
0BF9:  BTFSS  03.2
0BFA:  GOTO   3FD
0BFB:  MOVLW  00
0BFC:  GOTO   405
0BFD:  MOVLW  0A
0BFE:  ADDWF  1F,W
0BFF:  MOVWF  04
0C00:  BCF    03.7
0C01:  BTFSC  20.0
0C02:  BSF    03.7
0C03:  MOVLW  01
0C04:  ADDWF  00,W
0C05:  MOVWF  23
0C06:  MOVF   21,W
0C07:  MOVWF  04
0C08:  BCF    03.7
0C09:  BTFSC  22.0
0C0A:  BSF    03.7
0C0B:  MOVF   23,W
0C0C:  MOVWF  00
0C0D:  BCF    03.6
0C0E:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->alarmTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->alarmTime.second + 1; 
*
1B20:  MOVLW  0B
1B21:  ADDWF  1F,W
1B22:  MOVWF  78
1B23:  MOVF   20,W
1B24:  MOVWF  7A
1B25:  BTFSC  03.0
1B26:  INCF   7A,F
1B27:  MOVF   78,W
1B28:  MOVWF  21
1B29:  MOVF   7A,W
1B2A:  MOVWF  22
1B2B:  MOVLW  0B
1B2C:  ADDWF  1F,W
1B2D:  MOVWF  04
1B2E:  BCF    03.7
1B2F:  BTFSC  20.0
1B30:  BSF    03.7
1B31:  MOVF   00,W
1B32:  MOVWF  23
1B33:  MOVLW  15
1B34:  ADDWF  1F,W
1B35:  MOVWF  04
1B36:  BCF    03.7
1B37:  BTFSC  20.0
1B38:  BSF    03.7
1B39:  MOVF   00,W
1B3A:  SUBWF  23,W
1B3B:  BTFSS  03.2
1B3C:  GOTO   33F
1B3D:  MOVLW  00
1B3E:  GOTO   347
1B3F:  MOVLW  0B
1B40:  ADDWF  1F,W
1B41:  MOVWF  04
1B42:  BCF    03.7
1B43:  BTFSC  20.0
1B44:  BSF    03.7
1B45:  MOVLW  01
1B46:  ADDWF  00,W
1B47:  MOVWF  23
1B48:  MOVF   21,W
1B49:  MOVWF  04
1B4A:  BCF    03.7
1B4B:  BTFSC  22.0
1B4C:  BSF    03.7
1B4D:  MOVF   23,W
1B4E:  MOVWF  00
1B4F:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->alarmTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0A1F:  MOVLW  10
0A20:  ADDWF  1F,W
0A21:  MOVWF  04
0A22:  BCF    03.7
0A23:  BTFSC  20.0
0A24:  BSF    03.7
0A25:  MOVF   00,W
0A26:  MOVWF  21
0A27:  MOVLW  05
0A28:  ADDWF  1F,W
0A29:  MOVWF  04
0A2A:  BCF    03.7
0A2B:  BTFSC  20.0
0A2C:  BSF    03.7
0A2D:  MOVF   00,W
0A2E:  MOVWF  22
0A2F:  BCF    03.6
0A30:  MOVF   0B,W
0A31:  MOVWF  77
0A32:  BCF    0B.7
0A33:  BSF    03.6
0A34:  MOVF   21,W
0A35:  MOVWF  0D
0A36:  MOVF   22,W
0A37:  MOVWF  0C
0A38:  BSF    03.5
0A39:  BCF    0C.7
0A3A:  BSF    0C.2
0A3B:  MOVLW  55
0A3C:  MOVWF  0D
0A3D:  MOVLW  AA
0A3E:  MOVWF  0D
0A3F:  BSF    0C.1
0A40:  BTFSC  0C.1
0A41:  GOTO   240
0A42:  BCF    0C.2
0A43:  MOVF   77,W
0A44:  BCF    03.5
0A45:  BCF    03.6
0A46:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0A47:  MOVLW  11
0A48:  BSF    03.6
0A49:  ADDWF  1F,W
0A4A:  MOVWF  04
0A4B:  BCF    03.7
0A4C:  BTFSC  20.0
0A4D:  BSF    03.7
0A4E:  MOVF   00,W
0A4F:  MOVWF  21
0A50:  MOVLW  06
0A51:  ADDWF  1F,W
0A52:  MOVWF  04
0A53:  BCF    03.7
0A54:  BTFSC  20.0
0A55:  BSF    03.7
0A56:  MOVF   00,W
0A57:  MOVWF  22
0A58:  BCF    03.6
0A59:  MOVF   0B,W
0A5A:  MOVWF  77
0A5B:  BCF    0B.7
0A5C:  BSF    03.6
0A5D:  MOVF   21,W
0A5E:  MOVWF  0D
0A5F:  MOVF   22,W
0A60:  MOVWF  0C
0A61:  BSF    03.5
0A62:  BCF    0C.7
0A63:  BSF    0C.2
0A64:  MOVLW  55
0A65:  MOVWF  0D
0A66:  MOVLW  AA
0A67:  MOVWF  0D
0A68:  BSF    0C.1
0A69:  BTFSC  0C.1
0A6A:  GOTO   269
0A6B:  BCF    0C.2
0A6C:  MOVF   77,W
0A6D:  BCF    03.5
0A6E:  BCF    03.6
0A6F:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0A70:  MOVLW  12
0A71:  BSF    03.6
0A72:  ADDWF  1F,W
0A73:  MOVWF  04
0A74:  BCF    03.7
0A75:  BTFSC  20.0
0A76:  BSF    03.7
0A77:  MOVF   00,W
0A78:  MOVWF  21
0A79:  MOVLW  07
0A7A:  ADDWF  1F,W
0A7B:  MOVWF  04
0A7C:  BCF    03.7
0A7D:  BTFSC  20.0
0A7E:  BSF    03.7
0A7F:  MOVF   00,W
0A80:  MOVWF  22
0A81:  BCF    03.6
0A82:  MOVF   0B,W
0A83:  MOVWF  77
0A84:  BCF    0B.7
0A85:  BSF    03.6
0A86:  MOVF   21,W
0A87:  MOVWF  0D
0A88:  MOVF   22,W
0A89:  MOVWF  0C
0A8A:  BSF    03.5
0A8B:  BCF    0C.7
0A8C:  BSF    0C.2
0A8D:  MOVLW  55
0A8E:  MOVWF  0D
0A8F:  MOVLW  AA
0A90:  MOVWF  0D
0A91:  BSF    0C.1
0A92:  BTFSC  0C.1
0A93:  GOTO   292
0A94:  BCF    0C.2
0A95:  MOVF   77,W
0A96:  BCF    03.5
0A97:  BCF    03.6
0A98:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarm(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
.................... void Timer_saveAlarmHoursMinutes(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
*
1CF2:  MOVLW  0F
1CF3:  ADDWF  1D,W
1CF4:  MOVWF  04
1CF5:  BCF    03.7
1CF6:  BTFSC  1E.0
1CF7:  BSF    03.7
1CF8:  MOVF   00,W
1CF9:  MOVWF  1F
1CFA:  MOVLW  09
1CFB:  ADDWF  1D,W
1CFC:  MOVWF  04
1CFD:  BCF    03.7
1CFE:  BTFSC  1E.0
1CFF:  BSF    03.7
1D00:  MOVF   00,W
1D01:  MOVWF  20
1D02:  BCF    03.6
1D03:  MOVF   0B,W
1D04:  MOVWF  77
1D05:  BCF    0B.7
1D06:  BSF    03.6
1D07:  MOVF   1F,W
1D08:  MOVWF  0D
1D09:  MOVF   20,W
1D0A:  MOVWF  0C
1D0B:  BSF    03.5
1D0C:  BCF    0C.7
1D0D:  BSF    0C.2
1D0E:  MOVLW  55
1D0F:  MOVWF  0D
1D10:  MOVLW  AA
1D11:  MOVWF  0D
1D12:  BSF    0C.1
1D13:  BTFSC  0C.1
1D14:  GOTO   513
1D15:  BCF    0C.2
1D16:  MOVF   77,W
1D17:  BCF    03.5
1D18:  BCF    03.6
1D19:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute);     
1D1A:  MOVLW  0E
1D1B:  BSF    03.6
1D1C:  ADDWF  1D,W
1D1D:  MOVWF  04
1D1E:  BCF    03.7
1D1F:  BTFSC  1E.0
1D20:  BSF    03.7
1D21:  MOVF   00,W
1D22:  MOVWF  1F
1D23:  MOVLW  0A
1D24:  ADDWF  1D,W
1D25:  MOVWF  04
1D26:  BCF    03.7
1D27:  BTFSC  1E.0
1D28:  BSF    03.7
1D29:  MOVF   00,W
1D2A:  MOVWF  20
1D2B:  BCF    03.6
1D2C:  MOVF   0B,W
1D2D:  MOVWF  77
1D2E:  BCF    0B.7
1D2F:  BSF    03.6
1D30:  MOVF   1F,W
1D31:  MOVWF  0D
1D32:  MOVF   20,W
1D33:  MOVWF  0C
1D34:  BSF    03.5
1D35:  BCF    0C.7
1D36:  BSF    0C.2
1D37:  MOVLW  55
1D38:  MOVWF  0D
1D39:  MOVLW  AA
1D3A:  MOVWF  0D
1D3B:  BSF    0C.1
1D3C:  BTFSC  0C.1
1D3D:  GOTO   53C
1D3E:  BCF    0C.2
1D3F:  MOVF   77,W
1D40:  BCF    03.5
1D41:  BCF    03.6
1D42:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarmMinutesSeconds(Timer *timerPtr) {   
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
*
1D5C:  MOVLW  0E
1D5D:  ADDWF  1F,W
1D5E:  MOVWF  04
1D5F:  BCF    03.7
1D60:  BTFSC  20.0
1D61:  BSF    03.7
1D62:  MOVF   00,W
1D63:  MOVWF  21
1D64:  MOVLW  0A
1D65:  ADDWF  1F,W
1D66:  MOVWF  04
1D67:  BCF    03.7
1D68:  BTFSC  20.0
1D69:  BSF    03.7
1D6A:  MOVF   00,W
1D6B:  MOVWF  22
1D6C:  BCF    03.6
1D6D:  MOVF   0B,W
1D6E:  MOVWF  77
1D6F:  BCF    0B.7
1D70:  BSF    03.6
1D71:  MOVF   21,W
1D72:  MOVWF  0D
1D73:  MOVF   22,W
1D74:  MOVWF  0C
1D75:  BSF    03.5
1D76:  BCF    0C.7
1D77:  BSF    0C.2
1D78:  MOVLW  55
1D79:  MOVWF  0D
1D7A:  MOVLW  AA
1D7B:  MOVWF  0D
1D7C:  BSF    0C.1
1D7D:  BTFSC  0C.1
1D7E:  GOTO   57D
1D7F:  BCF    0C.2
1D80:  MOVF   77,W
1D81:  BCF    03.5
1D82:  BCF    03.6
1D83:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
1D84:  MOVLW  0D
1D85:  BSF    03.6
1D86:  ADDWF  1F,W
1D87:  MOVWF  04
1D88:  BCF    03.7
1D89:  BTFSC  20.0
1D8A:  BSF    03.7
1D8B:  MOVF   00,W
1D8C:  MOVWF  21
1D8D:  MOVLW  0B
1D8E:  ADDWF  1F,W
1D8F:  MOVWF  04
1D90:  BCF    03.7
1D91:  BTFSC  20.0
1D92:  BSF    03.7
1D93:  MOVF   00,W
1D94:  MOVWF  22
1D95:  BCF    03.6
1D96:  MOVF   0B,W
1D97:  MOVWF  77
1D98:  BCF    0B.7
1D99:  BSF    03.6
1D9A:  MOVF   21,W
1D9B:  MOVWF  0D
1D9C:  MOVF   22,W
1D9D:  MOVWF  0C
1D9E:  BSF    03.5
1D9F:  BCF    0C.7
1DA0:  BSF    0C.2
1DA1:  MOVLW  55
1DA2:  MOVWF  0D
1DA3:  MOVLW  AA
1DA4:  MOVWF  0D
1DA5:  BSF    0C.1
1DA6:  BTFSC  0C.1
1DA7:  GOTO   5A6
1DA8:  BCF    0C.2
1DA9:  MOVF   77,W
1DAA:  BCF    03.5
1DAB:  BCF    03.6
1DAC:  IORWF  0B,F
1DAD:  BSF    03.6
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
13F9:  MOVF   1F,W
13FA:  MOVWF  78
13FB:  MOVF   20,W
13FC:  MOVWF  7A
13FD:  MOVF   78,W
13FE:  MOVWF  21
13FF:  MOVF   7A,W
1400:  MOVWF  22
1401:  MOVF   22,W
1402:  MOVWF  24
1403:  MOVF   21,W
1404:  MOVWF  23
*
1424:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->alarmTime.hour == 0)&& (timerPtr->alarmTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
090C:  CLRF   23
090D:  CLRF   24
090E:  CLRF   25
090F:  CLRF   26
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0910:  MOVF   20,W
0911:  MOVWF  78
0912:  MOVF   21,W
0913:  MOVWF  7A
0914:  MOVF   78,W
0915:  MOVWF  2D
0916:  MOVF   7A,W
0917:  MOVWF  2E
0918:  MOVWF  37
0919:  MOVF   2D,W
091A:  MOVWF  36
091B:  CLRF   38
091C:  BCF    0A.3
091D:  BCF    03.6
091E:  CALL   66B
091F:  BSF    0A.3
0920:  MOVF   79,W
0921:  MOVWF  7A
0922:  MOVF   78,W
0923:  BSF    03.6
0924:  MOVWF  2D
0925:  MOVF   7A,W
0926:  MOVWF  2E
0927:  MOVLW  01
0928:  MOVWF  30
0929:  MOVLW  27
092A:  MOVWF  2F
092B:  MOVLW  06
092C:  MOVWF  78
092D:  MOVF   2D,W
092E:  MOVWF  04
092F:  BCF    03.7
0930:  BTFSC  2E.0
0931:  BSF    03.7
0932:  MOVF   00,W
0933:  MOVWF  77
0934:  MOVF   2F,W
0935:  MOVWF  04
0936:  BCF    03.7
0937:  BTFSC  30.0
0938:  BSF    03.7
0939:  MOVF   77,W
093A:  MOVWF  00
093B:  INCF   2F,F
093C:  BTFSC  03.2
093D:  INCF   30,F
093E:  INCF   2D,F
093F:  BTFSC  03.2
0940:  INCF   2E,F
0941:  DECFSZ 78,F
0942:  GOTO   12D
....................     timeToSend[0] = timeInDigits.minute[0]; 
0943:  MOVF   29,W
0944:  MOVWF  23
....................     timeToSend[1] = timeInDigits.minute[1]; 
0945:  MOVF   2A,W
0946:  MOVWF  24
....................     timeToSend[2] = timeInDigits.hour[0]; 
0947:  MOVF   27,W
0948:  MOVWF  25
....................     timeToSend[3] = timeInDigits.hour[1]; 
0949:  MOVF   28,W
094A:  MOVWF  26
....................  
....................     if (blink) { 
094B:  MOVF   22,F
094C:  BTFSC  03.2
094D:  GOTO   158
....................         blink = timerPtr->currentTime.second % 2; 
094E:  MOVLW  07
094F:  ADDWF  20,W
0950:  MOVWF  04
0951:  BCF    03.7
0952:  BTFSC  21.0
0953:  BSF    03.7
0954:  MOVF   00,W
0955:  ANDLW  01
0956:  MOVWF  22
....................     } else { 
0957:  GOTO   15A
....................         blink = TRUE; 
0958:  MOVLW  01
0959:  MOVWF  22
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
095A:  MOVLW  01
095B:  MOVWF  31
095C:  MOVLW  23
095D:  MOVWF  30
095E:  MOVLW  04
095F:  MOVWF  32
0960:  MOVF   22,W
0961:  MOVWF  33
0962:  BCF    0A.3
0963:  BCF    03.6
0964:  CALL   71F
0965:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
097B:  CLRF   22
097C:  CLRF   23
097D:  CLRF   24
097E:  CLRF   25
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................  
....................     time = timerPtr->countdownTime; 
097F:  MOVF   20,W
0980:  MOVWF  04
0981:  BCF    03.7
0982:  BTFSC  21.0
0983:  BSF    03.7
0984:  MOVF   00,W
0985:  MOVWF  77
0986:  INCF   04,F
0987:  MOVF   00,W
0988:  MOVWF  78
0989:  INCF   04,F
098A:  MOVF   00,W
098B:  MOVWF  79
098C:  INCF   04,F
098D:  MOVF   00,W
098E:  MOVWF  7A
098F:  MOVF   77,W
0990:  MOVWF  2C
0991:  MOVF   78,W
0992:  MOVWF  2D
0993:  MOVF   79,W
0994:  MOVWF  2E
0995:  MOVF   7A,W
0996:  MOVWF  2F
....................     time.minute = (time.minute + time.hour * 60) % 100; 
0997:  MOVF   2D,W
0998:  MOVWF  60
0999:  MOVLW  3C
099A:  MOVWF  61
099B:  BCF    0A.3
099C:  BCF    03.6
099D:  CALL   519
099E:  BSF    0A.3
099F:  MOVF   78,W
09A0:  BSF    03.6
09A1:  ADDWF  2E,W
09A2:  MOVWF  31
09A3:  BSF    03.5
09A4:  MOVWF  28
09A5:  MOVLW  64
09A6:  MOVWF  29
09A7:  BCF    0A.3
09A8:  BCF    03.5
09A9:  BCF    03.6
09AA:  CALL   03D
09AB:  BSF    0A.3
09AC:  MOVF   77,W
09AD:  BSF    03.6
09AE:  MOVWF  2E
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE); 
09AF:  MOVLW  01
09B0:  MOVWF  37
09B1:  MOVLW  2C
09B2:  MOVWF  36
09B3:  CLRF   38
09B4:  BCF    0A.3
09B5:  BCF    03.6
09B6:  CALL   66B
09B7:  BSF    0A.3
09B8:  MOVF   79,W
09B9:  MOVWF  7A
09BA:  MOVF   78,W
09BB:  BSF    03.6
09BC:  MOVWF  30
09BD:  MOVF   7A,W
09BE:  MOVWF  31
09BF:  MOVLW  01
09C0:  MOVWF  33
09C1:  MOVLW  26
09C2:  MOVWF  32
09C3:  MOVLW  06
09C4:  MOVWF  78
09C5:  MOVF   30,W
09C6:  MOVWF  04
09C7:  BCF    03.7
09C8:  BTFSC  31.0
09C9:  BSF    03.7
09CA:  MOVF   00,W
09CB:  MOVWF  77
09CC:  MOVF   32,W
09CD:  MOVWF  04
09CE:  BCF    03.7
09CF:  BTFSC  33.0
09D0:  BSF    03.7
09D1:  MOVF   77,W
09D2:  MOVWF  00
09D3:  INCF   32,F
09D4:  BTFSC  03.2
09D5:  INCF   33,F
09D6:  INCF   30,F
09D7:  BTFSC  03.2
09D8:  INCF   31,F
09D9:  DECFSZ 78,F
09DA:  GOTO   1C5
....................     //    timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
....................     timeToSend[0] = timeInDigits.second[0]; 
09DB:  MOVF   2A,W
09DC:  MOVWF  22
....................     timeToSend[1] = timeInDigits.second[1]; 
09DD:  MOVF   2B,W
09DE:  MOVWF  23
....................     timeToSend[2] = timeInDigits.minute[0]; 
09DF:  MOVF   28,W
09E0:  MOVWF  24
....................     timeToSend[3] = timeInDigits.minute[1]; 
09E1:  MOVF   29,W
09E2:  MOVWF  25
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
09E3:  MOVLW  01
09E4:  MOVWF  31
09E5:  MOVLW  22
09E6:  MOVWF  30
09E7:  MOVLW  04
09E8:  MOVWF  32
09E9:  MOVLW  01
09EA:  MOVWF  33
09EB:  BCF    0A.3
09EC:  BCF    03.6
09ED:  CALL   71F
09EE:  BSF    0A.3
09EF:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1868:  CLRF   21
1869:  CLRF   22
186A:  CLRF   23
186B:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
186C:  MOVLW  08
186D:  ADDWF  1F,W
186E:  MOVWF  78
186F:  MOVF   20,W
1870:  MOVWF  7A
1871:  BTFSC  03.0
1872:  INCF   7A,F
1873:  MOVF   78,W
1874:  MOVWF  2B
1875:  MOVF   7A,W
1876:  MOVWF  2C
1877:  MOVWF  37
1878:  MOVF   2B,W
1879:  MOVWF  36
187A:  CLRF   38
187B:  BCF    0A.4
187C:  BCF    0A.3
187D:  BCF    03.6
187E:  CALL   66B
187F:  BSF    0A.4
1880:  BSF    0A.3
1881:  MOVF   79,W
1882:  MOVWF  7A
1883:  MOVF   78,W
1884:  BSF    03.6
1885:  MOVWF  2B
1886:  MOVF   7A,W
1887:  MOVWF  2C
1888:  MOVLW  01
1889:  MOVWF  2E
188A:  MOVLW  25
188B:  MOVWF  2D
188C:  MOVLW  06
188D:  MOVWF  78
188E:  MOVF   2B,W
188F:  MOVWF  04
1890:  BCF    03.7
1891:  BTFSC  2C.0
1892:  BSF    03.7
1893:  MOVF   00,W
1894:  MOVWF  77
1895:  MOVF   2D,W
1896:  MOVWF  04
1897:  BCF    03.7
1898:  BTFSC  2E.0
1899:  BSF    03.7
189A:  MOVF   77,W
189B:  MOVWF  00
189C:  INCF   2D,F
189D:  BTFSC  03.2
189E:  INCF   2E,F
189F:  INCF   2B,F
18A0:  BTFSC  03.2
18A1:  INCF   2C,F
18A2:  DECFSZ 78,F
18A3:  GOTO   08E
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
18A4:  MOVF   27,W
18A5:  BCF    0A.4
18A6:  BCF    0A.3
18A7:  BCF    03.6
18A8:  CALL   004
18A9:  BSF    0A.4
18AA:  BSF    0A.3
18AB:  MOVWF  78
18AC:  BSF    03.6
18AD:  MOVWF  21
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
18AE:  MOVF   28,W
18AF:  BCF    0A.4
18B0:  BCF    0A.3
18B1:  BCF    03.6
18B2:  CALL   004
18B3:  BSF    0A.4
18B4:  BSF    0A.3
18B5:  IORLW  08
18B6:  BSF    03.6
18B7:  MOVWF  22
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
18B8:  MOVLW  01
18B9:  MOVWF  35
18BA:  MOVLW  21
18BB:  MOVWF  34
18BC:  MOVLW  04
18BD:  MOVWF  36
18BE:  BCF    0A.4
18BF:  BCF    0A.3
18C0:  BCF    03.6
18C1:  CALL   6D8
18C2:  BSF    0A.4
18C3:  BSF    0A.3
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
18DD:  CLRF   21
18DE:  CLRF   22
18DF:  CLRF   23
18E0:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
18E1:  MOVLW  08
18E2:  ADDWF  1F,W
18E3:  MOVWF  78
18E4:  MOVF   20,W
18E5:  MOVWF  7A
18E6:  BTFSC  03.0
18E7:  INCF   7A,F
18E8:  MOVF   78,W
18E9:  MOVWF  2B
18EA:  MOVF   7A,W
18EB:  MOVWF  2C
18EC:  MOVWF  37
18ED:  MOVF   2B,W
18EE:  MOVWF  36
18EF:  CLRF   38
18F0:  BCF    0A.4
18F1:  BCF    0A.3
18F2:  BCF    03.6
18F3:  CALL   66B
18F4:  BSF    0A.4
18F5:  BSF    0A.3
18F6:  MOVF   79,W
18F7:  MOVWF  7A
18F8:  MOVF   78,W
18F9:  BSF    03.6
18FA:  MOVWF  2B
18FB:  MOVF   7A,W
18FC:  MOVWF  2C
18FD:  MOVLW  01
18FE:  MOVWF  2E
18FF:  MOVLW  25
1900:  MOVWF  2D
1901:  MOVLW  06
1902:  MOVWF  78
1903:  MOVF   2B,W
1904:  MOVWF  04
1905:  BCF    03.7
1906:  BTFSC  2C.0
1907:  BSF    03.7
1908:  MOVF   00,W
1909:  MOVWF  77
190A:  MOVF   2D,W
190B:  MOVWF  04
190C:  BCF    03.7
190D:  BTFSC  2E.0
190E:  BSF    03.7
190F:  MOVF   77,W
1910:  MOVWF  00
1911:  INCF   2D,F
1912:  BTFSC  03.2
1913:  INCF   2E,F
1914:  INCF   2B,F
1915:  BTFSC  03.2
1916:  INCF   2C,F
1917:  DECFSZ 78,F
1918:  GOTO   103
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1919:  MOVF   29,W
191A:  BCF    0A.4
191B:  BCF    0A.3
191C:  BCF    03.6
191D:  CALL   004
191E:  BSF    0A.4
191F:  BSF    0A.3
1920:  MOVWF  78
1921:  BSF    03.6
1922:  MOVWF  21
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1923:  MOVF   2A,W
1924:  BCF    0A.4
1925:  BCF    0A.3
1926:  BCF    03.6
1927:  CALL   004
1928:  BSF    0A.4
1929:  BSF    0A.3
192A:  IORLW  08
192B:  BSF    03.6
192C:  MOVWF  22
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
192D:  MOVLW  01
192E:  MOVWF  35
192F:  MOVLW  21
1930:  MOVWF  34
1931:  MOVLW  04
1932:  MOVWF  36
1933:  BCF    0A.4
1934:  BCF    0A.3
1935:  BCF    03.6
1936:  CALL   6D8
1937:  BSF    0A.4
1938:  BSF    0A.3
1939:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0B29:  CLRF   21
0B2A:  CLRF   22
0B2B:  CLRF   23
0B2C:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0B2D:  MOVLW  08
0B2E:  ADDWF  1F,W
0B2F:  MOVWF  78
0B30:  MOVF   20,W
0B31:  MOVWF  7A
0B32:  BTFSC  03.0
0B33:  INCF   7A,F
0B34:  MOVF   78,W
0B35:  MOVWF  2B
0B36:  MOVF   7A,W
0B37:  MOVWF  2C
0B38:  MOVWF  37
0B39:  MOVF   2B,W
0B3A:  MOVWF  36
0B3B:  CLRF   38
0B3C:  BCF    0A.3
0B3D:  BCF    03.6
0B3E:  CALL   66B
0B3F:  BSF    0A.3
0B40:  MOVF   79,W
0B41:  MOVWF  7A
0B42:  MOVF   78,W
0B43:  BSF    03.6
0B44:  MOVWF  2B
0B45:  MOVF   7A,W
0B46:  MOVWF  2C
0B47:  MOVLW  01
0B48:  MOVWF  2E
0B49:  MOVLW  25
0B4A:  MOVWF  2D
0B4B:  MOVLW  06
0B4C:  MOVWF  78
0B4D:  MOVF   2B,W
0B4E:  MOVWF  04
0B4F:  BCF    03.7
0B50:  BTFSC  2C.0
0B51:  BSF    03.7
0B52:  MOVF   00,W
0B53:  MOVWF  77
0B54:  MOVF   2D,W
0B55:  MOVWF  04
0B56:  BCF    03.7
0B57:  BTFSC  2E.0
0B58:  BSF    03.7
0B59:  MOVF   77,W
0B5A:  MOVWF  00
0B5B:  INCF   2D,F
0B5C:  BTFSC  03.2
0B5D:  INCF   2E,F
0B5E:  INCF   2B,F
0B5F:  BTFSC  03.2
0B60:  INCF   2C,F
0B61:  DECFSZ 78,F
0B62:  GOTO   34D
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0B63:  MOVF   27,W
0B64:  MOVWF  21
....................     numbersToSend[1] = displayableTime.minute[1]; 
0B65:  MOVF   28,W
0B66:  MOVWF  22
....................     numbersToSend[2] = displayableTime.hour[0]; 
0B67:  MOVF   25,W
0B68:  MOVWF  23
....................     numbersToSend[3] = displayableTime.hour[1]; 
0B69:  MOVF   26,W
0B6A:  MOVWF  24
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0B6B:  MOVLW  01
0B6C:  MOVWF  31
0B6D:  MOVLW  21
0B6E:  MOVWF  30
0B6F:  MOVLW  04
0B70:  MOVWF  32
0B71:  MOVLW  01
0B72:  MOVWF  33
0B73:  BCF    0A.3
0B74:  BCF    03.6
0B75:  CALL   71F
0B76:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0B8C:  CLRF   21
0B8D:  CLRF   22
0B8E:  CLRF   23
0B8F:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0B90:  MOVLW  08
0B91:  ADDWF  1F,W
0B92:  MOVWF  78
0B93:  MOVF   20,W
0B94:  MOVWF  7A
0B95:  BTFSC  03.0
0B96:  INCF   7A,F
0B97:  MOVF   78,W
0B98:  MOVWF  2B
0B99:  MOVF   7A,W
0B9A:  MOVWF  2C
0B9B:  MOVWF  37
0B9C:  MOVF   2B,W
0B9D:  MOVWF  36
0B9E:  CLRF   38
0B9F:  BCF    0A.3
0BA0:  BCF    03.6
0BA1:  CALL   66B
0BA2:  BSF    0A.3
0BA3:  MOVF   79,W
0BA4:  MOVWF  7A
0BA5:  MOVF   78,W
0BA6:  BSF    03.6
0BA7:  MOVWF  2B
0BA8:  MOVF   7A,W
0BA9:  MOVWF  2C
0BAA:  MOVLW  01
0BAB:  MOVWF  2E
0BAC:  MOVLW  25
0BAD:  MOVWF  2D
0BAE:  MOVLW  06
0BAF:  MOVWF  78
0BB0:  MOVF   2B,W
0BB1:  MOVWF  04
0BB2:  BCF    03.7
0BB3:  BTFSC  2C.0
0BB4:  BSF    03.7
0BB5:  MOVF   00,W
0BB6:  MOVWF  77
0BB7:  MOVF   2D,W
0BB8:  MOVWF  04
0BB9:  BCF    03.7
0BBA:  BTFSC  2E.0
0BBB:  BSF    03.7
0BBC:  MOVF   77,W
0BBD:  MOVWF  00
0BBE:  INCF   2D,F
0BBF:  BTFSC  03.2
0BC0:  INCF   2E,F
0BC1:  INCF   2B,F
0BC2:  BTFSC  03.2
0BC3:  INCF   2C,F
0BC4:  DECFSZ 78,F
0BC5:  GOTO   3B0
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0BC6:  MOVF   29,W
0BC7:  MOVWF  21
....................     numbersToSend[1] = displayableTime.second[1]; 
0BC8:  MOVF   2A,W
0BC9:  MOVWF  22
....................     numbersToSend[2] = displayableTime.minute[0]; 
0BCA:  MOVF   27,W
0BCB:  MOVWF  23
....................     numbersToSend[3] = displayableTime.minute[1]; 
0BCC:  MOVF   28,W
0BCD:  MOVWF  24
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0BCE:  MOVLW  01
0BCF:  MOVWF  31
0BD0:  MOVLW  21
0BD1:  MOVWF  30
0BD2:  MOVLW  04
0BD3:  MOVWF  32
0BD4:  MOVLW  01
0BD5:  MOVWF  33
0BD6:  BCF    0A.3
0BD7:  BCF    03.6
0BD8:  CALL   71F
0BD9:  BSF    0A.3
0BDA:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A09:  CLRF   21
1A0A:  CLRF   22
1A0B:  CLRF   23
1A0C:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A0D:  MOVLW  08
1A0E:  ADDWF  1F,W
1A0F:  MOVWF  78
1A10:  MOVF   20,W
1A11:  MOVWF  7A
1A12:  BTFSC  03.0
1A13:  INCF   7A,F
1A14:  MOVF   78,W
1A15:  MOVWF  2B
1A16:  MOVF   7A,W
1A17:  MOVWF  2C
1A18:  MOVWF  37
1A19:  MOVF   2B,W
1A1A:  MOVWF  36
1A1B:  CLRF   38
1A1C:  BCF    0A.4
1A1D:  BCF    0A.3
1A1E:  BCF    03.6
1A1F:  CALL   66B
1A20:  BSF    0A.4
1A21:  BSF    0A.3
1A22:  MOVF   79,W
1A23:  MOVWF  7A
1A24:  MOVF   78,W
1A25:  BSF    03.6
1A26:  MOVWF  2B
1A27:  MOVF   7A,W
1A28:  MOVWF  2C
1A29:  MOVLW  01
1A2A:  MOVWF  2E
1A2B:  MOVLW  25
1A2C:  MOVWF  2D
1A2D:  MOVLW  06
1A2E:  MOVWF  78
1A2F:  MOVF   2B,W
1A30:  MOVWF  04
1A31:  BCF    03.7
1A32:  BTFSC  2C.0
1A33:  BSF    03.7
1A34:  MOVF   00,W
1A35:  MOVWF  77
1A36:  MOVF   2D,W
1A37:  MOVWF  04
1A38:  BCF    03.7
1A39:  BTFSC  2E.0
1A3A:  BSF    03.7
1A3B:  MOVF   77,W
1A3C:  MOVWF  00
1A3D:  INCF   2D,F
1A3E:  BTFSC  03.2
1A3F:  INCF   2E,F
1A40:  INCF   2B,F
1A41:  BTFSC  03.2
1A42:  INCF   2C,F
1A43:  DECFSZ 78,F
1A44:  GOTO   22F
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1A45:  MOVLW  08
1A46:  MOVWF  22
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
1A47:  MOVF   25,W
1A48:  BCF    0A.4
1A49:  BCF    0A.3
1A4A:  BCF    03.6
1A4B:  CALL   004
1A4C:  BSF    0A.4
1A4D:  BSF    0A.3
1A4E:  MOVWF  78
1A4F:  BSF    03.6
1A50:  MOVWF  23
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
1A51:  MOVF   26,W
1A52:  BCF    0A.4
1A53:  BCF    0A.3
1A54:  BCF    03.6
1A55:  CALL   004
1A56:  BSF    0A.4
1A57:  BSF    0A.3
1A58:  MOVWF  78
1A59:  BSF    03.6
1A5A:  MOVWF  24
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1A5B:  MOVLW  01
1A5C:  MOVWF  35
1A5D:  MOVLW  21
1A5E:  MOVWF  34
1A5F:  MOVLW  04
1A60:  MOVWF  36
1A61:  BCF    0A.4
1A62:  BCF    0A.3
1A63:  BCF    03.6
1A64:  CALL   6D8
1A65:  BSF    0A.4
1A66:  BSF    0A.3
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1A80:  CLRF   21
1A81:  CLRF   22
1A82:  CLRF   23
1A83:  CLRF   24
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1A84:  MOVLW  08
1A85:  ADDWF  1F,W
1A86:  MOVWF  78
1A87:  MOVF   20,W
1A88:  MOVWF  7A
1A89:  BTFSC  03.0
1A8A:  INCF   7A,F
1A8B:  MOVF   78,W
1A8C:  MOVWF  2B
1A8D:  MOVF   7A,W
1A8E:  MOVWF  2C
1A8F:  MOVWF  37
1A90:  MOVF   2B,W
1A91:  MOVWF  36
1A92:  CLRF   38
1A93:  BCF    0A.4
1A94:  BCF    0A.3
1A95:  BCF    03.6
1A96:  CALL   66B
1A97:  BSF    0A.4
1A98:  BSF    0A.3
1A99:  MOVF   79,W
1A9A:  MOVWF  7A
1A9B:  MOVF   78,W
1A9C:  BSF    03.6
1A9D:  MOVWF  2B
1A9E:  MOVF   7A,W
1A9F:  MOVWF  2C
1AA0:  MOVLW  01
1AA1:  MOVWF  2E
1AA2:  MOVLW  25
1AA3:  MOVWF  2D
1AA4:  MOVLW  06
1AA5:  MOVWF  78
1AA6:  MOVF   2B,W
1AA7:  MOVWF  04
1AA8:  BCF    03.7
1AA9:  BTFSC  2C.0
1AAA:  BSF    03.7
1AAB:  MOVF   00,W
1AAC:  MOVWF  77
1AAD:  MOVF   2D,W
1AAE:  MOVWF  04
1AAF:  BCF    03.7
1AB0:  BTFSC  2E.0
1AB1:  BSF    03.7
1AB2:  MOVF   77,W
1AB3:  MOVWF  00
1AB4:  INCF   2D,F
1AB5:  BTFSC  03.2
1AB6:  INCF   2E,F
1AB7:  INCF   2B,F
1AB8:  BTFSC  03.2
1AB9:  INCF   2C,F
1ABA:  DECFSZ 78,F
1ABB:  GOTO   2A6
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1ABC:  MOVLW  08
1ABD:  MOVWF  22
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
1ABE:  MOVF   27,W
1ABF:  BCF    0A.4
1AC0:  BCF    0A.3
1AC1:  BCF    03.6
1AC2:  CALL   004
1AC3:  BSF    0A.4
1AC4:  BSF    0A.3
1AC5:  MOVWF  78
1AC6:  BSF    03.6
1AC7:  MOVWF  23
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
1AC8:  MOVF   28,W
1AC9:  BCF    0A.4
1ACA:  BCF    0A.3
1ACB:  BCF    03.6
1ACC:  CALL   004
1ACD:  BSF    0A.4
1ACE:  BSF    0A.3
1ACF:  MOVWF  78
1AD0:  BSF    03.6
1AD1:  MOVWF  24
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1AD2:  MOVLW  01
1AD3:  MOVWF  35
1AD4:  MOVLW  21
1AD5:  MOVWF  34
1AD6:  MOVLW  04
1AD7:  MOVWF  36
1AD8:  BCF    0A.4
1AD9:  BCF    0A.3
1ADA:  BCF    03.6
1ADB:  CALL   6D8
1ADC:  BSF    0A.4
1ADD:  BSF    0A.3
1ADE:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_HOURS_MINUTES = 0, 
....................     FORMAT_MINUTES_SECONDS 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN = 0, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_SETTING_BRIGHTNESS, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     int brightness; 
....................     int numberOfDays; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
....................     char addressBrightness; 
....................     char addressTypeOfCount; 
....................     char addressNumberOfDays; 
.................... } PolyoneDisplay; 
....................  
.................... const int brightnessLevels[10] = {10, 34, 58, 82, 106, 130, 154, 178, 202, 255}; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0406:  MOVLW  16
0407:  BSF    03.6
0408:  ADDWF  4E,W
0409:  MOVWF  04
040A:  BCF    03.7
040B:  BTFSC  4F.0
040C:  BSF    03.7
040D:  MOVF   00,W
040E:  ANDLW  01
040F:  BTFSS  03.2
0410:  GOTO   43D
....................         Time time; 
....................         time = polyoneDisplayPtr->timer.currentTime; 
0411:  MOVLW  04
0412:  ADDWF  4E,W
0413:  MOVWF  04
0414:  BCF    03.7
0415:  BTFSC  4F.0
0416:  BSF    03.7
0417:  MOVF   00,W
0418:  MOVWF  77
0419:  INCF   04,F
041A:  MOVF   00,W
041B:  MOVWF  78
041C:  INCF   04,F
041D:  MOVF   00,W
041E:  MOVWF  79
041F:  INCF   04,F
0420:  MOVF   00,W
0421:  MOVWF  7A
0422:  MOVF   77,W
0423:  MOVWF  50
0424:  MOVF   78,W
0425:  MOVWF  51
0426:  MOVF   79,W
0427:  MOVWF  52
0428:  MOVF   7A,W
0429:  MOVWF  53
....................         time.hour %= 24; 
042A:  MOVF   51,W
042B:  BSF    03.5
042C:  MOVWF  28
042D:  MOVLW  18
042E:  MOVWF  29
042F:  BCF    03.5
0430:  BCF    03.6
0431:  CALL   03D
0432:  MOVF   77,W
0433:  BSF    03.6
0434:  MOVWF  51
....................         Time_setClockTime(&time); 
0435:  MOVLW  01
0436:  MOVWF  5B
0437:  MOVLW  50
0438:  MOVWF  5A
0439:  BCF    03.6
043A:  CALL   3C9
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
043B:  GOTO   464
043C:  BSF    03.6
043D:  MOVLW  16
043E:  ADDWF  4E,W
043F:  MOVWF  04
0440:  BCF    03.7
0441:  BTFSC  4F.0
0442:  BSF    03.7
0443:  MOVF   00,W
0444:  ANDLW  01
0445:  SUBLW  01
0446:  BTFSS  03.2
0447:  GOTO   465
....................         Timer_setRtc(&polyoneDisplayPtr->timer); 
0448:  MOVF   4E,W
0449:  MOVWF  78
044A:  MOVF   4F,W
044B:  MOVWF  7A
044C:  MOVF   78,W
044D:  MOVWF  54
044E:  MOVF   7A,W
044F:  MOVWF  55
0450:  MOVF   55,W
0451:  MOVWF  57
0452:  MOVF   54,W
0453:  MOVWF  56
....................     } 
*
0465:  BCF    03.6
0466:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     //    Timer_updateTimer(&polyoneDisplayPtr->timer); 
....................  
....................     polyoneDisplayPtr->timer.currentTime = Time_getCurrentTime(); 
*
05AB:  MOVLW  04
05AC:  BSF    03.6
05AD:  ADDWF  4E,W
05AE:  MOVWF  78
05AF:  MOVF   4F,W
05B0:  MOVWF  7A
05B1:  BTFSC  03.0
05B2:  INCF   7A,F
05B3:  MOVF   78,W
05B4:  MOVWF  50
05B5:  MOVF   7A,W
05B6:  MOVWF  51
05B7:  BCF    03.6
05B8:  CALL   557
05B9:  BSF    03.6
05BA:  MOVF   50,W
05BB:  MOVWF  04
05BC:  BCF    03.7
05BD:  BTFSC  51.0
05BE:  BSF    03.7
05BF:  MOVF   77,W
05C0:  MOVWF  00
05C1:  INCF   04,F
05C2:  MOVF   78,W
05C3:  MOVWF  00
05C4:  INCF   04,F
05C5:  MOVF   79,W
05C6:  MOVWF  00
05C7:  INCF   04,F
05C8:  MOVF   7A,W
05C9:  MOVWF  00
....................     polyoneDisplayPtr->timer.currentTime.hour += polyoneDisplayPtr->numberOfDays * 24; 
05CA:  MOVLW  05
05CB:  ADDWF  4E,W
05CC:  MOVWF  78
05CD:  MOVF   4F,W
05CE:  MOVWF  7A
05CF:  BTFSC  03.0
05D0:  INCF   7A,F
05D1:  MOVF   78,W
05D2:  MOVWF  50
05D3:  MOVF   7A,W
05D4:  MOVWF  51
05D5:  MOVF   50,W
05D6:  MOVWF  04
05D7:  BCF    03.7
05D8:  BTFSC  51.0
05D9:  BSF    03.7
05DA:  MOVF   00,W
05DB:  MOVWF  52
05DC:  MOVLW  1A
05DD:  ADDWF  4E,W
05DE:  MOVWF  04
05DF:  BCF    03.7
05E0:  BTFSC  4F.0
05E1:  BSF    03.7
05E2:  MOVF   00,W
05E3:  MOVWF  60
05E4:  MOVLW  18
05E5:  MOVWF  61
05E6:  BCF    03.6
05E7:  CALL   519
05E8:  MOVF   78,W
05E9:  BSF    03.6
05EA:  ADDWF  52,W
05EB:  MOVWF  52
05EC:  MOVF   50,W
05ED:  MOVWF  04
05EE:  BCF    03.7
05EF:  BTFSC  51.0
05F0:  BSF    03.7
05F1:  MOVF   52,W
05F2:  MOVWF  00
....................     Timer_updateCountdownTime(&polyoneDisplayPtr->timer); 
05F3:  MOVF   4E,W
05F4:  MOVWF  78
05F5:  MOVF   4F,W
05F6:  MOVWF  7A
05F7:  MOVF   4E,W
05F8:  MOVWF  50
05F9:  MOVF   4F,W
05FA:  MOVWF  51
05FB:  MOVWF  53
05FC:  MOVF   4E,W
05FD:  MOVWF  52
05FE:  BCF    03.6
05FF:  CALL   24B
0600:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(char addressCurrentState, 
....................         char addressPreviousState, char addressFormat, 
....................         char addressFirstNumberAlarm, 
....................         char addressSecondNumberAlarm, char addressRtcHours, 
....................         char addressRtcMinutes, char addressRtcSeconds, 
....................         char addressBrightness, char addressTypeOfCount, __EEADDRESS__ addressNumberOfDays) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     setDate(0, 0, 0, 0); 
*
101D:  CLRF   4E
101E:  CLRF   4F
101F:  CLRF   50
1020:  CLRF   51
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
1068:  BSF    03.6
1069:  MOVF   21,W
106A:  MOVWF  48
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
106B:  MOVF   22,W
106C:  MOVWF  49
....................     polyoneDisplay.addressFormat = addressFormat; 
106D:  MOVF   23,W
106E:  MOVWF  4A
....................     polyoneDisplay.addressBrightness = addressBrightness; 
106F:  MOVF   29,W
1070:  MOVWF  4B
....................     polyoneDisplay.addressTypeOfCount = addressTypeOfCount; 
1071:  MOVF   2A,W
1072:  MOVWF  4C
....................     polyoneDisplay.addressNumberOfDays = addressNumberOfDays; 
1073:  MOVF   2B,W
1074:  MOVWF  4D
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
1075:  MOVF   23,W
1076:  MOVWF  0D
1077:  BSF    03.5
1078:  BCF    0C.7
1079:  BSF    0C.0
107A:  BCF    03.5
107B:  MOVF   0C,W
107C:  ANDLW  01
107D:  MOVWF  78
107E:  BCF    43.0
107F:  BTFSC  78.0
1080:  BSF    43.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
1081:  MOVF   21,W
1082:  MOVWF  0D
1083:  BSF    03.5
1084:  BCF    0C.7
1085:  BSF    0C.0
1086:  BCF    03.5
1087:  MOVF   0C,W
1088:  MOVWF  4F
1089:  MOVF   4F,W
108A:  BSF    03.5
108B:  MOVWF  28
108C:  MOVLW  03
108D:  MOVWF  29
108E:  BCF    0A.4
108F:  BCF    03.5
1090:  BCF    03.6
1091:  CALL   03D
1092:  BSF    0A.4
1093:  MOVF   77,W
1094:  BSF    03.6
1095:  MOVWF  44
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
1096:  MOVF   22,W
1097:  MOVWF  0D
1098:  BSF    03.5
1099:  BCF    0C.7
109A:  BSF    0C.0
109B:  BCF    03.5
109C:  MOVF   0C,W
109D:  MOVWF  4F
109E:  MOVF   4F,W
109F:  BSF    03.5
10A0:  MOVWF  28
10A1:  MOVLW  03
10A2:  MOVWF  29
10A3:  BCF    0A.4
10A4:  BCF    03.5
10A5:  BCF    03.6
10A6:  CALL   03D
10A7:  BSF    0A.4
10A8:  MOVF   77,W
10A9:  BSF    03.6
10AA:  MOVWF  45
....................     polyoneDisplay.brightness = read_eeprom(addressBrightness) % 10; 
10AB:  MOVF   29,W
10AC:  MOVWF  0D
10AD:  BSF    03.5
10AE:  BCF    0C.7
10AF:  BSF    0C.0
10B0:  BCF    03.5
10B1:  MOVF   0C,W
10B2:  MOVWF  4F
10B3:  MOVF   4F,W
10B4:  BSF    03.5
10B5:  MOVWF  28
10B6:  MOVLW  0A
10B7:  MOVWF  29
10B8:  BCF    0A.4
10B9:  BCF    03.5
10BA:  BCF    03.6
10BB:  CALL   03D
10BC:  BSF    0A.4
10BD:  MOVF   77,W
10BE:  BSF    03.6
10BF:  MOVWF  46
....................     polyoneDisplay.typeOfCount = read_eeprom(addressTypeOfCount) % 2; 
10C0:  MOVF   2A,W
10C1:  MOVWF  0D
10C2:  BSF    03.5
10C3:  BCF    0C.7
10C4:  BSF    0C.0
10C5:  BCF    03.5
10C6:  MOVF   0C,W
10C7:  ANDLW  01
10C8:  MOVWF  78
10C9:  BCF    43.1
10CA:  BTFSC  78.0
10CB:  BSF    43.1
....................     polyoneDisplay.numberOfDays = read_eeprom(addressNumberOfDays) % 5; 
10CC:  MOVF   2B,W
10CD:  MOVWF  0D
10CE:  BSF    03.5
10CF:  BCF    0C.7
10D0:  BSF    0C.0
10D1:  BCF    03.5
10D2:  MOVF   0C,W
10D3:  MOVWF  4F
10D4:  MOVF   4F,W
10D5:  BSF    03.5
10D6:  MOVWF  28
10D7:  MOVLW  05
10D8:  MOVWF  29
10D9:  BCF    0A.4
10DA:  BCF    03.5
10DB:  BCF    03.6
10DC:  CALL   03D
10DD:  BSF    0A.4
10DE:  MOVF   77,W
10DF:  BSF    03.6
10E0:  MOVWF  47
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
10E1:  MOVF   45,F
10E2:  BTFSS  03.2
10E3:  GOTO   0E9
10E4:  MOVF   44,F
10E5:  BTFSS  03.2
10E6:  GOTO   0E9
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
10E7:  MOVLW  02
10E8:  MOVWF  45
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
10E9:  MOVLW  00
10EA:  BTFSC  43.0
10EB:  MOVLW  01
10EC:  XORLW  00
10ED:  BCF    03.6
10EE:  BTFSC  03.2
10EF:  GOTO   0F4
10F0:  XORLW  01
10F1:  BTFSC  03.2
10F2:  GOTO   187
10F3:  GOTO   216
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
10F4:  MOVLW  63
10F5:  BSF    03.6
10F6:  MOVWF  58
10F7:  MOVLW  3B
10F8:  MOVWF  59
10F9:  CLRF   5B
10FA:  MOVF   24,W
10FB:  MOVWF  5A
10FC:  CLRF   5D
10FD:  MOVF   25,W
10FE:  MOVWF  5C
10FF:  CLRF   5F
1100:  MOVF   26,W
1101:  MOVWF  5E
1102:  CLRF   61
1103:  MOVF   27,W
1104:  MOVWF  60
1105:  CLRF   63
1106:  MOVF   28,W
1107:  MOVWF  62
*
1162:  MOVF   79,W
1163:  MOVWF  7A
1164:  MOVF   78,W
1165:  BCF    03.5
1166:  MOVWF  52
1167:  MOVF   7A,W
1168:  MOVWF  53
1169:  MOVLW  01
116A:  MOVWF  55
116B:  MOVLW  2D
116C:  MOVWF  54
116D:  MOVLW  16
116E:  MOVWF  78
116F:  MOVF   52,W
1170:  MOVWF  04
1171:  BCF    03.7
1172:  BTFSC  53.0
1173:  BSF    03.7
1174:  MOVF   00,W
1175:  MOVWF  77
1176:  MOVF   54,W
1177:  MOVWF  04
1178:  BCF    03.7
1179:  BTFSC  55.0
117A:  BSF    03.7
117B:  MOVF   77,W
117C:  MOVWF  00
117D:  INCF   54,F
117E:  BTFSC  03.2
117F:  INCF   55,F
1180:  INCF   52,F
1181:  BTFSC  03.2
1182:  INCF   53,F
1183:  DECFSZ 78,F
1184:  GOTO   16F
....................             break; 
1185:  BCF    03.6
1186:  GOTO   216
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
1187:  MOVLW  63
1188:  BSF    03.6
1189:  MOVWF  58
118A:  CLRF   5A
118B:  MOVF   24,W
118C:  MOVWF  59
118D:  CLRF   5C
118E:  MOVF   25,W
118F:  MOVWF  5B
1190:  CLRF   5E
1191:  MOVF   26,W
1192:  MOVWF  5D
1193:  CLRF   60
1194:  MOVF   27,W
1195:  MOVWF  5F
1196:  CLRF   62
1197:  MOVF   28,W
1198:  MOVWF  61
*
11F2:  MOVF   79,W
11F3:  MOVWF  7A
11F4:  MOVF   78,W
11F5:  BCF    03.5
11F6:  MOVWF  52
11F7:  MOVF   7A,W
11F8:  MOVWF  53
11F9:  MOVLW  01
11FA:  MOVWF  55
11FB:  MOVLW  2D
11FC:  MOVWF  54
11FD:  MOVLW  16
11FE:  MOVWF  78
11FF:  MOVF   52,W
1200:  MOVWF  04
1201:  BCF    03.7
1202:  BTFSC  53.0
1203:  BSF    03.7
1204:  MOVF   00,W
1205:  MOVWF  77
1206:  MOVF   54,W
1207:  MOVWF  04
1208:  BCF    03.7
1209:  BTFSC  55.0
120A:  BSF    03.7
120B:  MOVF   77,W
120C:  MOVWF  00
120D:  INCF   54,F
120E:  BTFSC  03.2
120F:  INCF   55,F
1210:  INCF   52,F
1211:  BTFSC  03.2
1212:  INCF   53,F
1213:  DECFSZ 78,F
1214:  GOTO   1FF
....................  
....................             break; 
1215:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
1216:  BSF    03.6
1217:  MOVF   44,F
1218:  BTFSS  03.2
1219:  GOTO   2E8
....................         //        PolyoneDisplay_updateTimer(&polyoneDisplay); 
....................         Timer_updateTimerFromEeprom(&polyoneDisplay.timer); 
121A:  MOVLW  01
121B:  MOVWF  4F
121C:  MOVLW  2D
121D:  MOVWF  4E
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
*
12D4:  MOVLW  01
12D5:  BSF    03.6
12D6:  MOVWF  4F
12D7:  MOVLW  2D
12D8:  MOVWF  4E
12D9:  BCF    0A.4
12DA:  BCF    03.6
12DB:  CALL   406
12DC:  BSF    0A.4
....................         Timer_updateCountdownTime(&polyoneDisplay); 
12DD:  MOVLW  01
12DE:  BSF    03.6
12DF:  MOVWF  53
12E0:  MOVLW  2D
12E1:  MOVWF  52
12E2:  BCF    0A.4
12E3:  BCF    03.6
12E4:  CALL   24B
12E5:  BSF    0A.4
....................     } else { 
12E6:  GOTO   2F0
12E7:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
12E8:  MOVLW  01
12E9:  MOVWF  4F
12EA:  MOVLW  2D
12EB:  MOVWF  4E
12EC:  BCF    0A.4
12ED:  BCF    03.6
12EE:  CALL   5AB
12EF:  BSF    0A.4
....................     } 
....................  
....................     return polyoneDisplay; 
12F0:  MOVLW  2D
12F1:  MOVWF  78
12F2:  MOVLW  01
12F3:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
*
0800:  MOVLW  16
0801:  BSF    03.6
0802:  ADDWF  1B,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  1C.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  77
0809:  RRF    77,W
080A:  ANDLW  01
080B:  SUBLW  01
080C:  BTFSS  03.2
080D:  GOTO   0EC
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
080E:  MOVLW  16
080F:  ADDWF  1B,W
0810:  MOVWF  04
0811:  BCF    03.7
0812:  BTFSC  1C.0
0813:  BSF    03.7
0814:  MOVF   00,W
0815:  ANDLW  01
0816:  BTFSS  03.2
0817:  GOTO   076
....................             Time_showHoursMinutesRtc(withBlink); 
0818:  MOVF   1D,W
0819:  MOVWF  1E
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0874:  GOTO   0EA
0875:  BSF    03.6
0876:  MOVLW  16
0877:  ADDWF  1B,W
0878:  MOVWF  04
0879:  BCF    03.7
087A:  BTFSC  1C.0
087B:  BSF    03.7
087C:  MOVF   00,W
087D:  ANDLW  01
087E:  SUBLW  01
087F:  BTFSS  03.2
0880:  GOTO   0EB
....................             Time_showMinutesSecondsRtc(); 
....................         } 
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
*
08EB:  GOTO   1F0
08EC:  MOVLW  16
08ED:  ADDWF  1B,W
08EE:  MOVWF  04
08EF:  BCF    03.7
08F0:  BTFSC  1C.0
08F1:  BSF    03.7
08F2:  MOVF   00,W
08F3:  MOVWF  77
08F4:  RRF    77,W
08F5:  ANDLW  01
08F6:  BTFSS  03.2
08F7:  GOTO   1F0
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
08F8:  MOVLW  16
08F9:  ADDWF  1B,W
08FA:  MOVWF  04
08FB:  BCF    03.7
08FC:  BTFSC  1C.0
08FD:  BSF    03.7
08FE:  MOVF   00,W
08FF:  ANDLW  01
0900:  BTFSS  03.2
0901:  GOTO   168
....................             Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0902:  MOVF   1B,W
0903:  MOVWF  1E
0904:  MOVF   1C,W
0905:  MOVWF  1F
0906:  MOVF   1F,W
0907:  MOVWF  21
0908:  MOVF   1E,W
0909:  MOVWF  20
090A:  MOVF   1D,W
090B:  MOVWF  22
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0966:  GOTO   1EF
0967:  BSF    03.6
0968:  MOVLW  16
0969:  ADDWF  1B,W
096A:  MOVWF  04
096B:  BCF    03.7
096C:  BTFSC  1C.0
096D:  BSF    03.7
096E:  MOVF   00,W
096F:  ANDLW  01
0970:  SUBLW  01
0971:  BTFSS  03.2
0972:  GOTO   1F0
....................             Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0973:  MOVF   1B,W
0974:  MOVWF  1E
0975:  MOVF   1C,W
0976:  MOVWF  1F
0977:  MOVF   1F,W
0978:  MOVWF  21
0979:  MOVF   1E,W
097A:  MOVWF  20
....................         } 
....................     } 
*
09F0:  BCF    03.6
09F1:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0B16:  MOVLW  16
0B17:  BSF    03.6
0B18:  ADDWF  1B,W
0B19:  MOVWF  04
0B1A:  BCF    03.7
0B1B:  BTFSC  1C.0
0B1C:  BSF    03.7
0B1D:  MOVF   00,W
0B1E:  ANDLW  01
0B1F:  BTFSS  03.2
0B20:  GOTO   379
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0B21:  MOVF   1B,W
0B22:  MOVWF  1D
0B23:  MOVF   1C,W
0B24:  MOVWF  1E
0B25:  MOVF   1E,W
0B26:  MOVWF  20
0B27:  MOVF   1D,W
0B28:  MOVWF  1F
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0B77:  GOTO   3DA
0B78:  BSF    03.6
0B79:  MOVLW  16
0B7A:  ADDWF  1B,W
0B7B:  MOVWF  04
0B7C:  BCF    03.7
0B7D:  BTFSC  1C.0
0B7E:  BSF    03.7
0B7F:  MOVF   00,W
0B80:  ANDLW  01
0B81:  SUBLW  01
0B82:  BTFSS  03.2
0B83:  GOTO   3DB
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0B84:  MOVF   1B,W
0B85:  MOVWF  1D
0B86:  MOVF   1C,W
0B87:  MOVWF  1E
0B88:  MOVF   1E,W
0B89:  MOVWF  20
0B8A:  MOVF   1D,W
0B8B:  MOVWF  1F
....................     } 
*
0BDB:  BCF    03.6
0BDC:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_hideBrightness(void) { 
....................     int numbersToSend[4] = {0}; 
*
1DFF:  BSF    03.6
1E00:  CLRF   1B
1E01:  CLRF   1C
1E02:  CLRF   1D
1E03:  CLRF   1E
....................  
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1E04:  MOVLW  37
1E05:  MOVWF  1D
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1E06:  MOVLW  01
1E07:  MOVWF  35
1E08:  MOVLW  1B
1E09:  MOVWF  34
1E0A:  MOVLW  04
1E0B:  MOVWF  36
1E0C:  BCF    0A.4
1E0D:  BCF    0A.3
1E0E:  BCF    03.6
1E0F:  CALL   6D8
1E10:  BSF    0A.4
1E11:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_showBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C0F:  BSF    03.6
0C10:  CLRF   1D
0C11:  CLRF   1E
0C12:  CLRF   1F
0C13:  CLRF   20
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) % 10]; 
0C14:  MOVLW  19
0C15:  ADDWF  1B,W
0C16:  MOVWF  04
0C17:  BCF    03.7
0C18:  BTFSC  1C.0
0C19:  BSF    03.7
0C1A:  MOVLW  01
0C1B:  ADDWF  00,W
0C1C:  MOVWF  22
0C1D:  BSF    03.5
0C1E:  MOVWF  28
0C1F:  MOVLW  0A
0C20:  MOVWF  29
0C21:  BCF    0A.3
0C22:  BCF    03.5
0C23:  BCF    03.6
0C24:  CALL   03D
0C25:  BSF    0A.3
0C26:  MOVF   77,W
0C27:  BCF    0A.3
0C28:  CALL   004
0C29:  BSF    0A.3
0C2A:  MOVWF  78
0C2B:  BSF    03.6
0C2C:  MOVWF  1D
....................     numbersToSend[1] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) / 10] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0C2D:  MOVLW  19
0C2E:  ADDWF  1B,W
0C2F:  MOVWF  04
0C30:  BCF    03.7
0C31:  BTFSC  1C.0
0C32:  BSF    03.7
0C33:  MOVLW  01
0C34:  ADDWF  00,W
0C35:  MOVWF  22
0C36:  BSF    03.5
0C37:  MOVWF  28
0C38:  MOVLW  0A
0C39:  MOVWF  29
0C3A:  BCF    0A.3
0C3B:  BCF    03.5
0C3C:  BCF    03.6
0C3D:  CALL   03D
0C3E:  BSF    0A.3
0C3F:  MOVF   78,W
0C40:  BCF    0A.3
0C41:  CALL   004
0C42:  BSF    0A.3
0C43:  IORLW  08
0C44:  BSF    03.6
0C45:  MOVWF  1E
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
0C46:  MOVLW  37
0C47:  MOVWF  1F
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
0C48:  MOVLW  01
0C49:  MOVWF  35
0C4A:  MOVLW  1D
0C4B:  MOVWF  34
0C4C:  MOVLW  04
0C4D:  MOVWF  36
0C4E:  BCF    0A.3
0C4F:  BCF    03.6
0C50:  CALL   6D8
0C51:  BSF    0A.3
0C52:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
19F3:  MOVLW  16
19F4:  ADDWF  1B,W
19F5:  MOVWF  04
19F6:  BCF    03.7
19F7:  BTFSC  1C.0
19F8:  BSF    03.7
19F9:  MOVF   00,W
19FA:  ANDLW  01
19FB:  BTFSS  03.2
19FC:  GOTO   269
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
19FD:  MOVF   1B,W
19FE:  MOVWF  78
19FF:  MOVF   1C,W
1A00:  MOVWF  7A
1A01:  MOVF   78,W
1A02:  MOVWF  1D
1A03:  MOVF   7A,W
1A04:  MOVWF  1E
1A05:  MOVF   1E,W
1A06:  MOVWF  20
1A07:  MOVF   1D,W
1A08:  MOVWF  1F
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1A67:  GOTO   2DE
1A68:  BSF    03.6
1A69:  MOVLW  16
1A6A:  ADDWF  1B,W
1A6B:  MOVWF  04
1A6C:  BCF    03.7
1A6D:  BTFSC  1C.0
1A6E:  BSF    03.7
1A6F:  MOVF   00,W
1A70:  ANDLW  01
1A71:  SUBLW  01
1A72:  BTFSS  03.2
1A73:  GOTO   2DF
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1A74:  MOVF   1B,W
1A75:  MOVWF  78
1A76:  MOVF   1C,W
1A77:  MOVWF  7A
1A78:  MOVF   78,W
1A79:  MOVWF  1D
1A7A:  MOVF   7A,W
1A7B:  MOVWF  1E
1A7C:  MOVF   1E,W
1A7D:  MOVWF  20
1A7E:  MOVF   1D,W
1A7F:  MOVWF  1F
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1852:  MOVLW  16
1853:  ADDWF  1B,W
1854:  MOVWF  04
1855:  BCF    03.7
1856:  BTFSC  1C.0
1857:  BSF    03.7
1858:  MOVF   00,W
1859:  ANDLW  01
185A:  BTFSS  03.2
185B:  GOTO   0C6
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
185C:  MOVF   1B,W
185D:  MOVWF  78
185E:  MOVF   1C,W
185F:  MOVWF  7A
1860:  MOVF   78,W
1861:  MOVWF  1D
1862:  MOVF   7A,W
1863:  MOVWF  1E
1864:  MOVF   1E,W
1865:  MOVWF  20
1866:  MOVF   1D,W
1867:  MOVWF  1F
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
18C4:  GOTO   139
18C5:  BSF    03.6
18C6:  MOVLW  16
18C7:  ADDWF  1B,W
18C8:  MOVWF  04
18C9:  BCF    03.7
18CA:  BTFSC  1C.0
18CB:  BSF    03.7
18CC:  MOVF   00,W
18CD:  ANDLW  01
18CE:  SUBLW  01
18CF:  BTFSS  03.2
18D0:  GOTO   13A
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
18D1:  MOVF   1B,W
18D2:  MOVWF  78
18D3:  MOVF   1C,W
18D4:  MOVWF  7A
18D5:  MOVF   78,W
18D6:  MOVWF  1D
18D7:  MOVF   7A,W
18D8:  MOVWF  1E
18D9:  MOVF   1E,W
18DA:  MOVWF  20
18DB:  MOVF   1D,W
18DC:  MOVWF  1F
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1BCE:  CLRF   1D
1BCF:  CLRF   1E
1BD0:  CLRF   1F
1BD1:  CLRF   20
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1BD2:  MOVLW  16
1BD3:  ADDWF  1B,W
1BD4:  MOVWF  04
1BD5:  BCF    03.7
1BD6:  BTFSC  1C.0
1BD7:  BSF    03.7
1BD8:  MOVF   00,W
1BD9:  ANDLW  01
1BDA:  BTFSS  03.2
1BDB:  GOTO   3E4
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BDC:  MOVLW  25
1BDD:  MOVWF  1D
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BDE:  MOVLW  2D
1BDF:  MOVWF  1E
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BE0:  MOVLW  67
1BE1:  MOVWF  1F
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1BE2:  MOVWF  20
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1BE3:  GOTO   3F6
1BE4:  MOVLW  16
1BE5:  ADDWF  1B,W
1BE6:  MOVWF  04
1BE7:  BCF    03.7
1BE8:  BTFSC  1C.0
1BE9:  BSF    03.7
1BEA:  MOVF   00,W
1BEB:  ANDLW  01
1BEC:  SUBLW  01
1BED:  BTFSS  03.2
1BEE:  GOTO   3F6
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
1BEF:  MOVLW  B3
1BF0:  MOVWF  1D
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1BF1:  MOVLW  BB
1BF2:  MOVWF  1E
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BF3:  MOVLW  25
1BF4:  MOVWF  1F
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1BF5:  MOVWF  20
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1BF6:  MOVLW  01
1BF7:  MOVWF  35
1BF8:  MOVLW  1D
1BF9:  MOVWF  34
1BFA:  MOVLW  04
1BFB:  MOVWF  36
1BFC:  BCF    0A.4
1BFD:  BCF    0A.3
1BFE:  BCF    03.6
1BFF:  CALL   6D8
1C00:  BSF    0A.4
1C01:  BSF    0A.3
.................... } 
....................  
.................... void PolyoneDisplay_increaseBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->brightness = (polyoneDisplayPtr->brightness + 1) % 10; 
*
1E20:  MOVLW  19
1E21:  ADDWF  1B,W
1E22:  MOVWF  78
1E23:  MOVF   1C,W
1E24:  MOVWF  7A
1E25:  BTFSC  03.0
1E26:  INCF   7A,F
1E27:  MOVF   78,W
1E28:  MOVWF  1D
1E29:  MOVF   7A,W
1E2A:  MOVWF  1E
1E2B:  MOVLW  19
1E2C:  ADDWF  1B,W
1E2D:  MOVWF  04
1E2E:  BCF    03.7
1E2F:  BTFSC  1C.0
1E30:  BSF    03.7
1E31:  MOVLW  01
1E32:  ADDWF  00,W
1E33:  MOVWF  20
1E34:  BSF    03.5
1E35:  MOVWF  28
1E36:  MOVLW  0A
1E37:  MOVWF  29
1E38:  BCF    0A.4
1E39:  BCF    0A.3
1E3A:  BCF    03.5
1E3B:  BCF    03.6
1E3C:  CALL   03D
1E3D:  BSF    0A.4
1E3E:  BSF    0A.3
1E3F:  MOVF   77,W
1E40:  BSF    03.6
1E41:  MOVWF  1F
1E42:  MOVF   1D,W
1E43:  MOVWF  04
1E44:  BCF    03.7
1E45:  BTFSC  1E.0
1E46:  BSF    03.7
1E47:  MOVF   1F,W
1E48:  MOVWF  00
....................     set_pwm1_duty(brightnessLevels[polyoneDisplayPtr->brightness]); 
1E49:  MOVLW  19
1E4A:  ADDWF  1B,W
1E4B:  MOVWF  04
1E4C:  BCF    03.7
1E4D:  BTFSC  1C.0
1E4E:  BSF    03.7
1E4F:  MOVF   00,W
1E50:  BCF    0A.4
1E51:  BCF    0A.3
1E52:  BCF    03.6
1E53:  CALL   023
1E54:  BSF    0A.4
1E55:  BSF    0A.3
1E56:  BSF    03.6
1E57:  MOVWF  1D
1E58:  BCF    03.6
1E59:  MOVWF  15
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1949:  MOVLW  16
194A:  ADDWF  1B,W
194B:  MOVWF  04
194C:  BCF    03.7
194D:  BTFSC  1C.0
194E:  BSF    03.7
194F:  MOVF   00,W
1950:  ANDLW  01
1951:  BTFSS  03.2
1952:  GOTO   18F
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
1953:  MOVF   1B,W
1954:  MOVWF  78
1955:  MOVF   1C,W
1956:  MOVWF  7A
1957:  MOVF   78,W
1958:  MOVWF  1D
1959:  MOVF   7A,W
195A:  MOVWF  1E
195B:  MOVF   1E,W
195C:  MOVWF  20
195D:  MOVF   1D,W
195E:  MOVWF  1F
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
198E:  GOTO   1AA
198F:  MOVLW  16
1990:  ADDWF  1B,W
1991:  MOVWF  04
1992:  BCF    03.7
1993:  BTFSC  1C.0
1994:  BSF    03.7
1995:  MOVF   00,W
1996:  ANDLW  01
1997:  SUBLW  01
1998:  BTFSS  03.2
1999:  GOTO   1AA
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
199A:  MOVF   1B,W
199B:  MOVWF  78
199C:  MOVF   1C,W
199D:  MOVWF  7A
199E:  MOVF   1B,W
199F:  MOVWF  1D
19A0:  MOVF   1C,W
19A1:  MOVWF  1E
19A2:  MOVWF  20
19A3:  MOVF   1B,W
19A4:  MOVWF  1F
19A5:  BCF    0A.4
19A6:  BCF    03.6
19A7:  CALL   3DD
19A8:  BSF    0A.4
19A9:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1AEE:  MOVLW  16
1AEF:  ADDWF  1B,W
1AF0:  MOVWF  04
1AF1:  BCF    03.7
1AF2:  BTFSC  1C.0
1AF3:  BSF    03.7
1AF4:  MOVF   00,W
1AF5:  ANDLW  01
1AF6:  BTFSS  03.2
1AF7:  GOTO   309
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1AF8:  MOVF   1B,W
1AF9:  MOVWF  78
1AFA:  MOVF   1C,W
1AFB:  MOVWF  7A
1AFC:  MOVF   78,W
1AFD:  MOVWF  1D
1AFE:  MOVF   1C,W
1AFF:  MOVWF  1E
1B00:  MOVWF  20
1B01:  MOVF   1D,W
1B02:  MOVWF  1F
1B03:  BCF    0A.4
1B04:  BCF    03.6
1B05:  CALL   3DD
1B06:  BSF    0A.4
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B07:  GOTO   350
1B08:  BSF    03.6
1B09:  MOVLW  16
1B0A:  ADDWF  1B,W
1B0B:  MOVWF  04
1B0C:  BCF    03.7
1B0D:  BTFSC  1C.0
1B0E:  BSF    03.7
1B0F:  MOVF   00,W
1B10:  ANDLW  01
1B11:  SUBLW  01
1B12:  BTFSS  03.2
1B13:  GOTO   34F
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
1B14:  MOVF   1B,W
1B15:  MOVWF  78
1B16:  MOVF   1C,W
1B17:  MOVWF  7A
1B18:  MOVF   78,W
1B19:  MOVWF  1D
1B1A:  MOVF   7A,W
1B1B:  MOVWF  1E
1B1C:  MOVF   1E,W
1B1D:  MOVWF  20
1B1E:  MOVF   1D,W
1B1F:  MOVWF  1F
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
1C0D:  MOVLW  16
1C0E:  ADDWF  1B,W
1C0F:  MOVWF  78
1C10:  MOVF   1C,W
1C11:  MOVWF  7A
1C12:  BTFSC  03.0
1C13:  INCF   7A,F
1C14:  MOVF   78,W
1C15:  MOVWF  1D
1C16:  MOVF   7A,W
1C17:  MOVWF  1E
1C18:  MOVLW  16
1C19:  ADDWF  1B,W
1C1A:  MOVWF  04
1C1B:  BCF    03.7
1C1C:  BTFSC  1C.0
1C1D:  BSF    03.7
1C1E:  BTFSS  00.0
1C1F:  GOTO   427
1C20:  MOVF   1D,W
1C21:  MOVWF  04
1C22:  BCF    03.7
1C23:  BTFSC  1E.0
1C24:  BSF    03.7
1C25:  BCF    00.0
1C26:  GOTO   42D
1C27:  MOVF   1D,W
1C28:  MOVWF  04
1C29:  BCF    03.7
1C2A:  BTFSC  1E.0
1C2B:  BSF    03.7
1C2C:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1C2D:  MOVLW  16
1C2E:  ADDWF  1B,W
1C2F:  MOVWF  04
1C30:  BCF    03.7
1C31:  BTFSC  1C.0
1C32:  BSF    03.7
1C33:  MOVF   00,W
1C34:  ANDLW  01
1C35:  BTFSS  03.2
1C36:  GOTO   483
....................         polyoneDisplayPtr->timer.alarmTime.hour = polyoneDisplayPtr->timer.alarmTime.minute; 
1C37:  MOVLW  09
1C38:  ADDWF  1B,W
1C39:  MOVWF  78
1C3A:  MOVF   1C,W
1C3B:  MOVWF  7A
1C3C:  BTFSC  03.0
1C3D:  INCF   7A,F
1C3E:  MOVF   78,W
1C3F:  MOVWF  1D
1C40:  MOVF   7A,W
1C41:  MOVWF  1E
1C42:  MOVLW  0A
1C43:  ADDWF  1B,W
1C44:  MOVWF  04
1C45:  BCF    03.7
1C46:  BTFSC  1C.0
1C47:  BSF    03.7
1C48:  MOVF   00,W
1C49:  MOVWF  1F
1C4A:  MOVF   1D,W
1C4B:  MOVWF  04
1C4C:  BCF    03.7
1C4D:  BTFSC  1E.0
1C4E:  BSF    03.7
1C4F:  MOVF   1F,W
1C50:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.second; 
1C51:  MOVLW  0A
1C52:  ADDWF  1B,W
1C53:  MOVWF  78
1C54:  MOVF   1C,W
1C55:  MOVWF  7A
1C56:  BTFSC  03.0
1C57:  INCF   7A,F
1C58:  MOVF   78,W
1C59:  MOVWF  1D
1C5A:  MOVF   7A,W
1C5B:  MOVWF  1E
1C5C:  MOVLW  0B
1C5D:  ADDWF  1B,W
1C5E:  MOVWF  04
1C5F:  BCF    03.7
1C60:  BTFSC  1C.0
1C61:  BSF    03.7
1C62:  MOVF   00,W
1C63:  MOVWF  1F
1C64:  MOVF   1D,W
1C65:  MOVWF  04
1C66:  BCF    03.7
1C67:  BTFSC  1E.0
1C68:  BSF    03.7
1C69:  MOVF   1F,W
1C6A:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.second = 0; 
1C6B:  MOVLW  0B
1C6C:  ADDWF  1B,W
1C6D:  MOVWF  04
1C6E:  BCF    03.7
1C6F:  BTFSC  1C.0
1C70:  BSF    03.7
1C71:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1C72:  MOVLW  13
1C73:  ADDWF  1B,W
1C74:  MOVWF  04
1C75:  BCF    03.7
1C76:  BTFSC  1C.0
1C77:  BSF    03.7
1C78:  MOVLW  63
1C79:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
1C7A:  MOVLW  14
1C7B:  ADDWF  1B,W
1C7C:  MOVWF  04
1C7D:  BCF    03.7
1C7E:  BTFSC  1C.0
1C7F:  BSF    03.7
1C80:  MOVLW  3B
1C81:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1C82:  GOTO   4D8
1C83:  MOVLW  16
1C84:  ADDWF  1B,W
1C85:  MOVWF  04
1C86:  BCF    03.7
1C87:  BTFSC  1C.0
1C88:  BSF    03.7
1C89:  MOVF   00,W
1C8A:  ANDLW  01
1C8B:  SUBLW  01
1C8C:  BTFSS  03.2
1C8D:  GOTO   4D8
....................         polyoneDisplayPtr->timer.alarmTime.second = polyoneDisplayPtr->timer.alarmTime.minute; 
1C8E:  MOVLW  0B
1C8F:  ADDWF  1B,W
1C90:  MOVWF  78
1C91:  MOVF   1C,W
1C92:  MOVWF  7A
1C93:  BTFSC  03.0
1C94:  INCF   7A,F
1C95:  MOVF   78,W
1C96:  MOVWF  1D
1C97:  MOVF   7A,W
1C98:  MOVWF  1E
1C99:  MOVLW  0A
1C9A:  ADDWF  1B,W
1C9B:  MOVWF  04
1C9C:  BCF    03.7
1C9D:  BTFSC  1C.0
1C9E:  BSF    03.7
1C9F:  MOVF   00,W
1CA0:  MOVWF  1F
1CA1:  MOVF   1D,W
1CA2:  MOVWF  04
1CA3:  BCF    03.7
1CA4:  BTFSC  1E.0
1CA5:  BSF    03.7
1CA6:  MOVF   1F,W
1CA7:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.hour; 
1CA8:  MOVLW  0A
1CA9:  ADDWF  1B,W
1CAA:  MOVWF  78
1CAB:  MOVF   1C,W
1CAC:  MOVWF  7A
1CAD:  BTFSC  03.0
1CAE:  INCF   7A,F
1CAF:  MOVF   78,W
1CB0:  MOVWF  1D
1CB1:  MOVF   7A,W
1CB2:  MOVWF  1E
1CB3:  MOVLW  09
1CB4:  ADDWF  1B,W
1CB5:  MOVWF  04
1CB6:  BCF    03.7
1CB7:  BTFSC  1C.0
1CB8:  BSF    03.7
1CB9:  MOVF   00,W
1CBA:  MOVWF  1F
1CBB:  MOVF   1D,W
1CBC:  MOVWF  04
1CBD:  BCF    03.7
1CBE:  BTFSC  1E.0
1CBF:  BSF    03.7
1CC0:  MOVF   1F,W
1CC1:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.hour = 0; 
1CC2:  MOVLW  09
1CC3:  ADDWF  1B,W
1CC4:  MOVWF  04
1CC5:  BCF    03.7
1CC6:  BTFSC  1C.0
1CC7:  BSF    03.7
1CC8:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
1CC9:  MOVLW  13
1CCA:  ADDWF  1B,W
1CCB:  MOVWF  04
1CCC:  BCF    03.7
1CCD:  BTFSC  1C.0
1CCE:  BSF    03.7
1CCF:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1CD0:  MOVLW  14
1CD1:  ADDWF  1B,W
1CD2:  MOVWF  04
1CD3:  BCF    03.7
1CD4:  BTFSC  1C.0
1CD5:  BSF    03.7
1CD6:  MOVLW  63
1CD7:  MOVWF  00
1CD8:  BCF    03.6
....................  
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1B6B:  MOVLW  16
1B6C:  ADDWF  1B,W
1B6D:  MOVWF  04
1B6E:  BCF    03.7
1B6F:  BTFSC  1C.0
1B70:  BSF    03.7
1B71:  MOVF   00,W
1B72:  ANDLW  01
1B73:  BTFSS  03.2
1B74:  GOTO   38D
....................         return (polyoneDisplayPtr->timer.alarmTime.hour != 0) || (polyoneDisplayPtr->timer.alarmTime.minute != 0); 
1B75:  MOVLW  09
1B76:  ADDWF  1B,W
1B77:  MOVWF  04
1B78:  BCF    03.7
1B79:  BTFSC  1C.0
1B7A:  BSF    03.7
1B7B:  MOVF   00,F
1B7C:  BTFSS  03.2
1B7D:  GOTO   389
1B7E:  MOVLW  0A
1B7F:  ADDWF  1B,W
1B80:  MOVWF  04
1B81:  BCF    03.7
1B82:  BTFSC  1C.0
1B83:  BSF    03.7
1B84:  MOVF   00,F
1B85:  BTFSS  03.2
1B86:  GOTO   389
1B87:  MOVLW  00
1B88:  GOTO   38A
1B89:  MOVLW  01
1B8A:  MOVWF  78
1B8B:  GOTO   3AE
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1B8C:  GOTO   3AE
1B8D:  MOVLW  16
1B8E:  ADDWF  1B,W
1B8F:  MOVWF  04
1B90:  BCF    03.7
1B91:  BTFSC  1C.0
1B92:  BSF    03.7
1B93:  MOVF   00,W
1B94:  ANDLW  01
1B95:  SUBLW  01
1B96:  BTFSS  03.2
1B97:  GOTO   3AE
....................         return (polyoneDisplayPtr->timer.alarmTime.minute != 0) || (polyoneDisplayPtr->timer.alarmTime.second != 0); 
1B98:  MOVLW  0A
1B99:  ADDWF  1B,W
1B9A:  MOVWF  04
1B9B:  BCF    03.7
1B9C:  BTFSC  1C.0
1B9D:  BSF    03.7
1B9E:  MOVF   00,F
1B9F:  BTFSS  03.2
1BA0:  GOTO   3AC
1BA1:  MOVLW  0B
1BA2:  ADDWF  1B,W
1BA3:  MOVWF  04
1BA4:  BCF    03.7
1BA5:  BTFSC  1C.0
1BA6:  BSF    03.7
1BA7:  MOVF   00,F
1BA8:  BTFSS  03.2
1BA9:  GOTO   3AC
1BAA:  MOVLW  00
1BAB:  GOTO   3AD
1BAC:  MOVLW  01
1BAD:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0A12:  BSF    03.6
0A13:  MOVF   1B,W
0A14:  MOVWF  78
0A15:  MOVF   1C,W
0A16:  MOVWF  7A
0A17:  MOVF   78,W
0A18:  MOVWF  1D
0A19:  MOVF   7A,W
0A1A:  MOVWF  1E
0A1B:  MOVF   1E,W
0A1C:  MOVWF  20
0A1D:  MOVF   1D,W
0A1E:  MOVWF  1F
....................     write_eeprom(polyoneDisplayPtr->addressNumberOfDays, (polyoneDisplayPtr->timer.currentTime.hour / 24)); 
*
0A99:  MOVLW  20
0A9A:  BSF    03.6
0A9B:  ADDWF  1B,W
0A9C:  MOVWF  04
0A9D:  BCF    03.7
0A9E:  BTFSC  1C.0
0A9F:  BSF    03.7
0AA0:  MOVF   00,W
0AA1:  MOVWF  1D
0AA2:  MOVLW  05
0AA3:  ADDWF  1B,W
0AA4:  MOVWF  04
0AA5:  BCF    03.7
0AA6:  BTFSC  1C.0
0AA7:  BSF    03.7
0AA8:  MOVF   00,W
0AA9:  BSF    03.5
0AAA:  MOVWF  28
0AAB:  MOVLW  18
0AAC:  MOVWF  29
0AAD:  BCF    0A.3
0AAE:  BCF    03.5
0AAF:  BCF    03.6
0AB0:  CALL   03D
0AB1:  BSF    0A.3
0AB2:  MOVF   78,W
0AB3:  BSF    03.6
0AB4:  MOVWF  1E
0AB5:  BCF    03.6
0AB6:  MOVF   0B,W
0AB7:  MOVWF  77
0AB8:  BCF    0B.7
0AB9:  BSF    03.6
0ABA:  MOVF   1D,W
0ABB:  MOVWF  0D
0ABC:  MOVF   1E,W
0ABD:  MOVWF  0C
0ABE:  BSF    03.5
0ABF:  BCF    0C.7
0AC0:  BSF    0C.2
0AC1:  MOVLW  55
0AC2:  MOVWF  0D
0AC3:  MOVLW  AA
0AC4:  MOVWF  0D
0AC5:  BSF    0C.1
0AC6:  BTFSC  0C.1
0AC7:  GOTO   2C6
0AC8:  BCF    0C.2
0AC9:  MOVF   77,W
0ACA:  BCF    03.5
0ACB:  BCF    03.6
0ACC:  IORWF  0B,F
0ACD:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveTypeOfCount(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressTypeOfCount, polyoneDisplayPtr->typeOfCount); 
*
0AE2:  MOVLW  1F
0AE3:  BSF    03.6
0AE4:  ADDWF  1B,W
0AE5:  MOVWF  04
0AE6:  BCF    03.7
0AE7:  BTFSC  1C.0
0AE8:  BSF    03.7
0AE9:  MOVF   00,W
0AEA:  MOVWF  1D
0AEB:  MOVLW  16
0AEC:  ADDWF  1B,W
0AED:  MOVWF  04
0AEE:  BCF    03.7
0AEF:  BTFSC  1C.0
0AF0:  BSF    03.7
0AF1:  CLRF   1E
0AF2:  BTFSC  00.1
0AF3:  INCF   1E,F
0AF4:  BCF    03.6
0AF5:  MOVF   0B,W
0AF6:  MOVWF  77
0AF7:  BCF    0B.7
0AF8:  BSF    03.6
0AF9:  MOVF   1D,W
0AFA:  MOVWF  0D
0AFB:  MOVF   1E,W
0AFC:  MOVWF  0C
0AFD:  BSF    03.5
0AFE:  BCF    0C.7
0AFF:  BSF    0C.2
0B00:  MOVLW  55
0B01:  MOVWF  0D
0B02:  MOVLW  AA
0B03:  MOVWF  0D
0B04:  BSF    0C.1
0B05:  BTFSC  0C.1
0B06:  GOTO   305
0B07:  BCF    0C.2
0B08:  MOVF   77,W
0B09:  BCF    03.5
0B0A:  BCF    03.6
0B0B:  IORWF  0B,F
0B0C:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressBrightness, polyoneDisplayPtr->brightness); 
*
0C53:  MOVLW  1E
0C54:  BSF    03.6
0C55:  ADDWF  1B,W
0C56:  MOVWF  04
0C57:  BCF    03.7
0C58:  BTFSC  1C.0
0C59:  BSF    03.7
0C5A:  MOVF   00,W
0C5B:  MOVWF  1D
0C5C:  MOVLW  19
0C5D:  ADDWF  1B,W
0C5E:  MOVWF  04
0C5F:  BCF    03.7
0C60:  BTFSC  1C.0
0C61:  BSF    03.7
0C62:  MOVF   00,W
0C63:  MOVWF  1E
0C64:  BCF    03.6
0C65:  MOVF   0B,W
0C66:  MOVWF  77
0C67:  BCF    0B.7
0C68:  BSF    03.6
0C69:  MOVF   1D,W
0C6A:  MOVWF  0D
0C6B:  MOVF   1E,W
0C6C:  MOVWF  0C
0C6D:  BSF    03.5
0C6E:  BCF    0C.7
0C6F:  BSF    0C.2
0C70:  MOVLW  55
0C71:  MOVWF  0D
0C72:  MOVLW  AA
0C73:  MOVWF  0D
0C74:  BSF    0C.1
0C75:  BTFSC  0C.1
0C76:  GOTO   475
0C77:  BCF    0C.2
0C78:  MOVF   77,W
0C79:  BCF    03.5
0C7A:  BCF    03.6
0C7B:  IORWF  0B,F
0C7C:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
07DF:  MOVLW  18
07E0:  BSF    03.6
07E1:  ADDWF  1B,W
07E2:  MOVWF  1E
07E3:  MOVF   1C,W
07E4:  MOVWF  1F
07E5:  BTFSC  03.0
07E6:  INCF   1F,F
07E7:  MOVLW  17
07E8:  ADDWF  1B,W
07E9:  MOVWF  04
07EA:  BCF    03.7
07EB:  BTFSC  1C.0
07EC:  BSF    03.7
07ED:  MOVF   00,W
07EE:  MOVWF  20
07EF:  MOVF   1E,W
07F0:  MOVWF  04
07F1:  BCF    03.7
07F2:  BTFSC  1F.0
07F3:  BSF    03.7
07F4:  MOVF   20,W
07F5:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
07F6:  MOVLW  17
07F7:  ADDWF  1B,W
07F8:  MOVWF  04
07F9:  BCF    03.7
07FA:  BTFSC  1C.0
07FB:  BSF    03.7
07FC:  MOVF   1D,W
07FD:  MOVWF  00
07FE:  BCF    03.6
07FF:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
09F2:  MOVLW  18
09F3:  BSF    03.6
09F4:  ADDWF  1B,W
09F5:  MOVWF  1D
09F6:  MOVF   1C,W
09F7:  MOVWF  1E
09F8:  BTFSC  03.0
09F9:  INCF   1E,F
09FA:  MOVLW  17
09FB:  ADDWF  1B,W
09FC:  MOVWF  04
09FD:  BCF    03.7
09FE:  BTFSC  1C.0
09FF:  BSF    03.7
0A00:  MOVF   00,W
0A01:  MOVWF  1F
0A02:  MOVF   1D,W
0A03:  MOVWF  04
0A04:  BCF    03.7
0A05:  BTFSC  1E.0
0A06:  BSF    03.7
0A07:  MOVF   1F,W
0A08:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0A09:  MOVLW  17
0A0A:  ADDWF  1B,W
0A0B:  MOVWF  04
0A0C:  BCF    03.7
0A0D:  BTFSC  1C.0
0A0E:  BSF    03.7
0A0F:  CLRF   00
0A10:  BCF    03.6
0A11:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
078C:  MOVLW  1B
078D:  BSF    03.6
078E:  ADDWF  1B,W
078F:  MOVWF  04
0790:  BCF    03.7
0791:  BTFSC  1C.0
0792:  BSF    03.7
0793:  MOVF   00,W
0794:  MOVWF  1D
0795:  MOVLW  17
0796:  ADDWF  1B,W
0797:  MOVWF  04
0798:  BCF    03.7
0799:  BTFSC  1C.0
079A:  BSF    03.7
079B:  MOVF   00,W
079C:  MOVWF  1E
079D:  BCF    03.6
079E:  MOVF   0B,W
079F:  MOVWF  77
07A0:  BCF    0B.7
07A1:  BSF    03.6
07A2:  MOVF   1D,W
07A3:  MOVWF  0D
07A4:  MOVF   1E,W
07A5:  MOVWF  0C
07A6:  BSF    03.5
07A7:  BCF    0C.7
07A8:  BSF    0C.2
07A9:  MOVLW  55
07AA:  MOVWF  0D
07AB:  MOVLW  AA
07AC:  MOVWF  0D
07AD:  BSF    0C.1
07AE:  BTFSC  0C.1
07AF:  GOTO   7AE
07B0:  BCF    0C.2
07B1:  MOVF   77,W
07B2:  BCF    03.5
07B3:  BCF    03.6
07B4:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
07B5:  MOVLW  1C
07B6:  BSF    03.6
07B7:  ADDWF  1B,W
07B8:  MOVWF  04
07B9:  BCF    03.7
07BA:  BTFSC  1C.0
07BB:  BSF    03.7
07BC:  MOVF   00,W
07BD:  MOVWF  1D
07BE:  MOVLW  18
07BF:  ADDWF  1B,W
07C0:  MOVWF  04
07C1:  BCF    03.7
07C2:  BTFSC  1C.0
07C3:  BSF    03.7
07C4:  MOVF   00,W
07C5:  MOVWF  1E
07C6:  BCF    03.6
07C7:  MOVF   0B,W
07C8:  MOVWF  77
07C9:  BCF    0B.7
07CA:  BSF    03.6
07CB:  MOVF   1D,W
07CC:  MOVWF  0D
07CD:  MOVF   1E,W
07CE:  MOVWF  0C
07CF:  BSF    03.5
07D0:  BCF    0C.7
07D1:  BSF    0C.2
07D2:  MOVLW  55
07D3:  MOVWF  0D
07D4:  MOVLW  AA
07D5:  MOVWF  0D
07D6:  BSF    0C.1
07D7:  BTFSC  0C.1
07D8:  GOTO   7D7
07D9:  BCF    0C.2
07DA:  MOVF   77,W
07DB:  BCF    03.5
07DC:  BCF    03.6
07DD:  IORWF  0B,F
07DE:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressFormat, polyoneDisplayPtr->format); 
*
1DB1:  MOVLW  1D
1DB2:  ADDWF  1B,W
1DB3:  MOVWF  04
1DB4:  BCF    03.7
1DB5:  BTFSC  1C.0
1DB6:  BSF    03.7
1DB7:  MOVF   00,W
1DB8:  MOVWF  1D
1DB9:  MOVLW  16
1DBA:  ADDWF  1B,W
1DBB:  MOVWF  04
1DBC:  BCF    03.7
1DBD:  BTFSC  1C.0
1DBE:  BSF    03.7
1DBF:  CLRF   1E
1DC0:  BTFSC  00.0
1DC1:  INCF   1E,F
1DC2:  BCF    03.6
1DC3:  MOVF   0B,W
1DC4:  MOVWF  77
1DC5:  BCF    0B.7
1DC6:  BSF    03.6
1DC7:  MOVF   1D,W
1DC8:  MOVWF  0D
1DC9:  MOVF   1E,W
1DCA:  MOVWF  0C
1DCB:  BSF    03.5
1DCC:  BCF    0C.7
1DCD:  BSF    0C.2
1DCE:  MOVLW  55
1DCF:  MOVWF  0D
1DD0:  MOVLW  AA
1DD1:  MOVWF  0D
1DD2:  BSF    0C.1
1DD3:  BTFSC  0C.1
1DD4:  GOTO   5D3
1DD5:  BCF    0C.2
1DD6:  MOVF   77,W
1DD7:  BCF    03.5
1DD8:  BCF    03.6
1DD9:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_saveAlarm(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1CE4:  MOVLW  16
1CE5:  ADDWF  1B,W
1CE6:  MOVWF  04
1CE7:  BCF    03.7
1CE8:  BTFSC  1C.0
1CE9:  BSF    03.7
1CEA:  MOVF   00,W
1CEB:  ANDLW  01
1CEC:  BTFSS  03.2
1CED:  GOTO   545
....................         Timer_saveAlarmHoursMinutes(&polyoneDisplayPtr.timer); 
1CEE:  MOVLW  01
1CEF:  MOVWF  1E
1CF0:  MOVLW  1B
1CF1:  MOVWF  1D
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1D43:  GOTO   5AD
1D44:  BSF    03.6
1D45:  MOVLW  16
1D46:  ADDWF  1B,W
1D47:  MOVWF  04
1D48:  BCF    03.7
1D49:  BTFSC  1C.0
1D4A:  BSF    03.7
1D4B:  MOVF   00,W
1D4C:  ANDLW  01
1D4D:  SUBLW  01
1D4E:  BTFSS  03.2
1D4F:  GOTO   5AE
....................         Timer_saveAlarmMinutesSeconds(&polyoneDisplayPtr->timer); 
1D50:  MOVF   1B,W
1D51:  MOVWF  78
1D52:  MOVF   1C,W
1D53:  MOVWF  7A
1D54:  MOVF   78,W
1D55:  MOVWF  1D
1D56:  MOVF   7A,W
1D57:  MOVWF  1E
1D58:  MOVF   1E,W
1D59:  MOVWF  20
1D5A:  MOVF   1D,W
1D5B:  MOVWF  1F
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
132C:  MOVLW  18
132D:  ADDWF  1B,W
132E:  MOVWF  78
132F:  MOVF   1C,W
1330:  MOVWF  7A
1331:  BTFSC  03.0
1332:  INCF   7A,F
1333:  MOVF   78,W
1334:  MOVWF  1D
1335:  MOVF   7A,W
1336:  MOVWF  1E
1337:  MOVLW  17
1338:  ADDWF  1B,W
1339:  MOVWF  04
133A:  BCF    03.7
133B:  BTFSC  1C.0
133C:  BSF    03.7
133D:  MOVF   00,W
133E:  MOVWF  1F
133F:  MOVF   1D,W
1340:  MOVWF  04
1341:  BCF    03.7
1342:  BTFSC  1E.0
1343:  BSF    03.7
1344:  MOVF   1F,W
1345:  MOVWF  00
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
1346:  MOVLW  16
1347:  ADDWF  1B,W
1348:  MOVWF  04
1349:  BCF    03.7
134A:  BTFSC  1C.0
134B:  BSF    03.7
134C:  MOVF   00,W
134D:  MOVWF  77
134E:  RRF    77,W
134F:  ANDLW  01
1350:  SUBLW  01
1351:  BTFSS  03.2
1352:  GOTO   35C
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_UP; 
1353:  MOVLW  17
1354:  ADDWF  1B,W
1355:  MOVWF  04
1356:  BCF    03.7
1357:  BTFSC  1C.0
1358:  BSF    03.7
1359:  MOVLW  01
135A:  MOVWF  00
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
135B:  GOTO   370
135C:  MOVLW  16
135D:  ADDWF  1B,W
135E:  MOVWF  04
135F:  BCF    03.7
1360:  BTFSC  1C.0
1361:  BSF    03.7
1362:  MOVF   00,W
1363:  MOVWF  77
1364:  RRF    77,W
1365:  ANDLW  01
1366:  BTFSS  03.2
1367:  GOTO   370
....................         polyoneDisplayPtr->currentState = STATE_COUNTING_DOWN; 
1368:  MOVLW  17
1369:  ADDWF  1B,W
136A:  MOVWF  04
136B:  BCF    03.7
136C:  BTFSC  1C.0
136D:  BSF    03.7
136E:  MOVLW  02
136F:  MOVWF  00
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
13ED:  MOVF   1B,W
13EE:  MOVWF  78
13EF:  MOVF   1C,W
13F0:  MOVWF  7A
13F1:  MOVF   78,W
13F2:  MOVWF  1D
13F3:  MOVF   7A,W
13F4:  MOVWF  1E
13F5:  MOVF   1E,W
13F6:  MOVWF  20
13F7:  MOVF   1D,W
13F8:  MOVWF  1F
*
1425:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 100 
.................... //#define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  PIN_BUTTON_START   PIN_B1 
.................... #define  PIN_BUTTON_MENU    PIN_B0 
.................... #define  PIN_BUZZER         PIN_C5 
.................... #define PIN_LED PIN_B3 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
....................     EEPROM_BRIGHTNESS, 
....................     EEPROM_TYPE_OF_COUNT, 
....................     EEPROM_NUMBER_OF_DAYS 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void turnOnBuzzer(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
0CCA:  MOVF   03,W
0CCB:  ANDLW  1F
0CCC:  MOVWF  03
0CCD:  MOVLW  FF
0CCE:  MOVWF  20
0CCF:  BSF    3E.0
0CD0:  BSF    3E.1
0CD1:  BSF    3E.2
0CD2:  BSF    3E.3
0CD3:  BSF    3E.4
0CD4:  CLRF   61
0CD5:  CLRF   62
0CD6:  CLRF   63
0CD7:  BSF    03.5
0CD8:  BSF    03.6
0CD9:  MOVF   09,W
0CDA:  ANDLW  C0
0CDB:  MOVWF  09
0CDC:  BCF    03.6
0CDD:  BCF    1F.4
0CDE:  BCF    1F.5
0CDF:  MOVLW  00
0CE0:  BSF    03.6
0CE1:  MOVWF  08
0CE2:  BCF    03.5
0CE3:  CLRF   07
0CE4:  CLRF   08
0CE5:  CLRF   09
0CE6:  BCF    03.7
....................     setupHardware(); 
....................     myPolyoneDisplay.currentState = STATE_INIT; 
*
0D0C:  MOVLW  03
0D0D:  BCF    03.5
0D0E:  MOVWF  56
....................     rtos_run(); 
0D0F:  CLRF   22
0D10:  CLRF   24
0D11:  MOVLW  05
0D12:  MOVWF  23
0D13:  CLRF   26
0D14:  CLRF   25
0D15:  MOVLW  7D
0D16:  MOVWF  27
0D17:  MOVLW  0C
0D18:  MOVWF  28
0D19:  CLRF   29
0D1A:  CLRF   2B
0D1B:  MOVLW  05
0D1C:  MOVWF  2A
0D1D:  CLRF   2D
0D1E:  MOVLW  01
0D1F:  MOVWF  2C
0D20:  MOVLW  9B
0D21:  MOVWF  2E
0D22:  MOVLW  0C
0D23:  MOVWF  2F
0D24:  CLRF   30
0D25:  CLRF   32
0D26:  MOVLW  01
0D27:  MOVWF  31
0D28:  CLRF   34
0D29:  CLRF   33
0D2A:  MOVLW  00
0D2B:  MOVWF  35
0D2C:  MOVLW  18
0D2D:  MOVWF  36
0D2E:  CLRF   37
0D2F:  CLRF   39
0D30:  MOVLW  14
0D31:  MOVWF  38
0D32:  CLRF   3B
0D33:  MOVLW  02
0D34:  MOVWF  3A
0D35:  MOVLW  B9
0D36:  MOVWF  3C
0D37:  MOVLW  0C
0D38:  MOVWF  3D
0D39:  CLRF   21
0D3A:  BSF    03.5
0D3B:  MOVF   01,W
0D3C:  ANDLW  C0
0D3D:  IORLW  07
0D3E:  MOVWF  01
0D3F:  MOVLW  3D
0D40:  BCF    03.5
0D41:  MOVWF  01
0D42:  BCF    0B.2
0D43:  BCF    03.0
0D44:  RLF    21,W
0D45:  MOVWF  77
0D46:  BCF    0A.3
0D47:  CALL   031
0D48:  BSF    0A.3
0D49:  MOVWF  79
0D4A:  MOVLW  01
0D4B:  ADDWF  77,W
0D4C:  BCF    0A.3
0D4D:  CALL   031
0D4E:  BSF    0A.3
0D4F:  MOVWF  7A
0D50:  MOVF   79,W
0D51:  MOVWF  04
0D52:  BCF    03.7
0D53:  BTFSC  7A.0
0D54:  BSF    03.7
0D55:  MOVF   00,W
0D56:  MOVWF  79
0D57:  INCF   04,F
0D58:  MOVF   00,W
0D59:  MOVWF  77
0D5A:  INCF   04,F
0D5B:  MOVF   00,W
0D5C:  MOVWF  78
0D5D:  INCF   04,F
0D5E:  INCF   00,F
0D5F:  MOVF   00,W
0D60:  MOVWF  7A
0D61:  BTFSS  03.2
0D62:  GOTO   566
0D63:  INCF   04,F
0D64:  INCF   00,F
0D65:  DECF   04,F
0D66:  INCF   04,F
0D67:  MOVF   00,W
0D68:  SUBWF  78,W
0D69:  BTFSS  03.2
0D6A:  GOTO   57E
0D6B:  MOVF   77,W
0D6C:  SUBWF  7A,W
0D6D:  BTFSS  03.2
0D6E:  GOTO   57E
0D6F:  DECF   04,F
0D70:  CLRF   00
0D71:  INCF   04,F
0D72:  CLRF   00
0D73:  INCF   04,F
0D74:  BTFSC  79.7
0D75:  GOTO   57E
0D76:  INCF   04,F
0D77:  MOVF   00,W
0D78:  MOVWF  0A
0D79:  DECF   04,F
0D7A:  MOVF   00,W
0D7B:  MOVWF  02
0D7C:  BCF    03.5
0D7D:  BCF    03.6
0D7E:  INCF   21,F
0D7F:  MOVLW  04
0D80:  SUBWF  21,W
0D81:  BTFSS  03.2
0D82:  GOTO   543
0D83:  CLRF   21
0D84:  MOVF   01,W
0D85:  BTFSS  0B.2
0D86:  GOTO   589
0D87:  BSF    03.5
0D88:  GOTO   53F
0D89:  GOTO   584
0D8A:  MOVLW  FF
0D8B:  MOVWF  21
.................... } 
....................  
0D8C:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
1000:  MOVF   56,W
1001:  ADDLW  F5
1002:  BTFSC  03.0
1003:  GOTO   561
1004:  ADDLW  0B
1005:  GOTO   564
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new( 
....................                     EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS, 
....................                     EEPROM_BRIGHTNESS, 
....................                     EEPROM_TYPE_OF_COUNT, 
....................                     EEPROM_NUMBER_OF_DAYS 
....................                     ); 
1006:  BSF    03.6
1007:  CLRF   21
1008:  MOVLW  01
1009:  MOVWF  22
100A:  MOVLW  02
100B:  MOVWF  23
100C:  MOVLW  03
100D:  MOVWF  24
100E:  MOVLW  04
100F:  MOVWF  25
1010:  MOVLW  05
1011:  MOVWF  26
1012:  MOVLW  06
1013:  MOVWF  27
1014:  MOVLW  07
1015:  MOVWF  28
1016:  MOVLW  08
1017:  MOVWF  29
1018:  MOVLW  09
1019:  MOVWF  2A
101A:  CLRF   2C
101B:  MOVLW  0A
101C:  MOVWF  2B
*
12F4:  MOVF   79,W
12F5:  MOVWF  7A
12F6:  MOVF   78,W
12F7:  BSF    03.6
12F8:  MOVWF  1B
12F9:  MOVF   7A,W
12FA:  MOVWF  1C
12FB:  CLRF   1E
12FC:  MOVLW  3F
12FD:  MOVWF  1D
12FE:  MOVLW  21
12FF:  MOVWF  78
1300:  MOVF   1B,W
1301:  MOVWF  04
1302:  BCF    03.7
1303:  BTFSC  1C.0
1304:  BSF    03.7
1305:  MOVF   00,W
1306:  MOVWF  77
1307:  MOVF   1D,W
1308:  MOVWF  04
1309:  BCF    03.7
130A:  BTFSC  1E.0
130B:  BSF    03.7
130C:  MOVF   77,W
130D:  MOVWF  00
130E:  INCF   1D,F
130F:  BTFSC  03.2
1310:  INCF   1E,F
1311:  INCF   1B,F
1312:  BTFSC  03.2
1313:  INCF   1C,F
1314:  DECFSZ 78,F
1315:  GOTO   300
....................             //            setTime(0, 81, 23); 
....................             //            Time time; 
....................             //            time=Time_new(0,81,23); 
....................             //            Time_setClockTime(&time); 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1316:  CLRF   1C
1317:  MOVLW  3F
1318:  MOVWF  1B
1319:  CLRF   1D
131A:  BCF    0A.4
131B:  BSF    0A.3
131C:  BCF    03.6
131D:  CALL   000
131E:  BSF    0A.4
131F:  BCF    0A.3
....................             break; 
1320:  GOTO   561
....................  
....................         case STATE_IDLE: 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1321:  BSF    03.5
1322:  BSF    06.1
1323:  BCF    03.5
1324:  BTFSS  06.1
1325:  GOTO   37F
1326:  BTFSC  3E.3
1327:  GOTO   37F
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
1328:  BSF    03.6
1329:  CLRF   1C
132A:  MOVLW  3F
132B:  MOVWF  1B
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1370:  CLRF   1C
1371:  MOVLW  3F
1372:  MOVWF  1B
1373:  BCF    0A.4
1374:  BCF    03.6
1375:  CALL   78C
1376:  BSF    0A.4
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
1377:  BSF    03.6
1378:  CLRF   4F
1379:  MOVLW  3F
137A:  MOVWF  4E
137B:  BCF    0A.4
137C:  BCF    03.6
137D:  CALL   406
137E:  BSF    0A.4
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
137F:  BTFSC  3E.1
1380:  GOTO   38C
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1381:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
1382:  BSF    03.6
1383:  CLRF   1C
1384:  MOVLW  3F
1385:  MOVWF  1B
1386:  MOVLW  04
1387:  MOVWF  1D
1388:  BCF    0A.4
1389:  BCF    03.6
138A:  CALL   7DF
138B:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
138C:  BTFSC  3E.2
138D:  GOTO   399
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
138E:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
138F:  BSF    03.6
1390:  CLRF   1C
1391:  MOVLW  3F
1392:  MOVWF  1B
1393:  MOVLW  09
1394:  MOVWF  1D
1395:  BCF    0A.4
1396:  BCF    03.6
1397:  CALL   7DF
1398:  BSF    0A.4
....................             } 
....................             break; 
1399:  GOTO   561
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
139A:  BSF    03.6
139B:  CLRF   4F
139C:  MOVLW  3F
139D:  MOVWF  4E
139E:  BCF    0A.4
139F:  BCF    03.6
13A0:  CALL   5AB
13A1:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
13A2:  BSF    03.6
13A3:  CLRF   1C
13A4:  MOVLW  3F
13A5:  MOVWF  1B
13A6:  MOVLW  01
13A7:  MOVWF  1D
13A8:  BCF    0A.4
13A9:  BSF    0A.3
13AA:  BCF    03.6
13AB:  CALL   000
13AC:  BSF    0A.4
13AD:  BCF    0A.3
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
13AE:  BTFSC  3E.1
13AF:  GOTO   3BB
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
13B0:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
13B1:  BSF    03.6
13B2:  CLRF   1C
13B3:  MOVLW  3F
13B4:  MOVWF  1B
13B5:  MOVLW  04
13B6:  MOVWF  1D
13B7:  BCF    0A.4
13B8:  BCF    03.6
13B9:  CALL   7DF
13BA:  BSF    0A.4
....................             } 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
13BB:  BSF    03.5
13BC:  BSF    06.1
13BD:  BCF    03.5
13BE:  BTFSS  06.1
13BF:  GOTO   3E9
13C0:  BTFSC  3E.3
13C1:  GOTO   3E9
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
13C2:  BSF    03.6
13C3:  CLRF   1C
13C4:  MOVLW  3F
13C5:  MOVWF  1B
13C6:  BCF    0A.4
13C7:  BSF    0A.3
13C8:  BCF    03.6
13C9:  CALL   1F2
13CA:  BSF    0A.4
13CB:  BCF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
13CC:  BSF    03.6
13CD:  CLRF   1C
13CE:  MOVLW  3F
13CF:  MOVWF  1B
13D0:  BCF    0A.4
13D1:  BSF    0A.3
13D2:  BCF    03.6
13D3:  CALL   212
13D4:  BSF    0A.4
13D5:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
13D6:  BSF    03.6
13D7:  CLRF   1C
13D8:  MOVLW  3F
13D9:  MOVWF  1B
13DA:  BCF    0A.4
13DB:  BCF    03.6
13DC:  CALL   78C
13DD:  BSF    0A.4
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
13DE:  BSF    03.6
13DF:  CLRF   1C
13E0:  MOVLW  3F
13E1:  MOVWF  1B
13E2:  CLRF   1D
13E3:  BCF    0A.4
13E4:  BSF    0A.3
13E5:  BCF    03.6
13E6:  CALL   000
13E7:  BSF    0A.4
13E8:  BCF    0A.3
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
13E9:  BSF    03.6
13EA:  CLRF   1C
13EB:  MOVLW  3F
13EC:  MOVWF  1B
*
1426:  MOVF   78,F
1427:  BTFSC  03.2
1428:  GOTO   488
....................                 turnOnBuzzer(); 
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
*
145D:  BSF    03.6
145E:  CLRF   1C
145F:  MOVLW  3F
1460:  MOVWF  1B
1461:  MOVLW  01
1462:  MOVWF  1D
1463:  BCF    0A.4
1464:  BCF    03.6
1465:  CALL   7DF
1466:  BSF    0A.4
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1467:  BSF    03.6
1468:  CLRF   1C
1469:  MOVLW  3F
146A:  MOVWF  1B
146B:  BCF    0A.4
146C:  BCF    03.6
146D:  CALL   78C
146E:  BSF    0A.4
....................                 myPolyoneDisplay.typeOfCount = COUNTUP; 
146F:  BSF    55.1
....................                 PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
1470:  BSF    03.6
1471:  CLRF   1C
1472:  MOVLW  3F
1473:  MOVWF  1B
1474:  BCF    0A.4
1475:  BSF    0A.3
1476:  BCF    03.6
1477:  CALL   2E2
1478:  BSF    0A.4
1479:  BCF    0A.3
....................                 Time_clearRtcTime(); 
147A:  BCF    0A.4
147B:  BSF    0A.3
147C:  CALL   30D
147D:  BSF    0A.4
147E:  BCF    0A.3
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
147F:  BSF    03.6
1480:  CLRF   4F
1481:  MOVLW  3F
1482:  MOVWF  4E
1483:  BCF    0A.4
1484:  BCF    03.6
1485:  CALL   5AB
1486:  BSF    0A.4
1487:  BSF    03.6
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1488:  BCF    03.6
1489:  BTFSC  3E.2
148A:  GOTO   496
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
148B:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
148C:  BSF    03.6
148D:  CLRF   1C
148E:  MOVLW  3F
148F:  MOVWF  1B
1490:  MOVLW  09
1491:  MOVWF  1D
1492:  BCF    0A.4
1493:  BCF    03.6
1494:  CALL   7DF
1495:  BSF    0A.4
....................             } 
....................             break; 
1496:  GOTO   561
....................  
....................         case STATE_COUNTING_UP: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1497:  BSF    03.6
1498:  CLRF   4F
1499:  MOVLW  3F
149A:  MOVWF  4E
149B:  BCF    0A.4
149C:  BCF    03.6
149D:  CALL   5AB
149E:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
149F:  BSF    03.6
14A0:  CLRF   1C
14A1:  MOVLW  3F
14A2:  MOVWF  1B
14A3:  MOVLW  01
14A4:  MOVWF  1D
14A5:  BCF    0A.4
14A6:  BSF    0A.3
14A7:  BCF    03.6
14A8:  CALL   000
14A9:  BSF    0A.4
14AA:  BCF    0A.3
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
14AB:  BSF    03.5
14AC:  BSF    06.1
14AD:  BCF    03.5
14AE:  BTFSS  06.1
14AF:  GOTO   4D9
14B0:  BTFSC  3E.3
14B1:  GOTO   4D9
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
14B2:  BSF    03.6
14B3:  CLRF   1C
14B4:  MOVLW  3F
14B5:  MOVWF  1B
14B6:  BCF    0A.4
14B7:  BSF    0A.3
14B8:  BCF    03.6
14B9:  CALL   1F2
14BA:  BSF    0A.4
14BB:  BCF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
14BC:  BSF    03.6
14BD:  CLRF   1C
14BE:  MOVLW  3F
14BF:  MOVWF  1B
14C0:  BCF    0A.4
14C1:  BSF    0A.3
14C2:  BCF    03.6
14C3:  CALL   212
14C4:  BSF    0A.4
14C5:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
14C6:  BSF    03.6
14C7:  CLRF   1C
14C8:  MOVLW  3F
14C9:  MOVWF  1B
14CA:  BCF    0A.4
14CB:  BCF    03.6
14CC:  CALL   78C
14CD:  BSF    0A.4
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
14CE:  BSF    03.6
14CF:  CLRF   1C
14D0:  MOVLW  3F
14D1:  MOVWF  1B
14D2:  CLRF   1D
14D3:  BCF    0A.4
14D4:  BSF    0A.3
14D5:  BCF    03.6
14D6:  CALL   000
14D7:  BSF    0A.4
14D8:  BCF    0A.3
....................                 //                setTime(,39,56); 
....................             } 
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
14D9:  BTFSC  3E.1
14DA:  GOTO   4E6
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
14DB:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
14DC:  BSF    03.6
14DD:  CLRF   1C
14DE:  MOVLW  3F
14DF:  MOVWF  1B
14E0:  MOVLW  04
14E1:  MOVWF  1D
14E2:  BCF    0A.4
14E3:  BCF    03.6
14E4:  CALL   7DF
14E5:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
14E6:  BTFSC  3E.2
14E7:  GOTO   4F3
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
14E8:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
14E9:  BSF    03.6
14EA:  CLRF   1C
14EB:  MOVLW  3F
14EC:  MOVWF  1B
14ED:  MOVLW  09
14EE:  MOVWF  1D
14EF:  BCF    0A.4
14F0:  BCF    03.6
14F1:  CALL   7DF
14F2:  BSF    0A.4
....................             } 
....................             break; 
14F3:  GOTO   561
....................  
....................         case STATE_RESETTING: 
....................             myPolyoneDisplay.typeOfCount = COUNTDOWN; 
14F4:  BCF    55.1
....................             PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
14F5:  BSF    03.6
14F6:  CLRF   1C
14F7:  MOVLW  3F
14F8:  MOVWF  1B
14F9:  BCF    0A.4
14FA:  BSF    0A.3
14FB:  BCF    03.6
14FC:  CALL   2E2
14FD:  BSF    0A.4
14FE:  BCF    0A.3
....................             Time_clearRtcTime(); 
14FF:  BCF    0A.4
1500:  BSF    0A.3
1501:  CALL   30D
1502:  BSF    0A.4
1503:  BCF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
1519:  MOVLW  08
151A:  BSF    03.6
151B:  MOVWF  1B
151C:  MOVLW  FA
151D:  MOVWF  1C
151E:  BCF    0A.4
151F:  BSF    0A.3
1520:  BCF    03.6
1521:  CALL   2CE
1522:  BSF    0A.4
1523:  BCF    0A.3
1524:  BSF    03.6
1525:  DECFSZ 1B,F
1526:  GOTO   51C
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
1527:  CLRF   1C
1528:  MOVLW  3F
1529:  MOVWF  1B
152A:  MOVLW  0A
152B:  MOVWF  1D
152C:  BCF    0A.4
152D:  BCF    03.6
152E:  CALL   7DF
152F:  BSF    0A.4
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
1530:  MOVLW  05
1531:  MOVWF  60
....................             Time_clearRtcTime(); 
1532:  BCF    0A.4
1533:  BSF    0A.3
1534:  CALL   30D
1535:  BSF    0A.4
1536:  BCF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1537:  BSF    03.6
1538:  CLRF   4F
1539:  MOVLW  3F
153A:  MOVWF  4E
153B:  BCF    0A.4
153C:  BCF    03.6
153D:  CALL   5AB
153E:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
153F:  BSF    03.6
1540:  CLRF   1C
1541:  MOVLW  3F
1542:  MOVWF  1B
1543:  CLRF   1D
1544:  BCF    0A.4
1545:  BSF    0A.3
1546:  BCF    03.6
1547:  CALL   000
1548:  BSF    0A.4
1549:  BCF    0A.3
....................             //            rtos_enable(Task_checkIfMenuButtonIsHeld); 
....................             break; 
154A:  GOTO   561
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(PIN_BUTTON_START) && input(PIN_BUTTON_MENU)) { 
154B:  BSF    03.5
154C:  BSF    06.1
154D:  BCF    03.5
154E:  BTFSS  06.1
154F:  GOTO   561
1550:  BSF    03.5
1551:  BSF    06.0
1552:  BCF    03.5
1553:  BTFSS  06.0
1554:  GOTO   561
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
1555:  BSF    03.6
1556:  CLRF   1C
1557:  MOVLW  3F
1558:  MOVWF  1B
1559:  BCF    03.6
155A:  MOVF   60,W
155B:  BSF    03.6
155C:  MOVWF  1D
155D:  BCF    0A.4
155E:  BCF    03.6
155F:  CALL   7DF
1560:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
1561:  BSF    0A.3
1562:  BSF    0A.4
1563:  GOTO   002 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1800:  BCF    0A.3
1801:  GOTO   000
1802:  BSF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1803:  MOVLW  05
1804:  SUBWF  56,W
1805:  ADDLW  FB
1806:  BTFSC  03.0
1807:  GOTO   6AF
1808:  ADDLW  05
1809:  GOTO   6CA
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
180A:  BSF    03.6
180B:  CLRF   1C
180C:  MOVLW  3F
180D:  MOVWF  1B
180E:  CLRF   1D
180F:  BCF    0A.4
1810:  BCF    03.6
1811:  CALL   000
1812:  BSF    0A.4
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
1813:  BSF    03.5
1814:  BSF    06.1
1815:  BCF    03.5
1816:  BTFSS  06.1
1817:  GOTO   033
1818:  BTFSC  3E.3
1819:  GOTO   033
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
181A:  BSF    03.6
181B:  CLRF   1C
181C:  MOVLW  3F
181D:  MOVWF  1B
181E:  MOVLW  02
181F:  MOVWF  1D
1820:  BCF    0A.4
1821:  BCF    0A.3
1822:  BCF    03.6
1823:  CALL   7DF
1824:  BSF    0A.4
1825:  BSF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1826:  BSF    03.6
1827:  CLRF   1C
1828:  MOVLW  3F
1829:  MOVWF  1B
182A:  BCF    0A.4
182B:  BCF    0A.3
182C:  BCF    03.6
182D:  CALL   78C
182E:  BSF    0A.4
182F:  BSF    0A.3
....................                 Time_clearRtcTime(); 
1830:  BCF    0A.4
1831:  CALL   30D
1832:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1833:  BTFSC  3E.2
1834:  GOTO   042
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1835:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1836:  BSF    03.6
1837:  CLRF   1C
1838:  MOVLW  3F
1839:  MOVWF  1B
183A:  MOVLW  06
183B:  MOVWF  1D
183C:  BCF    0A.4
183D:  BCF    0A.3
183E:  BCF    03.6
183F:  CALL   7DF
1840:  BSF    0A.4
1841:  BSF    0A.3
....................                 //                rtos_disable(Task_checkIfMenuButtonIsHeld); 
....................             } 
....................             break; 
1842:  GOTO   6AF
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................  
....................             if (showDisplayCompletely) { 
1843:  BTFSS  3E.0
1844:  GOTO   04E
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1845:  BSF    03.6
1846:  CLRF   1C
1847:  MOVLW  3F
1848:  MOVWF  1B
1849:  BCF    0A.4
184A:  BCF    03.6
184B:  CALL   316
184C:  BSF    0A.4
....................             } else { 
184D:  GOTO   139
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
184E:  BSF    03.6
184F:  CLRF   1C
1850:  MOVLW  3F
1851:  MOVWF  1B
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
193A:  BSF    03.5
193B:  BCF    03.6
193C:  BSF    06.1
193D:  BCF    03.5
193E:  BTFSC  06.1
193F:  GOTO   1B9
....................                 while (!input(PIN_BUTTON_START)) { 
1940:  BSF    03.5
1941:  BSF    06.1
1942:  BCF    03.5
1943:  BTFSC  06.1
1944:  GOTO   1B9
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
1945:  BSF    03.6
1946:  CLRF   1C
1947:  MOVLW  3F
1948:  MOVWF  1B
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
19AA:  CLRF   1C
19AB:  MOVLW  3F
19AC:  MOVWF  1B
19AD:  BCF    0A.4
19AE:  BCF    03.6
19AF:  CALL   316
19B0:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
19B1:  MOVLW  64
19B2:  BSF    03.6
19B3:  MOVWF  1C
19B4:  BCF    0A.4
19B5:  BCF    03.6
19B6:  CALL   2CE
19B7:  BSF    0A.4
19B8:  GOTO   140
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
19B9:  BTFSC  3E.4
19BA:  GOTO   1D2
19BB:  BSF    03.5
19BC:  BSF    06.0
19BD:  BCF    03.5
19BE:  BTFSS  06.0
19BF:  GOTO   1D2
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
19C0:  MOVF   57,W
19C1:  SUBLW  05
19C2:  BTFSS  03.2
19C3:  GOTO   1C6
....................                     numberOfMenuButtonHasBeenReleased++; 
19C4:  INCF   61,F
....................                 } else { 
19C5:  GOTO   1D2
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19C6:  BSF    03.6
19C7:  CLRF   1C
19C8:  MOVLW  3F
19C9:  MOVWF  1B
19CA:  MOVLW  07
19CB:  MOVWF  1D
19CC:  BCF    0A.4
19CD:  BCF    0A.3
19CE:  BCF    03.6
19CF:  CALL   7DF
19D0:  BSF    0A.4
19D1:  BSF    0A.3
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
19D2:  MOVF   61,W
19D3:  SUBLW  01
19D4:  BTFSC  03.0
19D5:  GOTO   1E3
....................                 numberOfMenuButtonHasBeenReleased = 0; 
19D6:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
19D7:  BSF    03.6
19D8:  CLRF   1C
19D9:  MOVLW  3F
19DA:  MOVWF  1B
19DB:  MOVLW  07
19DC:  MOVWF  1D
19DD:  BCF    0A.4
19DE:  BCF    0A.3
19DF:  BCF    03.6
19E0:  CALL   7DF
19E1:  BSF    0A.4
19E2:  BSF    0A.3
....................             } 
....................  
....................             break; 
19E3:  GOTO   6AF
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
19E4:  BTFSS  3E.0
19E5:  GOTO   1EF
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
19E6:  BSF    03.6
19E7:  CLRF   1C
19E8:  MOVLW  3F
19E9:  MOVWF  1B
19EA:  BCF    0A.4
19EB:  BCF    03.6
19EC:  CALL   316
19ED:  BSF    0A.4
....................             } else { 
19EE:  GOTO   2DE
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
19EF:  BSF    03.6
19F0:  CLRF   1C
19F1:  MOVLW  3F
19F2:  MOVWF  1B
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1ADF:  BSF    03.5
1AE0:  BCF    03.6
1AE1:  BSF    06.1
1AE2:  BCF    03.5
1AE3:  BTFSC  06.1
1AE4:  GOTO   360
....................                 while (!input(PIN_BUTTON_START)) { 
1AE5:  BSF    03.5
1AE6:  BSF    06.1
1AE7:  BCF    03.5
1AE8:  BTFSC  06.1
1AE9:  GOTO   360
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1AEA:  BSF    03.6
1AEB:  CLRF   1C
1AEC:  MOVLW  3F
1AED:  MOVWF  1B
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1B50:  BSF    03.6
1B51:  CLRF   1C
1B52:  MOVLW  3F
1B53:  MOVWF  1B
1B54:  BCF    0A.4
1B55:  BCF    03.6
1B56:  CALL   316
1B57:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1B58:  MOVLW  64
1B59:  BSF    03.6
1B5A:  MOVWF  1C
1B5B:  BCF    0A.4
1B5C:  BCF    03.6
1B5D:  CALL   2CE
1B5E:  BSF    0A.4
1B5F:  GOTO   2E5
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1B60:  BTFSC  3E.4
1B61:  GOTO   3C9
1B62:  BSF    03.5
1B63:  BSF    06.0
1B64:  BCF    03.5
1B65:  BTFSS  06.0
1B66:  GOTO   3C9
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
1B67:  BSF    03.6
1B68:  CLRF   1C
1B69:  MOVLW  3F
1B6A:  MOVWF  1B
*
1BAE:  MOVF   78,F
1BAF:  BTFSC  03.2
1BB0:  GOTO   3BE
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
1BB1:  CLRF   1C
1BB2:  MOVLW  3F
1BB3:  MOVWF  1B
1BB4:  MOVLW  08
1BB5:  MOVWF  1D
1BB6:  BCF    0A.4
1BB7:  BCF    0A.3
1BB8:  BCF    03.6
1BB9:  CALL   7DF
1BBA:  BSF    0A.4
1BBB:  BSF    0A.3
....................                 } else { 
1BBC:  GOTO   3C9
1BBD:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1BBE:  CLRF   1C
1BBF:  MOVLW  3F
1BC0:  MOVWF  1B
1BC1:  MOVLW  06
1BC2:  MOVWF  1D
1BC3:  BCF    0A.4
1BC4:  BCF    0A.3
1BC5:  BCF    03.6
1BC6:  CALL   7DF
1BC7:  BSF    0A.4
1BC8:  BSF    0A.3
....................                 } 
....................             } 
....................             break; 
1BC9:  GOTO   6AF
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
1BCA:  BSF    03.6
1BCB:  CLRF   1C
1BCC:  MOVLW  3F
1BCD:  MOVWF  1B
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
*
1C02:  BSF    03.5
1C03:  BSF    06.1
1C04:  BCF    03.5
1C05:  BTFSS  06.1
1C06:  GOTO   4D9
1C07:  BTFSC  3E.3
1C08:  GOTO   4D9
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1C09:  BSF    03.6
1C0A:  CLRF   1C
1C0B:  MOVLW  3F
1C0C:  MOVWF  1B
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
*
1CD9:  BTFSC  3E.4
1CDA:  GOTO   5F3
1CDB:  BSF    03.5
1CDC:  BSF    06.0
1CDD:  BCF    03.5
1CDE:  BTFSS  06.0
1CDF:  GOTO   5F3
....................                 PolyoneDisplay_saveAlarm(&myPolyoneDisplay); 
1CE0:  BSF    03.6
1CE1:  CLRF   1C
1CE2:  MOVLW  3F
1CE3:  MOVWF  1B
....................                 PolyoneDisplay_saveFormat(&myPolyoneDisplay); 
*
1DAE:  CLRF   1C
1DAF:  MOVLW  3F
1DB0:  MOVWF  1B
....................  
....................                 Time_clearRtcTime(); 
*
1DDA:  BCF    0A.4
1DDB:  CALL   30D
1DDC:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1DDD:  BSF    03.6
1DDE:  CLRF   4F
1DDF:  MOVLW  3F
1DE0:  MOVWF  4E
1DE1:  BCF    0A.4
1DE2:  BCF    0A.3
1DE3:  BCF    03.6
1DE4:  CALL   5AB
1DE5:  BSF    0A.4
1DE6:  BSF    0A.3
....................  
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1DE7:  BSF    03.6
1DE8:  CLRF   1C
1DE9:  MOVLW  3F
1DEA:  MOVWF  1B
1DEB:  MOVLW  09
1DEC:  MOVWF  1D
1DED:  BCF    0A.4
1DEE:  BCF    0A.3
1DEF:  BCF    03.6
1DF0:  CALL   7DF
1DF1:  BSF    0A.4
1DF2:  BSF    0A.3
....................             } 
....................             break; 
1DF3:  GOTO   6AF
....................  
....................         case STATE_SETTING_BRIGHTNESS: 
....................             if (showDisplayCompletely) { 
1DF4:  BTFSS  3E.0
1DF5:  GOTO   5FF
....................                 PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
1DF6:  BSF    03.6
1DF7:  CLRF   1C
1DF8:  MOVLW  3F
1DF9:  MOVWF  1B
1DFA:  BCF    0A.4
1DFB:  BCF    03.6
1DFC:  CALL   40F
1DFD:  BSF    0A.4
....................             } else { 
1DFE:  GOTO   612
....................                 PolyoneDisplay_hideBrightness(); 
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1E12:  BSF    03.5
1E13:  BSF    06.1
1E14:  BCF    03.5
1E15:  BTFSC  06.1
1E16:  GOTO   66A
....................                 while (!input(PIN_BUTTON_START)) { 
1E17:  BSF    03.5
1E18:  BSF    06.1
1E19:  BCF    03.5
1E1A:  BTFSC  06.1
1E1B:  GOTO   66A
....................                     PolyoneDisplay_increaseBrightness(&myPolyoneDisplay); 
1E1C:  BSF    03.6
1E1D:  CLRF   1C
1E1E:  MOVLW  3F
1E1F:  MOVWF  1B
....................                     PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
*
1E5A:  BSF    03.6
1E5B:  CLRF   1C
1E5C:  MOVLW  3F
1E5D:  MOVWF  1B
1E5E:  BCF    0A.4
1E5F:  BCF    03.6
1E60:  CALL   40F
1E61:  BSF    0A.4
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1E62:  MOVLW  64
1E63:  BSF    03.6
1E64:  MOVWF  1C
1E65:  BCF    0A.4
1E66:  BCF    03.6
1E67:  CALL   2CE
1E68:  BSF    0A.4
1E69:  GOTO   617
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1E6A:  BTFSC  3E.4
1E6B:  GOTO   68B
1E6C:  BSF    03.5
1E6D:  BSF    06.0
1E6E:  BCF    03.5
1E6F:  BTFSS  06.0
1E70:  GOTO   68B
....................                 if (myPolyoneDisplay.previousState == STATE_SETTING_FORMAT) { 
1E71:  MOVF   57,W
1E72:  SUBLW  08
1E73:  BTFSS  03.2
1E74:  GOTO   68A
....................                     PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1E75:  BSF    03.6
1E76:  CLRF   1C
1E77:  MOVLW  3F
1E78:  MOVWF  1B
1E79:  BCF    0A.4
1E7A:  BCF    03.6
1E7B:  CALL   453
1E7C:  BSF    0A.4
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
1E7D:  BSF    03.6
1E7E:  CLRF   1C
1E7F:  MOVLW  3F
1E80:  MOVWF  1B
1E81:  MOVLW  05
1E82:  MOVWF  1D
1E83:  BCF    0A.4
1E84:  BCF    0A.3
1E85:  BCF    03.6
1E86:  CALL   7DF
1E87:  BSF    0A.4
1E88:  BSF    0A.3
....................                 } else { 
1E89:  GOTO   68B
....................                     numberOfMenuButtonHasBeenReleased++; 
1E8A:  INCF   61,F
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1E8B:  MOVF   61,W
1E8C:  SUBLW  01
1E8D:  BTFSC  03.0
1E8E:  GOTO   6AF
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1E8F:  CLRF   61
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, myPolyoneDisplay.previousState); 
1E90:  BSF    03.6
1E91:  CLRF   1C
1E92:  MOVLW  3F
1E93:  MOVWF  1B
1E94:  BCF    03.6
1E95:  MOVF   57,W
1E96:  BSF    03.6
1E97:  MOVWF  1D
1E98:  BCF    0A.4
1E99:  BCF    0A.3
1E9A:  BCF    03.6
1E9B:  CALL   7DF
1E9C:  BSF    0A.4
1E9D:  BSF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1E9E:  BSF    03.6
1E9F:  CLRF   1C
1EA0:  MOVLW  3F
1EA1:  MOVWF  1B
1EA2:  CLRF   1D
1EA3:  BCF    0A.4
1EA4:  BCF    03.6
1EA5:  CALL   000
1EA6:  BSF    0A.4
....................                 PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
1EA7:  BSF    03.6
1EA8:  CLRF   1C
1EA9:  MOVLW  3F
1EAA:  MOVWF  1B
1EAB:  BCF    0A.4
1EAC:  BCF    03.6
1EAD:  CALL   453
1EAE:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(PIN_BUTTON_START); 
1EAF:  BSF    03.5
1EB0:  BSF    06.1
1EB1:  BCF    03.5
1EB2:  BCF    3E.3
1EB3:  BTFSC  06.1
1EB4:  BSF    3E.3
....................     menuButtonState = input(PIN_BUTTON_MENU); 
1EB5:  BSF    03.5
1EB6:  BSF    06.0
1EB7:  BCF    03.5
1EB8:  BCF    3E.4
1EB9:  BTFSC  06.0
1EBA:  BSF    3E.4
....................     rtos_yield(); 
1EBB:  MOVLW  C2
1EBC:  MOVWF  35
1EBD:  MOVLW  1E
1EBE:  MOVWF  36
1EBF:  BSF    0A.3
1EC0:  BCF    0A.4
1EC1:  GOTO   57C
1EC2:  MOVLW  00
1EC3:  MOVWF  35
1EC4:  MOVLW  18
1EC5:  MOVWF  36
1EC6:  BSF    0A.3
1EC7:  BCF    0A.4
1EC8:  GOTO   57C
1EC9:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(PIN_BUTTON_START)) { 
*
0C7D:  BSF    03.5
0C7E:  BSF    06.1
0C7F:  BCF    03.5
0C80:  BTFSC  06.1
0C81:  GOTO   484
....................         nextUpButtonCounter++; 
0C82:  INCF   62,F
....................     } else { 
0C83:  GOTO   486
....................         nextUpButtonCounter = 0; 
0C84:  CLRF   62
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0C85:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0C86:  MOVF   62,W
0C87:  SUBLW  13
0C88:  BTFSC  03.0
0C89:  GOTO   48C
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0C8A:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0C8B:  CLRF   62
....................     } 
....................     rtos_yield(); 
0C8C:  MOVLW  93
0C8D:  MOVWF  27
0C8E:  MOVLW  0C
0C8F:  MOVWF  28
0C90:  BSF    0A.3
0C91:  BCF    0A.4
0C92:  GOTO   57C
0C93:  MOVLW  7D
0C94:  MOVWF  27
0C95:  MOVLW  0C
0C96:  MOVWF  28
0C97:  BSF    0A.3
0C98:  BCF    0A.4
0C99:  GOTO   57C
0C9A:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(PIN_BUTTON_MENU)) { 
0C9B:  BSF    03.5
0C9C:  BSF    06.0
0C9D:  BCF    03.5
0C9E:  BTFSC  06.0
0C9F:  GOTO   4A2
....................         menuButtonCounter++; 
0CA0:  INCF   63,F
....................     } else { 
0CA1:  GOTO   4A4
....................         menuButtonCounter = 0; 
0CA2:  CLRF   63
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0CA3:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0CA4:  MOVF   63,W
0CA5:  SUBLW  0C
0CA6:  BTFSC  03.0
0CA7:  GOTO   4AA
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0CA8:  BCF    3E.2
....................         menuButtonCounter = 0; 
0CA9:  CLRF   63
....................     } 
....................     rtos_yield(); 
0CAA:  MOVLW  B1
0CAB:  MOVWF  2E
0CAC:  MOVLW  0C
0CAD:  MOVWF  2F
0CAE:  BSF    0A.3
0CAF:  BCF    0A.4
0CB0:  GOTO   57C
0CB1:  MOVLW  9B
0CB2:  MOVWF  2E
0CB3:  MOVLW  0C
0CB4:  MOVWF  2F
0CB5:  BSF    0A.3
0CB6:  BCF    0A.4
0CB7:  GOTO   57C
0CB8:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0CB9:  MOVLW  01
0CBA:  XORWF  3E,F
....................     rtos_yield(); 
0CBB:  MOVLW  C2
0CBC:  MOVWF  3C
0CBD:  MOVLW  0C
0CBE:  MOVWF  3D
0CBF:  BSF    0A.3
0CC0:  BCF    0A.4
0CC1:  GOTO   57C
0CC2:  MOVLW  B9
0CC3:  MOVWF  3C
0CC4:  MOVLW  0C
0CC5:  MOVWF  3D
0CC6:  BSF    0A.3
0CC7:  BCF    0A.4
0CC8:  GOTO   57C
0CC9:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
*
0CE7:  MOVLW  00
0CE8:  MOVWF  78
0CE9:  IORLW  06
0CEA:  BCF    03.6
0CEB:  MOVWF  12
0CEC:  MOVLW  FF
0CED:  BSF    03.5
0CEE:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0CEF:  BCF    03.5
0CF0:  BCF    20.2
0CF1:  MOVF   20,W
0CF2:  BSF    03.5
0CF3:  MOVWF  07
0CF4:  BCF    03.5
0CF5:  BCF    07.2
0CF6:  MOVLW  0E
0CF7:  MOVWF  17
0CF8:  BSF    03.5
0CF9:  CLRF   1B
0CFA:  CLRF   1C
0CFB:  MOVLW  01
0CFC:  MOVWF  1D
....................  
....................     delay_ms(500); 
0CFD:  MOVLW  02
0CFE:  BCF    03.5
0CFF:  MOVWF  64
0D00:  MOVLW  FA
0D01:  BSF    03.6
0D02:  MOVWF  1C
0D03:  BCF    03.6
0D04:  CALL   2CE
0D05:  DECFSZ 64,F
0D06:  GOTO   500
....................     port_b_pullups(0xFF); 
0D07:  MOVLW  FF
0D08:  BSF    03.5
0D09:  MOVWF  15
0D0A:  BCF    01.7
....................     WPUB = 0xFF; 
0D0B:  MOVWF  15
.................... } 
....................  
.................... void turnOnBuzzer(void) { 
....................     output_high(PIN_BUZZER); 
*
1429:  BCF    03.6
142A:  BCF    20.5
142B:  MOVF   20,W
142C:  BSF    03.5
142D:  MOVWF  07
142E:  BCF    03.5
142F:  BSF    07.5
....................     delay_ms(200); 
1430:  MOVLW  C8
1431:  BSF    03.6
1432:  MOVWF  1C
1433:  BCF    0A.4
1434:  BSF    0A.3
1435:  BCF    03.6
1436:  CALL   2CE
1437:  BSF    0A.4
1438:  BCF    0A.3
....................     output_low(PIN_BUZZER); 
1439:  BCF    20.5
143A:  MOVF   20,W
143B:  BSF    03.5
143C:  MOVWF  07
143D:  BCF    03.5
143E:  BCF    07.5
....................     delay_ms(100); 
143F:  MOVLW  64
1440:  BSF    03.6
1441:  MOVWF  1C
1442:  BCF    0A.4
1443:  BSF    0A.3
1444:  BCF    03.6
1445:  CALL   2CE
1446:  BSF    0A.4
1447:  BCF    0A.3
....................     output_high(PIN_BUZZER); 
1448:  BCF    20.5
1449:  MOVF   20,W
144A:  BSF    03.5
144B:  MOVWF  07
144C:  BCF    03.5
144D:  BSF    07.5
....................     delay_ms(200); 
144E:  MOVLW  C8
144F:  BSF    03.6
1450:  MOVWF  1C
1451:  BCF    0A.4
1452:  BSF    0A.3
1453:  BCF    03.6
1454:  CALL   2CE
1455:  BSF    0A.4
1456:  BCF    0A.3
....................     output_low(PIN_BUZZER); 
1457:  BCF    20.5
1458:  MOVF   20,W
1459:  BSF    03.5
145A:  MOVWF  07
145B:  BCF    03.5
145C:  BCF    07.5
.................... } 

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
