CCS PCM C Compiler, Version 5.015, 5967               08-Nov-17 14:26

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   4525 words (55%)
                           Largest free fragment is 2048
               RAM used:   74 (20%) at main() level
                           315 (86%) worst case
               Stack used: 7 locations (2 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  09
0001:  MOVWF  0A
0002:  GOTO   1E6
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  22
0028:  RETLW  00
0029:  RETLW  29
002A:  RETLW  00
002B:  RETLW  30
002C:  RETLW  00
002D:  RETLW  37
002E:  RETLW  00
002F:  BSF    03.5
0030:  BSF    03.6
0031:  MOVF   35,W
0032:  CLRF   78
0033:  SUBWF  34,W
0034:  BTFSC  03.0
0035:  GOTO   039
0036:  MOVF   34,W
0037:  MOVWF  77
0038:  GOTO   045
0039:  CLRF   77
003A:  MOVLW  08
003B:  MOVWF  36
003C:  RLF    34,F
003D:  RLF    77,F
003E:  MOVF   35,W
003F:  SUBWF  77,W
0040:  BTFSC  03.0
0041:  MOVWF  77
0042:  RLF    78,F
0043:  DECFSZ 36,F
0044:  GOTO   03C
0045:  BCF    03.5
0046:  BCF    03.6
0047:  RETURN
*
0161:  CLRF   77
0162:  CLRF   78
0163:  MOVF   19,W
0164:  BCF    03.0
0165:  BTFSC  1A.0
0166:  ADDWF  77,F
0167:  RRF    77,F
0168:  RRF    78,F
0169:  BTFSC  1A.1
016A:  ADDWF  77,F
016B:  RRF    77,F
016C:  RRF    78,F
016D:  BTFSC  1A.2
016E:  ADDWF  77,F
016F:  RRF    77,F
0170:  RRF    78,F
0171:  BTFSC  1A.3
0172:  ADDWF  77,F
0173:  RRF    77,F
0174:  RRF    78,F
0175:  BTFSC  1A.4
0176:  ADDWF  77,F
0177:  RRF    77,F
0178:  RRF    78,F
0179:  BTFSC  1A.5
017A:  ADDWF  77,F
017B:  RRF    77,F
017C:  RRF    78,F
017D:  BTFSC  1A.6
017E:  ADDWF  77,F
017F:  RRF    77,F
0180:  RRF    78,F
0181:  BTFSC  1A.7
0182:  ADDWF  77,F
0183:  RRF    77,F
0184:  RRF    78,F
*
018B:  MOVLW  20
018C:  BSF    03.5
018D:  BSF    03.6
018E:  MOVWF  3A
018F:  CLRF   36
0190:  CLRF   37
0191:  CLRF   38
0192:  CLRF   39
0193:  MOVF   31,W
0194:  MOVWF  7A
0195:  MOVF   30,W
0196:  MOVWF  79
0197:  MOVF   2F,W
0198:  MOVWF  78
0199:  MOVF   2E,W
019A:  MOVWF  77
019B:  BCF    03.0
019C:  BTFSS  77.0
019D:  GOTO   1AC
019E:  MOVF   32,W
019F:  ADDWF  36,F
01A0:  MOVF   33,W
01A1:  BTFSC  03.0
01A2:  INCFSZ 33,W
01A3:  ADDWF  37,F
01A4:  MOVF   34,W
01A5:  BTFSC  03.0
01A6:  INCFSZ 34,W
01A7:  ADDWF  38,F
01A8:  MOVF   35,W
01A9:  BTFSC  03.0
01AA:  INCFSZ 35,W
01AB:  ADDWF  39,F
01AC:  RRF    39,F
01AD:  RRF    38,F
01AE:  RRF    37,F
01AF:  RRF    36,F
01B0:  RRF    7A,F
01B1:  RRF    79,F
01B2:  RRF    78,F
01B3:  RRF    77,F
01B4:  DECFSZ 3A,F
01B5:  GOTO   19B
01B6:  BCF    03.5
01B7:  BCF    03.6
01B8:  RETURN
*
0256:  BTFSC  03.1
0257:  GOTO   25B
0258:  MOVLW  B2
0259:  MOVWF  04
025A:  BSF    03.7
025B:  BSF    03.5
025C:  BSF    03.6
025D:  MOVF   2D,W
025E:  XORWF  31,W
025F:  ANDLW  80
0260:  MOVWF  37
0261:  BTFSS  2D.7
0262:  GOTO   26E
0263:  COMF   2A,F
0264:  COMF   2B,F
0265:  COMF   2C,F
0266:  COMF   2D,F
0267:  INCF   2A,F
0268:  BTFSC  03.2
0269:  INCF   2B,F
026A:  BTFSC  03.2
026B:  INCF   2C,F
026C:  BTFSC  03.2
026D:  INCF   2D,F
026E:  BTFSS  31.7
026F:  GOTO   27B
0270:  COMF   2E,F
0271:  COMF   2F,F
0272:  COMF   30,F
0273:  COMF   31,F
0274:  INCF   2E,F
0275:  BTFSC  03.2
0276:  INCF   2F,F
0277:  BTFSC  03.2
0278:  INCF   30,F
0279:  BTFSC  03.2
027A:  INCF   31,F
027B:  CLRF   77
027C:  CLRF   78
027D:  CLRF   79
027E:  CLRF   7A
027F:  CLRF   32
0280:  CLRF   33
0281:  CLRF   34
0282:  CLRF   35
0283:  MOVF   31,W
0284:  IORWF  30,W
0285:  IORWF  2F,W
0286:  IORWF  2E,W
0287:  BTFSC  03.2
0288:  GOTO   2B9
0289:  MOVLW  20
028A:  MOVWF  36
028B:  BCF    03.0
028C:  RLF    2A,F
028D:  RLF    2B,F
028E:  RLF    2C,F
028F:  RLF    2D,F
0290:  RLF    32,F
0291:  RLF    33,F
0292:  RLF    34,F
0293:  RLF    35,F
0294:  MOVF   31,W
0295:  SUBWF  35,W
0296:  BTFSS  03.2
0297:  GOTO   2A2
0298:  MOVF   30,W
0299:  SUBWF  34,W
029A:  BTFSS  03.2
029B:  GOTO   2A2
029C:  MOVF   2F,W
029D:  SUBWF  33,W
029E:  BTFSS  03.2
029F:  GOTO   2A2
02A0:  MOVF   2E,W
02A1:  SUBWF  32,W
02A2:  BTFSS  03.0
02A3:  GOTO   2B3
02A4:  MOVF   2E,W
02A5:  SUBWF  32,F
02A6:  MOVF   2F,W
02A7:  BTFSS  03.0
02A8:  INCFSZ 2F,W
02A9:  SUBWF  33,F
02AA:  MOVF   30,W
02AB:  BTFSS  03.0
02AC:  INCFSZ 30,W
02AD:  SUBWF  34,F
02AE:  MOVF   31,W
02AF:  BTFSS  03.0
02B0:  INCFSZ 31,W
02B1:  SUBWF  35,F
02B2:  BSF    03.0
02B3:  RLF    77,F
02B4:  RLF    78,F
02B5:  RLF    79,F
02B6:  RLF    7A,F
02B7:  DECFSZ 36,F
02B8:  GOTO   28B
02B9:  BTFSS  37.7
02BA:  GOTO   2C6
02BB:  COMF   77,F
02BC:  COMF   78,F
02BD:  COMF   79,F
02BE:  COMF   7A,F
02BF:  INCF   77,F
02C0:  BTFSC  03.2
02C1:  INCF   78,F
02C2:  BTFSC  03.2
02C3:  INCF   79,F
02C4:  BTFSC  03.2
02C5:  INCF   7A,F
02C6:  MOVF   32,W
02C7:  MOVWF  00
02C8:  INCF   04,F
02C9:  MOVF   33,W
02CA:  MOVWF  00
02CB:  INCF   04,F
02CC:  MOVF   34,W
02CD:  MOVWF  00
02CE:  INCF   04,F
02CF:  MOVF   35,W
02D0:  MOVWF  00
02D1:  BCF    03.5
02D2:  BCF    03.6
02D3:  RETURN
*
05A0:  CLRF   78
05A1:  CLRF   79
05A2:  CLRF   77
05A3:  CLRF   7A
05A4:  BSF    03.6
05A5:  MOVF   52,W
05A6:  BTFSS  03.2
05A7:  GOTO   5AB
05A8:  MOVF   51,W
05A9:  BTFSC  03.2
05AA:  GOTO   5C5
05AB:  MOVLW  10
05AC:  MOVWF  53
05AD:  BCF    03.0
05AE:  RLF    4F,F
05AF:  RLF    50,F
05B0:  RLF    77,F
05B1:  RLF    7A,F
05B2:  MOVF   52,W
05B3:  SUBWF  7A,W
05B4:  BTFSS  03.2
05B5:  GOTO   5B8
05B6:  MOVF   51,W
05B7:  SUBWF  77,W
05B8:  BTFSS  03.0
05B9:  GOTO   5C1
05BA:  MOVF   51,W
05BB:  SUBWF  77,F
05BC:  BTFSS  03.0
05BD:  DECF   7A,F
05BE:  MOVF   52,W
05BF:  SUBWF  7A,F
05C0:  BSF    03.0
05C1:  RLF    78,F
05C2:  RLF    79,F
05C3:  DECFSZ 53,F
05C4:  GOTO   5AD
05C5:  BCF    03.6
05C6:  RETURN
*
1720:  BSF    0A.0
1721:  BSF    0A.1
1722:  BSF    0A.2
1723:  ADDWF  02,F
1724:  GOTO   1ED
1725:  GOTO   35D
1726:  GOTO   239
1727:  GOTO   006
1728:  GOTO   35E
1729:  GOTO   3B0
172A:  GOTO   3FE
172B:  GOTO   581
172C:  GOTO   705
172D:  GOTO   3A3
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #use delay(clock=20M) 
*
085C:  MOVLW  24
085D:  MOVWF  04
085E:  BSF    03.7
085F:  MOVF   00,W
0860:  BTFSC  03.2
0861:  GOTO   06F
0862:  MOVLW  06
0863:  MOVWF  78
0864:  CLRF   77
0865:  DECFSZ 77,F
0866:  GOTO   065
0867:  DECFSZ 78,F
0868:  GOTO   064
0869:  MOVLW  7B
086A:  MOVWF  77
086B:  DECFSZ 77,F
086C:  GOTO   06B
086D:  DECFSZ 00,F
086E:  GOTO   062
086F:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0048:  MOVLW  08
0049:  MOVWF  78
004A:  NOP
004B:  BCF    07.3
004C:  BCF    20.3
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  NOP
0051:  BSF    03.6
0052:  RLF    17,F
0053:  BCF    03.5
0054:  BCF    03.6
0055:  BCF    07.4
0056:  BTFSS  03.0
0057:  GOTO   05E
0058:  BSF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
005C:  GOTO   062
005D:  BCF    03.5
005E:  BCF    20.4
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  NOP
0063:  BCF    03.5
0064:  BSF    20.3
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
0068:  BCF    03.5
0069:  BTFSS  07.3
006A:  GOTO   069
006B:  DECFSZ 78,F
006C:  GOTO   04A
006D:  NOP
006E:  BCF    07.3
006F:  BCF    20.3
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  NOP
0074:  BCF    03.5
0075:  BSF    20.4
0076:  MOVF   20,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  NOP
007A:  NOP
007B:  BCF    03.5
007C:  BSF    20.3
007D:  MOVF   20,W
007E:  BSF    03.5
007F:  MOVWF  07
0080:  BCF    03.5
0081:  BTFSS  07.3
0082:  GOTO   081
0083:  CLRF   78
0084:  NOP
0085:  BTFSC  07.4
0086:  BSF    78.0
0087:  BCF    07.3
0088:  BCF    20.3
0089:  MOVF   20,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  BCF    03.5
008D:  BCF    07.4
008E:  BCF    20.4
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  BCF    03.5
0093:  RETURN
*
00DF:  MOVLW  08
00E0:  BSF    03.5
00E1:  BSF    03.6
00E2:  MOVWF  18
00E3:  MOVF   77,W
00E4:  MOVWF  19
00E5:  BCF    03.5
00E6:  BCF    03.6
00E7:  BSF    20.4
00E8:  MOVF   20,W
00E9:  BSF    03.5
00EA:  MOVWF  07
00EB:  NOP
00EC:  BCF    03.5
00ED:  BSF    20.3
00EE:  MOVF   20,W
00EF:  BSF    03.5
00F0:  MOVWF  07
00F1:  BCF    03.5
00F2:  BTFSS  07.3
00F3:  GOTO   0F2
00F4:  BTFSC  07.4
00F5:  BSF    03.0
00F6:  BTFSS  07.4
00F7:  BCF    03.0
00F8:  RLF    78,F
00F9:  NOP
00FA:  BCF    20.3
00FB:  MOVF   20,W
00FC:  BSF    03.5
00FD:  MOVWF  07
00FE:  BCF    03.5
00FF:  BCF    07.3
0100:  BSF    03.5
0101:  BSF    03.6
0102:  DECFSZ 18,F
0103:  GOTO   0E5
0104:  BCF    03.5
0105:  BCF    03.6
0106:  BSF    20.4
0107:  MOVF   20,W
0108:  BSF    03.5
0109:  MOVWF  07
010A:  NOP
010B:  BCF    03.5
010C:  BCF    07.4
010D:  BSF    03.5
010E:  BSF    03.6
010F:  MOVF   19,W
0110:  BTFSC  03.2
0111:  GOTO   119
0112:  BCF    03.5
0113:  BCF    03.6
0114:  BCF    20.4
0115:  MOVF   20,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BSF    03.6
0119:  NOP
011A:  BCF    03.5
011B:  BCF    03.6
011C:  BSF    20.3
011D:  MOVF   20,W
011E:  BSF    03.5
011F:  MOVWF  07
0120:  BCF    03.5
0121:  BTFSS  07.3
0122:  GOTO   121
0123:  NOP
0124:  BCF    07.3
0125:  BCF    20.3
0126:  MOVF   20,W
0127:  BSF    03.5
0128:  MOVWF  07
0129:  NOP
012A:  BCF    03.5
012B:  BCF    07.4
012C:  BCF    20.4
012D:  MOVF   20,W
012E:  BSF    03.5
012F:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
0150:  BSF    03.5
0151:  BSF    03.6
0152:  MOVF   15,W
0153:  ANDLW  0F
0154:  MOVWF  16
0155:  MOVF   15,W
0156:  ANDLW  F0
0157:  MOVWF  77
0158:  SWAPF  77,F
0159:  MOVLW  0F
015A:  ANDWF  77,F
015B:  MOVF   77,W
015C:  MOVWF  18
015D:  MOVF   18,W
015E:  MOVWF  19
015F:  MOVLW  0A
0160:  MOVWF  1A
*
0185:  MOVF   78,W
0186:  ADDWF  16,W
0187:  MOVWF  78
0188:  BCF    03.5
0189:  BCF    03.6
018A:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
04D6:  BSF    03.6
04D7:  MOVF   6B,W
04D8:  BSF    03.5
04D9:  MOVWF  34
04DA:  MOVLW  0A
04DB:  MOVWF  35
04DC:  BCF    03.5
04DD:  BCF    03.6
04DE:  CALL   02F
04DF:  SWAPF  78,W
04E0:  MOVWF  77
04E1:  MOVLW  F0
04E2:  ANDWF  77,F
04E3:  MOVF   77,W
04E4:  ANDLW  F0
04E5:  BSF    03.6
04E6:  MOVWF  6C
04E7:  MOVF   6B,W
04E8:  BSF    03.5
04E9:  MOVWF  34
04EA:  MOVLW  0A
04EB:  MOVWF  35
04EC:  BCF    03.5
04ED:  BCF    03.6
04EE:  CALL   02F
04EF:  MOVF   77,W
04F0:  ANDLW  0F
04F1:  BSF    03.6
04F2:  IORWF  6C,W
04F3:  MOVWF  78
04F4:  BCF    03.6
04F5:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
0094:  BSF    03.5
0095:  BSF    03.6
0096:  CLRF   16
....................     int value = 0; 
....................     I2C_start(); 
0097:  BCF    03.5
0098:  BCF    03.6
0099:  BSF    20.4
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  NOP
009E:  BCF    03.5
009F:  BSF    20.3
00A0:  MOVF   20,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  NOP
00A4:  BCF    03.5
00A5:  BCF    07.4
00A6:  BCF    20.4
00A7:  MOVF   20,W
00A8:  BSF    03.5
00A9:  MOVWF  07
00AA:  NOP
00AB:  BCF    03.5
00AC:  BCF    07.3
00AD:  BCF    20.3
00AE:  MOVF   20,W
00AF:  BSF    03.5
00B0:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
00B1:  MOVLW  D0
00B2:  BSF    03.6
00B3:  MOVWF  17
00B4:  BCF    03.5
00B5:  BCF    03.6
00B6:  CALL   048
....................     I2C_write(address); 
00B7:  BSF    03.5
00B8:  BSF    03.6
00B9:  MOVF   15,W
00BA:  MOVWF  17
00BB:  BCF    03.5
00BC:  BCF    03.6
00BD:  CALL   048
....................     I2C_start(); 
00BE:  BSF    20.4
00BF:  MOVF   20,W
00C0:  BSF    03.5
00C1:  MOVWF  07
00C2:  NOP
00C3:  BCF    03.5
00C4:  BSF    20.3
00C5:  MOVF   20,W
00C6:  BSF    03.5
00C7:  MOVWF  07
00C8:  NOP
00C9:  BCF    03.5
00CA:  BTFSS  07.3
00CB:  GOTO   0CA
00CC:  BCF    07.4
00CD:  BCF    20.4
00CE:  MOVF   20,W
00CF:  BSF    03.5
00D0:  MOVWF  07
00D1:  NOP
00D2:  BCF    03.5
00D3:  BCF    07.3
00D4:  BCF    20.3
00D5:  MOVF   20,W
00D6:  BSF    03.5
00D7:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
00D8:  MOVLW  D1
00D9:  BSF    03.6
00DA:  MOVWF  17
00DB:  BCF    03.5
00DC:  BCF    03.6
00DD:  CALL   048
....................     value = I2C_read(0); 
00DE:  CLRF   77
*
0130:  MOVF   78,W
0131:  BSF    03.6
0132:  MOVWF  16
....................     I2C_stop(); 
0133:  BCF    03.5
0134:  BCF    03.6
0135:  BCF    20.4
0136:  MOVF   20,W
0137:  BSF    03.5
0138:  MOVWF  07
0139:  NOP
013A:  BCF    03.5
013B:  BSF    20.3
013C:  MOVF   20,W
013D:  BSF    03.5
013E:  MOVWF  07
013F:  BCF    03.5
0140:  BTFSS  07.3
0141:  GOTO   140
0142:  NOP
0143:  GOTO   144
0144:  NOP
0145:  BSF    20.4
0146:  MOVF   20,W
0147:  BSF    03.5
0148:  MOVWF  07
0149:  NOP
....................     return value; 
014A:  BSF    03.6
014B:  MOVF   16,W
014C:  MOVWF  78
014D:  BCF    03.5
014E:  BCF    03.6
014F:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
04F6:  BSF    20.4
04F7:  MOVF   20,W
04F8:  BSF    03.5
04F9:  MOVWF  07
04FA:  NOP
04FB:  BCF    03.5
04FC:  BSF    20.3
04FD:  MOVF   20,W
04FE:  BSF    03.5
04FF:  MOVWF  07
0500:  NOP
0501:  BCF    03.5
0502:  BCF    07.4
0503:  BCF    20.4
0504:  MOVF   20,W
0505:  BSF    03.5
0506:  MOVWF  07
0507:  NOP
0508:  BCF    03.5
0509:  BCF    07.3
050A:  BCF    20.3
050B:  MOVF   20,W
050C:  BSF    03.5
050D:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
050E:  MOVLW  D0
050F:  BSF    03.6
0510:  MOVWF  17
0511:  BCF    03.5
0512:  BCF    03.6
0513:  CALL   048
....................     I2C_write(address); 
0514:  BSF    03.6
0515:  MOVF   6C,W
0516:  BSF    03.5
0517:  MOVWF  17
0518:  BCF    03.5
0519:  BCF    03.6
051A:  CALL   048
....................     I2C_write(value); 
051B:  BSF    03.6
051C:  MOVF   6D,W
051D:  BSF    03.5
051E:  MOVWF  17
051F:  BCF    03.5
0520:  BCF    03.6
0521:  CALL   048
....................     I2C_stop(); 
0522:  BCF    20.4
0523:  MOVF   20,W
0524:  BSF    03.5
0525:  MOVWF  07
0526:  NOP
0527:  BCF    03.5
0528:  BSF    20.3
0529:  MOVF   20,W
052A:  BSF    03.5
052B:  MOVWF  07
052C:  BCF    03.5
052D:  BTFSS  07.3
052E:  GOTO   52D
052F:  NOP
0530:  GOTO   531
0531:  NOP
0532:  BSF    20.4
0533:  MOVF   20,W
0534:  BSF    03.5
0535:  MOVWF  07
0536:  NOP
0537:  BCF    03.5
0538:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
02F0:  CLRF   15
02F1:  BCF    03.5
02F2:  BCF    03.6
02F3:  CALL   094
02F4:  MOVF   78,W
02F5:  BSF    03.5
02F6:  BSF    03.6
02F7:  MOVWF  11
....................     sec = bcd_to_decimal(sec); 
02F8:  MOVF   11,W
02F9:  MOVWF  15
02FA:  BCF    03.5
02FB:  BCF    03.6
02FC:  CALL   150
02FD:  MOVF   78,W
02FE:  BSF    03.5
02FF:  BSF    03.6
0300:  MOVWF  11
....................     min = DS3231_Read(minuteREG); 
0301:  MOVLW  01
0302:  MOVWF  15
0303:  BCF    03.5
0304:  BCF    03.6
0305:  CALL   094
0306:  MOVF   78,W
0307:  BSF    03.5
0308:  BSF    03.6
0309:  MOVWF  10
....................     min = bcd_to_decimal(min); 
030A:  MOVF   10,W
030B:  MOVWF  15
030C:  BCF    03.5
030D:  BCF    03.6
030E:  CALL   150
030F:  MOVF   78,W
0310:  BSF    03.5
0311:  BSF    03.6
0312:  MOVWF  10
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0313:  MOVLW  02
0314:  MOVWF  15
0315:  BCF    03.5
0316:  BCF    03.6
0317:  CALL   094
0318:  MOVF   78,W
0319:  ANDLW  3F
031A:  BSF    03.6
031B:  MOVWF  6F
....................     hora = bcd_to_decimal(hora); 
031C:  MOVF   6F,W
031D:  BSF    03.5
031E:  MOVWF  15
031F:  BCF    03.5
0320:  BCF    03.6
0321:  CALL   150
0322:  MOVF   78,W
0323:  BSF    03.6
0324:  MOVWF  6F
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
0539:  BSF    03.6
053A:  MOVF   6A,W
053B:  MOVWF  6B
053C:  BCF    03.6
053D:  CALL   4D6
053E:  MOVF   78,W
053F:  BSF    03.6
0540:  MOVWF  6B
0541:  CLRF   6C
0542:  MOVF   6B,W
0543:  MOVWF  6D
0544:  BCF    03.6
0545:  CALL   4F6
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0546:  BSF    03.6
0547:  MOVF   69,W
0548:  MOVWF  6B
0549:  BCF    03.6
054A:  CALL   4D6
054B:  MOVF   78,W
054C:  BSF    03.6
054D:  MOVWF  6B
054E:  MOVLW  01
054F:  MOVWF  6C
0550:  MOVF   6B,W
0551:  MOVWF  6D
0552:  BCF    03.6
0553:  CALL   4F6
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0554:  BSF    03.6
0555:  MOVF   68,W
0556:  MOVWF  6B
0557:  BCF    03.6
0558:  CALL   4D6
0559:  MOVF   78,W
055A:  ANDLW  3F
055B:  BSF    03.6
055C:  MOVWF  6B
055D:  MOVLW  02
055E:  MOVWF  6C
055F:  MOVF   6B,W
0560:  MOVWF  6D
0561:  BCF    03.6
0562:  CALL   4F6
0563:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05CE:  CLRF   52
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05CF:  CLRF   52
05D0:  MOVF   51,W
05D1:  SUBWF  52,W
05D2:  BTFSC  03.0
05D3:  GOTO   5DD
....................         array[i] = 0; 
05D4:  MOVF   52,W
05D5:  ADDWF  4F,W
05D6:  MOVWF  04
05D7:  BCF    03.7
05D8:  BTFSC  50.0
05D9:  BSF    03.7
05DA:  CLRF   00
05DB:  INCF   52,F
05DC:  GOTO   5D0
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05C7:  BSF    03.6
05C8:  MOVF   4B,W
05C9:  MOVWF  50
05CA:  MOVF   4A,W
05CB:  MOVWF  4F
05CC:  MOVF   4C,W
05CD:  MOVWF  51
....................  
....................     int index = 0; 
*
05DD:  CLRF   4D
....................     while (number > 0) { 
05DE:  MOVF   48,F
05DF:  BTFSS  03.2
05E0:  GOTO   5E4
05E1:  MOVF   49,F
05E2:  BTFSC  03.2
05E3:  GOTO   608
....................         int digit = number % 10; 
05E4:  MOVF   49,W
05E5:  MOVWF  50
05E6:  MOVF   48,W
05E7:  MOVWF  4F
05E8:  CLRF   52
05E9:  MOVLW  0A
05EA:  MOVWF  51
05EB:  BCF    03.6
05EC:  CALL   5A0
05ED:  MOVF   77,W
05EE:  BSF    03.6
05EF:  MOVWF  4E
....................         digits[index] = digit; 
05F0:  MOVF   4D,W
05F1:  ADDWF  4A,W
05F2:  MOVWF  04
05F3:  BCF    03.7
05F4:  BTFSC  4B.0
05F5:  BSF    03.7
05F6:  MOVF   4E,W
05F7:  MOVWF  00
....................         index++; 
05F8:  INCF   4D,F
....................         number /= 10; 
05F9:  MOVF   49,W
05FA:  MOVWF  50
05FB:  MOVF   48,W
05FC:  MOVWF  4F
05FD:  CLRF   52
05FE:  MOVLW  0A
05FF:  MOVWF  51
0600:  BCF    03.6
0601:  CALL   5A0
0602:  MOVF   79,W
0603:  BSF    03.6
0604:  MOVWF  49
0605:  MOVF   78,W
0606:  MOVWF  48
0607:  GOTO   5DE
....................     } 
0608:  BCF    03.6
0609:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     Format format; 
....................     __EEADDRESS__ formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
032C:  MOVF   18,W
032D:  MOVWF  1B
....................     time.minute = minute; 
032E:  MOVF   19,W
032F:  MOVWF  1C
....................     time.second = second; 
0330:  MOVF   1A,W
0331:  MOVWF  1D
....................     return time; 
0332:  MOVLW  9B
0333:  MOVWF  78
0334:  MOVLW  01
0335:  MOVWF  79
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
02EC:  CLRF   6F
02ED:  BSF    03.5
02EE:  CLRF   10
02EF:  CLRF   11
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0325:  MOVF   6F,W
0326:  BSF    03.5
0327:  MOVWF  18
0328:  MOVF   10,W
0329:  MOVWF  19
032A:  MOVF   11,W
032B:  MOVWF  1A
*
0336:  MOVF   79,W
0337:  MOVWF  7A
0338:  MOVF   78,W
0339:  MOVWF  12
033A:  MOVF   7A,W
033B:  MOVWF  13
033C:  MOVLW  01
033D:  MOVWF  15
033E:  MOVLW  69
033F:  MOVWF  14
0340:  MOVLW  06
0341:  MOVWF  78
0342:  MOVF   12,W
0343:  MOVWF  04
0344:  BCF    03.7
0345:  BTFSC  13.0
0346:  BSF    03.7
0347:  MOVF   00,W
0348:  MOVWF  77
0349:  MOVF   14,W
034A:  MOVWF  04
034B:  BCF    03.7
034C:  BTFSC  15.0
034D:  BSF    03.7
034E:  MOVF   77,W
034F:  MOVWF  00
0350:  INCF   14,F
0351:  BTFSC  03.2
0352:  INCF   15,F
0353:  INCF   12,F
0354:  BTFSC  03.2
0355:  INCF   13,F
0356:  DECFSZ 78,F
0357:  GOTO   342
....................  
....................     return currentTime; 
0358:  MOVLW  69
0359:  MOVWF  78
035A:  MOVLW  01
035B:  MOVWF  79
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
060A:  BSF    03.6
060B:  MOVF   3D,W
060C:  MOVWF  04
060D:  BCF    03.7
060E:  BTFSC  3E.0
060F:  BSF    03.7
0610:  MOVF   00,W
0611:  MOVWF  46
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
0612:  MOVF   3F,F
0613:  BTFSC  03.2
0614:  GOTO   63C
....................         if (timePtr->format == FORMAT_12) { 
0615:  MOVLW  03
0616:  ADDWF  3D,W
0617:  MOVWF  04
0618:  BCF    03.7
0619:  BTFSC  3E.0
061A:  BSF    03.7
061B:  MOVF   00,W
061C:  ANDLW  01
061D:  SUBLW  01
061E:  BTFSS  03.2
061F:  GOTO   63C
....................             if (timePtr->hour == 0) { 
0620:  MOVF   3D,W
0621:  MOVWF  04
0622:  BCF    03.7
0623:  BTFSC  3E.0
0624:  BSF    03.7
0625:  MOVF   00,F
0626:  BTFSS  03.2
0627:  GOTO   62B
....................                 hour = 12; 
0628:  MOVLW  0C
0629:  MOVWF  46
....................             } else if (timePtr->hour > 12) { 
062A:  GOTO   63C
062B:  MOVF   3D,W
062C:  MOVWF  04
062D:  BCF    03.7
062E:  BTFSC  3E.0
062F:  BSF    03.7
0630:  MOVF   00,W
0631:  SUBLW  0C
0632:  BTFSC  03.0
0633:  GOTO   63C
....................                 hour = timePtr->hour - 12; 
0634:  MOVF   3D,W
0635:  MOVWF  04
0636:  BCF    03.7
0637:  BTFSC  3E.0
0638:  BSF    03.7
0639:  MOVLW  0C
063A:  SUBWF  00,W
063B:  MOVWF  46
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             getArraySize(newTimeInDigits.hour) 
....................             ); 
063C:  CLRF   49
063D:  MOVF   46,W
063E:  MOVWF  48
063F:  MOVLW  01
0640:  MOVWF  4B
0641:  MOVLW  40
0642:  MOVWF  4A
0643:  MOVLW  02
0644:  MOVWF  4C
0645:  BCF    03.6
0646:  CALL   5C7
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             getArraySize(newTimeInDigits.minute) 
....................             ); 
0647:  MOVLW  01
0648:  BSF    03.6
0649:  ADDWF  3D,W
064A:  MOVWF  04
064B:  BCF    03.7
064C:  BTFSC  3E.0
064D:  BSF    03.7
064E:  MOVF   00,W
064F:  MOVWF  47
0650:  CLRF   49
0651:  MOVF   47,W
0652:  MOVWF  48
0653:  MOVLW  01
0654:  MOVWF  4B
0655:  MOVLW  42
0656:  MOVWF  4A
0657:  MOVLW  02
0658:  MOVWF  4C
0659:  BCF    03.6
065A:  CALL   5C7
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             getArraySize(newTimeInDigits.second) 
....................             ); 
065B:  MOVLW  02
065C:  BSF    03.6
065D:  ADDWF  3D,W
065E:  MOVWF  04
065F:  BCF    03.7
0660:  BTFSC  3E.0
0661:  BSF    03.7
0662:  MOVF   00,W
0663:  MOVWF  47
0664:  CLRF   49
0665:  MOVF   47,W
0666:  MOVWF  48
0667:  MOVLW  01
0668:  MOVWF  4B
0669:  MOVLW  44
066A:  MOVWF  4A
066B:  MOVLW  02
066C:  MOVWF  4C
066D:  BCF    03.6
066E:  CALL   5C7
....................  
....................     return newTimeInDigits; 
066F:  MOVLW  40
0670:  MOVWF  78
0671:  MOVLW  01
0672:  MOVWF  79
0673:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
1334:  MOVF   2B,W
1335:  MOVWF  04
1336:  BCF    03.7
1337:  BTFSC  2C.0
1338:  BSF    03.7
1339:  MOVF   00,F
133A:  BTFSS  03.2
133B:  GOTO   34E
133C:  MOVLW  01
133D:  ADDWF  2B,W
133E:  MOVWF  04
133F:  BCF    03.7
1340:  BTFSC  2C.0
1341:  BSF    03.7
1342:  MOVF   00,F
1343:  BTFSS  03.2
1344:  GOTO   34E
1345:  MOVLW  02
1346:  ADDWF  2B,W
1347:  MOVWF  04
1348:  BCF    03.7
1349:  BTFSC  2C.0
134A:  BSF    03.7
134B:  MOVF   00,F
134C:  BTFSC  03.2
134D:  GOTO   350
134E:  MOVLW  00
134F:  GOTO   351
1350:  MOVLW  01
1351:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
.................... //////// 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
0580:  MOVF   63,W
0581:  MOVWF  04
0582:  BCF    03.7
0583:  BTFSC  64.0
0584:  BSF    03.7
0585:  MOVF   00,W
0586:  MOVWF  65
0587:  MOVLW  01
0588:  ADDWF  63,W
0589:  MOVWF  04
058A:  BCF    03.7
058B:  BTFSC  64.0
058C:  BSF    03.7
058D:  MOVF   00,W
058E:  MOVWF  66
058F:  MOVLW  02
0590:  ADDWF  63,W
0591:  MOVWF  04
0592:  BCF    03.7
0593:  BTFSC  64.0
0594:  BSF    03.7
0595:  MOVF   00,W
0596:  MOVWF  67
0597:  MOVF   65,W
0598:  MOVWF  68
0599:  MOVF   66,W
059A:  MOVWF  69
059B:  MOVF   67,W
059C:  MOVWF  6A
059D:  BCF    03.6
059E:  CALL   539
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01B9:  BSF    03.5
01BA:  BSF    03.6
01BB:  MOVF   1A,W
01BC:  MOVWF  04
01BD:  BCF    03.7
01BE:  BTFSC  1B.0
01BF:  BSF    03.7
01C0:  MOVF   00,W
01C1:  CLRF   2B
01C2:  CLRF   2A
01C3:  CLRF   29
01C4:  MOVWF  28
01C5:  CLRF   2D
01C6:  MOVF   04,W
01C7:  MOVWF  2C
01C8:  BCF    2D.0
01C9:  BTFSC  03.7
01CA:  BSF    2D.0
01CB:  MOVF   2B,W
01CC:  MOVWF  31
01CD:  MOVF   2A,W
01CE:  MOVWF  30
01CF:  MOVF   29,W
01D0:  MOVWF  2F
01D1:  MOVF   28,W
01D2:  MOVWF  2E
01D3:  CLRF   35
01D4:  CLRF   34
01D5:  MOVLW  0E
01D6:  MOVWF  33
01D7:  MOVLW  10
01D8:  MOVWF  32
01D9:  BCF    03.5
01DA:  BCF    03.6
01DB:  CALL   18B
01DC:  BSF    03.5
01DD:  BSF    03.6
01DE:  MOVF   2C,W
01DF:  MOVWF  04
01E0:  BCF    03.7
01E1:  BTFSC  2D.0
01E2:  BSF    03.7
01E3:  MOVF   7A,W
01E4:  MOVWF  1F
01E5:  MOVF   79,W
01E6:  MOVWF  1E
01E7:  MOVF   78,W
01E8:  MOVWF  1D
01E9:  MOVF   77,W
01EA:  MOVWF  1C
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01EB:  MOVLW  01
01EC:  ADDWF  1A,W
01ED:  MOVWF  04
01EE:  BCF    03.7
01EF:  BTFSC  1B.0
01F0:  BSF    03.7
01F1:  MOVF   00,W
01F2:  CLRF   2B
01F3:  CLRF   2A
01F4:  CLRF   29
01F5:  MOVWF  28
01F6:  CLRF   2D
01F7:  MOVF   04,W
01F8:  MOVWF  2C
01F9:  BCF    2D.0
01FA:  BTFSC  03.7
01FB:  BSF    2D.0
01FC:  MOVF   2B,W
01FD:  MOVWF  31
01FE:  MOVF   2A,W
01FF:  MOVWF  30
0200:  MOVF   29,W
0201:  MOVWF  2F
0202:  MOVF   28,W
0203:  MOVWF  2E
0204:  CLRF   35
0205:  CLRF   34
0206:  CLRF   33
0207:  MOVLW  3C
0208:  MOVWF  32
0209:  BCF    03.5
020A:  BCF    03.6
020B:  CALL   18B
020C:  BSF    03.5
020D:  BSF    03.6
020E:  MOVF   2C,W
020F:  MOVWF  04
0210:  BCF    03.7
0211:  BTFSC  2D.0
0212:  BSF    03.7
0213:  MOVF   7A,W
0214:  MOVWF  23
0215:  MOVF   79,W
0216:  MOVWF  22
0217:  MOVF   78,W
0218:  MOVWF  21
0219:  MOVF   77,W
021A:  MOVWF  20
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
021B:  MOVF   20,W
021C:  ADDWF  1C,W
021D:  MOVWF  28
021E:  MOVF   1D,W
021F:  MOVWF  29
0220:  MOVF   21,W
0221:  BTFSC  03.0
0222:  INCFSZ 21,W
0223:  ADDWF  29,F
0224:  MOVF   1E,W
0225:  MOVWF  2A
0226:  MOVF   22,W
0227:  BTFSC  03.0
0228:  INCFSZ 22,W
0229:  ADDWF  2A,F
022A:  MOVF   1F,W
022B:  MOVWF  2B
022C:  MOVF   23,W
022D:  BTFSC  03.0
022E:  INCFSZ 23,W
022F:  ADDWF  2B,F
0230:  MOVLW  02
0231:  ADDWF  1A,W
0232:  MOVWF  04
0233:  BCF    03.7
0234:  BTFSC  1B.0
0235:  BSF    03.7
0236:  MOVF   00,W
0237:  ADDWF  28,W
0238:  MOVWF  24
0239:  MOVF   29,W
023A:  MOVWF  25
023B:  MOVLW  00
023C:  BTFSC  03.0
023D:  MOVLW  01
023E:  ADDWF  25,F
023F:  MOVF   2A,W
0240:  MOVWF  26
0241:  MOVLW  00
0242:  BTFSC  03.0
0243:  MOVLW  01
0244:  ADDWF  26,F
0245:  MOVF   2B,W
0246:  MOVWF  27
0247:  MOVLW  00
0248:  BTFSC  03.0
0249:  MOVLW  01
024A:  ADDWF  27,F
....................  
....................     return seconds; 
024B:  MOVF   24,W
024C:  MOVWF  77
024D:  MOVF   25,W
024E:  MOVWF  78
024F:  MOVF   26,W
0250:  MOVWF  79
0251:  MOVF   27,W
0252:  MOVWF  7A
0253:  BCF    03.5
0254:  BCF    03.6
0255:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
0853:  BSF    03.6
0854:  CLRF   68
0855:  CLRF   69
0856:  CLRF   6A
0857:  BCF    0A.3
0858:  BCF    03.6
0859:  CALL   539
085A:  BSF    0A.3
085B:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
06B1:  BSF    03.5
06B2:  BCF    03.6
06B3:  BCF    05.1
06B4:  BCF    03.5
06B5:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
06B6:  BSF    03.5
06B7:  BCF    05.1
06B8:  BCF    03.5
06B9:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0674:  MOVLW  01
0675:  BSF    03.6
0676:  MOVWF  3C
0677:  CLRF   3D
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
0678:  BSF    03.5
0679:  BCF    03.6
067A:  BCF    05.3
067B:  BCF    03.5
067C:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
067D:  BSF    03.5
067E:  BCF    05.1
067F:  BCF    03.5
0680:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
0681:  BSF    03.6
0682:  CLRF   3D
0683:  MOVF   3B,W
0684:  SUBWF  3D,W
0685:  BTFSC  03.0
0686:  GOTO   6B1
....................         int character = charactersArray[j]; 
0687:  MOVF   3D,W
0688:  ADDWF  39,W
0689:  MOVWF  04
068A:  BCF    03.7
068B:  BTFSC  3A.0
068C:  BSF    03.7
068D:  MOVF   00,W
068E:  MOVWF  3E
....................  
....................         for (i = 1; i <= 8; i++) { 
068F:  MOVLW  01
0690:  MOVWF  3C
0691:  MOVF   3C,W
0692:  SUBLW  08
0693:  BTFSS  03.0
0694:  GOTO   6AF
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0695:  BTFSC  3E.0
0696:  GOTO   69B
0697:  BCF    03.6
0698:  BCF    05.0
0699:  GOTO   69D
069A:  BSF    03.6
069B:  BCF    03.6
069C:  BSF    05.0
069D:  BSF    03.5
069E:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
069F:  BCF    03.0
06A0:  BCF    03.5
06A1:  BSF    03.6
06A2:  RRF    3E,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
06A3:  BSF    03.5
06A4:  BCF    03.6
06A5:  BCF    05.3
06A6:  BCF    03.5
06A7:  BSF    05.3
....................             output_low(PIN_CLOCK); 
06A8:  BSF    03.5
06A9:  BCF    05.3
06AA:  BCF    03.5
06AB:  BCF    05.3
06AC:  BSF    03.6
06AD:  INCF   3C,F
06AE:  GOTO   691
....................         } 
06AF:  INCF   3D,F
06B0:  GOTO   683
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
06BA:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06FA:  CLRF   3C
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06FB:  CLRF   3C
06FC:  MOVF   3B,W
06FD:  SUBWF  3C,W
06FE:  BTFSC  03.0
06FF:  GOTO   71F
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
0700:  MOVF   3C,W
0701:  ADDWF  39,W
0702:  MOVWF  78
0703:  MOVF   3A,W
0704:  MOVWF  7A
0705:  BTFSC  03.0
0706:  INCF   7A,F
0707:  MOVF   78,W
0708:  MOVWF  3D
0709:  MOVF   7A,W
070A:  MOVWF  3E
070B:  MOVF   3C,W
070C:  ADDWF  39,W
070D:  MOVWF  04
070E:  BCF    03.7
070F:  BTFSC  3A.0
0710:  BSF    03.7
0711:  MOVF   00,W
0712:  BCF    03.6
0713:  CALL   004
0714:  MOVWF  78
0715:  BSF    03.6
0716:  MOVF   3D,W
0717:  MOVWF  04
0718:  BCF    03.7
0719:  BTFSC  3E.0
071A:  BSF    03.7
071B:  MOVF   78,W
071C:  MOVWF  00
071D:  INCF   3C,F
071E:  GOTO   6FC
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06C5:  CLRF   3C
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06C6:  CLRF   3C
06C7:  MOVF   3B,W
06C8:  SUBWF  3C,W
06C9:  BTFSC  03.0
06CA:  GOTO   6F3
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06CB:  MOVF   3C,W
06CC:  ADDWF  39,W
06CD:  MOVWF  78
06CE:  MOVF   3A,W
06CF:  MOVWF  7A
06D0:  BTFSC  03.0
06D1:  INCF   7A,F
06D2:  MOVF   78,W
06D3:  MOVWF  3D
06D4:  MOVF   7A,W
06D5:  MOVWF  3E
06D6:  MOVF   3C,W
06D7:  ADDWF  39,W
06D8:  MOVWF  04
06D9:  BCF    03.7
06DA:  BTFSC  3A.0
06DB:  BSF    03.7
06DC:  MOVF   00,W
06DD:  BCF    03.6
06DE:  CALL   004
06DF:  MOVWF  78
06E0:  BSF    03.6
06E1:  MOVF   3D,W
06E2:  MOVWF  04
06E3:  BCF    03.7
06E4:  BTFSC  3E.0
06E5:  BSF    03.7
06E6:  MOVF   78,W
06E7:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06E8:  MOVF   3C,W
06E9:  ADDWF  39,W
06EA:  MOVWF  04
06EB:  BCF    03.7
06EC:  BTFSC  3A.0
06ED:  BSF    03.7
06EE:  MOVF   00,W
06EF:  IORLW  08
06F0:  MOVWF  00
06F1:  INCF   3C,F
06F2:  GOTO   6C7
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
06BB:  BSF    03.6
06BC:  MOVF   38,F
06BD:  BTFSC  03.2
06BE:  GOTO   6F4
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
06BF:  MOVF   36,W
06C0:  MOVWF  3A
06C1:  MOVF   35,W
06C2:  MOVWF  39
06C3:  MOVF   37,W
06C4:  MOVWF  3B
....................     } else { 
*
06F3:  GOTO   71F
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06F4:  MOVF   36,W
06F5:  MOVWF  3A
06F6:  MOVF   35,W
06F7:  MOVWF  39
06F8:  MOVF   37,W
06F9:  MOVWF  3B
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
071F:  MOVF   36,W
0720:  MOVWF  3A
0721:  MOVF   35,W
0722:  MOVWF  39
0723:  MOVF   37,W
0724:  MOVWF  3B
0725:  BCF    03.6
0726:  CALL   674
0727:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
1363:  BSF    03.6
1364:  CLRF   23
1365:  CLRF   24
1366:  CLRF   25
1367:  CLRF   26
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
1368:  MOVLW  01
1369:  MOVWF  23
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
136A:  MOVLW  09
136B:  MOVWF  24
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
136C:  MOVLW  01
136D:  MOVWF  25
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
136E:  MOVWF  26
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
136F:  MOVWF  3A
1370:  MOVLW  23
1371:  MOVWF  39
1372:  MOVLW  04
1373:  MOVWF  3B
1374:  BCF    0A.4
1375:  BCF    03.6
1376:  CALL   674
1377:  BSF    0A.4
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time limitTime; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
.................... } Timer; 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.limitTime.hour = read_eeprom(alarmHourAddress) % (maximumHours + 1); 
*
1091:  BCF    03.5
1092:  MOVF   6B,W
1093:  MOVWF  0D
1094:  BSF    03.5
1095:  BCF    0C.7
1096:  BSF    0C.0
1097:  BCF    03.5
1098:  MOVF   0C,W
1099:  BSF    03.5
109A:  MOVWF  32
109B:  MOVLW  01
109C:  BCF    03.5
109D:  ADDWF  69,W
109E:  BSF    03.5
109F:  MOVWF  33
10A0:  MOVF   32,W
10A1:  MOVWF  34
10A2:  MOVF   33,W
10A3:  MOVWF  35
10A4:  BCF    0A.4
10A5:  BCF    03.5
10A6:  BCF    03.6
10A7:  CALL   02F
10A8:  BSF    0A.4
10A9:  MOVF   77,W
10AA:  BSF    03.5
10AB:  BSF    03.6
10AC:  MOVWF  22
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
10AD:  BCF    03.5
10AE:  MOVF   6D,W
10AF:  MOVWF  0D
10B0:  BSF    03.5
10B1:  BCF    0C.7
10B2:  BSF    0C.0
10B3:  BCF    03.5
10B4:  MOVF   0C,W
10B5:  BSF    03.5
10B6:  MOVWF  32
10B7:  MOVLW  01
10B8:  BCF    03.5
10B9:  ADDWF  6A,W
10BA:  BSF    03.5
10BB:  MOVWF  33
10BC:  MOVF   32,W
10BD:  MOVWF  34
10BE:  MOVF   33,W
10BF:  MOVWF  35
10C0:  BCF    0A.4
10C1:  BCF    03.5
10C2:  BCF    03.6
10C3:  CALL   02F
10C4:  BSF    0A.4
10C5:  MOVF   77,W
10C6:  BSF    03.5
10C7:  BSF    03.6
10C8:  MOVWF  23
....................     newTimer.limitTime.second = 0; 
10C9:  CLRF   24
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
10CA:  BCF    03.5
10CB:  MOVF   69,W
10CC:  BSF    03.5
10CD:  MOVWF  28
....................     newTimer.minutesUpperBound = maximumMinutes; 
10CE:  BCF    03.5
10CF:  MOVF   6A,W
10D0:  BSF    03.5
10D1:  MOVWF  29
....................     newTimer.secondsUpperBound = 59; 
10D2:  MOVLW  3B
10D3:  MOVWF  2A
....................  
....................     newTimer.addressAlarmHours = alarmHourAddress; 
10D4:  BCF    03.5
10D5:  MOVF   6B,W
10D6:  BSF    03.5
10D7:  MOVWF  2E
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
10D8:  BCF    03.5
10D9:  MOVF   6D,W
10DA:  BSF    03.5
10DB:  MOVWF  2D
....................     newTimer.addressRtcHours = rtcHour; 
10DC:  MOVF   10,W
10DD:  MOVWF  2F
....................     newTimer.addressRtcMinutes = rtcMinutes; 
10DE:  MOVF   12,W
10DF:  MOVWF  30
....................     newTimer.addressRtcSeconds = rtcSeconds; 
10E0:  MOVF   14,W
10E1:  MOVWF  31
....................  
....................     return newTimer; 
10E2:  MOVLW  96
10E3:  MOVWF  78
10E4:  MOVLW  01
10E5:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.hoursUpperBound = 0; 
*
1129:  CLRF   26
....................     newTimer.minutesUpperBound = maximumMinutes; 
112A:  BCF    03.5
112B:  MOVF   69,W
112C:  BSF    03.5
112D:  MOVWF  27
....................     newTimer.secondsUpperBound = 59; 
112E:  MOVLW  3B
112F:  MOVWF  28
....................  
....................     newTimer.limitTime.hour = 0; 
1130:  CLRF   20
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
1131:  BCF    03.5
1132:  MOVF   6A,W
1133:  MOVWF  0D
1134:  BSF    03.5
1135:  BCF    0C.7
1136:  BSF    0C.0
1137:  BCF    03.5
1138:  MOVF   0C,W
1139:  BSF    03.5
113A:  MOVWF  30
113B:  MOVLW  01
113C:  BCF    03.5
113D:  ADDWF  69,W
113E:  BSF    03.5
113F:  MOVWF  31
1140:  MOVF   30,W
1141:  MOVWF  34
1142:  MOVF   31,W
1143:  MOVWF  35
1144:  BCF    0A.4
1145:  BCF    03.5
1146:  BCF    03.6
1147:  CALL   02F
1148:  BSF    0A.4
1149:  MOVF   77,W
114A:  BSF    03.5
114B:  BSF    03.6
114C:  MOVWF  21
....................     newTimer.limitTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
114D:  BCF    03.5
114E:  MOVF   6C,W
114F:  MOVWF  0D
1150:  BSF    03.5
1151:  BCF    0C.7
1152:  BSF    0C.0
1153:  BCF    03.5
1154:  MOVF   0C,W
1155:  BSF    03.5
1156:  MOVWF  30
1157:  MOVLW  01
1158:  ADDWF  28,W
1159:  MOVWF  31
115A:  MOVF   30,W
115B:  MOVWF  34
115C:  MOVF   31,W
115D:  MOVWF  35
115E:  BCF    0A.4
115F:  BCF    03.5
1160:  BCF    03.6
1161:  CALL   02F
1162:  BSF    0A.4
1163:  MOVF   77,W
1164:  BSF    03.5
1165:  BSF    03.6
1166:  MOVWF  22
....................  
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
1167:  BCF    03.5
1168:  MOVF   6A,W
1169:  BSF    03.5
116A:  MOVWF  2B
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
116B:  BCF    03.5
116C:  MOVF   6C,W
116D:  BSF    03.5
116E:  MOVWF  2A
....................     newTimer.addressRtcHours = rtcHour; 
116F:  BCF    03.5
1170:  MOVF   6E,W
1171:  BSF    03.5
1172:  MOVWF  2D
....................     newTimer.addressRtcMinutes = rtcMinutes; 
1173:  MOVF   10,W
1174:  MOVWF  2E
....................     newTimer.addressRtcSeconds = rtcSeconds; 
1175:  MOVF   12,W
1176:  MOVWF  2F
....................  
....................     return newTimer; 
1177:  MOVLW  94
1178:  MOVWF  78
1179:  MOVLW  01
117A:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_updateRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
0571:  MOVLW  06
0572:  ADDWF  5F,W
0573:  MOVWF  78
0574:  MOVF   60,W
0575:  MOVWF  7A
0576:  BTFSC  03.0
0577:  INCF   7A,F
0578:  MOVF   78,W
0579:  MOVWF  61
057A:  MOVF   7A,W
057B:  MOVWF  62
057C:  MOVF   62,W
057D:  MOVWF  64
057E:  MOVF   61,W
057F:  MOVWF  63
.................... } 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
037F:  MOVLW  06
0380:  ADDWF  61,W
0381:  MOVWF  78
0382:  MOVF   62,W
0383:  MOVWF  7A
0384:  BTFSC  03.0
0385:  INCF   7A,F
0386:  MOVF   78,W
0387:  BSF    03.5
0388:  MOVWF  18
0389:  MOVF   7A,W
038A:  MOVWF  19
038B:  MOVWF  1B
038C:  MOVF   18,W
038D:  MOVWF  1A
038E:  BCF    03.5
038F:  BCF    03.6
0390:  CALL   1B9
0391:  MOVF   7A,W
0392:  BSF    03.6
0393:  MOVWF  66
0394:  MOVF   79,W
0395:  MOVWF  65
0396:  MOVF   78,W
0397:  MOVWF  64
0398:  MOVF   77,W
0399:  MOVWF  63
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->limitTime); 
039A:  MOVLW  0C
039B:  ADDWF  61,W
039C:  MOVWF  78
039D:  MOVF   62,W
039E:  MOVWF  7A
039F:  BTFSC  03.0
03A0:  INCF   7A,F
03A1:  MOVF   78,W
03A2:  BSF    03.5
03A3:  MOVWF  18
03A4:  MOVF   7A,W
03A5:  MOVWF  19
03A6:  MOVWF  1B
03A7:  MOVF   18,W
03A8:  MOVWF  1A
03A9:  BCF    03.5
03AA:  BCF    03.6
03AB:  CALL   1B9
03AC:  MOVF   7A,W
03AD:  BSF    03.6
03AE:  MOVWF  6A
03AF:  MOVF   79,W
03B0:  MOVWF  69
03B1:  MOVF   78,W
03B2:  MOVWF  68
03B3:  MOVF   77,W
03B4:  MOVWF  67
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
03B5:  MOVF   63,W
03B6:  SUBWF  67,W
03B7:  MOVWF  6B
03B8:  MOVF   68,W
03B9:  MOVWF  6C
03BA:  MOVF   64,W
03BB:  BTFSS  03.0
03BC:  INCFSZ 64,W
03BD:  SUBWF  6C,F
03BE:  MOVF   69,W
03BF:  MOVWF  6D
03C0:  MOVF   65,W
03C1:  BTFSS  03.0
03C2:  INCFSZ 65,W
03C3:  SUBWF  6D,F
03C4:  MOVF   6A,W
03C5:  MOVWF  6E
03C6:  MOVF   66,W
03C7:  BTFSS  03.0
03C8:  INCFSZ 66,W
03C9:  SUBWF  6E,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
03CA:  BTFSS  6E.7
03CB:  GOTO   3D1
03CC:  CLRF   77
03CD:  CLRF   78
03CE:  CLRF   79
03CF:  CLRF   7A
03D0:  GOTO   3D9
03D1:  MOVF   6B,W
03D2:  MOVWF  77
03D3:  MOVF   6C,W
03D4:  MOVWF  78
03D5:  MOVF   6D,W
03D6:  MOVWF  79
03D7:  MOVF   6E,W
03D8:  MOVWF  7A
03D9:  MOVF   7A,W
03DA:  MOVWF  6E
03DB:  MOVF   79,W
03DC:  MOVWF  6D
03DD:  MOVF   78,W
03DE:  MOVWF  6C
03DF:  MOVF   77,W
03E0:  MOVWF  6B
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
03E1:  BCF    03.1
03E2:  MOVF   6E,W
03E3:  BSF    03.5
03E4:  MOVWF  2D
03E5:  BCF    03.5
03E6:  MOVF   6D,W
03E7:  BSF    03.5
03E8:  MOVWF  2C
03E9:  BCF    03.5
03EA:  MOVF   6C,W
03EB:  BSF    03.5
03EC:  MOVWF  2B
03ED:  BCF    03.5
03EE:  MOVF   6B,W
03EF:  BSF    03.5
03F0:  MOVWF  2A
03F1:  CLRF   31
03F2:  CLRF   30
03F3:  MOVLW  0E
03F4:  MOVWF  2F
03F5:  MOVLW  10
03F6:  MOVWF  2E
03F7:  BCF    03.5
03F8:  BCF    03.6
03F9:  CALL   256
03FA:  MOVF   7A,W
03FB:  BSF    03.5
03FC:  BSF    03.6
03FD:  MOVWF  13
03FE:  MOVF   79,W
03FF:  MOVWF  12
0400:  MOVF   78,W
0401:  MOVWF  11
0402:  MOVF   77,W
0403:  MOVWF  10
0404:  BSF    03.1
0405:  MOVLW  98
0406:  MOVWF  04
0407:  BSF    03.7
0408:  BCF    03.5
0409:  MOVF   6E,W
040A:  BSF    03.5
040B:  MOVWF  2D
040C:  BCF    03.5
040D:  MOVF   6D,W
040E:  BSF    03.5
040F:  MOVWF  2C
0410:  BCF    03.5
0411:  MOVF   6C,W
0412:  BSF    03.5
0413:  MOVWF  2B
0414:  BCF    03.5
0415:  MOVF   6B,W
0416:  BSF    03.5
0417:  MOVWF  2A
0418:  CLRF   31
0419:  CLRF   30
041A:  MOVLW  0E
041B:  MOVWF  2F
041C:  MOVLW  10
041D:  MOVWF  2E
041E:  BCF    03.5
041F:  BCF    03.6
0420:  CALL   256
0421:  BSF    03.5
0422:  BSF    03.6
0423:  MOVF   1B,W
0424:  MOVWF  1F
0425:  MOVF   1A,W
0426:  MOVWF  1E
0427:  MOVF   19,W
0428:  MOVWF  1D
0429:  MOVF   18,W
042A:  MOVWF  1C
042B:  CLRF   21
042C:  MOVF   04,W
042D:  MOVWF  20
042E:  BCF    21.0
042F:  BTFSC  03.7
0430:  BSF    21.0
0431:  BCF    03.1
0432:  MOVF   1B,W
0433:  MOVWF  2D
0434:  MOVF   1A,W
0435:  MOVWF  2C
0436:  MOVF   19,W
0437:  MOVWF  2B
0438:  MOVF   18,W
0439:  MOVWF  2A
043A:  CLRF   31
043B:  CLRF   30
043C:  CLRF   2F
043D:  MOVLW  3C
043E:  MOVWF  2E
043F:  BCF    03.5
0440:  BCF    03.6
0441:  CALL   256
0442:  BSF    03.5
0443:  BSF    03.6
0444:  MOVF   20,W
0445:  MOVWF  04
0446:  BCF    03.7
0447:  BTFSC  21.0
0448:  BSF    03.7
0449:  MOVF   7A,W
044A:  MOVWF  17
044B:  MOVF   79,W
044C:  MOVWF  16
044D:  MOVF   78,W
044E:  MOVWF  15
044F:  MOVF   77,W
0450:  MOVWF  14
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
0451:  MOVLW  02
0452:  BCF    03.5
0453:  ADDWF  61,W
0454:  MOVWF  78
0455:  MOVF   62,W
0456:  MOVWF  7A
0457:  BTFSC  03.0
0458:  INCF   7A,F
0459:  MOVF   78,W
045A:  BSF    03.5
045B:  MOVWF  18
045C:  MOVF   7A,W
045D:  MOVWF  19
045E:  CLRF   1B
045F:  MOVF   04,W
0460:  MOVWF  1A
0461:  BCF    1B.0
0462:  BTFSC  03.7
0463:  BSF    1B.0
0464:  BSF    03.1
0465:  MOVLW  9C
0466:  MOVWF  04
0467:  BSF    03.7
0468:  BCF    03.5
0469:  MOVF   6E,W
046A:  BSF    03.5
046B:  MOVWF  2D
046C:  BCF    03.5
046D:  MOVF   6D,W
046E:  BSF    03.5
046F:  MOVWF  2C
0470:  BCF    03.5
0471:  MOVF   6C,W
0472:  BSF    03.5
0473:  MOVWF  2B
0474:  BCF    03.5
0475:  MOVF   6B,W
0476:  BSF    03.5
0477:  MOVWF  2A
0478:  CLRF   31
0479:  CLRF   30
047A:  MOVLW  0E
047B:  MOVWF  2F
047C:  MOVLW  10
047D:  MOVWF  2E
047E:  BCF    03.5
047F:  BCF    03.6
0480:  CALL   256
0481:  BSF    03.5
0482:  BSF    03.6
0483:  MOVF   1C,W
0484:  MOVWF  77
0485:  MOVF   1D,W
0486:  MOVWF  78
0487:  MOVF   1E,W
0488:  MOVWF  79
0489:  MOVF   1F,W
048A:  MOVWF  7A
048B:  MOVF   1A,W
048C:  MOVWF  04
048D:  BCF    03.7
048E:  BTFSC  1B.0
048F:  BSF    03.7
0490:  MOVF   1F,W
0491:  MOVWF  23
0492:  MOVF   1E,W
0493:  MOVWF  22
0494:  MOVF   1D,W
0495:  MOVWF  21
0496:  MOVF   1C,W
0497:  MOVWF  20
0498:  CLRF   25
0499:  MOVF   04,W
049A:  MOVWF  24
049B:  BCF    25.0
049C:  BTFSC  03.7
049D:  BSF    25.0
049E:  BSF    03.1
049F:  MOVLW  A6
04A0:  MOVWF  04
04A1:  BSF    03.7
04A2:  MOVF   1F,W
04A3:  MOVWF  2D
04A4:  MOVF   1E,W
04A5:  MOVWF  2C
04A6:  MOVF   1D,W
04A7:  MOVWF  2B
04A8:  MOVF   1C,W
04A9:  MOVWF  2A
04AA:  CLRF   31
04AB:  CLRF   30
04AC:  CLRF   2F
04AD:  MOVLW  3C
04AE:  MOVWF  2E
04AF:  BCF    03.5
04B0:  BCF    03.6
04B1:  CALL   256
04B2:  BSF    03.5
04B3:  BSF    03.6
04B4:  MOVF   24,W
04B5:  MOVWF  04
04B6:  BCF    03.7
04B7:  BTFSC  25.0
04B8:  BSF    03.7
04B9:  MOVF   18,W
04BA:  MOVWF  04
04BB:  BCF    03.7
04BC:  BTFSC  19.0
04BD:  BSF    03.7
04BE:  MOVF   26,W
04BF:  MOVWF  00
....................  
....................     //    if ((minute + 60) <= 99 && (hour > 0)) { 
....................     //        hour -= 1; 
....................     //        minute += 60; 
....................     //    } 
....................     timerPtr->countdownTime.hour = hour; 
04C0:  BCF    03.5
04C1:  MOVF   61,W
04C2:  MOVWF  04
04C3:  BCF    03.7
04C4:  BTFSC  62.0
04C5:  BSF    03.7
04C6:  BSF    03.5
04C7:  MOVF   10,W
04C8:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
04C9:  MOVLW  01
04CA:  BCF    03.5
04CB:  ADDWF  61,W
04CC:  MOVWF  04
04CD:  BCF    03.7
04CE:  BTFSC  62.0
04CF:  BSF    03.7
04D0:  BSF    03.5
04D1:  MOVF   14,W
04D2:  MOVWF  00
....................  
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
02E1:  MOVLW  06
02E2:  ADDWF  5F,W
02E3:  MOVWF  78
02E4:  MOVF   60,W
02E5:  MOVWF  7A
02E6:  BTFSC  03.0
02E7:  INCF   7A,F
02E8:  MOVF   78,W
02E9:  MOVWF  61
02EA:  MOVF   7A,W
02EB:  MOVWF  62
*
035C:  MOVF   79,W
035D:  MOVWF  7A
035E:  MOVF   78,W
035F:  BCF    03.5
0360:  MOVWF  63
0361:  MOVF   7A,W
0362:  MOVWF  64
0363:  MOVLW  06
0364:  MOVWF  78
0365:  MOVF   63,W
0366:  MOVWF  04
0367:  BCF    03.7
0368:  BTFSC  64.0
0369:  BSF    03.7
036A:  MOVF   00,W
036B:  MOVWF  77
036C:  MOVF   61,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  BTFSC  62.0
0370:  BSF    03.7
0371:  MOVF   77,W
0372:  MOVWF  00
0373:  INCF   61,F
0374:  BTFSC  03.2
0375:  INCF   62,F
0376:  INCF   63,F
0377:  BTFSC  03.2
0378:  INCF   64,F
0379:  DECFSZ 78,F
037A:  GOTO   365
....................     Timer_updateCountdownTime(timerPtr); 
037B:  MOVF   60,W
037C:  MOVWF  62
037D:  MOVF   5F,W
037E:  MOVWF  61
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->limitTime.hour + 1; 
*
150D:  MOVLW  0C
150E:  ADDWF  27,W
150F:  MOVWF  78
1510:  MOVF   28,W
1511:  MOVWF  7A
1512:  BTFSC  03.0
1513:  INCF   7A,F
1514:  MOVF   78,W
1515:  MOVWF  29
1516:  MOVF   7A,W
1517:  MOVWF  2A
1518:  MOVLW  0C
1519:  ADDWF  27,W
151A:  MOVWF  04
151B:  BCF    03.7
151C:  BTFSC  28.0
151D:  BSF    03.7
151E:  MOVF   00,W
151F:  MOVWF  2B
1520:  MOVLW  12
1521:  ADDWF  27,W
1522:  MOVWF  04
1523:  BCF    03.7
1524:  BTFSC  28.0
1525:  BSF    03.7
1526:  MOVF   00,W
1527:  SUBWF  2B,W
1528:  BTFSS  03.2
1529:  GOTO   52C
152A:  MOVLW  00
152B:  GOTO   534
152C:  MOVLW  0C
152D:  ADDWF  27,W
152E:  MOVWF  04
152F:  BCF    03.7
1530:  BTFSC  28.0
1531:  BSF    03.7
1532:  MOVLW  01
1533:  ADDWF  00,W
1534:  MOVWF  2B
1535:  MOVF   29,W
1536:  MOVWF  04
1537:  BCF    03.7
1538:  BTFSC  2A.0
1539:  BSF    03.7
153A:  MOVF   2B,W
153B:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->limitTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->limitTime.minute + 1; 
*
093F:  MOVLW  0D
0940:  BSF    03.6
0941:  ADDWF  27,W
0942:  MOVWF  78
0943:  MOVF   28,W
0944:  MOVWF  7A
0945:  BTFSC  03.0
0946:  INCF   7A,F
0947:  MOVF   78,W
0948:  MOVWF  29
0949:  MOVF   7A,W
094A:  MOVWF  2A
094B:  MOVLW  0D
094C:  ADDWF  27,W
094D:  MOVWF  04
094E:  BCF    03.7
094F:  BTFSC  28.0
0950:  BSF    03.7
0951:  MOVF   00,W
0952:  MOVWF  2B
0953:  MOVLW  13
0954:  ADDWF  27,W
0955:  MOVWF  04
0956:  BCF    03.7
0957:  BTFSC  28.0
0958:  BSF    03.7
0959:  MOVF   00,W
095A:  SUBWF  2B,W
095B:  BTFSS  03.2
095C:  GOTO   15F
095D:  MOVLW  00
095E:  GOTO   167
095F:  MOVLW  0D
0960:  ADDWF  27,W
0961:  MOVWF  04
0962:  BCF    03.7
0963:  BTFSC  28.0
0964:  BSF    03.7
0965:  MOVLW  01
0966:  ADDWF  00,W
0967:  MOVWF  2B
0968:  MOVF   29,W
0969:  MOVWF  04
096A:  BCF    03.7
096B:  BTFSC  2A.0
096C:  BSF    03.7
096D:  MOVF   2B,W
096E:  MOVWF  00
096F:  BCF    03.6
0970:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->limitTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->limitTime.second + 1; 
*
16B1:  MOVLW  0E
16B2:  ADDWF  27,W
16B3:  MOVWF  78
16B4:  MOVF   28,W
16B5:  MOVWF  7A
16B6:  BTFSC  03.0
16B7:  INCF   7A,F
16B8:  MOVF   78,W
16B9:  MOVWF  29
16BA:  MOVF   7A,W
16BB:  MOVWF  2A
16BC:  MOVLW  0E
16BD:  ADDWF  27,W
16BE:  MOVWF  04
16BF:  BCF    03.7
16C0:  BTFSC  28.0
16C1:  BSF    03.7
16C2:  MOVF   00,W
16C3:  MOVWF  2B
16C4:  MOVLW  14
16C5:  ADDWF  27,W
16C6:  MOVWF  04
16C7:  BCF    03.7
16C8:  BTFSC  28.0
16C9:  BSF    03.7
16CA:  MOVF   00,W
16CB:  SUBWF  2B,W
16CC:  BTFSS  03.2
16CD:  GOTO   6D0
16CE:  MOVLW  00
16CF:  GOTO   6D8
16D0:  MOVLW  0E
16D1:  ADDWF  27,W
16D2:  MOVWF  04
16D3:  BCF    03.7
16D4:  BTFSC  28.0
16D5:  BSF    03.7
16D6:  MOVLW  01
16D7:  ADDWF  00,W
16D8:  MOVWF  2B
16D9:  MOVF   29,W
16DA:  MOVWF  04
16DB:  BCF    03.7
16DC:  BTFSC  2A.0
16DD:  BSF    03.7
16DE:  MOVF   2B,W
16DF:  MOVWF  00
16E0:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->limitTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
128B:  MOVLW  19
128C:  ADDWF  27,W
128D:  MOVWF  04
128E:  BCF    03.7
128F:  BTFSC  28.0
1290:  BSF    03.7
1291:  MOVF   00,W
1292:  MOVWF  29
1293:  MOVLW  06
1294:  ADDWF  27,W
1295:  MOVWF  04
1296:  BCF    03.7
1297:  BTFSC  28.0
1298:  BSF    03.7
1299:  MOVF   00,W
129A:  MOVWF  2A
129B:  BCF    03.6
129C:  MOVF   0B,W
129D:  MOVWF  77
129E:  BCF    0B.7
129F:  BSF    03.6
12A0:  MOVF   29,W
12A1:  MOVWF  0D
12A2:  MOVF   2A,W
12A3:  MOVWF  0C
12A4:  BSF    03.5
12A5:  BCF    0C.7
12A6:  BSF    0C.2
12A7:  MOVLW  55
12A8:  MOVWF  0D
12A9:  MOVLW  AA
12AA:  MOVWF  0D
12AB:  BSF    0C.1
12AC:  BTFSC  0C.1
12AD:  GOTO   2AC
12AE:  BCF    0C.2
12AF:  MOVF   77,W
12B0:  BCF    03.5
12B1:  BCF    03.6
12B2:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
12B3:  MOVLW  1A
12B4:  BSF    03.6
12B5:  ADDWF  27,W
12B6:  MOVWF  04
12B7:  BCF    03.7
12B8:  BTFSC  28.0
12B9:  BSF    03.7
12BA:  MOVF   00,W
12BB:  MOVWF  29
12BC:  MOVLW  07
12BD:  ADDWF  27,W
12BE:  MOVWF  04
12BF:  BCF    03.7
12C0:  BTFSC  28.0
12C1:  BSF    03.7
12C2:  MOVF   00,W
12C3:  MOVWF  2A
12C4:  BCF    03.6
12C5:  MOVF   0B,W
12C6:  MOVWF  77
12C7:  BCF    0B.7
12C8:  BSF    03.6
12C9:  MOVF   29,W
12CA:  MOVWF  0D
12CB:  MOVF   2A,W
12CC:  MOVWF  0C
12CD:  BSF    03.5
12CE:  BCF    0C.7
12CF:  BSF    0C.2
12D0:  MOVLW  55
12D1:  MOVWF  0D
12D2:  MOVLW  AA
12D3:  MOVWF  0D
12D4:  BSF    0C.1
12D5:  BTFSC  0C.1
12D6:  GOTO   2D5
12D7:  BCF    0C.2
12D8:  MOVF   77,W
12D9:  BCF    03.5
12DA:  BCF    03.6
12DB:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
12DC:  MOVLW  1B
12DD:  BSF    03.6
12DE:  ADDWF  27,W
12DF:  MOVWF  04
12E0:  BCF    03.7
12E1:  BTFSC  28.0
12E2:  BSF    03.7
12E3:  MOVF   00,W
12E4:  MOVWF  29
12E5:  MOVLW  08
12E6:  ADDWF  27,W
12E7:  MOVWF  04
12E8:  BCF    03.7
12E9:  BTFSC  28.0
12EA:  BSF    03.7
12EB:  MOVF   00,W
12EC:  MOVWF  2A
12ED:  BCF    03.6
12EE:  MOVF   0B,W
12EF:  MOVWF  77
12F0:  BCF    0B.7
12F1:  BSF    03.6
12F2:  MOVF   29,W
12F3:  MOVWF  0D
12F4:  MOVF   2A,W
12F5:  MOVWF  0C
12F6:  BSF    03.5
12F7:  BCF    0C.7
12F8:  BSF    0C.2
12F9:  MOVLW  55
12FA:  MOVWF  0D
12FB:  MOVLW  AA
12FC:  MOVWF  0D
12FD:  BSF    0C.1
12FE:  BTFSC  0C.1
12FF:  GOTO   2FE
1300:  BCF    0C.2
1301:  MOVF   77,W
1302:  BCF    03.5
1303:  BCF    03.6
1304:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveLimitTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->limitTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->limitTime.minute); 
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
1328:  MOVF   27,W
1329:  MOVWF  78
132A:  MOVF   28,W
132B:  MOVWF  7A
132C:  MOVF   78,W
132D:  MOVWF  29
132E:  MOVF   7A,W
132F:  MOVWF  2A
1330:  MOVF   2A,W
1331:  MOVWF  2C
1332:  MOVF   29,W
1333:  MOVWF  2B
*
1352:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->limitTime.hour == 0)&& (timerPtr->limitTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
0742:  CLRF   2B
0743:  CLRF   2C
0744:  CLRF   2D
0745:  CLRF   2E
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0746:  MOVF   28,W
0747:  MOVWF  78
0748:  MOVF   29,W
0749:  MOVWF  7A
074A:  MOVF   78,W
074B:  MOVWF  35
074C:  MOVF   7A,W
074D:  MOVWF  36
074E:  MOVWF  3E
074F:  MOVF   35,W
0750:  MOVWF  3D
0751:  CLRF   3F
0752:  BCF    03.6
0753:  CALL   60A
0754:  MOVF   79,W
0755:  MOVWF  7A
0756:  MOVF   78,W
0757:  BSF    03.6
0758:  MOVWF  35
0759:  MOVF   7A,W
075A:  MOVWF  36
075B:  MOVLW  01
075C:  MOVWF  38
075D:  MOVLW  2F
075E:  MOVWF  37
075F:  MOVLW  06
0760:  MOVWF  78
0761:  MOVF   35,W
0762:  MOVWF  04
0763:  BCF    03.7
0764:  BTFSC  36.0
0765:  BSF    03.7
0766:  MOVF   00,W
0767:  MOVWF  77
0768:  MOVF   37,W
0769:  MOVWF  04
076A:  BCF    03.7
076B:  BTFSC  38.0
076C:  BSF    03.7
076D:  MOVF   77,W
076E:  MOVWF  00
076F:  INCF   37,F
0770:  BTFSC  03.2
0771:  INCF   38,F
0772:  INCF   35,F
0773:  BTFSC  03.2
0774:  INCF   36,F
0775:  DECFSZ 78,F
0776:  GOTO   761
....................     timeToSend[0] = timeInDigits.minute[0]; 
0777:  MOVF   31,W
0778:  MOVWF  2B
....................     timeToSend[1] = timeInDigits.minute[1]; 
0779:  MOVF   32,W
077A:  MOVWF  2C
....................     timeToSend[2] = timeInDigits.hour[0]; 
077B:  MOVF   2F,W
077C:  MOVWF  2D
....................     timeToSend[3] = timeInDigits.hour[1]; 
077D:  MOVF   30,W
077E:  MOVWF  2E
....................  
....................     if (blink) { 
077F:  MOVF   2A,F
0780:  BTFSC  03.2
0781:  GOTO   78C
....................         blink = timerPtr->currentTime.second % 2; 
0782:  MOVLW  08
0783:  ADDWF  28,W
0784:  MOVWF  04
0785:  BCF    03.7
0786:  BTFSC  29.0
0787:  BSF    03.7
0788:  MOVF   00,W
0789:  ANDLW  01
078A:  MOVWF  2A
....................     } else { 
078B:  GOTO   78E
....................         blink = TRUE; 
078C:  MOVLW  01
078D:  MOVWF  2A
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             blink 
....................             ); 
078E:  MOVLW  01
078F:  MOVWF  36
0790:  MOVLW  2B
0791:  MOVWF  35
0792:  MOVLW  04
0793:  MOVWF  37
0794:  MOVF   2A,W
0795:  MOVWF  38
0796:  BCF    03.6
0797:  CALL   6BB
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
07B0:  CLRF   2A
07B1:  CLRF   2B
07B2:  CLRF   2C
07B3:  CLRF   2D
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
07B4:  MOVF   28,W
07B5:  MOVWF  78
07B6:  MOVF   29,W
07B7:  MOVWF  7A
07B8:  MOVF   78,W
07B9:  MOVWF  34
07BA:  MOVF   7A,W
07BB:  MOVWF  35
07BC:  MOVWF  3E
07BD:  MOVF   34,W
07BE:  MOVWF  3D
07BF:  CLRF   3F
07C0:  BCF    03.6
07C1:  CALL   60A
07C2:  MOVF   79,W
07C3:  MOVWF  7A
07C4:  MOVF   78,W
07C5:  BSF    03.6
07C6:  MOVWF  34
07C7:  MOVF   7A,W
07C8:  MOVWF  35
07C9:  MOVLW  01
07CA:  MOVWF  37
07CB:  MOVLW  2E
07CC:  MOVWF  36
07CD:  MOVLW  06
07CE:  MOVWF  78
07CF:  MOVF   34,W
07D0:  MOVWF  04
07D1:  BCF    03.7
07D2:  BTFSC  35.0
07D3:  BSF    03.7
07D4:  MOVF   00,W
07D5:  MOVWF  77
07D6:  MOVF   36,W
07D7:  MOVWF  04
07D8:  BCF    03.7
07D9:  BTFSC  37.0
07DA:  BSF    03.7
07DB:  MOVF   77,W
07DC:  MOVWF  00
07DD:  INCF   36,F
07DE:  BTFSC  03.2
07DF:  INCF   37,F
07E0:  INCF   34,F
07E1:  BTFSC  03.2
07E2:  INCF   35,F
07E3:  DECFSZ 78,F
07E4:  GOTO   7CF
....................     timeToSend[0] = timeInDigits.second[0]; 
07E5:  MOVF   32,W
07E6:  MOVWF  2A
....................     timeToSend[1] = timeInDigits.second[1]; 
07E7:  MOVF   33,W
07E8:  MOVWF  2B
....................     timeToSend[2] = timeInDigits.minute[0]; 
07E9:  MOVF   30,W
07EA:  MOVWF  2C
....................     timeToSend[3] = timeInDigits.minute[1]; 
07EB:  MOVF   31,W
07EC:  MOVWF  2D
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
07ED:  MOVLW  01
07EE:  MOVWF  36
07EF:  MOVLW  2A
07F0:  MOVWF  35
07F1:  MOVLW  04
07F2:  MOVWF  37
07F3:  MOVLW  01
07F4:  MOVWF  38
07F5:  BCF    03.6
07F6:  CALL   6BB
07F7:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1426:  CLRF   29
1427:  CLRF   2A
1428:  CLRF   2B
1429:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
142A:  MOVLW  0C
142B:  ADDWF  27,W
142C:  MOVWF  78
142D:  MOVF   28,W
142E:  MOVWF  7A
142F:  BTFSC  03.0
1430:  INCF   7A,F
1431:  MOVF   78,W
1432:  MOVWF  33
1433:  MOVF   7A,W
1434:  MOVWF  34
1435:  MOVWF  3E
1436:  MOVF   33,W
1437:  MOVWF  3D
1438:  CLRF   3F
1439:  BCF    0A.4
143A:  BCF    03.6
143B:  CALL   60A
143C:  BSF    0A.4
143D:  MOVF   79,W
143E:  MOVWF  7A
143F:  MOVF   78,W
1440:  BSF    03.6
1441:  MOVWF  33
1442:  MOVF   7A,W
1443:  MOVWF  34
1444:  MOVLW  01
1445:  MOVWF  36
1446:  MOVLW  2D
1447:  MOVWF  35
1448:  MOVLW  06
1449:  MOVWF  78
144A:  MOVF   33,W
144B:  MOVWF  04
144C:  BCF    03.7
144D:  BTFSC  34.0
144E:  BSF    03.7
144F:  MOVF   00,W
1450:  MOVWF  77
1451:  MOVF   35,W
1452:  MOVWF  04
1453:  BCF    03.7
1454:  BTFSC  36.0
1455:  BSF    03.7
1456:  MOVF   77,W
1457:  MOVWF  00
1458:  INCF   35,F
1459:  BTFSC  03.2
145A:  INCF   36,F
145B:  INCF   33,F
145C:  BTFSC  03.2
145D:  INCF   34,F
145E:  DECFSZ 78,F
145F:  GOTO   44A
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
1460:  MOVF   2F,W
1461:  BCF    0A.4
1462:  BCF    03.6
1463:  CALL   004
1464:  BSF    0A.4
1465:  MOVWF  78
1466:  BSF    03.6
1467:  MOVWF  29
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1468:  MOVF   30,W
1469:  BCF    0A.4
146A:  BCF    03.6
146B:  CALL   004
146C:  BSF    0A.4
146D:  IORLW  08
146E:  BSF    03.6
146F:  MOVWF  2A
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
1470:  MOVLW  01
1471:  MOVWF  3A
1472:  MOVLW  29
1473:  MOVWF  39
1474:  MOVLW  04
1475:  MOVWF  3B
1476:  BCF    0A.4
1477:  BCF    03.6
1478:  CALL   674
1479:  BSF    0A.4
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1492:  CLRF   29
1493:  CLRF   2A
1494:  CLRF   2B
1495:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1496:  MOVLW  0C
1497:  ADDWF  27,W
1498:  MOVWF  78
1499:  MOVF   28,W
149A:  MOVWF  7A
149B:  BTFSC  03.0
149C:  INCF   7A,F
149D:  MOVF   78,W
149E:  MOVWF  33
149F:  MOVF   7A,W
14A0:  MOVWF  34
14A1:  MOVWF  3E
14A2:  MOVF   33,W
14A3:  MOVWF  3D
14A4:  CLRF   3F
14A5:  BCF    0A.4
14A6:  BCF    03.6
14A7:  CALL   60A
14A8:  BSF    0A.4
14A9:  MOVF   79,W
14AA:  MOVWF  7A
14AB:  MOVF   78,W
14AC:  BSF    03.6
14AD:  MOVWF  33
14AE:  MOVF   7A,W
14AF:  MOVWF  34
14B0:  MOVLW  01
14B1:  MOVWF  36
14B2:  MOVLW  2D
14B3:  MOVWF  35
14B4:  MOVLW  06
14B5:  MOVWF  78
14B6:  MOVF   33,W
14B7:  MOVWF  04
14B8:  BCF    03.7
14B9:  BTFSC  34.0
14BA:  BSF    03.7
14BB:  MOVF   00,W
14BC:  MOVWF  77
14BD:  MOVF   35,W
14BE:  MOVWF  04
14BF:  BCF    03.7
14C0:  BTFSC  36.0
14C1:  BSF    03.7
14C2:  MOVF   77,W
14C3:  MOVWF  00
14C4:  INCF   35,F
14C5:  BTFSC  03.2
14C6:  INCF   36,F
14C7:  INCF   33,F
14C8:  BTFSC  03.2
14C9:  INCF   34,F
14CA:  DECFSZ 78,F
14CB:  GOTO   4B6
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
14CC:  MOVF   31,W
14CD:  BCF    0A.4
14CE:  BCF    03.6
14CF:  CALL   004
14D0:  BSF    0A.4
14D1:  MOVWF  78
14D2:  BSF    03.6
14D3:  MOVWF  29
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
14D4:  MOVF   32,W
14D5:  BCF    0A.4
14D6:  BCF    03.6
14D7:  CALL   004
14D8:  BSF    0A.4
14D9:  IORLW  08
14DA:  BSF    03.6
14DB:  MOVWF  2A
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
14DC:  MOVLW  01
14DD:  MOVWF  3A
14DE:  MOVLW  29
14DF:  MOVWF  39
14E0:  MOVLW  04
14E1:  MOVWF  3B
14E2:  BCF    0A.4
14E3:  BCF    03.6
14E4:  CALL   674
14E5:  BSF    0A.4
14E6:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0888:  CLRF   29
0889:  CLRF   2A
088A:  CLRF   2B
088B:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
088C:  MOVLW  0C
088D:  ADDWF  27,W
088E:  MOVWF  78
088F:  MOVF   28,W
0890:  MOVWF  7A
0891:  BTFSC  03.0
0892:  INCF   7A,F
0893:  MOVF   78,W
0894:  MOVWF  33
0895:  MOVF   7A,W
0896:  MOVWF  34
0897:  MOVWF  3E
0898:  MOVF   33,W
0899:  MOVWF  3D
089A:  CLRF   3F
089B:  BCF    0A.3
089C:  BCF    03.6
089D:  CALL   60A
089E:  BSF    0A.3
089F:  MOVF   79,W
08A0:  MOVWF  7A
08A1:  MOVF   78,W
08A2:  BSF    03.6
08A3:  MOVWF  33
08A4:  MOVF   7A,W
08A5:  MOVWF  34
08A6:  MOVLW  01
08A7:  MOVWF  36
08A8:  MOVLW  2D
08A9:  MOVWF  35
08AA:  MOVLW  06
08AB:  MOVWF  78
08AC:  MOVF   33,W
08AD:  MOVWF  04
08AE:  BCF    03.7
08AF:  BTFSC  34.0
08B0:  BSF    03.7
08B1:  MOVF   00,W
08B2:  MOVWF  77
08B3:  MOVF   35,W
08B4:  MOVWF  04
08B5:  BCF    03.7
08B6:  BTFSC  36.0
08B7:  BSF    03.7
08B8:  MOVF   77,W
08B9:  MOVWF  00
08BA:  INCF   35,F
08BB:  BTFSC  03.2
08BC:  INCF   36,F
08BD:  INCF   33,F
08BE:  BTFSC  03.2
08BF:  INCF   34,F
08C0:  DECFSZ 78,F
08C1:  GOTO   0AC
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
08C2:  MOVF   2F,W
08C3:  MOVWF  29
....................     numbersToSend[1] = displayableTime.minute[1]; 
08C4:  MOVF   30,W
08C5:  MOVWF  2A
....................     numbersToSend[2] = displayableTime.hour[0]; 
08C6:  MOVF   2D,W
08C7:  MOVWF  2B
....................     numbersToSend[3] = displayableTime.hour[1]; 
08C8:  MOVF   2E,W
08C9:  MOVWF  2C
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
08CA:  MOVLW  01
08CB:  MOVWF  36
08CC:  MOVLW  29
08CD:  MOVWF  35
08CE:  MOVLW  04
08CF:  MOVWF  37
08D0:  MOVLW  01
08D1:  MOVWF  38
08D2:  BCF    0A.3
08D3:  BCF    03.6
08D4:  CALL   6BB
08D5:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
08EE:  CLRF   29
08EF:  CLRF   2A
08F0:  CLRF   2B
08F1:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
08F2:  MOVLW  0C
08F3:  ADDWF  27,W
08F4:  MOVWF  78
08F5:  MOVF   28,W
08F6:  MOVWF  7A
08F7:  BTFSC  03.0
08F8:  INCF   7A,F
08F9:  MOVF   78,W
08FA:  MOVWF  33
08FB:  MOVF   7A,W
08FC:  MOVWF  34
08FD:  MOVWF  3E
08FE:  MOVF   33,W
08FF:  MOVWF  3D
0900:  CLRF   3F
0901:  BCF    0A.3
0902:  BCF    03.6
0903:  CALL   60A
0904:  BSF    0A.3
0905:  MOVF   79,W
0906:  MOVWF  7A
0907:  MOVF   78,W
0908:  BSF    03.6
0909:  MOVWF  33
090A:  MOVF   7A,W
090B:  MOVWF  34
090C:  MOVLW  01
090D:  MOVWF  36
090E:  MOVLW  2D
090F:  MOVWF  35
0910:  MOVLW  06
0911:  MOVWF  78
0912:  MOVF   33,W
0913:  MOVWF  04
0914:  BCF    03.7
0915:  BTFSC  34.0
0916:  BSF    03.7
0917:  MOVF   00,W
0918:  MOVWF  77
0919:  MOVF   35,W
091A:  MOVWF  04
091B:  BCF    03.7
091C:  BTFSC  36.0
091D:  BSF    03.7
091E:  MOVF   77,W
091F:  MOVWF  00
0920:  INCF   35,F
0921:  BTFSC  03.2
0922:  INCF   36,F
0923:  INCF   33,F
0924:  BTFSC  03.2
0925:  INCF   34,F
0926:  DECFSZ 78,F
0927:  GOTO   112
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0928:  MOVF   31,W
0929:  MOVWF  29
....................     numbersToSend[1] = displayableTime.second[1]; 
092A:  MOVF   32,W
092B:  MOVWF  2A
....................     numbersToSend[2] = displayableTime.minute[0]; 
092C:  MOVF   2F,W
092D:  MOVWF  2B
....................     numbersToSend[3] = displayableTime.minute[1]; 
092E:  MOVF   30,W
092F:  MOVWF  2C
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0930:  MOVLW  01
0931:  MOVWF  36
0932:  MOVLW  29
0933:  MOVWF  35
0934:  MOVLW  04
0935:  MOVWF  37
0936:  MOVLW  01
0937:  MOVWF  38
0938:  BCF    0A.3
0939:  BCF    03.6
093A:  CALL   6BB
093B:  BSF    0A.3
093C:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
15A9:  CLRF   29
15AA:  CLRF   2A
15AB:  CLRF   2B
15AC:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
15AD:  MOVLW  0C
15AE:  ADDWF  27,W
15AF:  MOVWF  78
15B0:  MOVF   28,W
15B1:  MOVWF  7A
15B2:  BTFSC  03.0
15B3:  INCF   7A,F
15B4:  MOVF   78,W
15B5:  MOVWF  33
15B6:  MOVF   7A,W
15B7:  MOVWF  34
15B8:  MOVWF  3E
15B9:  MOVF   33,W
15BA:  MOVWF  3D
15BB:  CLRF   3F
15BC:  BCF    0A.4
15BD:  BCF    03.6
15BE:  CALL   60A
15BF:  BSF    0A.4
15C0:  MOVF   79,W
15C1:  MOVWF  7A
15C2:  MOVF   78,W
15C3:  BSF    03.6
15C4:  MOVWF  33
15C5:  MOVF   7A,W
15C6:  MOVWF  34
15C7:  MOVLW  01
15C8:  MOVWF  36
15C9:  MOVLW  2D
15CA:  MOVWF  35
15CB:  MOVLW  06
15CC:  MOVWF  78
15CD:  MOVF   33,W
15CE:  MOVWF  04
15CF:  BCF    03.7
15D0:  BTFSC  34.0
15D1:  BSF    03.7
15D2:  MOVF   00,W
15D3:  MOVWF  77
15D4:  MOVF   35,W
15D5:  MOVWF  04
15D6:  BCF    03.7
15D7:  BTFSC  36.0
15D8:  BSF    03.7
15D9:  MOVF   77,W
15DA:  MOVWF  00
15DB:  INCF   35,F
15DC:  BTFSC  03.2
15DD:  INCF   36,F
15DE:  INCF   33,F
15DF:  BTFSC  03.2
15E0:  INCF   34,F
15E1:  DECFSZ 78,F
15E2:  GOTO   5CD
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
15E3:  MOVLW  08
15E4:  MOVWF  2A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
15E5:  MOVF   2D,W
15E6:  BCF    0A.4
15E7:  BCF    03.6
15E8:  CALL   004
15E9:  BSF    0A.4
15EA:  MOVWF  78
15EB:  BSF    03.6
15EC:  MOVWF  2B
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
15ED:  MOVF   2E,W
15EE:  BCF    0A.4
15EF:  BCF    03.6
15F0:  CALL   004
15F1:  BSF    0A.4
15F2:  MOVWF  78
15F3:  BSF    03.6
15F4:  MOVWF  2C
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
15F5:  MOVLW  01
15F6:  MOVWF  3A
15F7:  MOVLW  29
15F8:  MOVWF  39
15F9:  MOVLW  04
15FA:  MOVWF  3B
15FB:  BCF    0A.4
15FC:  BCF    03.6
15FD:  CALL   674
15FE:  BSF    0A.4
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1617:  CLRF   29
1618:  CLRF   2A
1619:  CLRF   2B
161A:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
161B:  MOVLW  0C
161C:  ADDWF  27,W
161D:  MOVWF  78
161E:  MOVF   28,W
161F:  MOVWF  7A
1620:  BTFSC  03.0
1621:  INCF   7A,F
1622:  MOVF   78,W
1623:  MOVWF  33
1624:  MOVF   7A,W
1625:  MOVWF  34
1626:  MOVWF  3E
1627:  MOVF   33,W
1628:  MOVWF  3D
1629:  CLRF   3F
162A:  BCF    0A.4
162B:  BCF    03.6
162C:  CALL   60A
162D:  BSF    0A.4
162E:  MOVF   79,W
162F:  MOVWF  7A
1630:  MOVF   78,W
1631:  BSF    03.6
1632:  MOVWF  33
1633:  MOVF   7A,W
1634:  MOVWF  34
1635:  MOVLW  01
1636:  MOVWF  36
1637:  MOVLW  2D
1638:  MOVWF  35
1639:  MOVLW  06
163A:  MOVWF  78
163B:  MOVF   33,W
163C:  MOVWF  04
163D:  BCF    03.7
163E:  BTFSC  34.0
163F:  BSF    03.7
1640:  MOVF   00,W
1641:  MOVWF  77
1642:  MOVF   35,W
1643:  MOVWF  04
1644:  BCF    03.7
1645:  BTFSC  36.0
1646:  BSF    03.7
1647:  MOVF   77,W
1648:  MOVWF  00
1649:  INCF   35,F
164A:  BTFSC  03.2
164B:  INCF   36,F
164C:  INCF   33,F
164D:  BTFSC  03.2
164E:  INCF   34,F
164F:  DECFSZ 78,F
1650:  GOTO   63B
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1651:  MOVLW  08
1652:  MOVWF  2A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
1653:  MOVF   2F,W
1654:  BCF    0A.4
1655:  BCF    03.6
1656:  CALL   004
1657:  BSF    0A.4
1658:  MOVWF  78
1659:  BSF    03.6
165A:  MOVWF  2B
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
165B:  MOVF   30,W
165C:  BCF    0A.4
165D:  BCF    03.6
165E:  CALL   004
165F:  BSF    0A.4
1660:  MOVWF  78
1661:  BSF    03.6
1662:  MOVWF  2C
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
1663:  MOVLW  01
1664:  MOVWF  3A
1665:  MOVLW  29
1666:  MOVWF  39
1667:  MOVLW  04
1668:  MOVWF  3B
1669:  BCF    0A.4
166A:  BCF    03.6
166B:  CALL   674
166C:  BSF    0A.4
166D:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS = 0, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY,    
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
.................... } PolyoneDisplay; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateRtc(&polyoneDisplayPtr->timer); 
*
0564:  BSF    03.6
0565:  MOVF   5B,W
0566:  MOVWF  78
0567:  MOVF   5C,W
0568:  MOVWF  7A
0569:  MOVF   78,W
056A:  MOVWF  5D
056B:  MOVF   7A,W
056C:  MOVWF  5E
056D:  MOVF   5E,W
056E:  MOVWF  60
056F:  MOVF   5D,W
0570:  MOVWF  5F
*
059F:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
02D4:  BSF    03.6
02D5:  MOVF   5B,W
02D6:  MOVWF  78
02D7:  MOVF   5C,W
02D8:  MOVWF  7A
02D9:  MOVF   78,W
02DA:  MOVWF  5D
02DB:  MOVF   7A,W
02DC:  MOVWF  5E
02DD:  MOVF   5E,W
02DE:  MOVWF  60
02DF:  MOVF   5D,W
02E0:  MOVWF  5F
*
04D3:  BCF    03.5
04D4:  BCF    03.6
04D5:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(__EEADDRESS__ addressCurrentState, 
....................         __EEADDRESS__ addressPreviousState, __EEADDRESS__ addressFormat, 
....................         __EEADDRESS__ addressFirstNumberAlarm, 
....................         __EEADDRESS__ addressSecondNumberAlarm, __EEADDRESS__ addressRtcHours, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
101E:  MOVF   29,W
101F:  MOVWF  58
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
1020:  MOVF   2B,W
1021:  MOVWF  59
....................     polyoneDisplay.addressFormat = addressFormat; 
1022:  MOVF   2D,W
1023:  MOVWF  5A
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
1024:  MOVF   2D,W
1025:  MOVWF  0D
1026:  BSF    03.5
1027:  BCF    0C.7
1028:  BSF    0C.0
1029:  BCF    03.5
102A:  MOVF   0C,W
102B:  ANDLW  01
102C:  MOVWF  78
102D:  BCF    55.0
102E:  BTFSC  78.0
102F:  BSF    55.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
1030:  MOVF   29,W
1031:  MOVWF  0D
1032:  BSF    03.5
1033:  BCF    0C.7
1034:  BSF    0C.0
1035:  BCF    03.5
1036:  MOVF   0C,W
1037:  MOVWF  5C
1038:  MOVF   5C,W
1039:  BSF    03.5
103A:  MOVWF  34
103B:  MOVLW  03
103C:  MOVWF  35
103D:  BCF    0A.4
103E:  BCF    03.5
103F:  BCF    03.6
1040:  CALL   02F
1041:  BSF    0A.4
1042:  MOVF   77,W
1043:  BSF    03.6
1044:  MOVWF  56
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
1045:  MOVF   2B,W
1046:  MOVWF  0D
1047:  BSF    03.5
1048:  BCF    0C.7
1049:  BSF    0C.0
104A:  BCF    03.5
104B:  MOVF   0C,W
104C:  MOVWF  5C
104D:  MOVF   5C,W
104E:  BSF    03.5
104F:  MOVWF  34
1050:  MOVLW  03
1051:  MOVWF  35
1052:  BCF    0A.4
1053:  BCF    03.5
1054:  BCF    03.6
1055:  CALL   02F
1056:  BSF    0A.4
1057:  MOVF   77,W
1058:  BSF    03.6
1059:  MOVWF  57
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
105A:  MOVF   57,F
105B:  BTFSS  03.2
105C:  GOTO   062
105D:  MOVF   56,F
105E:  BTFSS  03.2
105F:  GOTO   062
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
1060:  MOVLW  02
1061:  MOVWF  57
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
1062:  MOVLW  00
1063:  BTFSC  55.0
1064:  MOVLW  01
1065:  XORLW  01
1066:  BCF    03.6
1067:  BTFSC  03.2
1068:  GOTO   06D
1069:  XORLW  01
106A:  BTFSC  03.2
106B:  GOTO   10B
106C:  GOTO   19F
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
106D:  MOVLW  63
106E:  BSF    03.6
106F:  MOVWF  69
1070:  MOVLW  3B
1071:  MOVWF  6A
1072:  MOVF   30,W
1073:  MOVWF  6C
1074:  MOVF   2F,W
1075:  MOVWF  6B
1076:  MOVF   32,W
1077:  MOVWF  6E
1078:  MOVF   31,W
1079:  MOVWF  6D
107A:  MOVF   34,W
107B:  BSF    03.5
107C:  MOVWF  11
107D:  BCF    03.5
107E:  MOVF   33,W
107F:  BSF    03.5
1080:  MOVWF  10
1081:  BCF    03.5
1082:  MOVF   36,W
1083:  BSF    03.5
1084:  MOVWF  13
1085:  BCF    03.5
1086:  MOVF   35,W
1087:  BSF    03.5
1088:  MOVWF  12
1089:  BCF    03.5
108A:  MOVF   38,W
108B:  BSF    03.5
108C:  MOVWF  15
108D:  BCF    03.5
108E:  MOVF   37,W
108F:  BSF    03.5
1090:  MOVWF  14
*
10E6:  MOVF   79,W
10E7:  MOVWF  7A
10E8:  MOVF   78,W
10E9:  BCF    03.5
10EA:  MOVWF  63
10EB:  MOVF   7A,W
10EC:  MOVWF  64
10ED:  MOVLW  01
10EE:  MOVWF  66
10EF:  MOVLW  39
10F0:  MOVWF  65
10F1:  MOVLW  1C
10F2:  MOVWF  78
10F3:  MOVF   63,W
10F4:  MOVWF  04
10F5:  BCF    03.7
10F6:  BTFSC  64.0
10F7:  BSF    03.7
10F8:  MOVF   00,W
10F9:  MOVWF  77
10FA:  MOVF   65,W
10FB:  MOVWF  04
10FC:  BCF    03.7
10FD:  BTFSC  66.0
10FE:  BSF    03.7
10FF:  MOVF   77,W
1100:  MOVWF  00
1101:  INCF   65,F
1102:  BTFSC  03.2
1103:  INCF   66,F
1104:  INCF   63,F
1105:  BTFSC  03.2
1106:  INCF   64,F
1107:  DECFSZ 78,F
1108:  GOTO   0F3
....................             break; 
1109:  BCF    03.6
110A:  GOTO   19F
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
110B:  MOVLW  63
110C:  BSF    03.6
110D:  MOVWF  69
110E:  MOVF   30,W
110F:  MOVWF  6B
1110:  MOVF   2F,W
1111:  MOVWF  6A
1112:  MOVF   32,W
1113:  MOVWF  6D
1114:  MOVF   31,W
1115:  MOVWF  6C
1116:  MOVF   34,W
1117:  MOVWF  6F
1118:  MOVF   33,W
1119:  MOVWF  6E
111A:  MOVF   36,W
111B:  BSF    03.5
111C:  MOVWF  11
111D:  BCF    03.5
111E:  MOVF   35,W
111F:  BSF    03.5
1120:  MOVWF  10
1121:  BCF    03.5
1122:  MOVF   38,W
1123:  BSF    03.5
1124:  MOVWF  13
1125:  BCF    03.5
1126:  MOVF   37,W
1127:  BSF    03.5
1128:  MOVWF  12
*
117B:  MOVF   79,W
117C:  MOVWF  7A
117D:  MOVF   78,W
117E:  BCF    03.5
117F:  MOVWF  63
1180:  MOVF   7A,W
1181:  MOVWF  64
1182:  MOVLW  01
1183:  MOVWF  66
1184:  MOVLW  39
1185:  MOVWF  65
1186:  MOVLW  1C
1187:  MOVWF  78
1188:  MOVF   63,W
1189:  MOVWF  04
118A:  BCF    03.7
118B:  BTFSC  64.0
118C:  BSF    03.7
118D:  MOVF   00,W
118E:  MOVWF  77
118F:  MOVF   65,W
1190:  MOVWF  04
1191:  BCF    03.7
1192:  BTFSC  66.0
1193:  BSF    03.7
1194:  MOVF   77,W
1195:  MOVWF  00
1196:  INCF   65,F
1197:  BTFSC  03.2
1198:  INCF   66,F
1199:  INCF   63,F
119A:  BTFSC  03.2
119B:  INCF   64,F
119C:  DECFSZ 78,F
119D:  GOTO   188
....................  
....................             break; 
119E:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
119F:  BSF    03.6
11A0:  MOVF   56,F
11A1:  BTFSS  03.2
11A2:  GOTO   1B6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
11A3:  MOVLW  01
11A4:  MOVWF  5C
11A5:  MOVLW  39
11A6:  MOVWF  5B
11A7:  BCF    0A.4
11A8:  BCF    03.6
11A9:  CALL   2D4
11AA:  BSF    0A.4
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
11AB:  MOVLW  01
11AC:  BSF    03.6
11AD:  MOVWF  5C
11AE:  MOVLW  39
11AF:  MOVWF  5B
11B0:  BCF    0A.4
11B1:  BCF    03.6
11B2:  CALL   564
11B3:  BSF    0A.4
....................     } else { 
11B4:  GOTO   1BE
11B5:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
11B6:  MOVLW  01
11B7:  MOVWF  5C
11B8:  MOVLW  39
11B9:  MOVWF  5B
11BA:  BCF    0A.4
11BB:  BCF    03.6
11BC:  CALL   2D4
11BD:  BSF    0A.4
....................     } 
....................  
....................     return polyoneDisplay; 
11BE:  MOVLW  39
11BF:  MOVWF  78
11C0:  MOVLW  01
11C1:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0728:  MOVLW  1C
0729:  BSF    03.6
072A:  ADDWF  23,W
072B:  MOVWF  04
072C:  BCF    03.7
072D:  BTFSC  24.0
072E:  BSF    03.7
072F:  MOVF   00,W
0730:  ANDLW  01
0731:  SUBLW  01
0732:  BTFSS  03.2
0733:  GOTO   79A
....................         Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0734:  MOVF   23,W
0735:  MOVWF  78
0736:  MOVF   24,W
0737:  MOVWF  7A
0738:  MOVF   78,W
0739:  MOVWF  26
073A:  MOVF   7A,W
073B:  MOVWF  27
073C:  MOVF   27,W
073D:  MOVWF  29
073E:  MOVF   26,W
073F:  MOVWF  28
0740:  MOVF   25,W
0741:  MOVWF  2A
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0798:  GOTO   7F7
0799:  BSF    03.6
079A:  MOVLW  1C
079B:  ADDWF  23,W
079C:  MOVWF  04
079D:  BCF    03.7
079E:  BTFSC  24.0
079F:  BSF    03.7
07A0:  MOVF   00,W
07A1:  ANDLW  01
07A2:  BTFSS  03.2
07A3:  GOTO   7F8
....................  
....................         Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
07A4:  MOVF   23,W
07A5:  MOVWF  78
07A6:  MOVF   24,W
07A7:  MOVWF  7A
07A8:  MOVF   78,W
07A9:  MOVWF  26
07AA:  MOVF   7A,W
07AB:  MOVWF  27
07AC:  MOVF   27,W
07AD:  MOVWF  29
07AE:  MOVF   26,W
07AF:  MOVWF  28
....................     } 
*
07F8:  BCF    03.6
07F9:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0870:  MOVLW  1C
0871:  BSF    03.6
0872:  ADDWF  23,W
0873:  MOVWF  04
0874:  BCF    03.7
0875:  BTFSC  24.0
0876:  BSF    03.7
0877:  MOVF   00,W
0878:  ANDLW  01
0879:  SUBLW  01
087A:  BTFSS  03.2
087B:  GOTO   0D8
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
087C:  MOVF   23,W
087D:  MOVWF  78
087E:  MOVF   24,W
087F:  MOVWF  7A
0880:  MOVF   78,W
0881:  MOVWF  25
0882:  MOVF   7A,W
0883:  MOVWF  26
0884:  MOVF   26,W
0885:  MOVWF  28
0886:  MOVF   25,W
0887:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
08D6:  GOTO   13C
08D7:  BSF    03.6
08D8:  MOVLW  1C
08D9:  ADDWF  23,W
08DA:  MOVWF  04
08DB:  BCF    03.7
08DC:  BTFSC  24.0
08DD:  BSF    03.7
08DE:  MOVF   00,W
08DF:  ANDLW  01
08E0:  BTFSS  03.2
08E1:  GOTO   13D
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
08E2:  MOVF   23,W
08E3:  MOVWF  78
08E4:  MOVF   24,W
08E5:  MOVWF  7A
08E6:  MOVF   78,W
08E7:  MOVWF  25
08E8:  MOVF   7A,W
08E9:  MOVWF  26
08EA:  MOVF   26,W
08EB:  MOVWF  28
08EC:  MOVF   25,W
08ED:  MOVWF  27
....................     } 
*
093D:  BCF    03.6
093E:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1592:  MOVLW  1C
1593:  ADDWF  23,W
1594:  MOVWF  04
1595:  BCF    03.7
1596:  BTFSC  24.0
1597:  BSF    03.7
1598:  MOVF   00,W
1599:  ANDLW  01
159A:  SUBLW  01
159B:  BTFSS  03.2
159C:  GOTO   601
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
159D:  MOVF   23,W
159E:  MOVWF  78
159F:  MOVF   24,W
15A0:  MOVWF  7A
15A1:  MOVF   78,W
15A2:  MOVWF  25
15A3:  MOVF   7A,W
15A4:  MOVWF  26
15A5:  MOVF   26,W
15A6:  MOVWF  28
15A7:  MOVF   25,W
15A8:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
15FF:  GOTO   66D
1600:  BSF    03.6
1601:  MOVLW  1C
1602:  ADDWF  23,W
1603:  MOVWF  04
1604:  BCF    03.7
1605:  BTFSC  24.0
1606:  BSF    03.7
1607:  MOVF   00,W
1608:  ANDLW  01
1609:  BTFSS  03.2
160A:  GOTO   66E
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
160B:  MOVF   23,W
160C:  MOVWF  78
160D:  MOVF   24,W
160E:  MOVWF  7A
160F:  MOVF   78,W
1610:  MOVWF  25
1611:  MOVF   7A,W
1612:  MOVWF  26
1613:  MOVF   26,W
1614:  MOVWF  28
1615:  MOVF   25,W
1616:  MOVWF  27
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
140F:  MOVLW  1C
1410:  ADDWF  23,W
1411:  MOVWF  04
1412:  BCF    03.7
1413:  BTFSC  24.0
1414:  BSF    03.7
1415:  MOVF   00,W
1416:  ANDLW  01
1417:  SUBLW  01
1418:  BTFSS  03.2
1419:  GOTO   47C
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
141A:  MOVF   23,W
141B:  MOVWF  78
141C:  MOVF   24,W
141D:  MOVWF  7A
141E:  MOVF   78,W
141F:  MOVWF  25
1420:  MOVF   7A,W
1421:  MOVWF  26
1422:  MOVF   26,W
1423:  MOVWF  28
1424:  MOVF   25,W
1425:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
147A:  GOTO   4E6
147B:  BSF    03.6
147C:  MOVLW  1C
147D:  ADDWF  23,W
147E:  MOVWF  04
147F:  BCF    03.7
1480:  BTFSC  24.0
1481:  BSF    03.7
1482:  MOVF   00,W
1483:  ANDLW  01
1484:  BTFSS  03.2
1485:  GOTO   4E7
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
1486:  MOVF   23,W
1487:  MOVWF  78
1488:  MOVF   24,W
1489:  MOVWF  7A
148A:  MOVF   78,W
148B:  MOVWF  25
148C:  MOVF   7A,W
148D:  MOVWF  26
148E:  MOVF   26,W
148F:  MOVWF  28
1490:  MOVF   25,W
1491:  MOVWF  27
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
14F6:  MOVLW  1C
14F7:  ADDWF  23,W
14F8:  MOVWF  04
14F9:  BCF    03.7
14FA:  BTFSC  24.0
14FB:  BSF    03.7
14FC:  MOVF   00,W
14FD:  ANDLW  01
14FE:  SUBLW  01
14FF:  BTFSS  03.2
1500:  GOTO   53D
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
1501:  MOVF   23,W
1502:  MOVWF  78
1503:  MOVF   24,W
1504:  MOVWF  7A
1505:  MOVF   78,W
1506:  MOVWF  25
1507:  MOVF   7A,W
1508:  MOVWF  26
1509:  MOVF   26,W
150A:  MOVWF  28
150B:  MOVF   25,W
150C:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
153C:  GOTO   559
153D:  MOVLW  1C
153E:  ADDWF  23,W
153F:  MOVWF  04
1540:  BCF    03.7
1541:  BTFSC  24.0
1542:  BSF    03.7
1543:  MOVF   00,W
1544:  ANDLW  01
1545:  BTFSS  03.2
1546:  GOTO   559
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1547:  MOVF   23,W
1548:  MOVWF  78
1549:  MOVF   24,W
154A:  MOVWF  7A
154B:  MOVF   78,W
154C:  MOVWF  25
154D:  MOVF   24,W
154E:  MOVWF  26
154F:  MOVWF  28
1550:  MOVF   25,W
1551:  MOVWF  27
1552:  BCF    0A.4
1553:  BSF    0A.3
1554:  BCF    03.6
1555:  CALL   13F
1556:  BSF    0A.4
1557:  BCF    0A.3
1558:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
167D:  MOVLW  1C
167E:  ADDWF  23,W
167F:  MOVWF  04
1680:  BCF    03.7
1681:  BTFSC  24.0
1682:  BSF    03.7
1683:  MOVF   00,W
1684:  ANDLW  01
1685:  SUBLW  01
1686:  BTFSS  03.2
1687:  GOTO   69B
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1688:  MOVF   23,W
1689:  MOVWF  78
168A:  MOVF   24,W
168B:  MOVWF  7A
168C:  MOVF   23,W
168D:  MOVWF  25
168E:  MOVF   24,W
168F:  MOVWF  26
1690:  MOVWF  28
1691:  MOVF   23,W
1692:  MOVWF  27
1693:  BCF    0A.4
1694:  BSF    0A.3
1695:  BCF    03.6
1696:  CALL   13F
1697:  BSF    0A.4
1698:  BCF    0A.3
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1699:  GOTO   6E1
169A:  BSF    03.6
169B:  MOVLW  1C
169C:  ADDWF  23,W
169D:  MOVWF  04
169E:  BCF    03.7
169F:  BTFSC  24.0
16A0:  BSF    03.7
16A1:  MOVF   00,W
16A2:  ANDLW  01
16A3:  BTFSS  03.2
16A4:  GOTO   6E0
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
16A5:  MOVF   23,W
16A6:  MOVWF  78
16A7:  MOVF   24,W
16A8:  MOVWF  7A
16A9:  MOVF   78,W
16AA:  MOVWF  25
16AB:  MOVF   7A,W
16AC:  MOVWF  26
16AD:  MOVF   26,W
16AE:  MOVWF  28
16AF:  MOVF   25,W
16B0:  MOVWF  27
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
....................         polyoneDisplayPtr->timer.limitTime.second = polyoneDisplayPtr->timer.limitTime.minute; 
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.hour; 
....................         polyoneDisplayPtr->format = FORMAT_MINUTES_SECONDS; 
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
....................         polyoneDisplayPtr->timer.limitTime.hour = polyoneDisplayPtr->timer.limitTime.minute; 
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.second; 
....................          polyoneDisplayPtr->format = FORMAT_HOURS_MINUTES; 
....................     } 
....................     //    polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
127F:  MOVF   23,W
1280:  MOVWF  78
1281:  MOVF   24,W
1282:  MOVWF  7A
1283:  MOVF   78,W
1284:  MOVWF  25
1285:  MOVF   7A,W
1286:  MOVWF  26
1287:  MOVF   26,W
1288:  MOVWF  28
1289:  MOVF   25,W
128A:  MOVWF  27
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
13C6:  MOVLW  1E
13C7:  ADDWF  23,W
13C8:  MOVWF  78
13C9:  MOVF   24,W
13CA:  MOVWF  7A
13CB:  BTFSC  03.0
13CC:  INCF   7A,F
13CD:  MOVF   78,W
13CE:  MOVWF  26
13CF:  MOVF   7A,W
13D0:  MOVWF  27
13D1:  MOVLW  1D
13D2:  ADDWF  23,W
13D3:  MOVWF  04
13D4:  BCF    03.7
13D5:  BTFSC  24.0
13D6:  BSF    03.7
13D7:  MOVF   00,W
13D8:  MOVWF  28
13D9:  MOVF   26,W
13DA:  MOVWF  04
13DB:  BCF    03.7
13DC:  BTFSC  27.0
13DD:  BSF    03.7
13DE:  MOVF   28,W
13DF:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
13E0:  MOVLW  1D
13E1:  ADDWF  23,W
13E2:  MOVWF  04
13E3:  BCF    03.7
13E4:  BTFSC  24.0
13E5:  BSF    03.7
13E6:  MOVF   25,W
13E7:  MOVWF  00
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
125B:  MOVLW  1E
125C:  ADDWF  23,W
125D:  MOVWF  78
125E:  MOVF   24,W
125F:  MOVWF  7A
1260:  BTFSC  03.0
1261:  INCF   7A,F
1262:  MOVF   78,W
1263:  MOVWF  25
1264:  MOVF   7A,W
1265:  MOVWF  26
1266:  MOVLW  1D
1267:  ADDWF  23,W
1268:  MOVWF  04
1269:  BCF    03.7
126A:  BTFSC  24.0
126B:  BSF    03.7
126C:  MOVF   00,W
126D:  MOVWF  27
126E:  MOVF   25,W
126F:  MOVWF  04
1270:  BCF    03.7
1271:  BTFSC  26.0
1272:  BSF    03.7
1273:  MOVF   27,W
1274:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
1275:  MOVLW  1D
1276:  ADDWF  23,W
1277:  MOVWF  04
1278:  BCF    03.7
1279:  BTFSC  24.0
127A:  BSF    03.7
127B:  CLRF   00
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0800:  MOVLW  1F
0801:  BSF    03.6
0802:  ADDWF  23,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  24.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  25
0809:  MOVLW  1D
080A:  ADDWF  23,W
080B:  MOVWF  04
080C:  BCF    03.7
080D:  BTFSC  24.0
080E:  BSF    03.7
080F:  MOVF   00,W
0810:  MOVWF  26
0811:  BCF    03.6
0812:  MOVF   0B,W
0813:  MOVWF  77
0814:  BCF    0B.7
0815:  BSF    03.6
0816:  MOVF   25,W
0817:  MOVWF  0D
0818:  MOVF   26,W
0819:  MOVWF  0C
081A:  BSF    03.5
081B:  BCF    0C.7
081C:  BSF    0C.2
081D:  MOVLW  55
081E:  MOVWF  0D
081F:  MOVLW  AA
0820:  MOVWF  0D
0821:  BSF    0C.1
0822:  BTFSC  0C.1
0823:  GOTO   022
0824:  BCF    0C.2
0825:  MOVF   77,W
0826:  BCF    03.5
0827:  BCF    03.6
0828:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0829:  MOVLW  20
082A:  BSF    03.6
082B:  ADDWF  23,W
082C:  MOVWF  04
082D:  BCF    03.7
082E:  BTFSC  24.0
082F:  BSF    03.7
0830:  MOVF   00,W
0831:  MOVWF  25
0832:  MOVLW  1E
0833:  ADDWF  23,W
0834:  MOVWF  04
0835:  BCF    03.7
0836:  BTFSC  24.0
0837:  BSF    03.7
0838:  MOVF   00,W
0839:  MOVWF  26
083A:  BCF    03.6
083B:  MOVF   0B,W
083C:  MOVWF  77
083D:  BCF    0B.7
083E:  BSF    03.6
083F:  MOVF   25,W
0840:  MOVWF  0D
0841:  MOVF   26,W
0842:  MOVWF  0C
0843:  BSF    03.5
0844:  BCF    0C.7
0845:  BSF    0C.2
0846:  MOVLW  55
0847:  MOVWF  0D
0848:  MOVLW  AA
0849:  MOVWF  0D
084A:  BSF    0C.1
084B:  BTFSC  0C.1
084C:  GOTO   04B
084D:  BCF    0C.2
084E:  MOVF   77,W
084F:  BCF    03.5
0850:  BCF    03.6
0851:  IORWF  0B,F
0852:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
11F8:  MOVLW  1D
11F9:  ADDWF  23,W
11FA:  MOVWF  04
11FB:  BCF    03.7
11FC:  BTFSC  24.0
11FD:  BSF    03.7
11FE:  MOVF   00,W
11FF:  MOVWF  25
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
1200:  MOVLW  1D
1201:  ADDWF  23,W
1202:  MOVWF  78
1203:  MOVF   24,W
1204:  MOVWF  7A
1205:  BTFSC  03.0
1206:  INCF   7A,F
1207:  MOVF   78,W
1208:  MOVWF  26
1209:  MOVF   7A,W
120A:  MOVWF  27
120B:  MOVLW  1E
120C:  ADDWF  23,W
120D:  MOVWF  04
120E:  BCF    03.7
120F:  BTFSC  24.0
1210:  BSF    03.7
1211:  MOVF   00,W
1212:  MOVWF  28
1213:  MOVF   26,W
1214:  MOVWF  04
1215:  BCF    03.7
1216:  BTFSC  27.0
1217:  BSF    03.7
1218:  MOVF   28,W
1219:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
121A:  MOVLW  1E
121B:  ADDWF  23,W
121C:  MOVWF  04
121D:  BCF    03.7
121E:  BTFSC  24.0
121F:  BSF    03.7
1220:  MOVF   25,W
1221:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
131C:  MOVF   23,W
131D:  MOVWF  78
131E:  MOVF   24,W
131F:  MOVWF  7A
1320:  MOVF   78,W
1321:  MOVWF  25
1322:  MOVF   7A,W
1323:  MOVWF  26
1324:  MOVF   26,W
1325:  MOVWF  28
1326:  MOVF   25,W
1327:  MOVWF  27
*
1353:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  BUTTON_START_STOP_RESET    PIN_B1 
.................... #define  BUTTON_MENU                PIN_B0 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
09E6:  MOVF   03,W
09E7:  ANDLW  1F
09E8:  MOVWF  03
09E9:  MOVLW  FF
09EA:  MOVWF  20
09EB:  BSF    3E.0
09EC:  BSF    3E.1
09ED:  BSF    3E.2
09EE:  BSF    3E.3
09EF:  BSF    3E.4
09F0:  CLRF   62
09F1:  CLRF   63
09F2:  CLRF   64
09F3:  BSF    03.5
09F4:  BSF    03.6
09F5:  MOVF   09,W
09F6:  ANDLW  C0
09F7:  MOVWF  09
09F8:  BCF    03.6
09F9:  BCF    1F.4
09FA:  BCF    1F.5
09FB:  MOVLW  00
09FC:  BSF    03.6
09FD:  MOVWF  08
09FE:  BCF    03.5
09FF:  CLRF   07
0A00:  CLRF   08
0A01:  CLRF   09
0A02:  BCF    03.7
....................     setupHardware(); 
0A03:  BCF    03.6
0A04:  GOTO   1BE
....................     myPolyoneDisplay.currentState = STATE_INIT; 
0A05:  MOVLW  03
0A06:  MOVWF  5C
....................     rtos_run(); 
0A07:  CLRF   22
0A08:  CLRF   24
0A09:  MOVLW  05
0A0A:  MOVWF  23
0A0B:  CLRF   26
0A0C:  CLRF   25
0A0D:  MOVLW  71
0A0E:  MOVWF  27
0A0F:  MOVLW  09
0A10:  MOVWF  28
0A11:  CLRF   29
0A12:  CLRF   2B
0A13:  MOVLW  05
0A14:  MOVWF  2A
0A15:  CLRF   2D
0A16:  MOVLW  01
0A17:  MOVWF  2C
0A18:  MOVLW  8F
0A19:  MOVWF  2E
0A1A:  MOVLW  09
0A1B:  MOVWF  2F
0A1C:  CLRF   30
0A1D:  CLRF   32
0A1E:  MOVLW  01
0A1F:  MOVWF  31
0A20:  CLRF   34
0A21:  CLRF   33
0A22:  MOVLW  00
0A23:  MOVWF  35
0A24:  MOVLW  10
0A25:  MOVWF  36
0A26:  CLRF   37
0A27:  CLRF   39
0A28:  MOVLW  14
0A29:  MOVWF  38
0A2A:  CLRF   3B
0A2B:  MOVLW  02
0A2C:  MOVWF  3A
0A2D:  MOVLW  AD
0A2E:  MOVWF  3C
0A2F:  MOVLW  09
0A30:  MOVWF  3D
0A31:  CLRF   21
0A32:  BSF    03.5
0A33:  MOVF   01,W
0A34:  ANDLW  C0
0A35:  IORLW  07
0A36:  MOVWF  01
0A37:  MOVLW  3D
0A38:  BCF    03.5
0A39:  MOVWF  01
0A3A:  BCF    0B.2
0A3B:  BCF    03.0
0A3C:  RLF    21,W
0A3D:  MOVWF  77
0A3E:  BCF    0A.3
0A3F:  CALL   023
0A40:  BSF    0A.3
0A41:  MOVWF  79
0A42:  MOVLW  01
0A43:  ADDWF  77,W
0A44:  BCF    0A.3
0A45:  CALL   023
0A46:  BSF    0A.3
0A47:  MOVWF  7A
0A48:  MOVF   79,W
0A49:  MOVWF  04
0A4A:  BCF    03.7
0A4B:  BTFSC  7A.0
0A4C:  BSF    03.7
0A4D:  MOVF   00,W
0A4E:  MOVWF  79
0A4F:  INCF   04,F
0A50:  MOVF   00,W
0A51:  MOVWF  77
0A52:  INCF   04,F
0A53:  MOVF   00,W
0A54:  MOVWF  78
0A55:  INCF   04,F
0A56:  INCF   00,F
0A57:  MOVF   00,W
0A58:  MOVWF  7A
0A59:  BTFSS  03.2
0A5A:  GOTO   25E
0A5B:  INCF   04,F
0A5C:  INCF   00,F
0A5D:  DECF   04,F
0A5E:  INCF   04,F
0A5F:  MOVF   00,W
0A60:  SUBWF  78,W
0A61:  BTFSS  03.2
0A62:  GOTO   276
0A63:  MOVF   77,W
0A64:  SUBWF  7A,W
0A65:  BTFSS  03.2
0A66:  GOTO   276
0A67:  DECF   04,F
0A68:  CLRF   00
0A69:  INCF   04,F
0A6A:  CLRF   00
0A6B:  INCF   04,F
0A6C:  BTFSC  79.7
0A6D:  GOTO   276
0A6E:  INCF   04,F
0A6F:  MOVF   00,W
0A70:  MOVWF  0A
0A71:  DECF   04,F
0A72:  MOVF   00,W
0A73:  MOVWF  02
0A74:  BCF    03.5
0A75:  BCF    03.6
0A76:  INCF   21,F
0A77:  MOVLW  04
0A78:  SUBWF  21,W
0A79:  BTFSS  03.2
0A7A:  GOTO   23B
0A7B:  CLRF   21
0A7C:  MOVF   01,W
0A7D:  BTFSS  0B.2
0A7E:  GOTO   281
0A7F:  BSF    03.5
0A80:  GOTO   237
0A81:  GOTO   27C
0A82:  MOVLW  FF
0A83:  MOVWF  21
.................... } 
....................  
0A84:  SLEEP
.................... void Task_runStateMachine(void) { 
....................     //    static BOOLEAN startStopButtonState = TRUE; 
....................     //    static BOOLEAN menuButtonState = TRUE; 
....................     //    static PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
....................     //    static int numberOfMenuButtonHasBeenReleased = 0; 
....................  
....................     switch (myPolyoneDisplay.currentState) { 
*
1000:  MOVF   5C,W
1001:  ADDLW  F6
1002:  BTFSC  03.0
1003:  GOTO   705
1004:  ADDLW  0A
1005:  GOTO   720
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new( 
....................                     EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS 
....................                     ); 
1006:  BSF    03.6
1007:  CLRF   2A
1008:  CLRF   29
1009:  CLRF   2C
100A:  MOVLW  01
100B:  MOVWF  2B
100C:  CLRF   2E
100D:  MOVLW  02
100E:  MOVWF  2D
100F:  CLRF   30
1010:  MOVLW  03
1011:  MOVWF  2F
1012:  CLRF   32
1013:  MOVLW  04
1014:  MOVWF  31
1015:  CLRF   34
1016:  MOVLW  05
1017:  MOVWF  33
1018:  CLRF   36
1019:  MOVLW  06
101A:  MOVWF  35
101B:  CLRF   38
101C:  MOVLW  07
101D:  MOVWF  37
*
11C2:  MOVF   79,W
11C3:  MOVWF  7A
11C4:  MOVF   78,W
11C5:  BSF    03.6
11C6:  MOVWF  23
11C7:  MOVF   7A,W
11C8:  MOVWF  24
11C9:  CLRF   26
11CA:  MOVLW  3F
11CB:  MOVWF  25
11CC:  MOVLW  22
11CD:  MOVWF  78
11CE:  MOVF   23,W
11CF:  MOVWF  04
11D0:  BCF    03.7
11D1:  BTFSC  24.0
11D2:  BSF    03.7
11D3:  MOVF   00,W
11D4:  MOVWF  77
11D5:  MOVF   25,W
11D6:  MOVWF  04
11D7:  BCF    03.7
11D8:  BTFSC  26.0
11D9:  BSF    03.7
11DA:  MOVF   77,W
11DB:  MOVWF  00
11DC:  INCF   25,F
11DD:  BTFSC  03.2
11DE:  INCF   26,F
11DF:  INCF   23,F
11E0:  BTFSC  03.2
11E1:  INCF   24,F
11E2:  DECFSZ 78,F
11E3:  GOTO   1CE
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
11E4:  CLRF   24
11E5:  MOVLW  3F
11E6:  MOVWF  23
11E7:  CLRF   25
11E8:  BCF    0A.4
11E9:  BCF    03.6
11EA:  CALL   728
11EB:  BSF    0A.4
....................             break; 
11EC:  GOTO   705
....................  
....................         case STATE_IDLE: 
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
11ED:  BSF    03.5
11EE:  BSF    06.1
11EF:  BCF    03.5
11F0:  BTFSS  06.1
11F1:  GOTO   233
11F2:  BTFSC  3E.3
11F3:  GOTO   233
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
11F4:  BSF    03.6
11F5:  CLRF   24
11F6:  MOVLW  3F
11F7:  MOVWF  23
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1222:  CLRF   24
1223:  MOVLW  3F
1224:  MOVWF  23
1225:  BCF    0A.4
1226:  BSF    0A.3
1227:  BCF    03.6
1228:  CALL   000
1229:  BSF    0A.4
122A:  BCF    0A.3
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
122B:  BSF    03.6
122C:  CLRF   5C
122D:  MOVLW  3F
122E:  MOVWF  5B
122F:  BCF    0A.4
1230:  BCF    03.6
1231:  CALL   564
1232:  BSF    0A.4
....................  
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
1233:  BTFSC  3E.1
1234:  GOTO   238
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
1235:  BSF    3E.1
....................                 myPolyoneDisplay.currentState = STATE_RESETTING; 
1236:  MOVLW  04
1237:  MOVWF  5C
....................             } 
....................             break; 
1238:  GOTO   705
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1239:  BSF    03.6
123A:  CLRF   5C
123B:  MOVLW  3F
123C:  MOVWF  5B
123D:  BCF    0A.4
123E:  BCF    03.6
123F:  CALL   2D4
1240:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
1241:  BSF    03.6
1242:  CLRF   24
1243:  MOVLW  3F
1244:  MOVWF  23
1245:  MOVLW  01
1246:  MOVWF  25
1247:  BCF    0A.4
1248:  BCF    03.6
1249:  CALL   728
124A:  BSF    0A.4
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
124B:  BTFSC  3E.1
124C:  GOTO   250
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
124D:  BSF    3E.1
....................                 myPolyoneDisplay.currentState = STATE_RESETTING; 
124E:  MOVLW  04
124F:  MOVWF  5C
....................             } 
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
1250:  BSF    03.5
1251:  BSF    06.1
1252:  BCF    03.5
1253:  BTFSS  06.1
1254:  GOTO   318
1255:  BTFSC  3E.3
1256:  GOTO   318
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
1257:  BSF    03.6
1258:  CLRF   24
1259:  MOVLW  3F
125A:  MOVWF  23
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
*
127C:  CLRF   24
127D:  MOVLW  3F
127E:  MOVWF  23
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
1305:  BSF    03.6
1306:  CLRF   24
1307:  MOVLW  3F
1308:  MOVWF  23
1309:  BCF    0A.4
130A:  BSF    0A.3
130B:  BCF    03.6
130C:  CALL   000
130D:  BSF    0A.4
130E:  BCF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
130F:  BSF    03.6
1310:  CLRF   24
1311:  MOVLW  3F
1312:  MOVWF  23
1313:  CLRF   25
1314:  BCF    0A.4
1315:  BCF    03.6
1316:  CALL   728
1317:  BSF    0A.4
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
1318:  BSF    03.6
1319:  CLRF   24
131A:  MOVLW  3F
131B:  MOVWF  23
*
1354:  MOVF   78,F
1355:  BTFSC  03.2
1356:  GOTO   35B
....................  
....................                 myPolyoneDisplay.currentState = STATE_COUNTING_UP; 
1357:  MOVLW  01
1358:  BCF    03.6
1359:  MOVWF  5C
135A:  BSF    03.6
....................             } 
....................             break; 
135B:  BCF    03.6
135C:  GOTO   705
....................  
....................         case STATE_COUNTING_UP: 
....................  
....................             break; 
135D:  GOTO   705
....................  
....................         case STATE_RESETTING: 
....................             Time_clearRtcTime(); 
135E:  BCF    0A.4
135F:  BSF    0A.3
1360:  CALL   053
1361:  BSF    0A.4
1362:  BCF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
1378:  MOVLW  08
1379:  BSF    03.6
137A:  MOVWF  23
137B:  MOVLW  FA
137C:  MOVWF  24
137D:  BCF    0A.4
137E:  BSF    0A.3
137F:  BCF    03.6
1380:  CALL   05C
1381:  BSF    0A.4
1382:  BCF    0A.3
1383:  BSF    03.6
1384:  DECFSZ 23,F
1385:  GOTO   37B
....................             myPolyoneDisplay.currentState = STATE_WAITING_FOR_BUTTON_BEING_RELEASED; 
1386:  MOVLW  09
1387:  BCF    03.6
1388:  MOVWF  5C
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
1389:  MOVLW  05
138A:  MOVWF  61
....................             Time_clearRtcTime(); 
138B:  BCF    0A.4
138C:  BSF    0A.3
138D:  CALL   053
138E:  BSF    0A.4
138F:  BCF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1390:  BSF    03.6
1391:  CLRF   5C
1392:  MOVLW  3F
1393:  MOVWF  5B
1394:  BCF    0A.4
1395:  BCF    03.6
1396:  CALL   2D4
1397:  BSF    0A.4
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1398:  BSF    03.6
1399:  CLRF   24
139A:  MOVLW  3F
139B:  MOVWF  23
139C:  CLRF   25
139D:  BCF    0A.4
139E:  BCF    03.6
139F:  CALL   728
13A0:  BSF    0A.4
....................             rtos_enable(Task_checkIfMenuButtonIsHeld); 
13A1:  BCF    29.7
....................             break; 
13A2:  GOTO   705
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(BUTTON_START_STOP_RESET) && input(BUTTON_MENU)) { 
13A3:  BSF    03.5
13A4:  BSF    06.1
13A5:  BCF    03.5
13A6:  BTFSS  06.1
13A7:  GOTO   3AF
13A8:  BSF    03.5
13A9:  BSF    06.0
13AA:  BCF    03.5
13AB:  BTFSS  06.0
13AC:  GOTO   3AF
....................                 myPolyoneDisplay.currentState = nextStateAfterWaitingForButtonBeingReleased; 
13AD:  MOVF   61,W
13AE:  MOVWF  5C
....................             } 
....................             break; 
13AF:  GOTO   705
....................  
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
13B0:  BSF    03.6
13B1:  CLRF   24
13B2:  MOVLW  3F
13B3:  MOVWF  23
13B4:  CLRF   25
13B5:  BCF    0A.4
13B6:  BCF    03.6
13B7:  CALL   728
13B8:  BSF    0A.4
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
13B9:  BSF    03.5
13BA:  BSF    06.1
13BB:  BCF    03.5
13BC:  BTFSS  06.1
13BD:  GOTO   3F6
13BE:  BTFSC  3E.3
13BF:  GOTO   3F6
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
13C0:  BSF    03.6
13C1:  CLRF   24
13C2:  MOVLW  3F
13C3:  MOVWF  23
13C4:  MOVLW  02
13C5:  MOVWF  25
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
13E8:  CLRF   24
13E9:  MOVLW  3F
13EA:  MOVWF  23
13EB:  BCF    0A.4
13EC:  BSF    0A.3
13ED:  BCF    03.6
13EE:  CALL   000
13EF:  BSF    0A.4
13F0:  BCF    0A.3
....................                 Time_clearRtcTime(); 
13F1:  BCF    0A.4
13F2:  BSF    0A.3
13F3:  CALL   053
13F4:  BSF    0A.4
13F5:  BCF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
13F6:  BTFSC  3E.2
13F7:  GOTO   3FD
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
13F8:  BSF    3E.2
....................                 myPolyoneDisplay.currentState = STATE_SETTING_FIRST_NUMBER; 
13F9:  MOVLW  06
13FA:  MOVWF  5C
....................                 rtos_enable(Task_blinkDisplay); 
13FB:  BCF    37.7
....................                 rtos_disable(Task_checkIfMenuButtonIsHeld); 
13FC:  BSF    29.7
....................             } 
....................             break; 
13FD:  GOTO   705
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             if (showDisplayCompletely) { 
13FE:  BTFSS  3E.0
13FF:  GOTO   40B
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1400:  BSF    03.6
1401:  CLRF   24
1402:  MOVLW  3F
1403:  MOVWF  23
1404:  BCF    0A.4
1405:  BSF    0A.3
1406:  BCF    03.6
1407:  CALL   070
1408:  BSF    0A.4
1409:  BCF    0A.3
....................             } else { 
140A:  GOTO   4E6
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
140B:  BSF    03.6
140C:  CLRF   24
140D:  MOVLW  3F
140E:  MOVWF  23
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
14E7:  BSF    03.5
14E8:  BCF    03.6
14E9:  BSF    06.1
14EA:  BCF    03.5
14EB:  BTFSC  06.1
14EC:  GOTO   572
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
14ED:  BSF    03.5
14EE:  BSF    06.1
14EF:  BCF    03.5
14F0:  BTFSC  06.1
14F1:  GOTO   572
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
14F2:  BSF    03.6
14F3:  CLRF   24
14F4:  MOVLW  3F
14F5:  MOVWF  23
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1559:  CLRF   24
155A:  MOVLW  3F
155B:  MOVWF  23
155C:  BCF    0A.4
155D:  BSF    0A.3
155E:  BCF    03.6
155F:  CALL   070
1560:  BSF    0A.4
1561:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1562:  MOVLW  02
1563:  BSF    03.6
1564:  MOVWF  23
1565:  MOVLW  96
1566:  MOVWF  24
1567:  BCF    0A.4
1568:  BSF    0A.3
1569:  BCF    03.6
156A:  CALL   05C
156B:  BSF    0A.4
156C:  BCF    0A.3
156D:  BSF    03.6
156E:  DECFSZ 23,F
156F:  GOTO   565
1570:  BCF    03.6
1571:  GOTO   4ED
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
1572:  BTFSC  3E.4
1573:  GOTO   579
1574:  BSF    03.5
1575:  BSF    06.0
1576:  BCF    03.5
1577:  BTFSC  06.0
....................                 numberOfMenuButtonHasBeenReleased++; 
1578:  INCF   62,F
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1579:  MOVF   62,W
157A:  SUBLW  01
157B:  BTFSC  03.0
157C:  GOTO   580
....................                 numberOfMenuButtonHasBeenReleased = 0; 
157D:  CLRF   62
....................                 myPolyoneDisplay.currentState = STATE_SETTING_SECOND_NUMBER; 
157E:  MOVLW  07
157F:  MOVWF  5C
....................             } 
....................  
....................             break; 
1580:  GOTO   705
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
1581:  BTFSS  3E.0
1582:  GOTO   58E
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1583:  BSF    03.6
1584:  CLRF   24
1585:  MOVLW  3F
1586:  MOVWF  23
1587:  BCF    0A.4
1588:  BSF    0A.3
1589:  BCF    03.6
158A:  CALL   070
158B:  BSF    0A.4
158C:  BCF    0A.3
....................             } else { 
158D:  GOTO   66D
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
158E:  BSF    03.6
158F:  CLRF   24
1590:  MOVLW  3F
1591:  MOVWF  23
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
166E:  BSF    03.5
166F:  BCF    03.6
1670:  BSF    06.1
1671:  BCF    03.5
1672:  BTFSC  06.1
1673:  GOTO   6FB
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
1674:  BSF    03.5
1675:  BSF    06.1
1676:  BCF    03.5
1677:  BTFSC  06.1
1678:  GOTO   6FB
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1679:  BSF    03.6
167A:  CLRF   24
167B:  MOVLW  3F
167C:  MOVWF  23
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
16E1:  BSF    03.6
16E2:  CLRF   24
16E3:  MOVLW  3F
16E4:  MOVWF  23
16E5:  BCF    0A.4
16E6:  BSF    0A.3
16E7:  BCF    03.6
16E8:  CALL   070
16E9:  BSF    0A.4
16EA:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
16EB:  MOVLW  02
16EC:  BSF    03.6
16ED:  MOVWF  23
16EE:  MOVLW  96
16EF:  MOVWF  24
16F0:  BCF    0A.4
16F1:  BSF    0A.3
16F2:  BCF    03.6
16F3:  CALL   05C
16F4:  BSF    0A.4
16F5:  BCF    0A.3
16F6:  BSF    03.6
16F7:  DECFSZ 23,F
16F8:  GOTO   6EE
16F9:  BCF    03.6
16FA:  GOTO   674
....................                 } 
....................             } 
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
16FB:  BTFSC  3E.4
16FC:  GOTO   704
16FD:  BSF    03.5
16FE:  BSF    06.0
16FF:  BCF    03.5
1700:  BTFSS  06.0
1701:  GOTO   704
....................                 myPolyoneDisplay.currentState = STATE_SETTING_FORMAT; 
1702:  MOVLW  08
1703:  MOVWF  5C
....................             } 
....................             break; 
1704:  GOTO   705
....................  
....................         case STATE_SETTING_FORMAT: 
.................... //            PolyoneDisplay_showFormat(&myPolyoneDisplay); 
.................... //            if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
.................... //                PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
.................... //            } 
.................... //            if (!menuButtonState && input(BUTTON_MENU)) { 
.................... //                myPolyoneDisplay.currentState = STATE_READY; 
.................... //            } 
....................             break; 
....................  
....................     } 
....................     startStopButtonState = input(BUTTON_START_STOP_RESET); 
1705:  BSF    03.5
1706:  BSF    06.1
1707:  BCF    03.5
1708:  BCF    3E.3
1709:  BTFSC  06.1
170A:  BSF    3E.3
....................     menuButtonState = input(BUTTON_MENU); 
170B:  BSF    03.5
170C:  BSF    06.0
170D:  BCF    03.5
170E:  BCF    3E.4
170F:  BTFSC  06.0
1710:  BSF    3E.4
....................     rtos_yield(); 
1711:  MOVLW  18
1712:  MOVWF  35
1713:  MOVLW  17
1714:  MOVWF  36
1715:  BSF    0A.3
1716:  BCF    0A.4
1717:  GOTO   274
1718:  MOVLW  00
1719:  MOVWF  35
171A:  MOVLW  10
171B:  MOVWF  36
171C:  BSF    0A.3
171D:  BCF    0A.4
171E:  GOTO   274
171F:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
0971:  BSF    03.5
0972:  BSF    06.1
0973:  BCF    03.5
0974:  BTFSC  06.1
0975:  GOTO   178
....................         nextUpButtonCounter++; 
0976:  INCF   63,F
....................     } else { 
0977:  GOTO   17A
....................         nextUpButtonCounter = 0; 
0978:  CLRF   63
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0979:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
097A:  MOVF   63,W
097B:  SUBLW  13
097C:  BTFSC  03.0
097D:  GOTO   180
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
097E:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
097F:  CLRF   63
....................     } 
....................     rtos_yield(); 
0980:  MOVLW  87
0981:  MOVWF  27
0982:  MOVLW  09
0983:  MOVWF  28
0984:  BSF    0A.3
0985:  BCF    0A.4
0986:  GOTO   274
0987:  MOVLW  71
0988:  MOVWF  27
0989:  MOVLW  09
098A:  MOVWF  28
098B:  BSF    0A.3
098C:  BCF    0A.4
098D:  GOTO   274
098E:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(BUTTON_MENU)) { 
098F:  BSF    03.5
0990:  BSF    06.0
0991:  BCF    03.5
0992:  BTFSC  06.0
0993:  GOTO   196
....................         menuButtonCounter++; 
0994:  INCF   64,F
....................     } else { 
0995:  GOTO   198
....................         menuButtonCounter = 0; 
0996:  CLRF   64
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0997:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0998:  MOVF   64,W
0999:  SUBLW  0C
099A:  BTFSC  03.0
099B:  GOTO   19E
....................         buttonStateMenu = BUTTON_STATE_HELD; 
099C:  BCF    3E.2
....................         menuButtonCounter = 0; 
099D:  CLRF   64
....................     } 
....................     rtos_yield(); 
099E:  MOVLW  A5
099F:  MOVWF  2E
09A0:  MOVLW  09
09A1:  MOVWF  2F
09A2:  BSF    0A.3
09A3:  BCF    0A.4
09A4:  GOTO   274
09A5:  MOVLW  8F
09A6:  MOVWF  2E
09A7:  MOVLW  09
09A8:  MOVWF  2F
09A9:  BSF    0A.3
09AA:  BCF    0A.4
09AB:  GOTO   274
09AC:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
09AD:  MOVLW  01
09AE:  XORWF  3E,F
....................     rtos_yield(); 
09AF:  MOVLW  B6
09B0:  MOVWF  3C
09B1:  MOVLW  09
09B2:  MOVWF  3D
09B3:  BSF    0A.3
09B4:  BCF    0A.4
09B5:  GOTO   274
09B6:  MOVLW  AD
09B7:  MOVWF  3C
09B8:  MOVLW  09
09B9:  MOVWF  3D
09BA:  BSF    0A.3
09BB:  BCF    0A.4
09BC:  GOTO   274
09BD:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
09BE:  MOVLW  00
09BF:  MOVWF  78
09C0:  IORLW  06
09C1:  MOVWF  12
09C2:  MOVLW  FF
09C3:  BSF    03.5
09C4:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
09C5:  BCF    03.5
09C6:  BCF    20.2
09C7:  MOVF   20,W
09C8:  BSF    03.5
09C9:  MOVWF  07
09CA:  BCF    03.5
09CB:  BCF    07.2
09CC:  MOVLW  0E
09CD:  MOVWF  17
09CE:  BSF    03.5
09CF:  CLRF   1B
09D0:  CLRF   1C
09D1:  MOVLW  01
09D2:  MOVWF  1D
....................  
....................     delay_ms(500); 
09D3:  MOVLW  02
09D4:  BCF    03.5
09D5:  MOVWF  65
09D6:  MOVLW  FA
09D7:  BSF    03.6
09D8:  MOVWF  24
09D9:  BCF    03.6
09DA:  CALL   05C
09DB:  DECFSZ 65,F
09DC:  GOTO   1D6
....................     port_b_pullups(0xFF); 
09DD:  MOVLW  FF
09DE:  BSF    03.5
09DF:  MOVWF  15
09E0:  BCF    01.7
....................     WPUB = 0xFF; 
09E1:  MOVWF  15
09E2:  BCF    03.5
09E3:  BSF    0A.3
09E4:  BCF    0A.4
09E5:  GOTO   205 (RETURN)
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
