CCS PCM C Compiler, Version 5.015, 5967               09-Nov-17 13:53

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   6172 words (75%)
                           Largest free fragment is 1883
               RAM used:   71 (19%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (2 in main + 6 for interrupts)
               Stack size: 8

*
0000:  MOVLW  18
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  0A
0028:  RETLW  22
0029:  RETLW  3A
002A:  RETLW  52
002B:  RETLW  6A
002C:  RETLW  82
002D:  RETLW  9A
002E:  RETLW  B2
002F:  RETLW  CA
0030:  RETLW  FF
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  22
0036:  RETLW  00
0037:  RETLW  29
0038:  RETLW  00
0039:  RETLW  30
003A:  RETLW  00
003B:  RETLW  37
003C:  RETLW  00
003D:  BSF    03.5
003E:  BSF    03.6
003F:  MOVF   29,W
0040:  CLRF   78
0041:  SUBWF  28,W
0042:  BTFSC  03.0
0043:  GOTO   047
0044:  MOVF   28,W
0045:  MOVWF  77
0046:  GOTO   053
0047:  CLRF   77
0048:  MOVLW  08
0049:  MOVWF  2A
004A:  RLF    28,F
004B:  RLF    77,F
004C:  MOVF   29,W
004D:  SUBWF  77,W
004E:  BTFSC  03.0
004F:  MOVWF  77
0050:  RLF    78,F
0051:  DECFSZ 2A,F
0052:  GOTO   04A
0053:  BCF    03.5
0054:  BCF    03.6
0055:  RETURN
0056:  CLRF   77
0057:  CLRF   78
0058:  BSF    03.5
0059:  BSF    03.6
005A:  MOVF   26,W
005B:  BCF    03.0
005C:  BTFSC  27.0
005D:  ADDWF  77,F
005E:  RRF    77,F
005F:  RRF    78,F
0060:  BTFSC  27.1
0061:  ADDWF  77,F
0062:  RRF    77,F
0063:  RRF    78,F
0064:  BTFSC  27.2
0065:  ADDWF  77,F
0066:  RRF    77,F
0067:  RRF    78,F
0068:  BTFSC  27.3
0069:  ADDWF  77,F
006A:  RRF    77,F
006B:  RRF    78,F
006C:  BTFSC  27.4
006D:  ADDWF  77,F
006E:  RRF    77,F
006F:  RRF    78,F
0070:  BTFSC  27.5
0071:  ADDWF  77,F
0072:  RRF    77,F
0073:  RRF    78,F
0074:  BTFSC  27.6
0075:  ADDWF  77,F
0076:  RRF    77,F
0077:  RRF    78,F
0078:  BTFSC  27.7
0079:  ADDWF  77,F
007A:  RRF    77,F
007B:  RRF    78,F
007C:  BCF    03.5
007D:  BCF    03.6
007E:  RETURN
*
0192:  MOVLW  20
0193:  BSF    03.5
0194:  BSF    03.6
0195:  MOVWF  32
0196:  CLRF   2E
0197:  CLRF   2F
0198:  CLRF   30
0199:  CLRF   31
019A:  MOVF   29,W
019B:  MOVWF  7A
019C:  MOVF   28,W
019D:  MOVWF  79
019E:  MOVF   27,W
019F:  MOVWF  78
01A0:  MOVF   26,W
01A1:  MOVWF  77
01A2:  BCF    03.0
01A3:  BTFSS  77.0
01A4:  GOTO   1B3
01A5:  MOVF   2A,W
01A6:  ADDWF  2E,F
01A7:  MOVF   2B,W
01A8:  BTFSC  03.0
01A9:  INCFSZ 2B,W
01AA:  ADDWF  2F,F
01AB:  MOVF   2C,W
01AC:  BTFSC  03.0
01AD:  INCFSZ 2C,W
01AE:  ADDWF  30,F
01AF:  MOVF   2D,W
01B0:  BTFSC  03.0
01B1:  INCFSZ 2D,W
01B2:  ADDWF  31,F
01B3:  RRF    31,F
01B4:  RRF    30,F
01B5:  RRF    2F,F
01B6:  RRF    2E,F
01B7:  RRF    7A,F
01B8:  RRF    79,F
01B9:  RRF    78,F
01BA:  RRF    77,F
01BB:  DECFSZ 32,F
01BC:  GOTO   1A2
01BD:  BCF    03.5
01BE:  BCF    03.6
01BF:  RETURN
*
025E:  BTFSC  03.1
025F:  GOTO   263
0260:  MOVLW  AA
0261:  MOVWF  04
0262:  BSF    03.7
0263:  BSF    03.5
0264:  BSF    03.6
0265:  MOVF   25,W
0266:  XORWF  29,W
0267:  ANDLW  80
0268:  MOVWF  2F
0269:  BTFSS  25.7
026A:  GOTO   276
026B:  COMF   22,F
026C:  COMF   23,F
026D:  COMF   24,F
026E:  COMF   25,F
026F:  INCF   22,F
0270:  BTFSC  03.2
0271:  INCF   23,F
0272:  BTFSC  03.2
0273:  INCF   24,F
0274:  BTFSC  03.2
0275:  INCF   25,F
0276:  BTFSS  29.7
0277:  GOTO   283
0278:  COMF   26,F
0279:  COMF   27,F
027A:  COMF   28,F
027B:  COMF   29,F
027C:  INCF   26,F
027D:  BTFSC  03.2
027E:  INCF   27,F
027F:  BTFSC  03.2
0280:  INCF   28,F
0281:  BTFSC  03.2
0282:  INCF   29,F
0283:  CLRF   77
0284:  CLRF   78
0285:  CLRF   79
0286:  CLRF   7A
0287:  CLRF   2A
0288:  CLRF   2B
0289:  CLRF   2C
028A:  CLRF   2D
028B:  MOVF   29,W
028C:  IORWF  28,W
028D:  IORWF  27,W
028E:  IORWF  26,W
028F:  BTFSC  03.2
0290:  GOTO   2C1
0291:  MOVLW  20
0292:  MOVWF  2E
0293:  BCF    03.0
0294:  RLF    22,F
0295:  RLF    23,F
0296:  RLF    24,F
0297:  RLF    25,F
0298:  RLF    2A,F
0299:  RLF    2B,F
029A:  RLF    2C,F
029B:  RLF    2D,F
029C:  MOVF   29,W
029D:  SUBWF  2D,W
029E:  BTFSS  03.2
029F:  GOTO   2AA
02A0:  MOVF   28,W
02A1:  SUBWF  2C,W
02A2:  BTFSS  03.2
02A3:  GOTO   2AA
02A4:  MOVF   27,W
02A5:  SUBWF  2B,W
02A6:  BTFSS  03.2
02A7:  GOTO   2AA
02A8:  MOVF   26,W
02A9:  SUBWF  2A,W
02AA:  BTFSS  03.0
02AB:  GOTO   2BB
02AC:  MOVF   26,W
02AD:  SUBWF  2A,F
02AE:  MOVF   27,W
02AF:  BTFSS  03.0
02B0:  INCFSZ 27,W
02B1:  SUBWF  2B,F
02B2:  MOVF   28,W
02B3:  BTFSS  03.0
02B4:  INCFSZ 28,W
02B5:  SUBWF  2C,F
02B6:  MOVF   29,W
02B7:  BTFSS  03.0
02B8:  INCFSZ 29,W
02B9:  SUBWF  2D,F
02BA:  BSF    03.0
02BB:  RLF    77,F
02BC:  RLF    78,F
02BD:  RLF    79,F
02BE:  RLF    7A,F
02BF:  DECFSZ 2E,F
02C0:  GOTO   293
02C1:  BTFSS  2F.7
02C2:  GOTO   2CE
02C3:  COMF   77,F
02C4:  COMF   78,F
02C5:  COMF   79,F
02C6:  COMF   7A,F
02C7:  INCF   77,F
02C8:  BTFSC  03.2
02C9:  INCF   78,F
02CA:  BTFSC  03.2
02CB:  INCF   79,F
02CC:  BTFSC  03.2
02CD:  INCF   7A,F
02CE:  MOVF   2A,W
02CF:  MOVWF  00
02D0:  INCF   04,F
02D1:  MOVF   2B,W
02D2:  MOVWF  00
02D3:  INCF   04,F
02D4:  MOVF   2C,W
02D5:  MOVWF  00
02D6:  INCF   04,F
02D7:  MOVF   2D,W
02D8:  MOVWF  00
02D9:  BCF    03.5
02DA:  BCF    03.6
02DB:  RETURN
*
0580:  CLRF   78
0581:  CLRF   79
0582:  CLRF   77
0583:  CLRF   7A
0584:  BSF    03.6
0585:  MOVF   47,W
0586:  BTFSS  03.2
0587:  GOTO   58B
0588:  MOVF   46,W
0589:  BTFSC  03.2
058A:  GOTO   5A5
058B:  MOVLW  10
058C:  MOVWF  48
058D:  BCF    03.0
058E:  RLF    44,F
058F:  RLF    45,F
0590:  RLF    77,F
0591:  RLF    7A,F
0592:  MOVF   47,W
0593:  SUBWF  7A,W
0594:  BTFSS  03.2
0595:  GOTO   598
0596:  MOVF   46,W
0597:  SUBWF  77,W
0598:  BTFSS  03.0
0599:  GOTO   5A1
059A:  MOVF   46,W
059B:  SUBWF  77,F
059C:  BTFSS  03.0
059D:  DECF   7A,F
059E:  MOVF   47,W
059F:  SUBWF  7A,F
05A0:  BSF    03.0
05A1:  RLF    78,F
05A2:  RLF    79,F
05A3:  DECFSZ 48,F
05A4:  GOTO   58D
05A5:  BCF    03.6
05A6:  RETURN
*
0F00:  BSF    0A.0
0F01:  BSF    0A.1
0F02:  BSF    0A.2
0F03:  ADDWF  02,F
0F04:  GOTO   51A
0F05:  GOTO   654
0F06:  GOTO   580
0F07:  GOTO   280
0F08:  GOTO   69C
0F09:  GOTO   6FD
0F0A:  GOTO   6FD
0F0B:  GOTO   6FD
0F0C:  GOTO   6FD
0F0D:  GOTO   6FD
0F0E:  GOTO   6E7
*
172C:  BSF    0A.0
172D:  BSF    0A.1
172E:  BSF    0A.2
172F:  ADDWF  02,F
1730:  GOTO   07E
1731:  GOTO   0B8
1732:  GOTO   24D
1733:  GOTO   427
1734:  GOTO   64B
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #device *=16 
.................... #use delay(clock=20M) 
*
07A7:  MOVLW  18
07A8:  MOVWF  04
07A9:  BSF    03.7
07AA:  MOVF   00,W
07AB:  BTFSC  03.2
07AC:  GOTO   7BA
07AD:  MOVLW  06
07AE:  MOVWF  78
07AF:  CLRF   77
07B0:  DECFSZ 77,F
07B1:  GOTO   7B0
07B2:  DECFSZ 78,F
07B3:  GOTO   7AF
07B4:  MOVLW  7B
07B5:  MOVWF  77
07B6:  DECFSZ 77,F
07B7:  GOTO   7B6
07B8:  DECFSZ 00,F
07B9:  GOTO   7AD
07BA:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
009F:  MOVLW  08
00A0:  MOVWF  78
00A1:  NOP
00A2:  BCF    07.3
00A3:  BCF    20.3
00A4:  MOVF   20,W
00A5:  BSF    03.5
00A6:  MOVWF  07
00A7:  NOP
00A8:  BCF    03.5
00A9:  BSF    03.6
00AA:  RLF    5A,F
00AB:  BCF    03.6
00AC:  BCF    07.4
00AD:  BTFSS  03.0
00AE:  GOTO   0B5
00AF:  BSF    20.4
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
00B3:  GOTO   0B9
00B4:  BCF    03.5
00B5:  BCF    20.4
00B6:  MOVF   20,W
00B7:  BSF    03.5
00B8:  MOVWF  07
00B9:  NOP
00BA:  BCF    03.5
00BB:  BSF    20.3
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
00BF:  BCF    03.5
00C0:  BTFSS  07.3
00C1:  GOTO   0C0
00C2:  DECFSZ 78,F
00C3:  GOTO   0A1
00C4:  NOP
00C5:  BCF    07.3
00C6:  BCF    20.3
00C7:  MOVF   20,W
00C8:  BSF    03.5
00C9:  MOVWF  07
00CA:  NOP
00CB:  BCF    03.5
00CC:  BSF    20.4
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  NOP
00D1:  NOP
00D2:  BCF    03.5
00D3:  BSF    20.3
00D4:  MOVF   20,W
00D5:  BSF    03.5
00D6:  MOVWF  07
00D7:  BCF    03.5
00D8:  BTFSS  07.3
00D9:  GOTO   0D8
00DA:  CLRF   78
00DB:  NOP
00DC:  BTFSC  07.4
00DD:  BSF    78.0
00DE:  BCF    07.3
00DF:  BCF    20.3
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BCF    07.4
00E5:  BCF    20.4
00E6:  MOVF   20,W
00E7:  BSF    03.5
00E8:  MOVWF  07
00E9:  BCF    03.5
00EA:  RETURN
*
0476:  MOVLW  08
0477:  BSF    03.6
0478:  MOVWF  5B
0479:  MOVF   77,W
047A:  MOVWF  5C
047B:  BCF    03.6
047C:  BSF    20.4
047D:  MOVF   20,W
047E:  BSF    03.5
047F:  MOVWF  07
0480:  NOP
0481:  BCF    03.5
0482:  BSF    20.3
0483:  MOVF   20,W
0484:  BSF    03.5
0485:  MOVWF  07
0486:  BCF    03.5
0487:  BTFSS  07.3
0488:  GOTO   487
0489:  BTFSC  07.4
048A:  BSF    03.0
048B:  BTFSS  07.4
048C:  BCF    03.0
048D:  RLF    78,F
048E:  NOP
048F:  BCF    20.3
0490:  MOVF   20,W
0491:  BSF    03.5
0492:  MOVWF  07
0493:  BCF    03.5
0494:  BCF    07.3
0495:  BSF    03.6
0496:  DECFSZ 5B,F
0497:  GOTO   47B
0498:  BCF    03.6
0499:  BSF    20.4
049A:  MOVF   20,W
049B:  BSF    03.5
049C:  MOVWF  07
049D:  NOP
049E:  BCF    03.5
049F:  BCF    07.4
04A0:  BSF    03.6
04A1:  MOVF   5C,W
04A2:  BTFSC  03.2
04A3:  GOTO   4AB
04A4:  BCF    03.6
04A5:  BCF    20.4
04A6:  MOVF   20,W
04A7:  BSF    03.5
04A8:  MOVWF  07
04A9:  BCF    03.5
04AA:  BSF    03.6
04AB:  NOP
04AC:  BCF    03.6
04AD:  BSF    20.3
04AE:  MOVF   20,W
04AF:  BSF    03.5
04B0:  MOVWF  07
04B1:  BCF    03.5
04B2:  BTFSS  07.3
04B3:  GOTO   4B2
04B4:  NOP
04B5:  BCF    07.3
04B6:  BCF    20.3
04B7:  MOVF   20,W
04B8:  BSF    03.5
04B9:  MOVWF  07
04BA:  NOP
04BB:  BCF    03.5
04BC:  BCF    07.4
04BD:  BCF    20.4
04BE:  MOVF   20,W
04BF:  BSF    03.5
04C0:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
04E1:  BSF    03.6
04E2:  MOVF   58,W
04E3:  ANDLW  0F
04E4:  MOVWF  59
04E5:  MOVF   58,W
04E6:  ANDLW  F0
04E7:  MOVWF  77
04E8:  SWAPF  77,F
04E9:  MOVLW  0F
04EA:  ANDWF  77,F
04EB:  MOVF   77,W
04EC:  MOVWF  5B
04ED:  BSF    03.5
04EE:  MOVWF  26
04EF:  MOVLW  0A
04F0:  MOVWF  27
04F1:  BCF    03.5
04F2:  BCF    03.6
04F3:  CALL   056
04F4:  MOVF   78,W
04F5:  BSF    03.6
04F6:  ADDWF  59,W
04F7:  MOVWF  78
04F8:  BCF    03.6
04F9:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
007F:  BSF    03.6
0080:  MOVF   56,W
0081:  BSF    03.5
0082:  MOVWF  28
0083:  MOVLW  0A
0084:  MOVWF  29
0085:  BCF    03.5
0086:  BCF    03.6
0087:  CALL   03D
0088:  SWAPF  78,W
0089:  MOVWF  77
008A:  MOVLW  F0
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  ANDLW  F0
008E:  BSF    03.6
008F:  MOVWF  57
0090:  MOVF   56,W
0091:  BSF    03.5
0092:  MOVWF  28
0093:  MOVLW  0A
0094:  MOVWF  29
0095:  BCF    03.5
0096:  BCF    03.6
0097:  CALL   03D
0098:  MOVF   77,W
0099:  ANDLW  0F
009A:  BSF    03.6
009B:  IORWF  57,W
009C:  MOVWF  78
009D:  BCF    03.6
009E:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
042F:  BSF    03.6
0430:  CLRF   59
....................     int value = 0; 
....................     I2C_start(); 
0431:  BCF    03.6
0432:  BSF    20.4
0433:  MOVF   20,W
0434:  BSF    03.5
0435:  MOVWF  07
0436:  NOP
0437:  BCF    03.5
0438:  BSF    20.3
0439:  MOVF   20,W
043A:  BSF    03.5
043B:  MOVWF  07
043C:  NOP
043D:  BCF    03.5
043E:  BCF    07.4
043F:  BCF    20.4
0440:  MOVF   20,W
0441:  BSF    03.5
0442:  MOVWF  07
0443:  NOP
0444:  BCF    03.5
0445:  BCF    07.3
0446:  BCF    20.3
0447:  MOVF   20,W
0448:  BSF    03.5
0449:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
044A:  MOVLW  D0
044B:  BCF    03.5
044C:  BSF    03.6
044D:  MOVWF  5A
044E:  BCF    03.6
044F:  CALL   09F
....................     I2C_write(address); 
0450:  BSF    03.6
0451:  MOVF   58,W
0452:  MOVWF  5A
0453:  BCF    03.6
0454:  CALL   09F
....................     I2C_start(); 
0455:  BSF    20.4
0456:  MOVF   20,W
0457:  BSF    03.5
0458:  MOVWF  07
0459:  NOP
045A:  BCF    03.5
045B:  BSF    20.3
045C:  MOVF   20,W
045D:  BSF    03.5
045E:  MOVWF  07
045F:  NOP
0460:  BCF    03.5
0461:  BTFSS  07.3
0462:  GOTO   461
0463:  BCF    07.4
0464:  BCF    20.4
0465:  MOVF   20,W
0466:  BSF    03.5
0467:  MOVWF  07
0468:  NOP
0469:  BCF    03.5
046A:  BCF    07.3
046B:  BCF    20.3
046C:  MOVF   20,W
046D:  BSF    03.5
046E:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
046F:  MOVLW  D1
0470:  BCF    03.5
0471:  BSF    03.6
0472:  MOVWF  5A
0473:  BCF    03.6
0474:  CALL   09F
....................     value = I2C_read(0); 
0475:  CLRF   77
*
04C1:  MOVF   78,W
04C2:  BCF    03.5
04C3:  BSF    03.6
04C4:  MOVWF  59
....................     I2C_stop(); 
04C5:  BCF    03.6
04C6:  BCF    20.4
04C7:  MOVF   20,W
04C8:  BSF    03.5
04C9:  MOVWF  07
04CA:  NOP
04CB:  BCF    03.5
04CC:  BSF    20.3
04CD:  MOVF   20,W
04CE:  BSF    03.5
04CF:  MOVWF  07
04D0:  BCF    03.5
04D1:  BTFSS  07.3
04D2:  GOTO   4D1
04D3:  NOP
04D4:  GOTO   4D5
04D5:  NOP
04D6:  BSF    20.4
04D7:  MOVF   20,W
04D8:  BSF    03.5
04D9:  MOVWF  07
04DA:  NOP
....................     return value; 
04DB:  BCF    03.5
04DC:  BSF    03.6
04DD:  MOVF   59,W
04DE:  MOVWF  78
04DF:  BCF    03.6
04E0:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
00EB:  BSF    20.4
00EC:  MOVF   20,W
00ED:  BSF    03.5
00EE:  MOVWF  07
00EF:  NOP
00F0:  BCF    03.5
00F1:  BSF    20.3
00F2:  MOVF   20,W
00F3:  BSF    03.5
00F4:  MOVWF  07
00F5:  NOP
00F6:  BCF    03.5
00F7:  BCF    07.4
00F8:  BCF    20.4
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
00FC:  NOP
00FD:  BCF    03.5
00FE:  BCF    07.3
00FF:  BCF    20.3
0100:  MOVF   20,W
0101:  BSF    03.5
0102:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
0103:  MOVLW  D0
0104:  BCF    03.5
0105:  BSF    03.6
0106:  MOVWF  5A
0107:  BCF    03.6
0108:  CALL   09F
....................     I2C_write(address); 
0109:  BSF    03.6
010A:  MOVF   57,W
010B:  MOVWF  5A
010C:  BCF    03.6
010D:  CALL   09F
....................     I2C_write(value); 
010E:  BSF    03.6
010F:  MOVF   58,W
0110:  MOVWF  5A
0111:  BCF    03.6
0112:  CALL   09F
....................     I2C_stop(); 
0113:  BCF    20.4
0114:  MOVF   20,W
0115:  BSF    03.5
0116:  MOVWF  07
0117:  NOP
0118:  BCF    03.5
0119:  BSF    20.3
011A:  MOVF   20,W
011B:  BSF    03.5
011C:  MOVWF  07
011D:  BCF    03.5
011E:  BTFSS  07.3
011F:  GOTO   11E
0120:  NOP
0121:  GOTO   122
0122:  NOP
0123:  BSF    20.4
0124:  MOVF   20,W
0125:  BSF    03.5
0126:  MOVWF  07
0127:  NOP
0128:  BCF    03.5
0129:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
04FE:  CLRF   58
04FF:  BCF    03.6
0500:  CALL   42F
0501:  MOVF   78,W
0502:  BSF    03.6
0503:  MOVWF  54
....................     sec = bcd_to_decimal(sec); 
0504:  MOVF   54,W
0505:  MOVWF  58
0506:  BCF    03.6
0507:  CALL   4E1
0508:  MOVF   78,W
0509:  BSF    03.6
050A:  MOVWF  54
....................     min = DS3231_Read(minuteREG); 
050B:  MOVLW  01
050C:  MOVWF  58
050D:  BCF    03.6
050E:  CALL   42F
050F:  MOVF   78,W
0510:  BSF    03.6
0511:  MOVWF  53
....................     min = bcd_to_decimal(min); 
0512:  MOVF   53,W
0513:  MOVWF  58
0514:  BCF    03.6
0515:  CALL   4E1
0516:  MOVF   78,W
0517:  BSF    03.6
0518:  MOVWF  53
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0519:  MOVLW  02
051A:  MOVWF  58
051B:  BCF    03.6
051C:  CALL   42F
051D:  MOVF   78,W
051E:  ANDLW  3F
051F:  BSF    03.6
0520:  MOVWF  52
....................     hora = bcd_to_decimal(hora); 
0521:  MOVF   52,W
0522:  MOVWF  58
0523:  BCF    03.6
0524:  CALL   4E1
0525:  MOVF   78,W
0526:  BSF    03.6
0527:  MOVWF  52
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
012A:  BSF    03.6
012B:  MOVF   55,W
012C:  MOVWF  56
012D:  BCF    03.6
012E:  CALL   07F
012F:  MOVF   78,W
0130:  BSF    03.6
0131:  MOVWF  56
0132:  CLRF   57
0133:  MOVF   56,W
0134:  MOVWF  58
0135:  BCF    03.6
0136:  CALL   0EB
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0137:  BSF    03.6
0138:  MOVF   54,W
0139:  MOVWF  56
013A:  BCF    03.6
013B:  CALL   07F
013C:  MOVF   78,W
013D:  BSF    03.6
013E:  MOVWF  56
013F:  MOVLW  01
0140:  MOVWF  57
0141:  MOVF   56,W
0142:  MOVWF  58
0143:  BCF    03.6
0144:  CALL   0EB
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0145:  BSF    03.6
0146:  MOVF   53,W
0147:  MOVWF  56
0148:  BCF    03.6
0149:  CALL   07F
014A:  MOVF   78,W
014B:  ANDLW  3F
014C:  BSF    03.6
014D:  MOVWF  56
014E:  MOVLW  02
014F:  MOVWF  57
0150:  MOVF   56,W
0151:  MOVWF  58
0152:  BCF    03.6
0153:  CALL   0EB
0154:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05AE:  CLRF   47
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05AF:  CLRF   47
05B0:  MOVF   46,W
05B1:  SUBWF  47,W
05B2:  BTFSC  03.0
05B3:  GOTO   5BD
....................         array[i] = 0; 
05B4:  MOVF   47,W
05B5:  ADDWF  44,W
05B6:  MOVWF  04
05B7:  BCF    03.7
05B8:  BTFSC  45.0
05B9:  BSF    03.7
05BA:  CLRF   00
05BB:  INCF   47,F
05BC:  GOTO   5B0
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05A7:  BSF    03.6
05A8:  MOVF   40,W
05A9:  MOVWF  45
05AA:  MOVF   3F,W
05AB:  MOVWF  44
05AC:  MOVF   41,W
05AD:  MOVWF  46
....................  
....................     int index = 0; 
*
05BD:  CLRF   42
....................     while (number > 0) { 
05BE:  MOVF   3D,F
05BF:  BTFSS  03.2
05C0:  GOTO   5C4
05C1:  MOVF   3E,F
05C2:  BTFSC  03.2
05C3:  GOTO   5E8
....................         int digit = number % 10; 
05C4:  MOVF   3E,W
05C5:  MOVWF  45
05C6:  MOVF   3D,W
05C7:  MOVWF  44
05C8:  CLRF   47
05C9:  MOVLW  0A
05CA:  MOVWF  46
05CB:  BCF    03.6
05CC:  CALL   580
05CD:  MOVF   77,W
05CE:  BSF    03.6
05CF:  MOVWF  43
....................         digits[index] = digit; 
05D0:  MOVF   42,W
05D1:  ADDWF  3F,W
05D2:  MOVWF  04
05D3:  BCF    03.7
05D4:  BTFSC  40.0
05D5:  BSF    03.7
05D6:  MOVF   43,W
05D7:  MOVWF  00
....................         index++; 
05D8:  INCF   42,F
....................         number /= 10; 
05D9:  MOVF   3E,W
05DA:  MOVWF  45
05DB:  MOVF   3D,W
05DC:  MOVWF  44
05DD:  CLRF   47
05DE:  MOVLW  0A
05DF:  MOVWF  46
05E0:  BCF    03.6
05E1:  CALL   580
05E2:  MOVF   79,W
05E3:  BSF    03.6
05E4:  MOVWF  3E
05E5:  MOVF   78,W
05E6:  MOVWF  3D
05E7:  GOTO   5BE
....................     } 
05E8:  BCF    03.6
05E9:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
0694:  BSF    03.5
0695:  BCF    03.6
0696:  BCF    05.1
0697:  BCF    03.5
0698:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
0699:  BSF    03.5
069A:  BCF    05.1
069B:  BCF    03.5
069C:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0657:  MOVLW  01
0658:  BSF    03.6
0659:  MOVWF  33
065A:  CLRF   34
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
065B:  BSF    03.5
065C:  BCF    03.6
065D:  BCF    05.3
065E:  BCF    03.5
065F:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
0660:  BSF    03.5
0661:  BCF    05.1
0662:  BCF    03.5
0663:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
0664:  BSF    03.6
0665:  CLRF   34
0666:  MOVF   32,W
0667:  SUBWF  34,W
0668:  BTFSC  03.0
0669:  GOTO   694
....................         int character = charactersArray[j]; 
066A:  MOVF   34,W
066B:  ADDWF  30,W
066C:  MOVWF  04
066D:  BCF    03.7
066E:  BTFSC  31.0
066F:  BSF    03.7
0670:  MOVF   00,W
0671:  MOVWF  35
....................  
....................         for (i = 1; i <= 8; i++) { 
0672:  MOVLW  01
0673:  MOVWF  33
0674:  MOVF   33,W
0675:  SUBLW  08
0676:  BTFSS  03.0
0677:  GOTO   692
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0678:  BTFSC  35.0
0679:  GOTO   67E
067A:  BCF    03.6
067B:  BCF    05.0
067C:  GOTO   680
067D:  BSF    03.6
067E:  BCF    03.6
067F:  BSF    05.0
0680:  BSF    03.5
0681:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
0682:  BCF    03.0
0683:  BCF    03.5
0684:  BSF    03.6
0685:  RRF    35,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
0686:  BSF    03.5
0687:  BCF    03.6
0688:  BCF    05.3
0689:  BCF    03.5
068A:  BSF    05.3
....................             output_low(PIN_CLOCK); 
068B:  BSF    03.5
068C:  BCF    05.3
068D:  BCF    03.5
068E:  BCF    05.3
068F:  BSF    03.6
0690:  INCF   33,F
0691:  GOTO   674
....................         } 
0692:  INCF   34,F
0693:  GOTO   666
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
069D:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06DD:  CLRF   33
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06DE:  CLRF   33
06DF:  MOVF   32,W
06E0:  SUBWF  33,W
06E1:  BTFSC  03.0
06E2:  GOTO   702
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06E3:  MOVF   33,W
06E4:  ADDWF  30,W
06E5:  MOVWF  78
06E6:  MOVF   31,W
06E7:  MOVWF  7A
06E8:  BTFSC  03.0
06E9:  INCF   7A,F
06EA:  MOVF   78,W
06EB:  MOVWF  34
06EC:  MOVF   7A,W
06ED:  MOVWF  35
06EE:  MOVF   33,W
06EF:  ADDWF  30,W
06F0:  MOVWF  04
06F1:  BCF    03.7
06F2:  BTFSC  31.0
06F3:  BSF    03.7
06F4:  MOVF   00,W
06F5:  BCF    03.6
06F6:  CALL   004
06F7:  MOVWF  78
06F8:  BSF    03.6
06F9:  MOVF   34,W
06FA:  MOVWF  04
06FB:  BCF    03.7
06FC:  BTFSC  35.0
06FD:  BSF    03.7
06FE:  MOVF   78,W
06FF:  MOVWF  00
0700:  INCF   33,F
0701:  GOTO   6DF
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06A8:  CLRF   33
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06A9:  CLRF   33
06AA:  MOVF   32,W
06AB:  SUBWF  33,W
06AC:  BTFSC  03.0
06AD:  GOTO   6D6
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06AE:  MOVF   33,W
06AF:  ADDWF  30,W
06B0:  MOVWF  78
06B1:  MOVF   31,W
06B2:  MOVWF  7A
06B3:  BTFSC  03.0
06B4:  INCF   7A,F
06B5:  MOVF   78,W
06B6:  MOVWF  34
06B7:  MOVF   7A,W
06B8:  MOVWF  35
06B9:  MOVF   33,W
06BA:  ADDWF  30,W
06BB:  MOVWF  04
06BC:  BCF    03.7
06BD:  BTFSC  31.0
06BE:  BSF    03.7
06BF:  MOVF   00,W
06C0:  BCF    03.6
06C1:  CALL   004
06C2:  MOVWF  78
06C3:  BSF    03.6
06C4:  MOVF   34,W
06C5:  MOVWF  04
06C6:  BCF    03.7
06C7:  BTFSC  35.0
06C8:  BSF    03.7
06C9:  MOVF   78,W
06CA:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06CB:  MOVF   33,W
06CC:  ADDWF  30,W
06CD:  MOVWF  04
06CE:  BCF    03.7
06CF:  BTFSC  31.0
06D0:  BSF    03.7
06D1:  MOVF   00,W
06D2:  IORLW  08
06D3:  MOVWF  00
06D4:  INCF   33,F
06D5:  GOTO   6AA
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
069E:  BSF    03.6
069F:  MOVF   2F,F
06A0:  BTFSC  03.2
06A1:  GOTO   6D7
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
06A2:  MOVF   2D,W
06A3:  MOVWF  31
06A4:  MOVF   2C,W
06A5:  MOVWF  30
06A6:  MOVF   2E,W
06A7:  MOVWF  32
....................     } else { 
*
06D6:  GOTO   702
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06D7:  MOVF   2D,W
06D8:  MOVWF  31
06D9:  MOVF   2C,W
06DA:  MOVWF  30
06DB:  MOVF   2E,W
06DC:  MOVWF  32
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
0702:  MOVF   2D,W
0703:  MOVWF  31
0704:  MOVF   2C,W
0705:  MOVWF  30
0706:  MOVF   2E,W
0707:  MOVWF  32
0708:  BCF    03.6
0709:  CALL   657
070A:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
0EA8:  BSF    03.6
0EA9:  CLRF   17
0EAA:  CLRF   18
0EAB:  CLRF   19
0EAC:  CLRF   1A
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0EAD:  MOVLW  01
0EAE:  MOVWF  17
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
0EAF:  MOVLW  09
0EB0:  MOVWF  18
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0EB1:  MOVLW  01
0EB2:  MOVWF  19
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0EB3:  MOVWF  1A
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
0EB4:  MOVWF  31
0EB5:  MOVLW  17
0EB6:  MOVWF  30
0EB7:  MOVLW  04
0EB8:  MOVWF  32
0EB9:  BCF    0A.3
0EBA:  BCF    03.6
0EBB:  CALL   657
0EBC:  BSF    0A.3
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     Format format; 
....................     int hour; 
....................     int minute; 
....................     int second; 
.................... //    char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
052E:  MOVF   55,W
052F:  MOVWF  59
....................     time.minute = minute; 
0530:  MOVF   56,W
0531:  MOVWF  5A
....................     time.second = second; 
0532:  MOVF   57,W
0533:  MOVWF  5B
....................     return time; 
0534:  MOVF   58,W
0535:  MOVWF  77
0536:  MOVF   59,W
0537:  MOVWF  78
0538:  MOVF   5A,W
0539:  MOVWF  79
053A:  MOVF   5B,W
053B:  MOVWF  7A
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
04FA:  BSF    03.6
04FB:  CLRF   52
04FC:  CLRF   53
04FD:  CLRF   54
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0528:  MOVF   52,W
0529:  MOVWF  55
052A:  MOVF   53,W
052B:  MOVWF  56
052C:  MOVF   54,W
052D:  MOVWF  57
*
053C:  MOVF   7A,W
053D:  MOVWF  51
053E:  MOVF   79,W
053F:  MOVWF  50
0540:  MOVF   78,W
0541:  MOVWF  4F
0542:  MOVF   77,W
0543:  MOVWF  4E
....................  
....................     return currentTime; 
0544:  MOVF   4E,W
0545:  MOVWF  77
0546:  MOVF   4F,W
0547:  MOVWF  78
0548:  MOVF   50,W
0549:  MOVWF  79
054A:  MOVF   51,W
054B:  MOVWF  7A
054C:  BCF    03.6
054D:  RETURN
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
.................... //    newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
.................... //    write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
05EA:  MOVLW  01
05EB:  BSF    03.6
05EC:  ADDWF  32,W
05ED:  MOVWF  04
05EE:  BCF    03.7
05EF:  BTFSC  33.0
05F0:  BSF    03.7
05F1:  MOVF   00,W
05F2:  MOVWF  3B
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
05F3:  MOVF   34,F
05F4:  BTFSC  03.2
05F5:  GOTO   61F
....................         if (timePtr->format == FORMAT_12) { 
05F6:  MOVF   32,W
05F7:  MOVWF  04
05F8:  BCF    03.7
05F9:  BTFSC  33.0
05FA:  BSF    03.7
05FB:  MOVF   00,W
05FC:  ANDLW  01
05FD:  SUBLW  01
05FE:  BTFSS  03.2
05FF:  GOTO   61F
....................             if (timePtr->hour == 0) { 
0600:  MOVLW  01
0601:  ADDWF  32,W
0602:  MOVWF  04
0603:  BCF    03.7
0604:  BTFSC  33.0
0605:  BSF    03.7
0606:  MOVF   00,F
0607:  BTFSS  03.2
0608:  GOTO   60C
....................                 hour = 12; 
0609:  MOVLW  0C
060A:  MOVWF  3B
....................             } else if (timePtr->hour > 12) { 
060B:  GOTO   61F
060C:  MOVLW  01
060D:  ADDWF  32,W
060E:  MOVWF  04
060F:  BCF    03.7
0610:  BTFSC  33.0
0611:  BSF    03.7
0612:  MOVF   00,W
0613:  SUBLW  0C
0614:  BTFSC  03.0
0615:  GOTO   61F
....................                 hour = timePtr->hour - 12; 
0616:  MOVLW  01
0617:  ADDWF  32,W
0618:  MOVWF  04
0619:  BCF    03.7
061A:  BTFSC  33.0
061B:  BSF    03.7
061C:  MOVLW  0C
061D:  SUBWF  00,W
061E:  MOVWF  3B
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             Array_getArraySize(newTimeInDigits.hour) 
....................             ); 
061F:  CLRF   3E
0620:  MOVF   3B,W
0621:  MOVWF  3D
0622:  MOVLW  01
0623:  MOVWF  40
0624:  MOVLW  35
0625:  MOVWF  3F
0626:  MOVLW  02
0627:  MOVWF  41
0628:  BCF    03.6
0629:  CALL   5A7
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             Array_getArraySize(newTimeInDigits.minute) 
....................             ); 
062A:  MOVLW  02
062B:  BSF    03.6
062C:  ADDWF  32,W
062D:  MOVWF  04
062E:  BCF    03.7
062F:  BTFSC  33.0
0630:  BSF    03.7
0631:  MOVF   00,W
0632:  MOVWF  3C
0633:  CLRF   3E
0634:  MOVF   3C,W
0635:  MOVWF  3D
0636:  MOVLW  01
0637:  MOVWF  40
0638:  MOVLW  37
0639:  MOVWF  3F
063A:  MOVLW  02
063B:  MOVWF  41
063C:  BCF    03.6
063D:  CALL   5A7
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             Array_getArraySize(newTimeInDigits.second) 
....................             ); 
063E:  MOVLW  03
063F:  BSF    03.6
0640:  ADDWF  32,W
0641:  MOVWF  04
0642:  BCF    03.7
0643:  BTFSC  33.0
0644:  BSF    03.7
0645:  MOVF   00,W
0646:  MOVWF  3C
0647:  CLRF   3E
0648:  MOVF   3C,W
0649:  MOVWF  3D
064A:  MOVLW  01
064B:  MOVWF  40
064C:  MOVLW  39
064D:  MOVWF  3F
064E:  MOVLW  02
064F:  MOVWF  41
0650:  BCF    03.6
0651:  CALL   5A7
....................  
....................     return newTimeInDigits; 
0652:  MOVLW  35
0653:  MOVWF  78
0654:  MOVLW  01
0655:  MOVWF  79
0656:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
0DD6:  MOVLW  01
0DD7:  ADDWF  1F,W
0DD8:  MOVWF  04
0DD9:  BCF    03.7
0DDA:  BTFSC  20.0
0DDB:  BSF    03.7
0DDC:  MOVF   00,F
0DDD:  BTFSS  03.2
0DDE:  GOTO   5F1
0DDF:  MOVLW  02
0DE0:  ADDWF  1F,W
0DE1:  MOVWF  04
0DE2:  BCF    03.7
0DE3:  BTFSC  20.0
0DE4:  BSF    03.7
0DE5:  MOVF   00,F
0DE6:  BTFSS  03.2
0DE7:  GOTO   5F1
0DE8:  MOVLW  03
0DE9:  ADDWF  1F,W
0DEA:  MOVWF  04
0DEB:  BCF    03.7
0DEC:  BTFSC  20.0
0DED:  BSF    03.7
0DEE:  MOVF   00,F
0DEF:  BTFSC  03.2
0DF0:  GOTO   5F3
0DF1:  MOVLW  00
0DF2:  GOTO   5F4
0DF3:  MOVLW  01
0DF4:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
0171:  MOVLW  01
0172:  ADDWF  4E,W
0173:  MOVWF  04
0174:  BCF    03.7
0175:  BTFSC  4F.0
0176:  BSF    03.7
0177:  MOVF   00,W
0178:  MOVWF  50
0179:  MOVLW  02
017A:  ADDWF  4E,W
017B:  MOVWF  04
017C:  BCF    03.7
017D:  BTFSC  4F.0
017E:  BSF    03.7
017F:  MOVF   00,W
0180:  MOVWF  51
0181:  MOVLW  03
0182:  ADDWF  4E,W
0183:  MOVWF  04
0184:  BCF    03.7
0185:  BTFSC  4F.0
0186:  BSF    03.7
0187:  MOVF   00,W
0188:  MOVWF  52
0189:  MOVF   50,W
018A:  MOVWF  53
018B:  MOVF   51,W
018C:  MOVWF  54
018D:  MOVF   52,W
018E:  MOVWF  55
018F:  BCF    03.6
0190:  CALL   12A
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01C0:  MOVLW  01
01C1:  BSF    03.5
01C2:  BSF    03.6
01C3:  ADDWF  12,W
01C4:  MOVWF  04
01C5:  BCF    03.7
01C6:  BTFSC  13.0
01C7:  BSF    03.7
01C8:  MOVF   00,W
01C9:  CLRF   23
01CA:  CLRF   22
01CB:  CLRF   21
01CC:  MOVWF  20
01CD:  CLRF   25
01CE:  MOVF   04,W
01CF:  MOVWF  24
01D0:  BCF    25.0
01D1:  BTFSC  03.7
01D2:  BSF    25.0
01D3:  MOVF   23,W
01D4:  MOVWF  29
01D5:  MOVF   22,W
01D6:  MOVWF  28
01D7:  MOVF   21,W
01D8:  MOVWF  27
01D9:  MOVF   20,W
01DA:  MOVWF  26
01DB:  CLRF   2D
01DC:  CLRF   2C
01DD:  MOVLW  0E
01DE:  MOVWF  2B
01DF:  MOVLW  10
01E0:  MOVWF  2A
01E1:  BCF    03.5
01E2:  BCF    03.6
01E3:  CALL   192
01E4:  BSF    03.5
01E5:  BSF    03.6
01E6:  MOVF   24,W
01E7:  MOVWF  04
01E8:  BCF    03.7
01E9:  BTFSC  25.0
01EA:  BSF    03.7
01EB:  MOVF   7A,W
01EC:  MOVWF  17
01ED:  MOVF   79,W
01EE:  MOVWF  16
01EF:  MOVF   78,W
01F0:  MOVWF  15
01F1:  MOVF   77,W
01F2:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01F3:  MOVLW  02
01F4:  ADDWF  12,W
01F5:  MOVWF  04
01F6:  BCF    03.7
01F7:  BTFSC  13.0
01F8:  BSF    03.7
01F9:  MOVF   00,W
01FA:  CLRF   23
01FB:  CLRF   22
01FC:  CLRF   21
01FD:  MOVWF  20
01FE:  CLRF   25
01FF:  MOVF   04,W
0200:  MOVWF  24
0201:  BCF    25.0
0202:  BTFSC  03.7
0203:  BSF    25.0
0204:  MOVF   23,W
0205:  MOVWF  29
0206:  MOVF   22,W
0207:  MOVWF  28
0208:  MOVF   21,W
0209:  MOVWF  27
020A:  MOVF   20,W
020B:  MOVWF  26
020C:  CLRF   2D
020D:  CLRF   2C
020E:  CLRF   2B
020F:  MOVLW  3C
0210:  MOVWF  2A
0211:  BCF    03.5
0212:  BCF    03.6
0213:  CALL   192
0214:  BSF    03.5
0215:  BSF    03.6
0216:  MOVF   24,W
0217:  MOVWF  04
0218:  BCF    03.7
0219:  BTFSC  25.0
021A:  BSF    03.7
021B:  MOVF   7A,W
021C:  MOVWF  1B
021D:  MOVF   79,W
021E:  MOVWF  1A
021F:  MOVF   78,W
0220:  MOVWF  19
0221:  MOVF   77,W
0222:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0223:  MOVF   18,W
0224:  ADDWF  14,W
0225:  MOVWF  20
0226:  MOVF   15,W
0227:  MOVWF  21
0228:  MOVF   19,W
0229:  BTFSC  03.0
022A:  INCFSZ 19,W
022B:  ADDWF  21,F
022C:  MOVF   16,W
022D:  MOVWF  22
022E:  MOVF   1A,W
022F:  BTFSC  03.0
0230:  INCFSZ 1A,W
0231:  ADDWF  22,F
0232:  MOVF   17,W
0233:  MOVWF  23
0234:  MOVF   1B,W
0235:  BTFSC  03.0
0236:  INCFSZ 1B,W
0237:  ADDWF  23,F
0238:  MOVLW  03
0239:  ADDWF  12,W
023A:  MOVWF  04
023B:  BCF    03.7
023C:  BTFSC  13.0
023D:  BSF    03.7
023E:  MOVF   00,W
023F:  ADDWF  20,W
0240:  MOVWF  1C
0241:  MOVF   21,W
0242:  MOVWF  1D
0243:  MOVLW  00
0244:  BTFSC  03.0
0245:  MOVLW  01
0246:  ADDWF  1D,F
0247:  MOVF   22,W
0248:  MOVWF  1E
0249:  MOVLW  00
024A:  BTFSC  03.0
024B:  MOVLW  01
024C:  ADDWF  1E,F
024D:  MOVF   23,W
024E:  MOVWF  1F
024F:  MOVLW  00
0250:  BTFSC  03.0
0251:  MOVLW  01
0252:  ADDWF  1F,F
....................  
....................     return seconds; 
0253:  MOVF   1C,W
0254:  MOVWF  77
0255:  MOVF   1D,W
0256:  MOVWF  78
0257:  MOVF   1E,W
0258:  MOVWF  79
0259:  MOVF   1F,W
025A:  MOVWF  7A
025B:  BCF    03.5
025C:  BCF    03.6
025D:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07E6:  BSF    03.6
07E7:  CLRF   53
07E8:  CLRF   54
07E9:  CLRF   55
07EA:  BCF    03.6
07EB:  CALL   12A
07EC:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... void Time_showHoursMinutesRtc(BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
081B:  CLRF   1B
081C:  CLRF   1C
081D:  CLRF   1D
081E:  CLRF   1E
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
081F:  BCF    0A.3
0820:  BCF    03.6
0821:  CALL   4FA
0822:  BSF    0A.3
0823:  MOVF   7A,W
0824:  BSF    03.6
0825:  MOVWF  28
0826:  MOVF   79,W
0827:  MOVWF  27
0828:  MOVF   78,W
0829:  MOVWF  26
082A:  MOVF   77,W
082B:  MOVWF  25
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
082C:  MOVLW  01
082D:  MOVWF  33
082E:  MOVLW  25
082F:  MOVWF  32
0830:  CLRF   34
0831:  BCF    0A.3
0832:  BCF    03.6
0833:  CALL   5EA
0834:  BSF    0A.3
0835:  MOVF   79,W
0836:  MOVWF  7A
0837:  MOVF   78,W
0838:  BSF    03.6
0839:  MOVWF  29
083A:  MOVF   7A,W
083B:  MOVWF  2A
083C:  MOVLW  01
083D:  MOVWF  2C
083E:  MOVLW  1F
083F:  MOVWF  2B
0840:  MOVLW  06
0841:  MOVWF  78
0842:  MOVF   29,W
0843:  MOVWF  04
0844:  BCF    03.7
0845:  BTFSC  2A.0
0846:  BSF    03.7
0847:  MOVF   00,W
0848:  MOVWF  77
0849:  MOVF   2B,W
084A:  MOVWF  04
084B:  BCF    03.7
084C:  BTFSC  2C.0
084D:  BSF    03.7
084E:  MOVF   77,W
084F:  MOVWF  00
0850:  INCF   2B,F
0851:  BTFSC  03.2
0852:  INCF   2C,F
0853:  INCF   29,F
0854:  BTFSC  03.2
0855:  INCF   2A,F
0856:  DECFSZ 78,F
0857:  GOTO   042
....................     timeToSend[0] = timeInDigits.minute[0]; 
0858:  MOVF   21,W
0859:  MOVWF  1B
....................     timeToSend[1] = timeInDigits.minute[1]; 
085A:  MOVF   22,W
085B:  MOVWF  1C
....................     timeToSend[2] = timeInDigits.hour[0]; 
085C:  MOVF   1F,W
085D:  MOVWF  1D
....................     timeToSend[3] = timeInDigits.hour[1]; 
085E:  MOVF   20,W
085F:  MOVWF  1E
....................  
....................     if (blink) { 
0860:  MOVF   1A,F
0861:  BTFSC  03.2
0862:  GOTO   067
....................         blink = currentTime.second % 2; 
0863:  MOVF   28,W
0864:  ANDLW  01
0865:  MOVWF  1A
....................     } else { 
0866:  GOTO   069
....................         blink = TRUE; 
0867:  MOVLW  01
0868:  MOVWF  1A
....................     } 
....................      
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
0869:  MOVLW  01
086A:  MOVWF  2D
086B:  MOVLW  1B
086C:  MOVWF  2C
086D:  MOVLW  04
086E:  MOVWF  2E
086F:  MOVF   1A,W
0870:  MOVWF  2F
0871:  BCF    0A.3
0872:  BCF    03.6
0873:  CALL   69E
0874:  BSF    0A.3
.................... } 
....................  
.................... void Time_showMinutesSecondsRtc(void) { 
....................     int timeToSend[4] = {0}; 
*
0881:  CLRF   1A
0882:  CLRF   1B
0883:  CLRF   1C
0884:  CLRF   1D
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0885:  BCF    0A.3
0886:  BCF    03.6
0887:  CALL   4FA
0888:  BSF    0A.3
0889:  MOVF   7A,W
088A:  BSF    03.6
088B:  MOVWF  27
088C:  MOVF   79,W
088D:  MOVWF  26
088E:  MOVF   78,W
088F:  MOVWF  25
0890:  MOVF   77,W
0891:  MOVWF  24
....................     currentTime.minute = (currentTime.minute + currentTime.hour * 60) % 100; 
0892:  MOVF   25,W
0893:  BSF    03.5
0894:  MOVWF  26
0895:  MOVLW  3C
0896:  MOVWF  27
0897:  BCF    0A.3
0898:  BCF    03.5
0899:  BCF    03.6
089A:  CALL   056
089B:  BSF    0A.3
089C:  MOVF   78,W
089D:  BSF    03.6
089E:  ADDWF  26,W
089F:  MOVWF  29
08A0:  BSF    03.5
08A1:  MOVWF  28
08A2:  MOVLW  64
08A3:  MOVWF  29
08A4:  BCF    0A.3
08A5:  BCF    03.5
08A6:  BCF    03.6
08A7:  CALL   03D
08A8:  BSF    0A.3
08A9:  MOVF   77,W
08AA:  BSF    03.6
08AB:  MOVWF  26
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
08AC:  MOVLW  01
08AD:  MOVWF  33
08AE:  MOVLW  24
08AF:  MOVWF  32
08B0:  CLRF   34
08B1:  BCF    0A.3
08B2:  BCF    03.6
08B3:  CALL   5EA
08B4:  BSF    0A.3
08B5:  MOVF   79,W
08B6:  MOVWF  7A
08B7:  MOVF   78,W
08B8:  BSF    03.6
08B9:  MOVWF  28
08BA:  MOVF   7A,W
08BB:  MOVWF  29
08BC:  MOVLW  01
08BD:  MOVWF  2B
08BE:  MOVLW  1E
08BF:  MOVWF  2A
08C0:  MOVLW  06
08C1:  MOVWF  78
08C2:  MOVF   28,W
08C3:  MOVWF  04
08C4:  BCF    03.7
08C5:  BTFSC  29.0
08C6:  BSF    03.7
08C7:  MOVF   00,W
08C8:  MOVWF  77
08C9:  MOVF   2A,W
08CA:  MOVWF  04
08CB:  BCF    03.7
08CC:  BTFSC  2B.0
08CD:  BSF    03.7
08CE:  MOVF   77,W
08CF:  MOVWF  00
08D0:  INCF   2A,F
08D1:  BTFSC  03.2
08D2:  INCF   2B,F
08D3:  INCF   28,F
08D4:  BTFSC  03.2
08D5:  INCF   29,F
08D6:  DECFSZ 78,F
08D7:  GOTO   0C2
....................     timeToSend[0] = timeInDigits.second[0]; 
08D8:  MOVF   22,W
08D9:  MOVWF  1A
....................     timeToSend[1] = timeInDigits.second[1]; 
08DA:  MOVF   23,W
08DB:  MOVWF  1B
....................     timeToSend[2] = timeInDigits.minute[0]; 
08DC:  MOVF   20,W
08DD:  MOVWF  1C
....................     timeToSend[3] = timeInDigits.minute[1]; 
08DE:  MOVF   21,W
08DF:  MOVWF  1D
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
08E0:  MOVLW  01
08E1:  MOVWF  2D
08E2:  MOVLW  1A
08E3:  MOVWF  2C
08E4:  MOVLW  04
08E5:  MOVWF  2E
08E6:  MOVLW  01
08E7:  MOVWF  2F
08E8:  BCF    0A.3
08E9:  BCF    03.6
08EA:  CALL   69E
08EB:  BSF    0A.3
08EC:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time alarmTime; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
.................... } Timer; 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
02DC:  MOVLW  04
02DD:  BSF    03.6
02DE:  ADDWF  4C,W
02DF:  MOVWF  78
02E0:  MOVF   4D,W
02E1:  MOVWF  7A
02E2:  BTFSC  03.0
02E3:  INCF   7A,F
02E4:  MOVF   78,W
02E5:  BSF    03.5
02E6:  MOVWF  10
02E7:  MOVF   7A,W
02E8:  MOVWF  11
02E9:  MOVWF  13
02EA:  MOVF   10,W
02EB:  MOVWF  12
02EC:  BCF    03.5
02ED:  BCF    03.6
02EE:  CALL   1C0
02EF:  MOVF   7A,W
02F0:  BSF    03.6
02F1:  MOVWF  51
02F2:  MOVF   79,W
02F3:  MOVWF  50
02F4:  MOVF   78,W
02F5:  MOVWF  4F
02F6:  MOVF   77,W
02F7:  MOVWF  4E
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
02F8:  MOVLW  08
02F9:  ADDWF  4C,W
02FA:  MOVWF  78
02FB:  MOVF   4D,W
02FC:  MOVWF  7A
02FD:  BTFSC  03.0
02FE:  INCF   7A,F
02FF:  MOVF   78,W
0300:  BSF    03.5
0301:  MOVWF  10
0302:  MOVF   7A,W
0303:  MOVWF  11
0304:  MOVWF  13
0305:  MOVF   10,W
0306:  MOVWF  12
0307:  BCF    03.5
0308:  BCF    03.6
0309:  CALL   1C0
030A:  MOVF   7A,W
030B:  BSF    03.6
030C:  MOVWF  55
030D:  MOVF   79,W
030E:  MOVWF  54
030F:  MOVF   78,W
0310:  MOVWF  53
0311:  MOVF   77,W
0312:  MOVWF  52
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
0313:  MOVF   4E,W
0314:  SUBWF  52,W
0315:  MOVWF  56
0316:  MOVF   53,W
0317:  MOVWF  57
0318:  MOVF   4F,W
0319:  BTFSS  03.0
031A:  INCFSZ 4F,W
031B:  SUBWF  57,F
031C:  MOVF   54,W
031D:  MOVWF  58
031E:  MOVF   50,W
031F:  BTFSS  03.0
0320:  INCFSZ 50,W
0321:  SUBWF  58,F
0322:  MOVF   55,W
0323:  MOVWF  59
0324:  MOVF   51,W
0325:  BTFSS  03.0
0326:  INCFSZ 51,W
0327:  SUBWF  59,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
0328:  BTFSS  59.7
0329:  GOTO   32F
032A:  CLRF   77
032B:  CLRF   78
032C:  CLRF   79
032D:  CLRF   7A
032E:  GOTO   337
032F:  MOVF   56,W
0330:  MOVWF  77
0331:  MOVF   57,W
0332:  MOVWF  78
0333:  MOVF   58,W
0334:  MOVWF  79
0335:  MOVF   59,W
0336:  MOVWF  7A
0337:  MOVF   7A,W
0338:  MOVWF  59
0339:  MOVF   79,W
033A:  MOVWF  58
033B:  MOVF   78,W
033C:  MOVWF  57
033D:  MOVF   77,W
033E:  MOVWF  56
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
033F:  BCF    03.1
0340:  MOVF   59,W
0341:  BSF    03.5
0342:  MOVWF  25
0343:  BCF    03.5
0344:  MOVF   58,W
0345:  BSF    03.5
0346:  MOVWF  24
0347:  BCF    03.5
0348:  MOVF   57,W
0349:  BSF    03.5
034A:  MOVWF  23
034B:  BCF    03.5
034C:  MOVF   56,W
034D:  BSF    03.5
034E:  MOVWF  22
034F:  CLRF   29
0350:  CLRF   28
0351:  MOVLW  0E
0352:  MOVWF  27
0353:  MOVLW  10
0354:  MOVWF  26
0355:  BCF    03.5
0356:  BCF    03.6
0357:  CALL   25E
0358:  MOVF   7A,W
0359:  BSF    03.6
035A:  MOVWF  5D
035B:  MOVF   79,W
035C:  MOVWF  5C
035D:  MOVF   78,W
035E:  MOVWF  5B
035F:  MOVF   77,W
0360:  MOVWF  5A
0361:  BSF    03.1
0362:  MOVLW  90
0363:  MOVWF  04
0364:  BSF    03.7
0365:  MOVF   59,W
0366:  BSF    03.5
0367:  MOVWF  25
0368:  BCF    03.5
0369:  MOVF   58,W
036A:  BSF    03.5
036B:  MOVWF  24
036C:  BCF    03.5
036D:  MOVF   57,W
036E:  BSF    03.5
036F:  MOVWF  23
0370:  BCF    03.5
0371:  MOVF   56,W
0372:  BSF    03.5
0373:  MOVWF  22
0374:  CLRF   29
0375:  CLRF   28
0376:  MOVLW  0E
0377:  MOVWF  27
0378:  MOVLW  10
0379:  MOVWF  26
037A:  BCF    03.5
037B:  BCF    03.6
037C:  CALL   25E
037D:  BSF    03.5
037E:  BSF    03.6
037F:  MOVF   13,W
0380:  MOVWF  17
0381:  MOVF   12,W
0382:  MOVWF  16
0383:  MOVF   11,W
0384:  MOVWF  15
0385:  MOVF   10,W
0386:  MOVWF  14
0387:  CLRF   19
0388:  MOVF   04,W
0389:  MOVWF  18
038A:  BCF    19.0
038B:  BTFSC  03.7
038C:  BSF    19.0
038D:  BCF    03.1
038E:  MOVF   13,W
038F:  MOVWF  25
0390:  MOVF   12,W
0391:  MOVWF  24
0392:  MOVF   11,W
0393:  MOVWF  23
0394:  MOVF   10,W
0395:  MOVWF  22
0396:  CLRF   29
0397:  CLRF   28
0398:  CLRF   27
0399:  MOVLW  3C
039A:  MOVWF  26
039B:  BCF    03.5
039C:  BCF    03.6
039D:  CALL   25E
039E:  BSF    03.5
039F:  BSF    03.6
03A0:  MOVF   18,W
03A1:  MOVWF  04
03A2:  BCF    03.7
03A3:  BTFSC  19.0
03A4:  BSF    03.7
03A5:  MOVF   7A,W
03A6:  BCF    03.5
03A7:  MOVWF  61
03A8:  MOVF   79,W
03A9:  MOVWF  60
03AA:  MOVF   78,W
03AB:  MOVWF  5F
03AC:  MOVF   77,W
03AD:  MOVWF  5E
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
03AE:  MOVLW  03
03AF:  ADDWF  4C,W
03B0:  MOVWF  78
03B1:  MOVF   4D,W
03B2:  MOVWF  7A
03B3:  BTFSC  03.0
03B4:  INCF   7A,F
03B5:  MOVF   78,W
03B6:  BSF    03.5
03B7:  MOVWF  10
03B8:  MOVF   7A,W
03B9:  MOVWF  11
03BA:  CLRF   13
03BB:  MOVF   04,W
03BC:  MOVWF  12
03BD:  BCF    13.0
03BE:  BTFSC  03.7
03BF:  BSF    13.0
03C0:  BSF    03.1
03C1:  MOVLW  94
03C2:  MOVWF  04
03C3:  BSF    03.7
03C4:  BCF    03.5
03C5:  MOVF   59,W
03C6:  BSF    03.5
03C7:  MOVWF  25
03C8:  BCF    03.5
03C9:  MOVF   58,W
03CA:  BSF    03.5
03CB:  MOVWF  24
03CC:  BCF    03.5
03CD:  MOVF   57,W
03CE:  BSF    03.5
03CF:  MOVWF  23
03D0:  BCF    03.5
03D1:  MOVF   56,W
03D2:  BSF    03.5
03D3:  MOVWF  22
03D4:  CLRF   29
03D5:  CLRF   28
03D6:  MOVLW  0E
03D7:  MOVWF  27
03D8:  MOVLW  10
03D9:  MOVWF  26
03DA:  BCF    03.5
03DB:  BCF    03.6
03DC:  CALL   25E
03DD:  BSF    03.5
03DE:  BSF    03.6
03DF:  MOVF   14,W
03E0:  MOVWF  77
03E1:  MOVF   15,W
03E2:  MOVWF  78
03E3:  MOVF   16,W
03E4:  MOVWF  79
03E5:  MOVF   17,W
03E6:  MOVWF  7A
03E7:  MOVF   12,W
03E8:  MOVWF  04
03E9:  BCF    03.7
03EA:  BTFSC  13.0
03EB:  BSF    03.7
03EC:  MOVF   17,W
03ED:  MOVWF  1B
03EE:  MOVF   16,W
03EF:  MOVWF  1A
03F0:  MOVF   15,W
03F1:  MOVWF  19
03F2:  MOVF   14,W
03F3:  MOVWF  18
03F4:  CLRF   1D
03F5:  MOVF   04,W
03F6:  MOVWF  1C
03F7:  BCF    1D.0
03F8:  BTFSC  03.7
03F9:  BSF    1D.0
03FA:  BSF    03.1
03FB:  MOVLW  9E
03FC:  MOVWF  04
03FD:  BSF    03.7
03FE:  MOVF   17,W
03FF:  MOVWF  25
0400:  MOVF   16,W
0401:  MOVWF  24
0402:  MOVF   15,W
0403:  MOVWF  23
0404:  MOVF   14,W
0405:  MOVWF  22
0406:  CLRF   29
0407:  CLRF   28
0408:  CLRF   27
0409:  MOVLW  3C
040A:  MOVWF  26
040B:  BCF    03.5
040C:  BCF    03.6
040D:  CALL   25E
040E:  BSF    03.5
040F:  BSF    03.6
0410:  MOVF   1C,W
0411:  MOVWF  04
0412:  BCF    03.7
0413:  BTFSC  1D.0
0414:  BSF    03.7
0415:  MOVF   10,W
0416:  MOVWF  04
0417:  BCF    03.7
0418:  BTFSC  11.0
0419:  BSF    03.7
041A:  MOVF   1E,W
041B:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
041C:  MOVLW  01
041D:  BCF    03.5
041E:  ADDWF  4C,W
041F:  MOVWF  04
0420:  BCF    03.7
0421:  BTFSC  4D.0
0422:  BSF    03.7
0423:  MOVF   5A,W
0424:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
0425:  MOVLW  02
0426:  ADDWF  4C,W
0427:  MOVWF  04
0428:  BCF    03.7
0429:  BTFSC  4D.0
042A:  BSF    03.7
042B:  MOVF   5E,W
042C:  MOVWF  00
042D:  BCF    03.6
042E:  RETURN
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ addressAlarmHour, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressRtcHour, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmHours = addressAlarmHour; 
*
0B1C:  MOVF   52,W
0B1D:  BSF    03.5
0B1E:  MOVWF  1F
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
0B1F:  BCF    03.5
0B20:  MOVF   54,W
0B21:  BSF    03.5
0B22:  MOVWF  1E
....................     newTimer.addressRtcHours = addressRtcHour; 
0B23:  BCF    03.5
0B24:  MOVF   56,W
0B25:  BSF    03.5
0B26:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
0B27:  BCF    03.5
0B28:  MOVF   58,W
0B29:  BSF    03.5
0B2A:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
0B2B:  BCF    03.5
0B2C:  MOVF   5A,W
0B2D:  BSF    03.5
0B2E:  MOVWF  22
....................  
....................     newTimer.alarmTime.hour = read_eeprom(addressAlarmHour) % (maximumHours + 1); 
0B2F:  BCF    03.5
0B30:  MOVF   52,W
0B31:  MOVWF  0D
0B32:  BSF    03.5
0B33:  BCF    0C.7
0B34:  BSF    0C.0
0B35:  BCF    03.5
0B36:  MOVF   0C,W
0B37:  MOVWF  5C
0B38:  MOVLW  01
0B39:  ADDWF  50,W
0B3A:  MOVWF  5D
0B3B:  MOVF   5C,W
0B3C:  BSF    03.5
0B3D:  MOVWF  28
0B3E:  BCF    03.5
0B3F:  MOVF   5D,W
0B40:  BSF    03.5
0B41:  MOVWF  29
0B42:  BCF    0A.3
0B43:  BCF    03.5
0B44:  BCF    03.6
0B45:  CALL   03D
0B46:  BSF    0A.3
0B47:  MOVF   77,W
0B48:  BSF    03.5
0B49:  BSF    03.6
0B4A:  MOVWF  19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (maximumMinutes + 1); 
0B4B:  BCF    03.5
0B4C:  MOVF   54,W
0B4D:  MOVWF  0D
0B4E:  BSF    03.5
0B4F:  BCF    0C.7
0B50:  BSF    0C.0
0B51:  BCF    03.5
0B52:  MOVF   0C,W
0B53:  MOVWF  5C
0B54:  MOVLW  01
0B55:  ADDWF  51,W
0B56:  MOVWF  5D
0B57:  MOVF   5C,W
0B58:  BSF    03.5
0B59:  MOVWF  28
0B5A:  BCF    03.5
0B5B:  MOVF   5D,W
0B5C:  BSF    03.5
0B5D:  MOVWF  29
0B5E:  BCF    0A.3
0B5F:  BCF    03.5
0B60:  BCF    03.6
0B61:  CALL   03D
0B62:  BSF    0A.3
0B63:  MOVF   77,W
0B64:  BSF    03.5
0B65:  BSF    03.6
0B66:  MOVWF  1A
....................     newTimer.alarmTime.second = 0; 
0B67:  CLRF   1B
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
0B68:  BCF    03.5
0B69:  MOVF   50,W
0B6A:  BSF    03.5
0B6B:  MOVWF  23
....................     newTimer.minutesUpperBound = maximumMinutes; 
0B6C:  BCF    03.5
0B6D:  MOVF   51,W
0B6E:  BSF    03.5
0B6F:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
0B70:  MOVLW  3B
0B71:  MOVWF  25
....................  
....................     newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 100; 
0B72:  BCF    03.5
0B73:  MOVF   56,W
0B74:  MOVWF  0D
0B75:  BSF    03.5
0B76:  BCF    0C.7
0B77:  BSF    0C.0
0B78:  BCF    03.5
0B79:  MOVF   0C,W
0B7A:  MOVWF  5D
0B7B:  MOVF   5D,W
0B7C:  BSF    03.5
0B7D:  MOVWF  28
0B7E:  MOVLW  64
0B7F:  MOVWF  29
0B80:  BCF    0A.3
0B81:  BCF    03.5
0B82:  BCF    03.6
0B83:  CALL   03D
0B84:  BSF    0A.3
0B85:  MOVF   77,W
0B86:  BSF    03.5
0B87:  BSF    03.6
0B88:  MOVWF  15
....................     newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (maximumMinutes + 1); 
0B89:  BCF    03.5
0B8A:  MOVF   58,W
0B8B:  MOVWF  0D
0B8C:  BSF    03.5
0B8D:  BCF    0C.7
0B8E:  BSF    0C.0
0B8F:  BCF    03.5
0B90:  MOVF   0C,W
0B91:  MOVWF  5C
0B92:  MOVLW  01
0B93:  ADDWF  51,W
0B94:  MOVWF  5D
0B95:  MOVF   5C,W
0B96:  BSF    03.5
0B97:  MOVWF  28
0B98:  BCF    03.5
0B99:  MOVF   5D,W
0B9A:  BSF    03.5
0B9B:  MOVWF  29
0B9C:  BCF    0A.3
0B9D:  BCF    03.5
0B9E:  BCF    03.6
0B9F:  CALL   03D
0BA0:  BSF    0A.3
0BA1:  MOVF   77,W
0BA2:  BSF    03.5
0BA3:  BSF    03.6
0BA4:  MOVWF  16
....................     newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
0BA5:  BCF    03.5
0BA6:  MOVF   5A,W
0BA7:  MOVWF  0D
0BA8:  BSF    03.5
0BA9:  BCF    0C.7
0BAA:  BSF    0C.0
0BAB:  BCF    03.5
0BAC:  MOVF   0C,W
0BAD:  MOVWF  5D
0BAE:  MOVF   5D,W
0BAF:  BSF    03.5
0BB0:  MOVWF  28
0BB1:  MOVLW  3C
0BB2:  MOVWF  29
0BB3:  BCF    0A.3
0BB4:  BCF    03.5
0BB5:  BCF    03.6
0BB6:  CALL   03D
0BB7:  BSF    0A.3
0BB8:  MOVF   77,W
0BB9:  BSF    03.5
0BBA:  BSF    03.6
0BBB:  MOVWF  17
....................  
....................     return newTimer; 
0BBC:  MOVLW  90
0BBD:  MOVWF  78
0BBE:  MOVLW  01
0BBF:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
*
0BF7:  MOVF   51,W
0BF8:  BSF    03.5
0BF9:  MOVWF  1E
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
0BFA:  BCF    03.5
0BFB:  MOVF   53,W
0BFC:  BSF    03.5
0BFD:  MOVWF  1D
....................     newTimer.addressRtcHours = addressRtcHour; 
0BFE:  BCF    03.5
0BFF:  MOVF   55,W
0C00:  BSF    03.5
0C01:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
0C02:  BCF    03.5
0C03:  MOVF   57,W
0C04:  BSF    03.5
0C05:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
0C06:  BCF    03.5
0C07:  MOVF   59,W
0C08:  BSF    03.5
0C09:  MOVWF  22
....................  
....................     newTimer.hoursUpperBound = 0; 
0C0A:  CLRF   23
....................     newTimer.minutesUpperBound = maximumMinutes; 
0C0B:  BCF    03.5
0C0C:  MOVF   50,W
0C0D:  BSF    03.5
0C0E:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
0C0F:  MOVLW  3B
0C10:  MOVWF  25
....................  
....................     newTimer.alarmTime.hour = 0; 
0C11:  CLRF   19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (maximumMinutes + 1); 
0C12:  BCF    03.5
0C13:  MOVF   51,W
0C14:  MOVWF  0D
0C15:  BSF    03.5
0C16:  BCF    0C.7
0C17:  BSF    0C.0
0C18:  BCF    03.5
0C19:  MOVF   0C,W
0C1A:  MOVWF  5B
0C1B:  MOVLW  01
0C1C:  ADDWF  50,W
0C1D:  MOVWF  5C
0C1E:  MOVF   5B,W
0C1F:  BSF    03.5
0C20:  MOVWF  28
0C21:  BCF    03.5
0C22:  MOVF   5C,W
0C23:  BSF    03.5
0C24:  MOVWF  29
0C25:  BCF    0A.3
0C26:  BCF    03.5
0C27:  BCF    03.6
0C28:  CALL   03D
0C29:  BSF    0A.3
0C2A:  MOVF   77,W
0C2B:  BSF    03.5
0C2C:  BSF    03.6
0C2D:  MOVWF  1A
....................     newTimer.alarmTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
0C2E:  BCF    03.5
0C2F:  MOVF   53,W
0C30:  MOVWF  0D
0C31:  BSF    03.5
0C32:  BCF    0C.7
0C33:  BSF    0C.0
0C34:  BCF    03.5
0C35:  MOVF   0C,W
0C36:  MOVWF  5B
0C37:  MOVLW  01
0C38:  BSF    03.5
0C39:  ADDWF  25,W
0C3A:  BCF    03.5
0C3B:  MOVWF  5C
0C3C:  MOVF   5B,W
0C3D:  BSF    03.5
0C3E:  MOVWF  28
0C3F:  BCF    03.5
0C40:  MOVF   5C,W
0C41:  BSF    03.5
0C42:  MOVWF  29
0C43:  BCF    0A.3
0C44:  BCF    03.5
0C45:  BCF    03.6
0C46:  CALL   03D
0C47:  BSF    0A.3
0C48:  MOVF   77,W
0C49:  BSF    03.5
0C4A:  BSF    03.6
0C4B:  MOVWF  1B
....................  
....................  
....................     newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 2; 
0C4C:  BCF    03.5
0C4D:  MOVF   55,W
0C4E:  MOVWF  0D
0C4F:  BSF    03.5
0C50:  BCF    0C.7
0C51:  BSF    0C.0
0C52:  BCF    03.5
0C53:  MOVF   0C,W
0C54:  ANDLW  01
0C55:  BSF    03.5
0C56:  MOVWF  15
....................     newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (maximumMinutes + 1); 
0C57:  BCF    03.5
0C58:  MOVF   57,W
0C59:  MOVWF  0D
0C5A:  BSF    03.5
0C5B:  BCF    0C.7
0C5C:  BSF    0C.0
0C5D:  BCF    03.5
0C5E:  MOVF   0C,W
0C5F:  MOVWF  5B
0C60:  MOVLW  01
0C61:  ADDWF  50,W
0C62:  MOVWF  5C
0C63:  MOVF   5B,W
0C64:  BSF    03.5
0C65:  MOVWF  28
0C66:  BCF    03.5
0C67:  MOVF   5C,W
0C68:  BSF    03.5
0C69:  MOVWF  29
0C6A:  BCF    0A.3
0C6B:  BCF    03.5
0C6C:  BCF    03.6
0C6D:  CALL   03D
0C6E:  BSF    0A.3
0C6F:  MOVF   77,W
0C70:  BSF    03.5
0C71:  BSF    03.6
0C72:  MOVWF  16
....................     newTimer.currentTime.minute = (newTimer.currentTime.minute + newTimer.currentTime.hour * 60) % 100; 
0C73:  MOVF   15,W
0C74:  MOVWF  26
0C75:  MOVLW  3C
0C76:  MOVWF  27
0C77:  BCF    0A.3
0C78:  BCF    03.5
0C79:  BCF    03.6
0C7A:  CALL   056
0C7B:  BSF    0A.3
0C7C:  MOVF   78,W
0C7D:  BSF    03.5
0C7E:  BSF    03.6
0C7F:  ADDWF  16,W
0C80:  BCF    03.5
0C81:  MOVWF  5C
0C82:  BSF    03.5
0C83:  MOVWF  28
0C84:  MOVLW  64
0C85:  MOVWF  29
0C86:  BCF    0A.3
0C87:  BCF    03.5
0C88:  BCF    03.6
0C89:  CALL   03D
0C8A:  BSF    0A.3
0C8B:  MOVF   77,W
0C8C:  BSF    03.5
0C8D:  BSF    03.6
0C8E:  MOVWF  16
....................     newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
0C8F:  BCF    03.5
0C90:  MOVF   59,W
0C91:  MOVWF  0D
0C92:  BSF    03.5
0C93:  BCF    0C.7
0C94:  BSF    0C.0
0C95:  BCF    03.5
0C96:  MOVF   0C,W
0C97:  MOVWF  5C
0C98:  MOVF   5C,W
0C99:  BSF    03.5
0C9A:  MOVWF  28
0C9B:  MOVLW  3C
0C9C:  MOVWF  29
0C9D:  BCF    0A.3
0C9E:  BCF    03.5
0C9F:  BCF    03.6
0CA0:  CALL   03D
0CA1:  BSF    0A.3
0CA2:  MOVF   77,W
0CA3:  BSF    03.5
0CA4:  BSF    03.6
0CA5:  MOVWF  17
....................  
....................     return newTimer; 
0CA6:  MOVLW  90
0CA7:  MOVWF  78
0CA8:  MOVLW  01
0CA9:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_setRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
0162:  MOVLW  04
0163:  ADDWF  4A,W
0164:  MOVWF  78
0165:  MOVF   4B,W
0166:  MOVWF  7A
0167:  BTFSC  03.0
0168:  INCF   7A,F
0169:  MOVF   78,W
016A:  MOVWF  4C
016B:  MOVF   7A,W
016C:  MOVWF  4D
016D:  MOVF   4D,W
016E:  MOVWF  4F
016F:  MOVF   4C,W
0170:  MOVWF  4E
.................... } 
....................  
....................  
....................  
.................... //void Timer_updateCountdownTimeMinutesSeconds(Timer *timerPtr) { 
.................... //    signed int32 currentTimeInSeconds; 
.................... //    signed int32 limitTimeInSeconds; 
.................... //    signed int32 countdownTimeInSeconds; 
.................... //    currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
.................... //    limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
.................... //    countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
.................... // 
.................... //    countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
.................... // 
.................... //    int32 hour = (countdownTimeInSeconds / 3600); 
.................... //    int32 minute = (countdownTimeInSeconds % 3600) / 60; 
.................... //    timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
.................... // 
.................... //    timerPtr->countdownTime.hour = hour; 
.................... //    timerPtr->countdownTime.minute = minute; 
.................... //} 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
055B:  MOVLW  04
055C:  ADDWF  4A,W
055D:  MOVWF  78
055E:  MOVF   4B,W
055F:  MOVWF  7A
0560:  BTFSC  03.0
0561:  INCF   7A,F
0562:  MOVF   78,W
0563:  MOVWF  4C
0564:  MOVF   7A,W
0565:  MOVWF  4D
0566:  BCF    03.6
0567:  CALL   4FA
0568:  BSF    03.6
0569:  MOVF   4C,W
056A:  MOVWF  04
056B:  BCF    03.7
056C:  BTFSC  4D.0
056D:  BSF    03.7
056E:  MOVF   77,W
056F:  MOVWF  00
0570:  INCF   04,F
0571:  MOVF   78,W
0572:  MOVWF  00
0573:  INCF   04,F
0574:  MOVF   79,W
0575:  MOVWF  00
0576:  INCF   04,F
0577:  MOVF   7A,W
0578:  MOVWF  00
....................     Timer_updateCountdownTime(timerPtr); 
0579:  MOVF   4B,W
057A:  MOVWF  4D
057B:  MOVF   4A,W
057C:  MOVWF  4C
057D:  BCF    03.6
057E:  CALL   2DC
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->alarmTime.hour + 1; 
*
11C7:  MOVLW  09
11C8:  ADDWF  1B,W
11C9:  MOVWF  78
11CA:  MOVF   1C,W
11CB:  MOVWF  7A
11CC:  BTFSC  03.0
11CD:  INCF   7A,F
11CE:  MOVF   78,W
11CF:  MOVWF  1D
11D0:  MOVF   7A,W
11D1:  MOVWF  1E
11D2:  MOVLW  09
11D3:  ADDWF  1B,W
11D4:  MOVWF  04
11D5:  BCF    03.7
11D6:  BTFSC  1C.0
11D7:  BSF    03.7
11D8:  MOVF   00,W
11D9:  MOVWF  1F
11DA:  MOVLW  13
11DB:  ADDWF  1B,W
11DC:  MOVWF  04
11DD:  BCF    03.7
11DE:  BTFSC  1C.0
11DF:  BSF    03.7
11E0:  MOVF   00,W
11E1:  SUBWF  1F,W
11E2:  BTFSS  03.2
11E3:  GOTO   1E6
11E4:  MOVLW  00
11E5:  GOTO   1EE
11E6:  MOVLW  09
11E7:  ADDWF  1B,W
11E8:  MOVWF  04
11E9:  BCF    03.7
11EA:  BTFSC  1C.0
11EB:  BSF    03.7
11EC:  MOVLW  01
11ED:  ADDWF  00,W
11EE:  MOVWF  1F
11EF:  MOVF   1D,W
11F0:  MOVWF  04
11F1:  BCF    03.7
11F2:  BTFSC  1E.0
11F3:  BSF    03.7
11F4:  MOVF   1F,W
11F5:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->alarmTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->alarmTime.minute + 1; 
*
1000:  MOVLW  0A
1001:  BSF    03.6
1002:  ADDWF  1B,W
1003:  MOVWF  1D
1004:  MOVF   1C,W
1005:  MOVWF  1E
1006:  BTFSC  03.0
1007:  INCF   1E,F
1008:  MOVLW  0A
1009:  ADDWF  1B,W
100A:  MOVWF  04
100B:  BCF    03.7
100C:  BTFSC  1C.0
100D:  BSF    03.7
100E:  MOVF   00,W
100F:  MOVWF  1F
1010:  MOVLW  14
1011:  ADDWF  1B,W
1012:  MOVWF  04
1013:  BCF    03.7
1014:  BTFSC  1C.0
1015:  BSF    03.7
1016:  MOVF   00,W
1017:  SUBWF  1F,W
1018:  BTFSS  03.2
1019:  GOTO   01C
101A:  MOVLW  00
101B:  GOTO   024
101C:  MOVLW  0A
101D:  ADDWF  1B,W
101E:  MOVWF  04
101F:  BCF    03.7
1020:  BTFSC  1C.0
1021:  BSF    03.7
1022:  MOVLW  01
1023:  ADDWF  00,W
1024:  MOVWF  1F
1025:  MOVF   1D,W
1026:  MOVWF  04
1027:  BCF    03.7
1028:  BTFSC  1E.0
1029:  BSF    03.7
102A:  MOVF   1F,W
102B:  MOVWF  00
102C:  BCF    03.6
102D:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->alarmTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->alarmTime.second + 1; 
*
1379:  MOVLW  0B
137A:  ADDWF  1B,W
137B:  MOVWF  78
137C:  MOVF   1C,W
137D:  MOVWF  7A
137E:  BTFSC  03.0
137F:  INCF   7A,F
1380:  MOVF   78,W
1381:  MOVWF  1D
1382:  MOVF   7A,W
1383:  MOVWF  1E
1384:  MOVLW  0B
1385:  ADDWF  1B,W
1386:  MOVWF  04
1387:  BCF    03.7
1388:  BTFSC  1C.0
1389:  BSF    03.7
138A:  MOVF   00,W
138B:  MOVWF  1F
138C:  MOVLW  15
138D:  ADDWF  1B,W
138E:  MOVWF  04
138F:  BCF    03.7
1390:  BTFSC  1C.0
1391:  BSF    03.7
1392:  MOVF   00,W
1393:  SUBWF  1F,W
1394:  BTFSS  03.2
1395:  GOTO   398
1396:  MOVLW  00
1397:  GOTO   3A0
1398:  MOVLW  0B
1399:  ADDWF  1B,W
139A:  MOVWF  04
139B:  BCF    03.7
139C:  BTFSC  1C.0
139D:  BSF    03.7
139E:  MOVLW  01
139F:  ADDWF  00,W
13A0:  MOVWF  1F
13A1:  MOVF   1D,W
13A2:  MOVWF  04
13A3:  BCF    03.7
13A4:  BTFSC  1E.0
13A5:  BSF    03.7
13A6:  MOVF   1F,W
13A7:  MOVWF  00
13A8:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->alarmTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
09FF:  MOVLW  10
0A00:  ADDWF  1B,W
0A01:  MOVWF  04
0A02:  BCF    03.7
0A03:  BTFSC  1C.0
0A04:  BSF    03.7
0A05:  MOVF   00,W
0A06:  MOVWF  1D
0A07:  MOVLW  05
0A08:  ADDWF  1B,W
0A09:  MOVWF  04
0A0A:  BCF    03.7
0A0B:  BTFSC  1C.0
0A0C:  BSF    03.7
0A0D:  MOVF   00,W
0A0E:  MOVWF  1E
0A0F:  BCF    03.6
0A10:  MOVF   0B,W
0A11:  MOVWF  77
0A12:  BCF    0B.7
0A13:  BSF    03.6
0A14:  MOVF   1D,W
0A15:  MOVWF  0D
0A16:  MOVF   1E,W
0A17:  MOVWF  0C
0A18:  BSF    03.5
0A19:  BCF    0C.7
0A1A:  BSF    0C.2
0A1B:  MOVLW  55
0A1C:  MOVWF  0D
0A1D:  MOVLW  AA
0A1E:  MOVWF  0D
0A1F:  BSF    0C.1
0A20:  BTFSC  0C.1
0A21:  GOTO   220
0A22:  BCF    0C.2
0A23:  MOVF   77,W
0A24:  BCF    03.5
0A25:  BCF    03.6
0A26:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0A27:  MOVLW  11
0A28:  BSF    03.6
0A29:  ADDWF  1B,W
0A2A:  MOVWF  04
0A2B:  BCF    03.7
0A2C:  BTFSC  1C.0
0A2D:  BSF    03.7
0A2E:  MOVF   00,W
0A2F:  MOVWF  1D
0A30:  MOVLW  06
0A31:  ADDWF  1B,W
0A32:  MOVWF  04
0A33:  BCF    03.7
0A34:  BTFSC  1C.0
0A35:  BSF    03.7
0A36:  MOVF   00,W
0A37:  MOVWF  1E
0A38:  BCF    03.6
0A39:  MOVF   0B,W
0A3A:  MOVWF  77
0A3B:  BCF    0B.7
0A3C:  BSF    03.6
0A3D:  MOVF   1D,W
0A3E:  MOVWF  0D
0A3F:  MOVF   1E,W
0A40:  MOVWF  0C
0A41:  BSF    03.5
0A42:  BCF    0C.7
0A43:  BSF    0C.2
0A44:  MOVLW  55
0A45:  MOVWF  0D
0A46:  MOVLW  AA
0A47:  MOVWF  0D
0A48:  BSF    0C.1
0A49:  BTFSC  0C.1
0A4A:  GOTO   249
0A4B:  BCF    0C.2
0A4C:  MOVF   77,W
0A4D:  BCF    03.5
0A4E:  BCF    03.6
0A4F:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0A50:  MOVLW  12
0A51:  BSF    03.6
0A52:  ADDWF  1B,W
0A53:  MOVWF  04
0A54:  BCF    03.7
0A55:  BTFSC  1C.0
0A56:  BSF    03.7
0A57:  MOVF   00,W
0A58:  MOVWF  1D
0A59:  MOVLW  07
0A5A:  ADDWF  1B,W
0A5B:  MOVWF  04
0A5C:  BCF    03.7
0A5D:  BTFSC  1C.0
0A5E:  BSF    03.7
0A5F:  MOVF   00,W
0A60:  MOVWF  1E
0A61:  BCF    03.6
0A62:  MOVF   0B,W
0A63:  MOVWF  77
0A64:  BCF    0B.7
0A65:  BSF    03.6
0A66:  MOVF   1D,W
0A67:  MOVWF  0D
0A68:  MOVF   1E,W
0A69:  MOVWF  0C
0A6A:  BSF    03.5
0A6B:  BCF    0C.7
0A6C:  BSF    0C.2
0A6D:  MOVLW  55
0A6E:  MOVWF  0D
0A6F:  MOVLW  AA
0A70:  MOVWF  0D
0A71:  BSF    0C.1
0A72:  BTFSC  0C.1
0A73:  GOTO   272
0A74:  BCF    0C.2
0A75:  MOVF   77,W
0A76:  BCF    03.5
0A77:  BCF    03.6
0A78:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarm(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
.................... void Timer_saveAlarmHoursMinutes(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
*
154E:  MOVLW  0F
154F:  ADDWF  19,W
1550:  MOVWF  04
1551:  BCF    03.7
1552:  BTFSC  1A.0
1553:  BSF    03.7
1554:  MOVF   00,W
1555:  MOVWF  1B
1556:  MOVLW  09
1557:  ADDWF  19,W
1558:  MOVWF  04
1559:  BCF    03.7
155A:  BTFSC  1A.0
155B:  BSF    03.7
155C:  MOVF   00,W
155D:  MOVWF  1C
155E:  BCF    03.6
155F:  MOVF   0B,W
1560:  MOVWF  77
1561:  BCF    0B.7
1562:  BSF    03.6
1563:  MOVF   1B,W
1564:  MOVWF  0D
1565:  MOVF   1C,W
1566:  MOVWF  0C
1567:  BSF    03.5
1568:  BCF    0C.7
1569:  BSF    0C.2
156A:  MOVLW  55
156B:  MOVWF  0D
156C:  MOVLW  AA
156D:  MOVWF  0D
156E:  BSF    0C.1
156F:  BTFSC  0C.1
1570:  GOTO   56F
1571:  BCF    0C.2
1572:  MOVF   77,W
1573:  BCF    03.5
1574:  BCF    03.6
1575:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute);     
1576:  MOVLW  0E
1577:  BSF    03.6
1578:  ADDWF  19,W
1579:  MOVWF  04
157A:  BCF    03.7
157B:  BTFSC  1A.0
157C:  BSF    03.7
157D:  MOVF   00,W
157E:  MOVWF  1B
157F:  MOVLW  0A
1580:  ADDWF  19,W
1581:  MOVWF  04
1582:  BCF    03.7
1583:  BTFSC  1A.0
1584:  BSF    03.7
1585:  MOVF   00,W
1586:  MOVWF  1C
1587:  BCF    03.6
1588:  MOVF   0B,W
1589:  MOVWF  77
158A:  BCF    0B.7
158B:  BSF    03.6
158C:  MOVF   1B,W
158D:  MOVWF  0D
158E:  MOVF   1C,W
158F:  MOVWF  0C
1590:  BSF    03.5
1591:  BCF    0C.7
1592:  BSF    0C.2
1593:  MOVLW  55
1594:  MOVWF  0D
1595:  MOVLW  AA
1596:  MOVWF  0D
1597:  BSF    0C.1
1598:  BTFSC  0C.1
1599:  GOTO   598
159A:  BCF    0C.2
159B:  MOVF   77,W
159C:  BCF    03.5
159D:  BCF    03.6
159E:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarmMinutesSeconds(Timer *timerPtr) {   
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
*
15B7:  MOVLW  0E
15B8:  ADDWF  1B,W
15B9:  MOVWF  04
15BA:  BCF    03.7
15BB:  BTFSC  1C.0
15BC:  BSF    03.7
15BD:  MOVF   00,W
15BE:  MOVWF  1D
15BF:  MOVLW  0A
15C0:  ADDWF  1B,W
15C1:  MOVWF  04
15C2:  BCF    03.7
15C3:  BTFSC  1C.0
15C4:  BSF    03.7
15C5:  MOVF   00,W
15C6:  MOVWF  1E
15C7:  BCF    03.6
15C8:  MOVF   0B,W
15C9:  MOVWF  77
15CA:  BCF    0B.7
15CB:  BSF    03.6
15CC:  MOVF   1D,W
15CD:  MOVWF  0D
15CE:  MOVF   1E,W
15CF:  MOVWF  0C
15D0:  BSF    03.5
15D1:  BCF    0C.7
15D2:  BSF    0C.2
15D3:  MOVLW  55
15D4:  MOVWF  0D
15D5:  MOVLW  AA
15D6:  MOVWF  0D
15D7:  BSF    0C.1
15D8:  BTFSC  0C.1
15D9:  GOTO   5D8
15DA:  BCF    0C.2
15DB:  MOVF   77,W
15DC:  BCF    03.5
15DD:  BCF    03.6
15DE:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
15DF:  MOVLW  0D
15E0:  BSF    03.6
15E1:  ADDWF  1B,W
15E2:  MOVWF  04
15E3:  BCF    03.7
15E4:  BTFSC  1C.0
15E5:  BSF    03.7
15E6:  MOVF   00,W
15E7:  MOVWF  1D
15E8:  MOVLW  0B
15E9:  ADDWF  1B,W
15EA:  MOVWF  04
15EB:  BCF    03.7
15EC:  BTFSC  1C.0
15ED:  BSF    03.7
15EE:  MOVF   00,W
15EF:  MOVWF  1E
15F0:  BCF    03.6
15F1:  MOVF   0B,W
15F2:  MOVWF  77
15F3:  BCF    0B.7
15F4:  BSF    03.6
15F5:  MOVF   1D,W
15F6:  MOVWF  0D
15F7:  MOVF   1E,W
15F8:  MOVWF  0C
15F9:  BSF    03.5
15FA:  BCF    0C.7
15FB:  BSF    0C.2
15FC:  MOVLW  55
15FD:  MOVWF  0D
15FE:  MOVLW  AA
15FF:  MOVWF  0D
1600:  BSF    0C.1
1601:  BTFSC  0C.1
1602:  GOTO   601
1603:  BCF    0C.2
1604:  MOVF   77,W
1605:  BCF    03.5
1606:  BCF    03.6
1607:  IORWF  0B,F
1608:  BSF    03.6
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
0DCA:  MOVF   1B,W
0DCB:  MOVWF  78
0DCC:  MOVF   1C,W
0DCD:  MOVWF  7A
0DCE:  MOVF   78,W
0DCF:  MOVWF  1D
0DD0:  MOVF   7A,W
0DD1:  MOVWF  1E
0DD2:  MOVF   1E,W
0DD3:  MOVWF  20
0DD4:  MOVF   1D,W
0DD5:  MOVWF  1F
*
0DF5:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->alarmTime.hour == 0)&& (timerPtr->alarmTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
090F:  CLRF   1F
0910:  CLRF   20
0911:  CLRF   21
0912:  CLRF   22
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0913:  MOVF   1C,W
0914:  MOVWF  78
0915:  MOVF   1D,W
0916:  MOVWF  7A
0917:  MOVF   78,W
0918:  MOVWF  29
0919:  MOVF   7A,W
091A:  MOVWF  2A
091B:  MOVWF  33
091C:  MOVF   29,W
091D:  MOVWF  32
091E:  CLRF   34
091F:  BCF    0A.3
0920:  BCF    03.6
0921:  CALL   5EA
0922:  BSF    0A.3
0923:  MOVF   79,W
0924:  MOVWF  7A
0925:  MOVF   78,W
0926:  BSF    03.6
0927:  MOVWF  29
0928:  MOVF   7A,W
0929:  MOVWF  2A
092A:  MOVLW  01
092B:  MOVWF  2C
092C:  MOVLW  23
092D:  MOVWF  2B
092E:  MOVLW  06
092F:  MOVWF  78
0930:  MOVF   29,W
0931:  MOVWF  04
0932:  BCF    03.7
0933:  BTFSC  2A.0
0934:  BSF    03.7
0935:  MOVF   00,W
0936:  MOVWF  77
0937:  MOVF   2B,W
0938:  MOVWF  04
0939:  BCF    03.7
093A:  BTFSC  2C.0
093B:  BSF    03.7
093C:  MOVF   77,W
093D:  MOVWF  00
093E:  INCF   2B,F
093F:  BTFSC  03.2
0940:  INCF   2C,F
0941:  INCF   29,F
0942:  BTFSC  03.2
0943:  INCF   2A,F
0944:  DECFSZ 78,F
0945:  GOTO   130
....................     timeToSend[0] = timeInDigits.minute[0]; 
0946:  MOVF   25,W
0947:  MOVWF  1F
....................     timeToSend[1] = timeInDigits.minute[1]; 
0948:  MOVF   26,W
0949:  MOVWF  20
....................     timeToSend[2] = timeInDigits.hour[0]; 
094A:  MOVF   23,W
094B:  MOVWF  21
....................     timeToSend[3] = timeInDigits.hour[1]; 
094C:  MOVF   24,W
094D:  MOVWF  22
....................  
....................     if (blink) { 
094E:  MOVF   1E,F
094F:  BTFSC  03.2
0950:  GOTO   15B
....................         blink = timerPtr->currentTime.second % 2; 
0951:  MOVLW  07
0952:  ADDWF  1C,W
0953:  MOVWF  04
0954:  BCF    03.7
0955:  BTFSC  1D.0
0956:  BSF    03.7
0957:  MOVF   00,W
0958:  ANDLW  01
0959:  MOVWF  1E
....................     } else { 
095A:  GOTO   15D
....................         blink = TRUE; 
095B:  MOVLW  01
095C:  MOVWF  1E
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
095D:  MOVLW  01
095E:  MOVWF  2D
095F:  MOVLW  1F
0960:  MOVWF  2C
0961:  MOVLW  04
0962:  MOVWF  2E
0963:  MOVF   1E,W
0964:  MOVWF  2F
0965:  BCF    0A.3
0966:  BCF    03.6
0967:  CALL   69E
0968:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
097D:  CLRF   1E
097E:  CLRF   1F
097F:  CLRF   20
0980:  CLRF   21
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................  
....................     time = timerPtr->countdownTime; 
0981:  MOVF   1C,W
0982:  MOVWF  04
0983:  BCF    03.7
0984:  BTFSC  1D.0
0985:  BSF    03.7
0986:  MOVF   00,W
0987:  MOVWF  77
0988:  INCF   04,F
0989:  MOVF   00,W
098A:  MOVWF  78
098B:  INCF   04,F
098C:  MOVF   00,W
098D:  MOVWF  79
098E:  INCF   04,F
098F:  MOVF   00,W
0990:  MOVWF  7A
0991:  MOVF   77,W
0992:  MOVWF  28
0993:  MOVF   78,W
0994:  MOVWF  29
0995:  MOVF   79,W
0996:  MOVWF  2A
0997:  MOVF   7A,W
0998:  MOVWF  2B
....................     time.minute = (time.minute + time.hour * 60) % 100; 
0999:  MOVF   29,W
099A:  BSF    03.5
099B:  MOVWF  26
099C:  MOVLW  3C
099D:  MOVWF  27
099E:  BCF    0A.3
099F:  BCF    03.5
09A0:  BCF    03.6
09A1:  CALL   056
09A2:  BSF    0A.3
09A3:  MOVF   78,W
09A4:  BSF    03.6
09A5:  ADDWF  2A,W
09A6:  MOVWF  2D
09A7:  BSF    03.5
09A8:  MOVWF  28
09A9:  MOVLW  64
09AA:  MOVWF  29
09AB:  BCF    0A.3
09AC:  BCF    03.5
09AD:  BCF    03.6
09AE:  CALL   03D
09AF:  BSF    0A.3
09B0:  MOVF   77,W
09B1:  BSF    03.6
09B2:  MOVWF  2A
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE); 
09B3:  MOVLW  01
09B4:  MOVWF  33
09B5:  MOVLW  28
09B6:  MOVWF  32
09B7:  CLRF   34
09B8:  BCF    0A.3
09B9:  BCF    03.6
09BA:  CALL   5EA
09BB:  BSF    0A.3
09BC:  MOVF   79,W
09BD:  MOVWF  7A
09BE:  MOVF   78,W
09BF:  BSF    03.6
09C0:  MOVWF  2C
09C1:  MOVF   7A,W
09C2:  MOVWF  2D
09C3:  MOVLW  01
09C4:  MOVWF  2F
09C5:  MOVLW  22
09C6:  MOVWF  2E
09C7:  MOVLW  06
09C8:  MOVWF  78
09C9:  MOVF   2C,W
09CA:  MOVWF  04
09CB:  BCF    03.7
09CC:  BTFSC  2D.0
09CD:  BSF    03.7
09CE:  MOVF   00,W
09CF:  MOVWF  77
09D0:  MOVF   2E,W
09D1:  MOVWF  04
09D2:  BCF    03.7
09D3:  BTFSC  2F.0
09D4:  BSF    03.7
09D5:  MOVF   77,W
09D6:  MOVWF  00
09D7:  INCF   2E,F
09D8:  BTFSC  03.2
09D9:  INCF   2F,F
09DA:  INCF   2C,F
09DB:  BTFSC  03.2
09DC:  INCF   2D,F
09DD:  DECFSZ 78,F
09DE:  GOTO   1C9
....................     //    timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
....................     timeToSend[0] = timeInDigits.second[0]; 
09DF:  MOVF   26,W
09E0:  MOVWF  1E
....................     timeToSend[1] = timeInDigits.second[1]; 
09E1:  MOVF   27,W
09E2:  MOVWF  1F
....................     timeToSend[2] = timeInDigits.minute[0]; 
09E3:  MOVF   24,W
09E4:  MOVWF  20
....................     timeToSend[3] = timeInDigits.minute[1]; 
09E5:  MOVF   25,W
09E6:  MOVWF  21
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
09E7:  MOVLW  01
09E8:  MOVWF  2D
09E9:  MOVLW  1E
09EA:  MOVWF  2C
09EB:  MOVLW  04
09EC:  MOVWF  2E
09ED:  MOVLW  01
09EE:  MOVWF  2F
09EF:  BCF    0A.3
09F0:  BCF    03.6
09F1:  CALL   69E
09F2:  BSF    0A.3
09F3:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
10E0:  CLRF   1D
10E1:  CLRF   1E
10E2:  CLRF   1F
10E3:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
10E4:  MOVLW  08
10E5:  ADDWF  1B,W
10E6:  MOVWF  78
10E7:  MOVF   1C,W
10E8:  MOVWF  7A
10E9:  BTFSC  03.0
10EA:  INCF   7A,F
10EB:  MOVF   78,W
10EC:  MOVWF  27
10ED:  MOVF   7A,W
10EE:  MOVWF  28
10EF:  MOVWF  33
10F0:  MOVF   27,W
10F1:  MOVWF  32
10F2:  CLRF   34
10F3:  BCF    0A.4
10F4:  BCF    03.6
10F5:  CALL   5EA
10F6:  BSF    0A.4
10F7:  MOVF   79,W
10F8:  MOVWF  7A
10F9:  MOVF   78,W
10FA:  BSF    03.6
10FB:  MOVWF  27
10FC:  MOVF   7A,W
10FD:  MOVWF  28
10FE:  MOVLW  01
10FF:  MOVWF  2A
1100:  MOVLW  21
1101:  MOVWF  29
1102:  MOVLW  06
1103:  MOVWF  78
1104:  MOVF   27,W
1105:  MOVWF  04
1106:  BCF    03.7
1107:  BTFSC  28.0
1108:  BSF    03.7
1109:  MOVF   00,W
110A:  MOVWF  77
110B:  MOVF   29,W
110C:  MOVWF  04
110D:  BCF    03.7
110E:  BTFSC  2A.0
110F:  BSF    03.7
1110:  MOVF   77,W
1111:  MOVWF  00
1112:  INCF   29,F
1113:  BTFSC  03.2
1114:  INCF   2A,F
1115:  INCF   27,F
1116:  BTFSC  03.2
1117:  INCF   28,F
1118:  DECFSZ 78,F
1119:  GOTO   104
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
111A:  MOVF   23,W
111B:  BCF    0A.4
111C:  BCF    03.6
111D:  CALL   004
111E:  BSF    0A.4
111F:  MOVWF  78
1120:  BSF    03.6
1121:  MOVWF  1D
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1122:  MOVF   24,W
1123:  BCF    0A.4
1124:  BCF    03.6
1125:  CALL   004
1126:  BSF    0A.4
1127:  IORLW  08
1128:  BSF    03.6
1129:  MOVWF  1E
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
112A:  MOVLW  01
112B:  MOVWF  31
112C:  MOVLW  1D
112D:  MOVWF  30
112E:  MOVLW  04
112F:  MOVWF  32
1130:  BCF    0A.4
1131:  BCF    03.6
1132:  CALL   657
1133:  BSF    0A.4
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
114C:  CLRF   1D
114D:  CLRF   1E
114E:  CLRF   1F
114F:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1150:  MOVLW  08
1151:  ADDWF  1B,W
1152:  MOVWF  78
1153:  MOVF   1C,W
1154:  MOVWF  7A
1155:  BTFSC  03.0
1156:  INCF   7A,F
1157:  MOVF   78,W
1158:  MOVWF  27
1159:  MOVF   7A,W
115A:  MOVWF  28
115B:  MOVWF  33
115C:  MOVF   27,W
115D:  MOVWF  32
115E:  CLRF   34
115F:  BCF    0A.4
1160:  BCF    03.6
1161:  CALL   5EA
1162:  BSF    0A.4
1163:  MOVF   79,W
1164:  MOVWF  7A
1165:  MOVF   78,W
1166:  BSF    03.6
1167:  MOVWF  27
1168:  MOVF   7A,W
1169:  MOVWF  28
116A:  MOVLW  01
116B:  MOVWF  2A
116C:  MOVLW  21
116D:  MOVWF  29
116E:  MOVLW  06
116F:  MOVWF  78
1170:  MOVF   27,W
1171:  MOVWF  04
1172:  BCF    03.7
1173:  BTFSC  28.0
1174:  BSF    03.7
1175:  MOVF   00,W
1176:  MOVWF  77
1177:  MOVF   29,W
1178:  MOVWF  04
1179:  BCF    03.7
117A:  BTFSC  2A.0
117B:  BSF    03.7
117C:  MOVF   77,W
117D:  MOVWF  00
117E:  INCF   29,F
117F:  BTFSC  03.2
1180:  INCF   2A,F
1181:  INCF   27,F
1182:  BTFSC  03.2
1183:  INCF   28,F
1184:  DECFSZ 78,F
1185:  GOTO   170
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1186:  MOVF   25,W
1187:  BCF    0A.4
1188:  BCF    03.6
1189:  CALL   004
118A:  BSF    0A.4
118B:  MOVWF  78
118C:  BSF    03.6
118D:  MOVWF  1D
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
118E:  MOVF   26,W
118F:  BCF    0A.4
1190:  BCF    03.6
1191:  CALL   004
1192:  BSF    0A.4
1193:  IORLW  08
1194:  BSF    03.6
1195:  MOVWF  1E
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1196:  MOVLW  01
1197:  MOVWF  31
1198:  MOVLW  1D
1199:  MOVWF  30
119A:  MOVLW  04
119B:  MOVWF  32
119C:  BCF    0A.4
119D:  BCF    03.6
119E:  CALL   657
119F:  BSF    0A.4
11A0:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0F27:  CLRF   1D
0F28:  CLRF   1E
0F29:  CLRF   1F
0F2A:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0F2B:  MOVLW  08
0F2C:  ADDWF  1B,W
0F2D:  MOVWF  78
0F2E:  MOVF   1C,W
0F2F:  MOVWF  7A
0F30:  BTFSC  03.0
0F31:  INCF   7A,F
0F32:  MOVF   78,W
0F33:  MOVWF  27
0F34:  MOVF   7A,W
0F35:  MOVWF  28
0F36:  MOVWF  33
0F37:  MOVF   27,W
0F38:  MOVWF  32
0F39:  CLRF   34
0F3A:  BCF    0A.3
0F3B:  BCF    03.6
0F3C:  CALL   5EA
0F3D:  BSF    0A.3
0F3E:  MOVF   79,W
0F3F:  MOVWF  7A
0F40:  MOVF   78,W
0F41:  BSF    03.6
0F42:  MOVWF  27
0F43:  MOVF   7A,W
0F44:  MOVWF  28
0F45:  MOVLW  01
0F46:  MOVWF  2A
0F47:  MOVLW  21
0F48:  MOVWF  29
0F49:  MOVLW  06
0F4A:  MOVWF  78
0F4B:  MOVF   27,W
0F4C:  MOVWF  04
0F4D:  BCF    03.7
0F4E:  BTFSC  28.0
0F4F:  BSF    03.7
0F50:  MOVF   00,W
0F51:  MOVWF  77
0F52:  MOVF   29,W
0F53:  MOVWF  04
0F54:  BCF    03.7
0F55:  BTFSC  2A.0
0F56:  BSF    03.7
0F57:  MOVF   77,W
0F58:  MOVWF  00
0F59:  INCF   29,F
0F5A:  BTFSC  03.2
0F5B:  INCF   2A,F
0F5C:  INCF   27,F
0F5D:  BTFSC  03.2
0F5E:  INCF   28,F
0F5F:  DECFSZ 78,F
0F60:  GOTO   74B
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0F61:  MOVF   23,W
0F62:  MOVWF  1D
....................     numbersToSend[1] = displayableTime.minute[1]; 
0F63:  MOVF   24,W
0F64:  MOVWF  1E
....................     numbersToSend[2] = displayableTime.hour[0]; 
0F65:  MOVF   21,W
0F66:  MOVWF  1F
....................     numbersToSend[3] = displayableTime.hour[1]; 
0F67:  MOVF   22,W
0F68:  MOVWF  20
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0F69:  MOVLW  01
0F6A:  MOVWF  2D
0F6B:  MOVLW  1D
0F6C:  MOVWF  2C
0F6D:  MOVLW  04
0F6E:  MOVWF  2E
0F6F:  MOVLW  01
0F70:  MOVWF  2F
0F71:  BCF    0A.3
0F72:  BCF    03.6
0F73:  CALL   69E
0F74:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0F8D:  CLRF   1D
0F8E:  CLRF   1E
0F8F:  CLRF   1F
0F90:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0F91:  MOVLW  08
0F92:  ADDWF  1B,W
0F93:  MOVWF  78
0F94:  MOVF   1C,W
0F95:  MOVWF  7A
0F96:  BTFSC  03.0
0F97:  INCF   7A,F
0F98:  MOVF   78,W
0F99:  MOVWF  27
0F9A:  MOVF   7A,W
0F9B:  MOVWF  28
0F9C:  MOVWF  33
0F9D:  MOVF   27,W
0F9E:  MOVWF  32
0F9F:  CLRF   34
0FA0:  BCF    0A.3
0FA1:  BCF    03.6
0FA2:  CALL   5EA
0FA3:  BSF    0A.3
0FA4:  MOVF   79,W
0FA5:  MOVWF  7A
0FA6:  MOVF   78,W
0FA7:  BSF    03.6
0FA8:  MOVWF  27
0FA9:  MOVF   7A,W
0FAA:  MOVWF  28
0FAB:  MOVLW  01
0FAC:  MOVWF  2A
0FAD:  MOVLW  21
0FAE:  MOVWF  29
0FAF:  MOVLW  06
0FB0:  MOVWF  78
0FB1:  MOVF   27,W
0FB2:  MOVWF  04
0FB3:  BCF    03.7
0FB4:  BTFSC  28.0
0FB5:  BSF    03.7
0FB6:  MOVF   00,W
0FB7:  MOVWF  77
0FB8:  MOVF   29,W
0FB9:  MOVWF  04
0FBA:  BCF    03.7
0FBB:  BTFSC  2A.0
0FBC:  BSF    03.7
0FBD:  MOVF   77,W
0FBE:  MOVWF  00
0FBF:  INCF   29,F
0FC0:  BTFSC  03.2
0FC1:  INCF   2A,F
0FC2:  INCF   27,F
0FC3:  BTFSC  03.2
0FC4:  INCF   28,F
0FC5:  DECFSZ 78,F
0FC6:  GOTO   7B1
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0FC7:  MOVF   25,W
0FC8:  MOVWF  1D
....................     numbersToSend[1] = displayableTime.second[1]; 
0FC9:  MOVF   26,W
0FCA:  MOVWF  1E
....................     numbersToSend[2] = displayableTime.minute[0]; 
0FCB:  MOVF   23,W
0FCC:  MOVWF  1F
....................     numbersToSend[3] = displayableTime.minute[1]; 
0FCD:  MOVF   24,W
0FCE:  MOVWF  20
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0FCF:  MOVLW  01
0FD0:  MOVWF  2D
0FD1:  MOVLW  1D
0FD2:  MOVWF  2C
0FD3:  MOVLW  04
0FD4:  MOVWF  2E
0FD5:  MOVLW  01
0FD6:  MOVWF  2F
0FD7:  BCF    0A.3
0FD8:  BCF    03.6
0FD9:  CALL   69E
0FDA:  BSF    0A.3
0FDB:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1275:  CLRF   1D
1276:  CLRF   1E
1277:  CLRF   1F
1278:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
1279:  MOVLW  08
127A:  ADDWF  1B,W
127B:  MOVWF  78
127C:  MOVF   1C,W
127D:  MOVWF  7A
127E:  BTFSC  03.0
127F:  INCF   7A,F
1280:  MOVF   78,W
1281:  MOVWF  27
1282:  MOVF   7A,W
1283:  MOVWF  28
1284:  MOVWF  33
1285:  MOVF   27,W
1286:  MOVWF  32
1287:  CLRF   34
1288:  BCF    0A.4
1289:  BCF    03.6
128A:  CALL   5EA
128B:  BSF    0A.4
128C:  MOVF   79,W
128D:  MOVWF  7A
128E:  MOVF   78,W
128F:  BSF    03.6
1290:  MOVWF  27
1291:  MOVF   7A,W
1292:  MOVWF  28
1293:  MOVLW  01
1294:  MOVWF  2A
1295:  MOVLW  21
1296:  MOVWF  29
1297:  MOVLW  06
1298:  MOVWF  78
1299:  MOVF   27,W
129A:  MOVWF  04
129B:  BCF    03.7
129C:  BTFSC  28.0
129D:  BSF    03.7
129E:  MOVF   00,W
129F:  MOVWF  77
12A0:  MOVF   29,W
12A1:  MOVWF  04
12A2:  BCF    03.7
12A3:  BTFSC  2A.0
12A4:  BSF    03.7
12A5:  MOVF   77,W
12A6:  MOVWF  00
12A7:  INCF   29,F
12A8:  BTFSC  03.2
12A9:  INCF   2A,F
12AA:  INCF   27,F
12AB:  BTFSC  03.2
12AC:  INCF   28,F
12AD:  DECFSZ 78,F
12AE:  GOTO   299
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
12AF:  MOVLW  08
12B0:  MOVWF  1E
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
12B1:  MOVF   21,W
12B2:  BCF    0A.4
12B3:  BCF    03.6
12B4:  CALL   004
12B5:  BSF    0A.4
12B6:  MOVWF  78
12B7:  BSF    03.6
12B8:  MOVWF  1F
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
12B9:  MOVF   22,W
12BA:  BCF    0A.4
12BB:  BCF    03.6
12BC:  CALL   004
12BD:  BSF    0A.4
12BE:  MOVWF  78
12BF:  BSF    03.6
12C0:  MOVWF  20
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
12C1:  MOVLW  01
12C2:  MOVWF  31
12C3:  MOVLW  1D
12C4:  MOVWF  30
12C5:  MOVLW  04
12C6:  MOVWF  32
12C7:  BCF    0A.4
12C8:  BCF    03.6
12C9:  CALL   657
12CA:  BSF    0A.4
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
12E3:  CLRF   1D
12E4:  CLRF   1E
12E5:  CLRF   1F
12E6:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
12E7:  MOVLW  08
12E8:  ADDWF  1B,W
12E9:  MOVWF  78
12EA:  MOVF   1C,W
12EB:  MOVWF  7A
12EC:  BTFSC  03.0
12ED:  INCF   7A,F
12EE:  MOVF   78,W
12EF:  MOVWF  27
12F0:  MOVF   7A,W
12F1:  MOVWF  28
12F2:  MOVWF  33
12F3:  MOVF   27,W
12F4:  MOVWF  32
12F5:  CLRF   34
12F6:  BCF    0A.4
12F7:  BCF    03.6
12F8:  CALL   5EA
12F9:  BSF    0A.4
12FA:  MOVF   79,W
12FB:  MOVWF  7A
12FC:  MOVF   78,W
12FD:  BSF    03.6
12FE:  MOVWF  27
12FF:  MOVF   7A,W
1300:  MOVWF  28
1301:  MOVLW  01
1302:  MOVWF  2A
1303:  MOVLW  21
1304:  MOVWF  29
1305:  MOVLW  06
1306:  MOVWF  78
1307:  MOVF   27,W
1308:  MOVWF  04
1309:  BCF    03.7
130A:  BTFSC  28.0
130B:  BSF    03.7
130C:  MOVF   00,W
130D:  MOVWF  77
130E:  MOVF   29,W
130F:  MOVWF  04
1310:  BCF    03.7
1311:  BTFSC  2A.0
1312:  BSF    03.7
1313:  MOVF   77,W
1314:  MOVWF  00
1315:  INCF   29,F
1316:  BTFSC  03.2
1317:  INCF   2A,F
1318:  INCF   27,F
1319:  BTFSC  03.2
131A:  INCF   28,F
131B:  DECFSZ 78,F
131C:  GOTO   307
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
131D:  MOVLW  08
131E:  MOVWF  1E
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
131F:  MOVF   23,W
1320:  BCF    0A.4
1321:  BCF    03.6
1322:  CALL   004
1323:  BSF    0A.4
1324:  MOVWF  78
1325:  BSF    03.6
1326:  MOVWF  1F
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
1327:  MOVF   24,W
1328:  BCF    0A.4
1329:  BCF    03.6
132A:  CALL   004
132B:  BSF    0A.4
132C:  MOVWF  78
132D:  BSF    03.6
132E:  MOVWF  20
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
132F:  MOVLW  01
1330:  MOVWF  31
1331:  MOVLW  1D
1332:  MOVWF  30
1333:  MOVLW  04
1334:  MOVWF  32
1335:  BCF    0A.4
1336:  BCF    03.6
1337:  CALL   657
1338:  BSF    0A.4
1339:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS = 0, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN = 0, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_SETTING_BRIGHTNESS, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char brightness; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
....................     char addressBrightness; 
....................     char addressTypeOfCount; 
.................... } PolyoneDisplay; 
....................  
.................... const int brightnessLevels[10] = {10, 34, 58, 82, 106, 130, 154, 178, 202, 255}; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_setRtc(&polyoneDisplayPtr->timer); 
*
0155:  BSF    03.6
0156:  MOVF   46,W
0157:  MOVWF  78
0158:  MOVF   47,W
0159:  MOVWF  7A
015A:  MOVF   78,W
015B:  MOVWF  48
015C:  MOVF   7A,W
015D:  MOVWF  49
015E:  MOVF   49,W
015F:  MOVWF  4B
0160:  MOVF   48,W
0161:  MOVWF  4A
*
0191:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
054E:  BSF    03.6
054F:  MOVF   46,W
0550:  MOVWF  78
0551:  MOVF   47,W
0552:  MOVWF  7A
0553:  MOVF   78,W
0554:  MOVWF  48
0555:  MOVF   7A,W
0556:  MOVWF  49
0557:  MOVF   49,W
0558:  MOVWF  4B
0559:  MOVF   48,W
055A:  MOVWF  4A
*
057F:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(char addressCurrentState, 
....................         char addressPreviousState, char addressFormat, 
....................         char addressFirstNumberAlarm, 
....................         char addressSecondNumberAlarm, char addressRtcHours, 
....................         char addressRtcMinutes, char addressRtcSeconds, 
....................         char addressBrightness, char addressTypeOfCount) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
0A94:  MOVF   1D,W
0A95:  MOVWF  41
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
0A96:  MOVF   1E,W
0A97:  MOVWF  42
....................     polyoneDisplay.addressFormat = addressFormat; 
0A98:  MOVF   1F,W
0A99:  MOVWF  43
....................     polyoneDisplay.addressBrightness = addressBrightness; 
0A9A:  MOVF   25,W
0A9B:  MOVWF  44
....................     polyoneDisplay.addressTypeOfCount = addressTypeOfCount; 
0A9C:  MOVF   26,W
0A9D:  MOVWF  45
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
0A9E:  MOVF   1F,W
0A9F:  MOVWF  0D
0AA0:  BSF    03.5
0AA1:  BCF    0C.7
0AA2:  BSF    0C.0
0AA3:  BCF    03.5
0AA4:  MOVF   0C,W
0AA5:  ANDLW  01
0AA6:  MOVWF  78
0AA7:  BCF    3D.0
0AA8:  BTFSC  78.0
0AA9:  BSF    3D.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
0AAA:  MOVF   1D,W
0AAB:  MOVWF  0D
0AAC:  BSF    03.5
0AAD:  BCF    0C.7
0AAE:  BSF    0C.0
0AAF:  BCF    03.5
0AB0:  MOVF   0C,W
0AB1:  MOVWF  47
0AB2:  MOVF   47,W
0AB3:  BSF    03.5
0AB4:  MOVWF  28
0AB5:  MOVLW  03
0AB6:  MOVWF  29
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  BCF    03.6
0ABA:  CALL   03D
0ABB:  BSF    0A.3
0ABC:  MOVF   77,W
0ABD:  BSF    03.6
0ABE:  MOVWF  3E
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
0ABF:  MOVF   1E,W
0AC0:  MOVWF  0D
0AC1:  BSF    03.5
0AC2:  BCF    0C.7
0AC3:  BSF    0C.0
0AC4:  BCF    03.5
0AC5:  MOVF   0C,W
0AC6:  MOVWF  47
0AC7:  MOVF   47,W
0AC8:  BSF    03.5
0AC9:  MOVWF  28
0ACA:  MOVLW  03
0ACB:  MOVWF  29
0ACC:  BCF    0A.3
0ACD:  BCF    03.5
0ACE:  BCF    03.6
0ACF:  CALL   03D
0AD0:  BSF    0A.3
0AD1:  MOVF   77,W
0AD2:  BSF    03.6
0AD3:  MOVWF  3F
....................     polyoneDisplay.brightness = read_eeprom(addressBrightness) % 10; 
0AD4:  MOVF   25,W
0AD5:  MOVWF  0D
0AD6:  BSF    03.5
0AD7:  BCF    0C.7
0AD8:  BSF    0C.0
0AD9:  BCF    03.5
0ADA:  MOVF   0C,W
0ADB:  MOVWF  47
0ADC:  MOVF   47,W
0ADD:  BSF    03.5
0ADE:  MOVWF  28
0ADF:  MOVLW  0A
0AE0:  MOVWF  29
0AE1:  BCF    0A.3
0AE2:  BCF    03.5
0AE3:  BCF    03.6
0AE4:  CALL   03D
0AE5:  BSF    0A.3
0AE6:  MOVF   77,W
0AE7:  BSF    03.6
0AE8:  MOVWF  40
....................     polyoneDisplay.typeOfCount = read_eeprom(addressTypeOfCount) % 2; 
0AE9:  MOVF   26,W
0AEA:  MOVWF  0D
0AEB:  BSF    03.5
0AEC:  BCF    0C.7
0AED:  BSF    0C.0
0AEE:  BCF    03.5
0AEF:  MOVF   0C,W
0AF0:  ANDLW  01
0AF1:  MOVWF  78
0AF2:  BCF    3D.1
0AF3:  BTFSC  78.0
0AF4:  BSF    3D.1
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
0AF5:  MOVF   3F,F
0AF6:  BTFSS  03.2
0AF7:  GOTO   2FD
0AF8:  MOVF   3E,F
0AF9:  BTFSS  03.2
0AFA:  GOTO   2FD
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
0AFB:  MOVLW  02
0AFC:  MOVWF  3F
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
0AFD:  MOVLW  00
0AFE:  BTFSC  3D.0
0AFF:  MOVLW  01
0B00:  XORLW  01
0B01:  BCF    03.6
0B02:  BTFSC  03.2
0B03:  GOTO   308
0B04:  XORLW  01
0B05:  BTFSC  03.2
0B06:  GOTO   3E5
0B07:  GOTO   4CE
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0B08:  MOVLW  63
0B09:  BSF    03.6
0B0A:  MOVWF  50
0B0B:  MOVLW  3B
0B0C:  MOVWF  51
0B0D:  CLRF   53
0B0E:  MOVF   20,W
0B0F:  MOVWF  52
0B10:  CLRF   55
0B11:  MOVF   21,W
0B12:  MOVWF  54
0B13:  CLRF   57
0B14:  MOVF   22,W
0B15:  MOVWF  56
0B16:  CLRF   59
0B17:  MOVF   23,W
0B18:  MOVWF  58
0B19:  CLRF   5B
0B1A:  MOVF   24,W
0B1B:  MOVWF  5A
*
0BC0:  MOVF   79,W
0BC1:  MOVWF  7A
0BC2:  MOVF   78,W
0BC3:  BCF    03.5
0BC4:  MOVWF  4A
0BC5:  MOVF   7A,W
0BC6:  MOVWF  4B
0BC7:  MOVLW  01
0BC8:  MOVWF  4D
0BC9:  MOVLW  27
0BCA:  MOVWF  4C
0BCB:  MOVLW  16
0BCC:  MOVWF  78
0BCD:  MOVF   4A,W
0BCE:  MOVWF  04
0BCF:  BCF    03.7
0BD0:  BTFSC  4B.0
0BD1:  BSF    03.7
0BD2:  MOVF   00,W
0BD3:  MOVWF  77
0BD4:  MOVF   4C,W
0BD5:  MOVWF  04
0BD6:  BCF    03.7
0BD7:  BTFSC  4D.0
0BD8:  BSF    03.7
0BD9:  MOVF   77,W
0BDA:  MOVWF  00
0BDB:  INCF   4C,F
0BDC:  BTFSC  03.2
0BDD:  INCF   4D,F
0BDE:  INCF   4A,F
0BDF:  BTFSC  03.2
0BE0:  INCF   4B,F
0BE1:  DECFSZ 78,F
0BE2:  GOTO   3CD
....................             break; 
0BE3:  BCF    03.6
0BE4:  GOTO   4CE
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0BE5:  MOVLW  63
0BE6:  BSF    03.6
0BE7:  MOVWF  50
0BE8:  CLRF   52
0BE9:  MOVF   20,W
0BEA:  MOVWF  51
0BEB:  CLRF   54
0BEC:  MOVF   21,W
0BED:  MOVWF  53
0BEE:  CLRF   56
0BEF:  MOVF   22,W
0BF0:  MOVWF  55
0BF1:  CLRF   58
0BF2:  MOVF   23,W
0BF3:  MOVWF  57
0BF4:  CLRF   5A
0BF5:  MOVF   24,W
0BF6:  MOVWF  59
*
0CAA:  MOVF   79,W
0CAB:  MOVWF  7A
0CAC:  MOVF   78,W
0CAD:  BCF    03.5
0CAE:  MOVWF  4A
0CAF:  MOVF   7A,W
0CB0:  MOVWF  4B
0CB1:  MOVLW  01
0CB2:  MOVWF  4D
0CB3:  MOVLW  27
0CB4:  MOVWF  4C
0CB5:  MOVLW  16
0CB6:  MOVWF  78
0CB7:  MOVF   4A,W
0CB8:  MOVWF  04
0CB9:  BCF    03.7
0CBA:  BTFSC  4B.0
0CBB:  BSF    03.7
0CBC:  MOVF   00,W
0CBD:  MOVWF  77
0CBE:  MOVF   4C,W
0CBF:  MOVWF  04
0CC0:  BCF    03.7
0CC1:  BTFSC  4D.0
0CC2:  BSF    03.7
0CC3:  MOVF   77,W
0CC4:  MOVWF  00
0CC5:  INCF   4C,F
0CC6:  BTFSC  03.2
0CC7:  INCF   4D,F
0CC8:  INCF   4A,F
0CC9:  BTFSC  03.2
0CCA:  INCF   4B,F
0CCB:  DECFSZ 78,F
0CCC:  GOTO   4B7
....................  
....................             break; 
0CCD:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
0CCE:  BSF    03.6
0CCF:  MOVF   3E,F
0CD0:  BTFSS  03.2
0CD1:  GOTO   4E5
....................         //        PolyoneDisplay_updateTimer(&polyoneDisplay); 
....................         //        Timer_updateTimerFromEeprom(&polyoneDisplay.timer); 
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
0CD2:  MOVLW  01
0CD3:  MOVWF  47
0CD4:  MOVLW  27
0CD5:  MOVWF  46
0CD6:  BCF    0A.3
0CD7:  BCF    03.6
0CD8:  CALL   155
0CD9:  BSF    0A.3
....................         Timer_updateCountdownTime(&polyoneDisplay); 
0CDA:  MOVLW  01
0CDB:  BSF    03.6
0CDC:  MOVWF  4D
0CDD:  MOVLW  27
0CDE:  MOVWF  4C
0CDF:  BCF    0A.3
0CE0:  BCF    03.6
0CE1:  CALL   2DC
0CE2:  BSF    0A.3
....................     } else { 
0CE3:  GOTO   4ED
0CE4:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0CE5:  MOVLW  01
0CE6:  MOVWF  47
0CE7:  MOVLW  27
0CE8:  MOVWF  46
0CE9:  BCF    0A.3
0CEA:  BCF    03.6
0CEB:  CALL   54E
0CEC:  BSF    0A.3
....................     } 
....................  
....................     return polyoneDisplay; 
0CED:  MOVLW  27
0CEE:  MOVWF  78
0CEF:  MOVLW  01
0CF0:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
*
0800:  MOVLW  16
0801:  BSF    03.6
0802:  ADDWF  17,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  18.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  77
0809:  RRF    77,W
080A:  ANDLW  01
080B:  SUBLW  01
080C:  BTFSS  03.2
080D:  GOTO   0EE
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
080E:  MOVLW  16
080F:  ADDWF  17,W
0810:  MOVWF  04
0811:  BCF    03.7
0812:  BTFSC  18.0
0813:  BSF    03.7
0814:  MOVF   00,W
0815:  ANDLW  01
0816:  SUBLW  01
0817:  BTFSS  03.2
0818:  GOTO   077
....................             Time_showHoursMinutesRtc(withBlink); 
0819:  MOVF   19,W
081A:  MOVWF  1A
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0875:  GOTO   0EC
0876:  BSF    03.6
0877:  MOVLW  16
0878:  ADDWF  17,W
0879:  MOVWF  04
087A:  BCF    03.7
087B:  BTFSC  18.0
087C:  BSF    03.7
087D:  MOVF   00,W
087E:  ANDLW  01
087F:  BTFSS  03.2
0880:  GOTO   0ED
....................             Time_showMinutesSecondsRtc(); 
....................         } 
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
*
08ED:  GOTO   1F4
08EE:  MOVLW  16
08EF:  ADDWF  17,W
08F0:  MOVWF  04
08F1:  BCF    03.7
08F2:  BTFSC  18.0
08F3:  BSF    03.7
08F4:  MOVF   00,W
08F5:  MOVWF  77
08F6:  RRF    77,W
08F7:  ANDLW  01
08F8:  BTFSS  03.2
08F9:  GOTO   1F4
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
08FA:  MOVLW  16
08FB:  ADDWF  17,W
08FC:  MOVWF  04
08FD:  BCF    03.7
08FE:  BTFSC  18.0
08FF:  BSF    03.7
0900:  MOVF   00,W
0901:  ANDLW  01
0902:  SUBLW  01
0903:  BTFSS  03.2
0904:  GOTO   16B
....................             Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0905:  MOVF   17,W
0906:  MOVWF  1A
0907:  MOVF   18,W
0908:  MOVWF  1B
0909:  MOVF   1B,W
090A:  MOVWF  1D
090B:  MOVF   1A,W
090C:  MOVWF  1C
090D:  MOVF   19,W
090E:  MOVWF  1E
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0969:  GOTO   1F3
096A:  BSF    03.6
096B:  MOVLW  16
096C:  ADDWF  17,W
096D:  MOVWF  04
096E:  BCF    03.7
096F:  BTFSC  18.0
0970:  BSF    03.7
0971:  MOVF   00,W
0972:  ANDLW  01
0973:  BTFSS  03.2
0974:  GOTO   1F4
....................             Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0975:  MOVF   17,W
0976:  MOVWF  1A
0977:  MOVF   18,W
0978:  MOVWF  1B
0979:  MOVF   1B,W
097A:  MOVWF  1D
097B:  MOVF   1A,W
097C:  MOVWF  1C
....................         } 
....................     } 
*
09F4:  BCF    03.6
09F5:  RETURN
....................  
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0F0F:  MOVLW  16
0F10:  BSF    03.6
0F11:  ADDWF  17,W
0F12:  MOVWF  04
0F13:  BCF    03.7
0F14:  BTFSC  18.0
0F15:  BSF    03.7
0F16:  MOVF   00,W
0F17:  ANDLW  01
0F18:  SUBLW  01
0F19:  BTFSS  03.2
0F1A:  GOTO   777
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0F1B:  MOVF   17,W
0F1C:  MOVWF  78
0F1D:  MOVF   18,W
0F1E:  MOVWF  7A
0F1F:  MOVF   78,W
0F20:  MOVWF  19
0F21:  MOVF   7A,W
0F22:  MOVWF  1A
0F23:  MOVF   1A,W
0F24:  MOVWF  1C
0F25:  MOVF   19,W
0F26:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0F75:  GOTO   7DB
0F76:  BSF    03.6
0F77:  MOVLW  16
0F78:  ADDWF  17,W
0F79:  MOVWF  04
0F7A:  BCF    03.7
0F7B:  BTFSC  18.0
0F7C:  BSF    03.7
0F7D:  MOVF   00,W
0F7E:  ANDLW  01
0F7F:  BTFSS  03.2
0F80:  GOTO   7DC
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0F81:  MOVF   17,W
0F82:  MOVWF  78
0F83:  MOVF   18,W
0F84:  MOVWF  7A
0F85:  MOVF   78,W
0F86:  MOVWF  19
0F87:  MOVF   7A,W
0F88:  MOVWF  1A
0F89:  MOVF   1A,W
0F8A:  MOVWF  1C
0F8B:  MOVF   19,W
0F8C:  MOVWF  1B
....................     } 
*
0FDC:  BCF    03.6
0FDD:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_hideBrightness(void) { 
....................     int numbersToSend[4] = {0}; 
*
1654:  BSF    03.6
1655:  CLRF   17
1656:  CLRF   18
1657:  CLRF   19
1658:  CLRF   1A
....................  
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1659:  MOVLW  37
165A:  MOVWF  19
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
165B:  MOVLW  01
165C:  MOVWF  31
165D:  MOVLW  17
165E:  MOVWF  30
165F:  MOVLW  04
1660:  MOVWF  32
1661:  BCF    0A.4
1662:  BCF    03.6
1663:  CALL   657
1664:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_showBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
102E:  BSF    03.6
102F:  CLRF   19
1030:  CLRF   1A
1031:  CLRF   1B
1032:  CLRF   1C
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) % 10]; 
1033:  MOVLW  19
1034:  ADDWF  17,W
1035:  MOVWF  04
1036:  BCF    03.7
1037:  BTFSC  18.0
1038:  BSF    03.7
1039:  MOVLW  01
103A:  ADDWF  00,W
103B:  MOVWF  1E
103C:  BSF    03.5
103D:  MOVWF  28
103E:  MOVLW  0A
103F:  MOVWF  29
1040:  BCF    0A.4
1041:  BCF    03.5
1042:  BCF    03.6
1043:  CALL   03D
1044:  BSF    0A.4
1045:  MOVF   77,W
1046:  BCF    0A.4
1047:  CALL   004
1048:  BSF    0A.4
1049:  MOVWF  78
104A:  BSF    03.6
104B:  MOVWF  19
....................     numbersToSend[1] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) / 10] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
104C:  MOVLW  19
104D:  ADDWF  17,W
104E:  MOVWF  04
104F:  BCF    03.7
1050:  BTFSC  18.0
1051:  BSF    03.7
1052:  MOVLW  01
1053:  ADDWF  00,W
1054:  MOVWF  1E
1055:  BSF    03.5
1056:  MOVWF  28
1057:  MOVLW  0A
1058:  MOVWF  29
1059:  BCF    0A.4
105A:  BCF    03.5
105B:  BCF    03.6
105C:  CALL   03D
105D:  BSF    0A.4
105E:  MOVF   78,W
105F:  BCF    0A.4
1060:  CALL   004
1061:  BSF    0A.4
1062:  IORLW  08
1063:  BSF    03.6
1064:  MOVWF  1A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1065:  MOVLW  37
1066:  MOVWF  1B
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1067:  MOVLW  01
1068:  MOVWF  31
1069:  MOVLW  19
106A:  MOVWF  30
106B:  MOVLW  04
106C:  MOVWF  32
106D:  BCF    0A.4
106E:  BCF    03.6
106F:  CALL   657
1070:  BSF    0A.4
1071:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
125E:  MOVLW  16
125F:  ADDWF  17,W
1260:  MOVWF  04
1261:  BCF    03.7
1262:  BTFSC  18.0
1263:  BSF    03.7
1264:  MOVF   00,W
1265:  ANDLW  01
1266:  SUBLW  01
1267:  BTFSS  03.2
1268:  GOTO   2CD
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
1269:  MOVF   17,W
126A:  MOVWF  78
126B:  MOVF   18,W
126C:  MOVWF  7A
126D:  MOVF   78,W
126E:  MOVWF  19
126F:  MOVF   7A,W
1270:  MOVWF  1A
1271:  MOVF   1A,W
1272:  MOVWF  1C
1273:  MOVF   19,W
1274:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
12CB:  GOTO   339
12CC:  BSF    03.6
12CD:  MOVLW  16
12CE:  ADDWF  17,W
12CF:  MOVWF  04
12D0:  BCF    03.7
12D1:  BTFSC  18.0
12D2:  BSF    03.7
12D3:  MOVF   00,W
12D4:  ANDLW  01
12D5:  BTFSS  03.2
12D6:  GOTO   33A
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
12D7:  MOVF   17,W
12D8:  MOVWF  78
12D9:  MOVF   18,W
12DA:  MOVWF  7A
12DB:  MOVF   78,W
12DC:  MOVWF  19
12DD:  MOVF   7A,W
12DE:  MOVWF  1A
12DF:  MOVF   1A,W
12E0:  MOVWF  1C
12E1:  MOVF   19,W
12E2:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
10C9:  MOVLW  16
10CA:  ADDWF  17,W
10CB:  MOVWF  04
10CC:  BCF    03.7
10CD:  BTFSC  18.0
10CE:  BSF    03.7
10CF:  MOVF   00,W
10D0:  ANDLW  01
10D1:  SUBLW  01
10D2:  BTFSS  03.2
10D3:  GOTO   136
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
10D4:  MOVF   17,W
10D5:  MOVWF  78
10D6:  MOVF   18,W
10D7:  MOVWF  7A
10D8:  MOVF   78,W
10D9:  MOVWF  19
10DA:  MOVF   7A,W
10DB:  MOVWF  1A
10DC:  MOVF   1A,W
10DD:  MOVWF  1C
10DE:  MOVF   19,W
10DF:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1134:  GOTO   1A0
1135:  BSF    03.6
1136:  MOVLW  16
1137:  ADDWF  17,W
1138:  MOVWF  04
1139:  BCF    03.7
113A:  BTFSC  18.0
113B:  BSF    03.7
113C:  MOVF   00,W
113D:  ANDLW  01
113E:  BTFSS  03.2
113F:  GOTO   1A1
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
1140:  MOVF   17,W
1141:  MOVWF  78
1142:  MOVF   18,W
1143:  MOVWF  7A
1144:  MOVF   78,W
1145:  MOVWF  19
1146:  MOVF   7A,W
1147:  MOVWF  1A
1148:  MOVF   1A,W
1149:  MOVWF  1C
114A:  MOVF   19,W
114B:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
142B:  CLRF   19
142C:  CLRF   1A
142D:  CLRF   1B
142E:  CLRF   1C
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
142F:  MOVLW  16
1430:  ADDWF  17,W
1431:  MOVWF  04
1432:  BCF    03.7
1433:  BTFSC  18.0
1434:  BSF    03.7
1435:  MOVF   00,W
1436:  ANDLW  01
1437:  SUBLW  01
1438:  BTFSS  03.2
1439:  GOTO   442
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
143A:  MOVLW  25
143B:  MOVWF  19
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
143C:  MOVLW  2D
143D:  MOVWF  1A
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
143E:  MOVLW  67
143F:  MOVWF  1B
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1440:  MOVWF  1C
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1441:  GOTO   453
1442:  MOVLW  16
1443:  ADDWF  17,W
1444:  MOVWF  04
1445:  BCF    03.7
1446:  BTFSC  18.0
1447:  BSF    03.7
1448:  MOVF   00,W
1449:  ANDLW  01
144A:  BTFSS  03.2
144B:  GOTO   453
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
144C:  MOVLW  B3
144D:  MOVWF  19
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
144E:  MOVLW  BB
144F:  MOVWF  1A
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1450:  MOVLW  25
1451:  MOVWF  1B
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1452:  MOVWF  1C
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1453:  MOVLW  01
1454:  MOVWF  31
1455:  MOVLW  19
1456:  MOVWF  30
1457:  MOVLW  04
1458:  MOVWF  32
1459:  BCF    0A.4
145A:  BCF    03.6
145B:  CALL   657
145C:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_increaseBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->brightness = (polyoneDisplayPtr->brightness + 1) % 10; 
*
1673:  MOVLW  19
1674:  ADDWF  17,W
1675:  MOVWF  78
1676:  MOVF   18,W
1677:  MOVWF  7A
1678:  BTFSC  03.0
1679:  INCF   7A,F
167A:  MOVF   78,W
167B:  MOVWF  19
167C:  MOVF   7A,W
167D:  MOVWF  1A
167E:  MOVLW  19
167F:  ADDWF  17,W
1680:  MOVWF  04
1681:  BCF    03.7
1682:  BTFSC  18.0
1683:  BSF    03.7
1684:  MOVLW  01
1685:  ADDWF  00,W
1686:  MOVWF  1C
1687:  BSF    03.5
1688:  MOVWF  28
1689:  MOVLW  0A
168A:  MOVWF  29
168B:  BCF    0A.4
168C:  BCF    03.5
168D:  BCF    03.6
168E:  CALL   03D
168F:  BSF    0A.4
1690:  MOVF   77,W
1691:  BSF    03.6
1692:  MOVWF  1B
1693:  MOVF   19,W
1694:  MOVWF  04
1695:  BCF    03.7
1696:  BTFSC  1A.0
1697:  BSF    03.7
1698:  MOVF   1B,W
1699:  MOVWF  00
....................     set_pwm1_duty(brightnessLevels[polyoneDisplayPtr->brightness]); 
169A:  MOVLW  19
169B:  ADDWF  17,W
169C:  MOVWF  04
169D:  BCF    03.7
169E:  BTFSC  18.0
169F:  BSF    03.7
16A0:  MOVF   00,W
16A1:  BCF    0A.4
16A2:  BCF    03.6
16A3:  CALL   023
16A4:  BSF    0A.4
16A5:  BSF    03.6
16A6:  MOVWF  19
16A7:  BCF    03.6
16A8:  MOVWF  15
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
11B0:  MOVLW  16
11B1:  ADDWF  17,W
11B2:  MOVWF  04
11B3:  BCF    03.7
11B4:  BTFSC  18.0
11B5:  BSF    03.7
11B6:  MOVF   00,W
11B7:  ANDLW  01
11B8:  SUBLW  01
11B9:  BTFSS  03.2
11BA:  GOTO   1F7
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
11BB:  MOVF   17,W
11BC:  MOVWF  78
11BD:  MOVF   18,W
11BE:  MOVWF  7A
11BF:  MOVF   78,W
11C0:  MOVWF  19
11C1:  MOVF   7A,W
11C2:  MOVWF  1A
11C3:  MOVF   1A,W
11C4:  MOVWF  1C
11C5:  MOVF   19,W
11C6:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
11F6:  GOTO   20F
11F7:  MOVLW  16
11F8:  ADDWF  17,W
11F9:  MOVWF  04
11FA:  BCF    03.7
11FB:  BTFSC  18.0
11FC:  BSF    03.7
11FD:  MOVF   00,W
11FE:  ANDLW  01
11FF:  BTFSS  03.2
1200:  GOTO   20F
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1201:  MOVF   17,W
1202:  MOVWF  78
1203:  MOVF   18,W
1204:  MOVWF  7A
1205:  MOVF   78,W
1206:  MOVWF  19
1207:  MOVF   18,W
1208:  MOVWF  1A
1209:  MOVWF  1C
120A:  MOVF   19,W
120B:  MOVWF  1B
120C:  BCF    03.6
120D:  CALL   000
120E:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1349:  MOVLW  16
134A:  ADDWF  17,W
134B:  MOVWF  04
134C:  BCF    03.7
134D:  BTFSC  18.0
134E:  BSF    03.7
134F:  MOVF   00,W
1350:  ANDLW  01
1351:  SUBLW  01
1352:  BTFSS  03.2
1353:  GOTO   363
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1354:  MOVF   17,W
1355:  MOVWF  78
1356:  MOVF   18,W
1357:  MOVWF  7A
1358:  MOVF   17,W
1359:  MOVWF  19
135A:  MOVF   18,W
135B:  MOVWF  1A
135C:  MOVWF  1C
135D:  MOVF   17,W
135E:  MOVWF  1B
135F:  BCF    03.6
1360:  CALL   000
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1361:  GOTO   3A9
1362:  BSF    03.6
1363:  MOVLW  16
1364:  ADDWF  17,W
1365:  MOVWF  04
1366:  BCF    03.7
1367:  BTFSC  18.0
1368:  BSF    03.7
1369:  MOVF   00,W
136A:  ANDLW  01
136B:  BTFSS  03.2
136C:  GOTO   3A8
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
136D:  MOVF   17,W
136E:  MOVWF  78
136F:  MOVF   18,W
1370:  MOVWF  7A
1371:  MOVF   78,W
1372:  MOVWF  19
1373:  MOVF   7A,W
1374:  MOVWF  1A
1375:  MOVF   1A,W
1376:  MOVWF  1C
1377:  MOVF   19,W
1378:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
1468:  MOVLW  16
1469:  ADDWF  17,W
146A:  MOVWF  78
146B:  MOVF   18,W
146C:  MOVWF  7A
146D:  BTFSC  03.0
146E:  INCF   7A,F
146F:  MOVF   78,W
1470:  MOVWF  19
1471:  MOVF   7A,W
1472:  MOVWF  1A
1473:  MOVLW  16
1474:  ADDWF  17,W
1475:  MOVWF  04
1476:  BCF    03.7
1477:  BTFSC  18.0
1478:  BSF    03.7
1479:  BTFSS  00.0
147A:  GOTO   482
147B:  MOVF   19,W
147C:  MOVWF  04
147D:  BCF    03.7
147E:  BTFSC  1A.0
147F:  BSF    03.7
1480:  BCF    00.0
1481:  GOTO   488
1482:  MOVF   19,W
1483:  MOVWF  04
1484:  BCF    03.7
1485:  BTFSC  1A.0
1486:  BSF    03.7
1487:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1488:  MOVLW  16
1489:  ADDWF  17,W
148A:  MOVWF  04
148B:  BCF    03.7
148C:  BTFSC  18.0
148D:  BSF    03.7
148E:  MOVF   00,W
148F:  ANDLW  01
1490:  SUBLW  01
1491:  BTFSS  03.2
1492:  GOTO   4DF
....................         polyoneDisplayPtr->timer.alarmTime.hour = polyoneDisplayPtr->timer.alarmTime.minute; 
1493:  MOVLW  09
1494:  ADDWF  17,W
1495:  MOVWF  78
1496:  MOVF   18,W
1497:  MOVWF  7A
1498:  BTFSC  03.0
1499:  INCF   7A,F
149A:  MOVF   78,W
149B:  MOVWF  19
149C:  MOVF   7A,W
149D:  MOVWF  1A
149E:  MOVLW  0A
149F:  ADDWF  17,W
14A0:  MOVWF  04
14A1:  BCF    03.7
14A2:  BTFSC  18.0
14A3:  BSF    03.7
14A4:  MOVF   00,W
14A5:  MOVWF  1B
14A6:  MOVF   19,W
14A7:  MOVWF  04
14A8:  BCF    03.7
14A9:  BTFSC  1A.0
14AA:  BSF    03.7
14AB:  MOVF   1B,W
14AC:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.second; 
14AD:  MOVLW  0A
14AE:  ADDWF  17,W
14AF:  MOVWF  78
14B0:  MOVF   18,W
14B1:  MOVWF  7A
14B2:  BTFSC  03.0
14B3:  INCF   7A,F
14B4:  MOVF   78,W
14B5:  MOVWF  19
14B6:  MOVF   7A,W
14B7:  MOVWF  1A
14B8:  MOVLW  0B
14B9:  ADDWF  17,W
14BA:  MOVWF  04
14BB:  BCF    03.7
14BC:  BTFSC  18.0
14BD:  BSF    03.7
14BE:  MOVF   00,W
14BF:  MOVWF  1B
14C0:  MOVF   19,W
14C1:  MOVWF  04
14C2:  BCF    03.7
14C3:  BTFSC  1A.0
14C4:  BSF    03.7
14C5:  MOVF   1B,W
14C6:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.second = 0; 
14C7:  MOVLW  0B
14C8:  ADDWF  17,W
14C9:  MOVWF  04
14CA:  BCF    03.7
14CB:  BTFSC  18.0
14CC:  BSF    03.7
14CD:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
14CE:  MOVLW  13
14CF:  ADDWF  17,W
14D0:  MOVWF  04
14D1:  BCF    03.7
14D2:  BTFSC  18.0
14D3:  BSF    03.7
14D4:  MOVLW  63
14D5:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
14D6:  MOVLW  14
14D7:  ADDWF  17,W
14D8:  MOVWF  04
14D9:  BCF    03.7
14DA:  BTFSC  18.0
14DB:  BSF    03.7
14DC:  MOVLW  3B
14DD:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
14DE:  GOTO   533
14DF:  MOVLW  16
14E0:  ADDWF  17,W
14E1:  MOVWF  04
14E2:  BCF    03.7
14E3:  BTFSC  18.0
14E4:  BSF    03.7
14E5:  MOVF   00,W
14E6:  ANDLW  01
14E7:  BTFSS  03.2
14E8:  GOTO   533
....................         polyoneDisplayPtr->timer.alarmTime.second = polyoneDisplayPtr->timer.alarmTime.minute; 
14E9:  MOVLW  0B
14EA:  ADDWF  17,W
14EB:  MOVWF  78
14EC:  MOVF   18,W
14ED:  MOVWF  7A
14EE:  BTFSC  03.0
14EF:  INCF   7A,F
14F0:  MOVF   78,W
14F1:  MOVWF  19
14F2:  MOVF   7A,W
14F3:  MOVWF  1A
14F4:  MOVLW  0A
14F5:  ADDWF  17,W
14F6:  MOVWF  04
14F7:  BCF    03.7
14F8:  BTFSC  18.0
14F9:  BSF    03.7
14FA:  MOVF   00,W
14FB:  MOVWF  1B
14FC:  MOVF   19,W
14FD:  MOVWF  04
14FE:  BCF    03.7
14FF:  BTFSC  1A.0
1500:  BSF    03.7
1501:  MOVF   1B,W
1502:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.hour; 
1503:  MOVLW  0A
1504:  ADDWF  17,W
1505:  MOVWF  78
1506:  MOVF   18,W
1507:  MOVWF  7A
1508:  BTFSC  03.0
1509:  INCF   7A,F
150A:  MOVF   78,W
150B:  MOVWF  19
150C:  MOVF   7A,W
150D:  MOVWF  1A
150E:  MOVLW  09
150F:  ADDWF  17,W
1510:  MOVWF  04
1511:  BCF    03.7
1512:  BTFSC  18.0
1513:  BSF    03.7
1514:  MOVF   00,W
1515:  MOVWF  1B
1516:  MOVF   19,W
1517:  MOVWF  04
1518:  BCF    03.7
1519:  BTFSC  1A.0
151A:  BSF    03.7
151B:  MOVF   1B,W
151C:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.hour = 0; 
151D:  MOVLW  09
151E:  ADDWF  17,W
151F:  MOVWF  04
1520:  BCF    03.7
1521:  BTFSC  18.0
1522:  BSF    03.7
1523:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
1524:  MOVLW  13
1525:  ADDWF  17,W
1526:  MOVWF  04
1527:  BCF    03.7
1528:  BTFSC  18.0
1529:  BSF    03.7
152A:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
152B:  MOVLW  14
152C:  ADDWF  17,W
152D:  MOVWF  04
152E:  BCF    03.7
152F:  BTFSC  18.0
1530:  BSF    03.7
1531:  MOVLW  63
1532:  MOVWF  00
1533:  BCF    03.6
....................  
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
13CC:  MOVLW  16
13CD:  ADDWF  17,W
13CE:  MOVWF  04
13CF:  BCF    03.7
13D0:  BTFSC  18.0
13D1:  BSF    03.7
13D2:  MOVF   00,W
13D3:  ANDLW  01
13D4:  SUBLW  01
13D5:  BTFSS  03.2
13D6:  GOTO   3EF
....................         return (polyoneDisplayPtr->timer.alarmTime.hour != 0) || (polyoneDisplayPtr->timer.alarmTime.minute != 0); 
13D7:  MOVLW  09
13D8:  ADDWF  17,W
13D9:  MOVWF  04
13DA:  BCF    03.7
13DB:  BTFSC  18.0
13DC:  BSF    03.7
13DD:  MOVF   00,F
13DE:  BTFSS  03.2
13DF:  GOTO   3EB
13E0:  MOVLW  0A
13E1:  ADDWF  17,W
13E2:  MOVWF  04
13E3:  BCF    03.7
13E4:  BTFSC  18.0
13E5:  BSF    03.7
13E6:  MOVF   00,F
13E7:  BTFSS  03.2
13E8:  GOTO   3EB
13E9:  MOVLW  00
13EA:  GOTO   3EC
13EB:  MOVLW  01
13EC:  MOVWF  78
13ED:  GOTO   40F
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
13EE:  GOTO   40F
13EF:  MOVLW  16
13F0:  ADDWF  17,W
13F1:  MOVWF  04
13F2:  BCF    03.7
13F3:  BTFSC  18.0
13F4:  BSF    03.7
13F5:  MOVF   00,W
13F6:  ANDLW  01
13F7:  BTFSS  03.2
13F8:  GOTO   40F
....................         return (polyoneDisplayPtr->timer.alarmTime.minute != 0) || (polyoneDisplayPtr->timer.alarmTime.second != 0); 
13F9:  MOVLW  0A
13FA:  ADDWF  17,W
13FB:  MOVWF  04
13FC:  BCF    03.7
13FD:  BTFSC  18.0
13FE:  BSF    03.7
13FF:  MOVF   00,F
1400:  BTFSS  03.2
1401:  GOTO   40D
1402:  MOVLW  0B
1403:  ADDWF  17,W
1404:  MOVWF  04
1405:  BCF    03.7
1406:  BTFSC  18.0
1407:  BSF    03.7
1408:  MOVF   00,F
1409:  BTFSS  03.2
140A:  GOTO   40D
140B:  MOVLW  00
140C:  GOTO   40E
140D:  MOVLW  01
140E:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
09F6:  BSF    03.6
09F7:  MOVF   17,W
09F8:  MOVWF  19
09F9:  MOVF   18,W
09FA:  MOVWF  1A
09FB:  MOVF   1A,W
09FC:  MOVWF  1C
09FD:  MOVF   19,W
09FE:  MOVWF  1B
*
0A79:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveTypeOfCount(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressTypeOfCount, polyoneDisplayPtr->typeOfCount); 
*
07BB:  MOVLW  1E
07BC:  BSF    03.6
07BD:  ADDWF  17,W
07BE:  MOVWF  04
07BF:  BCF    03.7
07C0:  BTFSC  18.0
07C1:  BSF    03.7
07C2:  MOVF   00,W
07C3:  MOVWF  19
07C4:  MOVLW  16
07C5:  ADDWF  17,W
07C6:  MOVWF  04
07C7:  BCF    03.7
07C8:  BTFSC  18.0
07C9:  BSF    03.7
07CA:  CLRF   1A
07CB:  BTFSC  00.1
07CC:  INCF   1A,F
07CD:  BCF    03.6
07CE:  MOVF   0B,W
07CF:  MOVWF  77
07D0:  BCF    0B.7
07D1:  BSF    03.6
07D2:  MOVF   19,W
07D3:  MOVWF  0D
07D4:  MOVF   1A,W
07D5:  MOVWF  0C
07D6:  BSF    03.5
07D7:  BCF    0C.7
07D8:  BSF    0C.2
07D9:  MOVLW  55
07DA:  MOVWF  0D
07DB:  MOVLW  AA
07DC:  MOVWF  0D
07DD:  BSF    0C.1
07DE:  BTFSC  0C.1
07DF:  GOTO   7DE
07E0:  BCF    0C.2
07E1:  MOVF   77,W
07E2:  BCF    03.5
07E3:  BCF    03.6
07E4:  IORWF  0B,F
07E5:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressBrightness, polyoneDisplayPtr->brightness); 
*
16CC:  MOVLW  1D
16CD:  ADDWF  17,W
16CE:  MOVWF  04
16CF:  BCF    03.7
16D0:  BTFSC  18.0
16D1:  BSF    03.7
16D2:  MOVF   00,W
16D3:  MOVWF  19
16D4:  MOVLW  19
16D5:  ADDWF  17,W
16D6:  MOVWF  04
16D7:  BCF    03.7
16D8:  BTFSC  18.0
16D9:  BSF    03.7
16DA:  MOVF   00,W
16DB:  MOVWF  1A
16DC:  BCF    03.6
16DD:  MOVF   0B,W
16DE:  MOVWF  77
16DF:  BCF    0B.7
16E0:  BSF    03.6
16E1:  MOVF   19,W
16E2:  MOVWF  0D
16E3:  MOVF   1A,W
16E4:  MOVWF  0C
16E5:  BSF    03.5
16E6:  BCF    0C.7
16E7:  BSF    0C.2
16E8:  MOVLW  55
16E9:  MOVWF  0D
16EA:  MOVLW  AA
16EB:  MOVWF  0D
16EC:  BSF    0C.1
16ED:  BTFSC  0C.1
16EE:  GOTO   6ED
16EF:  BCF    0C.2
16F0:  MOVF   77,W
16F1:  BCF    03.5
16F2:  BCF    03.6
16F3:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
075E:  MOVLW  18
075F:  BSF    03.6
0760:  ADDWF  17,W
0761:  MOVWF  78
0762:  MOVF   18,W
0763:  MOVWF  7A
0764:  BTFSC  03.0
0765:  INCF   7A,F
0766:  MOVF   78,W
0767:  MOVWF  1A
0768:  MOVF   7A,W
0769:  MOVWF  1B
076A:  MOVLW  17
076B:  ADDWF  17,W
076C:  MOVWF  04
076D:  BCF    03.7
076E:  BTFSC  18.0
076F:  BSF    03.7
0770:  MOVF   00,W
0771:  MOVWF  1C
0772:  MOVF   1A,W
0773:  MOVWF  04
0774:  BCF    03.7
0775:  BTFSC  1B.0
0776:  BSF    03.7
0777:  MOVF   1C,W
0778:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
0779:  MOVLW  17
077A:  ADDWF  17,W
077B:  MOVWF  04
077C:  BCF    03.7
077D:  BTFSC  18.0
077E:  BSF    03.7
077F:  MOVF   19,W
0780:  MOVWF  00
0781:  BCF    03.6
0782:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
0783:  MOVLW  18
0784:  BSF    03.6
0785:  ADDWF  17,W
0786:  MOVWF  78
0787:  MOVF   18,W
0788:  MOVWF  7A
0789:  BTFSC  03.0
078A:  INCF   7A,F
078B:  MOVF   78,W
078C:  MOVWF  19
078D:  MOVF   7A,W
078E:  MOVWF  1A
078F:  MOVLW  17
0790:  ADDWF  17,W
0791:  MOVWF  04
0792:  BCF    03.7
0793:  BTFSC  18.0
0794:  BSF    03.7
0795:  MOVF   00,W
0796:  MOVWF  1B
0797:  MOVF   19,W
0798:  MOVWF  04
0799:  BCF    03.7
079A:  BTFSC  1A.0
079B:  BSF    03.7
079C:  MOVF   1B,W
079D:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
079E:  MOVLW  17
079F:  ADDWF  17,W
07A0:  MOVWF  04
07A1:  BCF    03.7
07A2:  BTFSC  18.0
07A3:  BSF    03.7
07A4:  CLRF   00
07A5:  BCF    03.6
07A6:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
070B:  MOVLW  1A
070C:  BSF    03.6
070D:  ADDWF  17,W
070E:  MOVWF  04
070F:  BCF    03.7
0710:  BTFSC  18.0
0711:  BSF    03.7
0712:  MOVF   00,W
0713:  MOVWF  19
0714:  MOVLW  17
0715:  ADDWF  17,W
0716:  MOVWF  04
0717:  BCF    03.7
0718:  BTFSC  18.0
0719:  BSF    03.7
071A:  MOVF   00,W
071B:  MOVWF  1A
071C:  BCF    03.6
071D:  MOVF   0B,W
071E:  MOVWF  77
071F:  BCF    0B.7
0720:  BSF    03.6
0721:  MOVF   19,W
0722:  MOVWF  0D
0723:  MOVF   1A,W
0724:  MOVWF  0C
0725:  BSF    03.5
0726:  BCF    0C.7
0727:  BSF    0C.2
0728:  MOVLW  55
0729:  MOVWF  0D
072A:  MOVLW  AA
072B:  MOVWF  0D
072C:  BSF    0C.1
072D:  BTFSC  0C.1
072E:  GOTO   72D
072F:  BCF    0C.2
0730:  MOVF   77,W
0731:  BCF    03.5
0732:  BCF    03.6
0733:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0734:  MOVLW  1B
0735:  BSF    03.6
0736:  ADDWF  17,W
0737:  MOVWF  04
0738:  BCF    03.7
0739:  BTFSC  18.0
073A:  BSF    03.7
073B:  MOVF   00,W
073C:  MOVWF  19
073D:  MOVLW  18
073E:  ADDWF  17,W
073F:  MOVWF  04
0740:  BCF    03.7
0741:  BTFSC  18.0
0742:  BSF    03.7
0743:  MOVF   00,W
0744:  MOVWF  1A
0745:  BCF    03.6
0746:  MOVF   0B,W
0747:  MOVWF  77
0748:  BCF    0B.7
0749:  BSF    03.6
074A:  MOVF   19,W
074B:  MOVWF  0D
074C:  MOVF   1A,W
074D:  MOVWF  0C
074E:  BSF    03.5
074F:  BCF    0C.7
0750:  BSF    0C.2
0751:  MOVLW  55
0752:  MOVWF  0D
0753:  MOVLW  AA
0754:  MOVWF  0D
0755:  BSF    0C.1
0756:  BTFSC  0C.1
0757:  GOTO   756
0758:  BCF    0C.2
0759:  MOVF   77,W
075A:  BCF    03.5
075B:  BCF    03.6
075C:  IORWF  0B,F
075D:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressFormat, polyoneDisplayPtr->format); 
*
160C:  MOVLW  1C
160D:  ADDWF  17,W
160E:  MOVWF  04
160F:  BCF    03.7
1610:  BTFSC  18.0
1611:  BSF    03.7
1612:  MOVF   00,W
1613:  MOVWF  19
1614:  MOVLW  16
1615:  ADDWF  17,W
1616:  MOVWF  04
1617:  BCF    03.7
1618:  BTFSC  18.0
1619:  BSF    03.7
161A:  CLRF   1A
161B:  BTFSC  00.0
161C:  INCF   1A,F
161D:  BCF    03.6
161E:  MOVF   0B,W
161F:  MOVWF  77
1620:  BCF    0B.7
1621:  BSF    03.6
1622:  MOVF   19,W
1623:  MOVWF  0D
1624:  MOVF   1A,W
1625:  MOVWF  0C
1626:  BSF    03.5
1627:  BCF    0C.7
1628:  BSF    0C.2
1629:  MOVLW  55
162A:  MOVWF  0D
162B:  MOVLW  AA
162C:  MOVWF  0D
162D:  BSF    0C.1
162E:  BTFSC  0C.1
162F:  GOTO   62E
1630:  BCF    0C.2
1631:  MOVF   77,W
1632:  BCF    03.5
1633:  BCF    03.6
1634:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_saveAlarm(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
153F:  MOVLW  16
1540:  ADDWF  17,W
1541:  MOVWF  04
1542:  BCF    03.7
1543:  BTFSC  18.0
1544:  BSF    03.7
1545:  MOVF   00,W
1546:  ANDLW  01
1547:  SUBLW  01
1548:  BTFSS  03.2
1549:  GOTO   5A1
....................         Timer_saveAlarmHoursMinutes(&polyoneDisplayPtr.timer); 
154A:  MOVLW  01
154B:  MOVWF  1A
154C:  MOVLW  17
154D:  MOVWF  19
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
159F:  GOTO   608
15A0:  BSF    03.6
15A1:  MOVLW  16
15A2:  ADDWF  17,W
15A3:  MOVWF  04
15A4:  BCF    03.7
15A5:  BTFSC  18.0
15A6:  BSF    03.7
15A7:  MOVF   00,W
15A8:  ANDLW  01
15A9:  BTFSS  03.2
15AA:  GOTO   609
....................         Timer_saveAlarmMinutesSeconds(&polyoneDisplayPtr->timer); 
15AB:  MOVF   17,W
15AC:  MOVWF  78
15AD:  MOVF   18,W
15AE:  MOVWF  7A
15AF:  MOVF   78,W
15B0:  MOVWF  19
15B1:  MOVF   7A,W
15B2:  MOVWF  1A
15B3:  MOVF   1A,W
15B4:  MOVWF  1C
15B5:  MOVF   19,W
15B6:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
0D2C:  MOVLW  17
0D2D:  ADDWF  17,W
0D2E:  MOVWF  04
0D2F:  BCF    03.7
0D30:  BTFSC  18.0
0D31:  BSF    03.7
0D32:  MOVF   00,W
0D33:  MOVWF  19
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
0D34:  MOVLW  17
0D35:  ADDWF  17,W
0D36:  MOVWF  78
0D37:  MOVF   18,W
0D38:  MOVWF  7A
0D39:  BTFSC  03.0
0D3A:  INCF   7A,F
0D3B:  MOVF   78,W
0D3C:  MOVWF  1A
0D3D:  MOVF   7A,W
0D3E:  MOVWF  1B
0D3F:  MOVLW  18
0D40:  ADDWF  17,W
0D41:  MOVWF  04
0D42:  BCF    03.7
0D43:  BTFSC  18.0
0D44:  BSF    03.7
0D45:  MOVF   00,W
0D46:  MOVWF  1C
0D47:  MOVF   1A,W
0D48:  MOVWF  04
0D49:  BCF    03.7
0D4A:  BTFSC  1B.0
0D4B:  BSF    03.7
0D4C:  MOVF   1C,W
0D4D:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
0D4E:  MOVLW  18
0D4F:  ADDWF  17,W
0D50:  MOVWF  04
0D51:  BCF    03.7
0D52:  BTFSC  18.0
0D53:  BSF    03.7
0D54:  MOVF   19,W
0D55:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
0DBE:  MOVF   17,W
0DBF:  MOVWF  78
0DC0:  MOVF   18,W
0DC1:  MOVWF  7A
0DC2:  MOVF   78,W
0DC3:  MOVWF  19
0DC4:  MOVF   7A,W
0DC5:  MOVWF  1A
0DC6:  MOVF   1A,W
0DC7:  MOVWF  1C
0DC8:  MOVF   19,W
0DC9:  MOVWF  1B
*
0DF6:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  PIN_BUTTON_START   PIN_B1 
.................... #define  PIN_BUTTON_MENU    PIN_B0 
.................... #define  PIN_BUZZER         PIN_C5 
.................... #define PIN_LED PIN_B3 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
....................     EEPROM_BRIGHTNESS, 
....................     EEPROM_TYPE_OF_COUNT 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void turnOnBuzzer(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
1800:  MOVF   03,W
1801:  ANDLW  1F
1802:  MOVWF  03
1803:  MOVLW  FF
1804:  MOVWF  20
1805:  BSF    3E.0
1806:  BSF    3E.1
1807:  BSF    3E.2
1808:  BSF    3E.3
1809:  BSF    3E.4
180A:  CLRF   5F
180B:  CLRF   60
180C:  CLRF   61
180D:  BSF    03.5
180E:  BSF    03.6
180F:  MOVF   09,W
1810:  ANDLW  C0
1811:  MOVWF  09
1812:  BCF    03.6
1813:  BCF    1F.4
1814:  BCF    1F.5
1815:  MOVLW  00
1816:  BSF    03.6
1817:  MOVWF  08
1818:  BCF    03.5
1819:  CLRF   07
181A:  CLRF   08
181B:  CLRF   09
181C:  BCF    03.7
....................     setupHardware(); 
181D:  BCF    0A.3
181E:  BCF    03.6
181F:  GOTO   753
1820:  BSF    0A.3
....................     myPolyoneDisplay.currentState = STATE_INIT; 
1821:  MOVLW  03
1822:  MOVWF  56
....................     rtos_run(); 
1823:  CLRF   22
1824:  CLRF   24
1825:  MOVLW  05
1826:  MOVWF  23
1827:  CLRF   26
1828:  CLRF   25
1829:  MOVLW  DE
182A:  MOVWF  27
182B:  MOVLW  0F
182C:  MOVWF  28
182D:  CLRF   29
182E:  CLRF   2B
182F:  MOVLW  05
1830:  MOVWF  2A
1831:  CLRF   2D
1832:  MOVLW  01
1833:  MOVWF  2C
1834:  MOVLW  35
1835:  MOVWF  2E
1836:  MOVLW  17
1837:  MOVWF  2F
1838:  CLRF   30
1839:  CLRF   32
183A:  MOVLW  01
183B:  MOVWF  31
183C:  CLRF   34
183D:  CLRF   33
183E:  MOVLW  72
183F:  MOVWF  35
1840:  MOVLW  10
1841:  MOVWF  36
1842:  CLRF   37
1843:  CLRF   39
1844:  MOVLW  14
1845:  MOVWF  38
1846:  CLRF   3B
1847:  MOVLW  02
1848:  MOVWF  3A
1849:  MOVLW  ED
184A:  MOVWF  3C
184B:  MOVLW  07
184C:  MOVWF  3D
184D:  CLRF   21
184E:  BSF    03.5
184F:  MOVF   01,W
1850:  ANDLW  C0
1851:  IORLW  07
1852:  MOVWF  01
1853:  MOVLW  3D
1854:  BCF    03.5
1855:  MOVWF  01
1856:  BCF    0B.2
1857:  BCF    03.0
1858:  RLF    21,W
1859:  MOVWF  77
185A:  BCF    0A.4
185B:  BCF    0A.3
185C:  CALL   031
185D:  BSF    0A.4
185E:  BSF    0A.3
185F:  MOVWF  79
1860:  MOVLW  01
1861:  ADDWF  77,W
1862:  BCF    0A.4
1863:  BCF    0A.3
1864:  CALL   031
1865:  BSF    0A.4
1866:  BSF    0A.3
1867:  MOVWF  7A
1868:  MOVF   79,W
1869:  MOVWF  04
186A:  BCF    03.7
186B:  BTFSC  7A.0
186C:  BSF    03.7
186D:  MOVF   00,W
186E:  MOVWF  79
186F:  INCF   04,F
1870:  MOVF   00,W
1871:  MOVWF  77
1872:  INCF   04,F
1873:  MOVF   00,W
1874:  MOVWF  78
1875:  INCF   04,F
1876:  INCF   00,F
1877:  MOVF   00,W
1878:  MOVWF  7A
1879:  BTFSS  03.2
187A:  GOTO   07E
187B:  INCF   04,F
187C:  INCF   00,F
187D:  DECF   04,F
187E:  INCF   04,F
187F:  MOVF   00,W
1880:  SUBWF  78,W
1881:  BTFSS  03.2
1882:  GOTO   096
1883:  MOVF   77,W
1884:  SUBWF  7A,W
1885:  BTFSS  03.2
1886:  GOTO   096
1887:  DECF   04,F
1888:  CLRF   00
1889:  INCF   04,F
188A:  CLRF   00
188B:  INCF   04,F
188C:  BTFSC  79.7
188D:  GOTO   096
188E:  INCF   04,F
188F:  MOVF   00,W
1890:  MOVWF  0A
1891:  DECF   04,F
1892:  MOVF   00,W
1893:  MOVWF  02
1894:  BCF    03.5
1895:  BCF    03.6
1896:  INCF   21,F
1897:  MOVLW  04
1898:  SUBWF  21,W
1899:  BTFSS  03.2
189A:  GOTO   057
189B:  CLRF   21
189C:  MOVF   01,W
189D:  BTFSS  0B.2
189E:  GOTO   0A1
189F:  BSF    03.5
18A0:  GOTO   053
18A1:  GOTO   09C
18A2:  MOVLW  FF
18A3:  MOVWF  21
.................... } 
....................  
18A4:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
0A7A:  MOVF   56,W
0A7B:  ADDLW  F5
0A7C:  BTFSC  03.0
0A7D:  GOTO   6FD
0A7E:  ADDLW  0B
0A7F:  GOTO   700
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new(EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS, 
....................                     EEPROM_BRIGHTNESS, 
....................                     EEPROM_TYPE_OF_COUNT 
....................                     ); 
0A80:  BSF    03.6
0A81:  CLRF   1D
0A82:  MOVLW  01
0A83:  MOVWF  1E
0A84:  MOVLW  02
0A85:  MOVWF  1F
0A86:  MOVLW  03
0A87:  MOVWF  20
0A88:  MOVLW  04
0A89:  MOVWF  21
0A8A:  MOVLW  05
0A8B:  MOVWF  22
0A8C:  MOVLW  06
0A8D:  MOVWF  23
0A8E:  MOVLW  07
0A8F:  MOVWF  24
0A90:  MOVLW  08
0A91:  MOVWF  25
0A92:  MOVLW  09
0A93:  MOVWF  26
*
0CF1:  MOVF   79,W
0CF2:  MOVWF  7A
0CF3:  MOVF   78,W
0CF4:  BSF    03.6
0CF5:  MOVWF  17
0CF6:  MOVF   7A,W
0CF7:  MOVWF  18
0CF8:  CLRF   1A
0CF9:  MOVLW  3F
0CFA:  MOVWF  19
0CFB:  MOVLW  1F
0CFC:  MOVWF  78
0CFD:  MOVF   17,W
0CFE:  MOVWF  04
0CFF:  BCF    03.7
0D00:  BTFSC  18.0
0D01:  BSF    03.7
0D02:  MOVF   00,W
0D03:  MOVWF  77
0D04:  MOVF   19,W
0D05:  MOVWF  04
0D06:  BCF    03.7
0D07:  BTFSC  1A.0
0D08:  BSF    03.7
0D09:  MOVF   77,W
0D0A:  MOVWF  00
0D0B:  INCF   19,F
0D0C:  BTFSC  03.2
0D0D:  INCF   1A,F
0D0E:  INCF   17,F
0D0F:  BTFSC  03.2
0D10:  INCF   18,F
0D11:  DECFSZ 78,F
0D12:  GOTO   4FD
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0D13:  CLRF   18
0D14:  MOVLW  3F
0D15:  MOVWF  17
0D16:  CLRF   19
0D17:  BCF    03.6
0D18:  CALL   000
....................             break; 
0D19:  GOTO   6FD
....................  
....................         case STATE_IDLE: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0D1A:  BSF    03.6
0D1B:  CLRF   18
0D1C:  MOVLW  3F
0D1D:  MOVWF  17
0D1E:  CLRF   19
0D1F:  BCF    03.6
0D20:  CALL   000
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0D21:  BSF    03.5
0D22:  BSF    06.1
0D23:  BCF    03.5
0D24:  BTFSS  06.1
0D25:  GOTO   565
0D26:  BTFSC  3E.3
0D27:  GOTO   565
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
0D28:  BSF    03.6
0D29:  CLRF   18
0D2A:  MOVLW  3F
0D2B:  MOVWF  17
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0D56:  CLRF   18
0D57:  MOVLW  3F
0D58:  MOVWF  17
0D59:  BCF    0A.3
0D5A:  BCF    03.6
0D5B:  CALL   70B
0D5C:  BSF    0A.3
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
0D5D:  BSF    03.6
0D5E:  CLRF   47
0D5F:  MOVLW  3F
0D60:  MOVWF  46
0D61:  BCF    0A.3
0D62:  BCF    03.6
0D63:  CALL   155
0D64:  BSF    0A.3
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0D65:  BTFSC  3E.1
0D66:  GOTO   572
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D67:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0D68:  BSF    03.6
0D69:  CLRF   18
0D6A:  MOVLW  3F
0D6B:  MOVWF  17
0D6C:  MOVLW  04
0D6D:  MOVWF  19
0D6E:  BCF    0A.3
0D6F:  BCF    03.6
0D70:  CALL   75E
0D71:  BSF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
0D72:  BTFSC  3E.2
0D73:  GOTO   57F
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0D74:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
0D75:  BSF    03.6
0D76:  CLRF   18
0D77:  MOVLW  3F
0D78:  MOVWF  17
0D79:  MOVLW  09
0D7A:  MOVWF  19
0D7B:  BCF    0A.3
0D7C:  BCF    03.6
0D7D:  CALL   75E
0D7E:  BSF    0A.3
....................             } 
....................             break; 
0D7F:  GOTO   6FD
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0D80:  BSF    03.6
0D81:  CLRF   47
0D82:  MOVLW  3F
0D83:  MOVWF  46
0D84:  BCF    0A.3
0D85:  BCF    03.6
0D86:  CALL   54E
0D87:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0D88:  BSF    03.6
0D89:  CLRF   18
0D8A:  MOVLW  3F
0D8B:  MOVWF  17
0D8C:  MOVLW  01
0D8D:  MOVWF  19
0D8E:  BCF    03.6
0D8F:  CALL   000
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0D90:  BTFSC  3E.1
0D91:  GOTO   59D
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D92:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0D93:  BSF    03.6
0D94:  CLRF   18
0D95:  MOVLW  3F
0D96:  MOVWF  17
0D97:  MOVLW  04
0D98:  MOVWF  19
0D99:  BCF    0A.3
0D9A:  BCF    03.6
0D9B:  CALL   75E
0D9C:  BSF    0A.3
....................             } 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0D9D:  BSF    03.5
0D9E:  BSF    06.1
0D9F:  BCF    03.5
0DA0:  BTFSS  06.1
0DA1:  GOTO   5BA
0DA2:  BTFSC  3E.3
0DA3:  GOTO   5BA
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0DA4:  BSF    03.6
0DA5:  CLRF   18
0DA6:  MOVLW  3F
0DA7:  MOVWF  17
0DA8:  BCF    0A.3
0DA9:  BCF    03.6
0DAA:  CALL   783
0DAB:  BSF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
0DAC:  BSF    03.6
0DAD:  CLRF   18
0DAE:  MOVLW  3F
0DAF:  MOVWF  17
0DB0:  BCF    03.6
0DB1:  CALL   1F6
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
0DB2:  BSF    03.6
0DB3:  CLRF   18
0DB4:  MOVLW  3F
0DB5:  MOVWF  17
0DB6:  BCF    0A.3
0DB7:  BCF    03.6
0DB8:  CALL   70B
0DB9:  BSF    0A.3
.................... //                PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
0DBA:  BSF    03.6
0DBB:  CLRF   18
0DBC:  MOVLW  3F
0DBD:  MOVWF  17
*
0DF7:  MOVF   78,F
0DF8:  BTFSC  03.2
0DF9:  GOTO   645
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
0DFA:  CLRF   18
0DFB:  MOVLW  3F
0DFC:  MOVWF  17
0DFD:  MOVLW  01
0DFE:  MOVWF  19
0DFF:  BCF    0A.3
0E00:  BCF    03.6
0E01:  CALL   75E
0E02:  BSF    0A.3
....................                 turnOnBuzzer(); 
....................                 myPolyoneDisplay.typeOfCount = COUNTUP; 
*
0E30:  BSF    55.1
....................                 PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
0E31:  BSF    03.6
0E32:  CLRF   18
0E33:  MOVLW  3F
0E34:  MOVWF  17
0E35:  BCF    0A.3
0E36:  BCF    03.6
0E37:  CALL   7BB
0E38:  BSF    0A.3
....................                 Time_clearRtcTime(); 
0E39:  BCF    0A.3
0E3A:  CALL   7E6
0E3B:  BSF    0A.3
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0E3C:  BSF    03.6
0E3D:  CLRF   47
0E3E:  MOVLW  3F
0E3F:  MOVWF  46
0E40:  BCF    0A.3
0E41:  BCF    03.6
0E42:  CALL   54E
0E43:  BSF    0A.3
0E44:  BSF    03.6
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
0E45:  BCF    03.6
0E46:  BTFSC  3E.2
0E47:  GOTO   653
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0E48:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
0E49:  BSF    03.6
0E4A:  CLRF   18
0E4B:  MOVLW  3F
0E4C:  MOVWF  17
0E4D:  MOVLW  09
0E4E:  MOVWF  19
0E4F:  BCF    0A.3
0E50:  BCF    03.6
0E51:  CALL   75E
0E52:  BSF    0A.3
....................             } 
....................             break; 
0E53:  GOTO   6FD
....................  
....................         case STATE_COUNTING_UP: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0E54:  BSF    03.6
0E55:  CLRF   47
0E56:  MOVLW  3F
0E57:  MOVWF  46
0E58:  BCF    0A.3
0E59:  BCF    03.6
0E5A:  CALL   54E
0E5B:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0E5C:  BSF    03.6
0E5D:  CLRF   18
0E5E:  MOVLW  3F
0E5F:  MOVWF  17
0E60:  MOVLW  01
0E61:  MOVWF  19
0E62:  BCF    03.6
0E63:  CALL   000
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0E64:  BSF    03.5
0E65:  BSF    06.1
0E66:  BCF    03.5
0E67:  BTFSS  06.1
0E68:  GOTO   681
0E69:  BTFSC  3E.3
0E6A:  GOTO   681
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0E6B:  BSF    03.6
0E6C:  CLRF   18
0E6D:  MOVLW  3F
0E6E:  MOVWF  17
0E6F:  BCF    0A.3
0E70:  BCF    03.6
0E71:  CALL   783
0E72:  BSF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
0E73:  BSF    03.6
0E74:  CLRF   18
0E75:  MOVLW  3F
0E76:  MOVWF  17
0E77:  BCF    03.6
0E78:  CALL   1F6
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
0E79:  BSF    03.6
0E7A:  CLRF   18
0E7B:  MOVLW  3F
0E7C:  MOVWF  17
0E7D:  BCF    0A.3
0E7E:  BCF    03.6
0E7F:  CALL   70B
0E80:  BSF    0A.3
.................... //                PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
....................             } 
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0E81:  BTFSC  3E.1
0E82:  GOTO   68E
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0E83:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0E84:  BSF    03.6
0E85:  CLRF   18
0E86:  MOVLW  3F
0E87:  MOVWF  17
0E88:  MOVLW  04
0E89:  MOVWF  19
0E8A:  BCF    0A.3
0E8B:  BCF    03.6
0E8C:  CALL   75E
0E8D:  BSF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
0E8E:  BTFSC  3E.2
0E8F:  GOTO   69B
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0E90:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
0E91:  BSF    03.6
0E92:  CLRF   18
0E93:  MOVLW  3F
0E94:  MOVWF  17
0E95:  MOVLW  09
0E96:  MOVWF  19
0E97:  BCF    0A.3
0E98:  BCF    03.6
0E99:  CALL   75E
0E9A:  BSF    0A.3
....................             } 
....................             break; 
0E9B:  GOTO   6FD
....................  
....................         case STATE_RESETTING: 
....................             myPolyoneDisplay.typeOfCount = COUNTDOWN; 
0E9C:  BCF    55.1
....................             PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
0E9D:  BSF    03.6
0E9E:  CLRF   18
0E9F:  MOVLW  3F
0EA0:  MOVWF  17
0EA1:  BCF    0A.3
0EA2:  BCF    03.6
0EA3:  CALL   7BB
0EA4:  BSF    0A.3
....................             Time_clearRtcTime(); 
0EA5:  BCF    0A.3
0EA6:  CALL   7E6
0EA7:  BSF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
0EBD:  MOVLW  08
0EBE:  BSF    03.6
0EBF:  MOVWF  17
0EC0:  MOVLW  FA
0EC1:  MOVWF  18
0EC2:  BCF    0A.3
0EC3:  BCF    03.6
0EC4:  CALL   7A7
0EC5:  BSF    0A.3
0EC6:  BSF    03.6
0EC7:  DECFSZ 17,F
0EC8:  GOTO   6C0
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
0EC9:  CLRF   18
0ECA:  MOVLW  3F
0ECB:  MOVWF  17
0ECC:  MOVLW  0A
0ECD:  MOVWF  19
0ECE:  BCF    0A.3
0ECF:  BCF    03.6
0ED0:  CALL   75E
0ED1:  BSF    0A.3
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
0ED2:  MOVLW  05
0ED3:  MOVWF  5E
....................             Time_clearRtcTime(); 
0ED4:  BCF    0A.3
0ED5:  CALL   7E6
0ED6:  BSF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0ED7:  BSF    03.6
0ED8:  CLRF   47
0ED9:  MOVLW  3F
0EDA:  MOVWF  46
0EDB:  BCF    0A.3
0EDC:  BCF    03.6
0EDD:  CALL   54E
0EDE:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0EDF:  BSF    03.6
0EE0:  CLRF   18
0EE1:  MOVLW  3F
0EE2:  MOVWF  17
0EE3:  CLRF   19
0EE4:  BCF    03.6
0EE5:  CALL   000
....................             //            rtos_enable(Task_checkIfMenuButtonIsHeld); 
....................             break; 
0EE6:  GOTO   6FD
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(PIN_BUTTON_START) && input(PIN_BUTTON_MENU)) { 
0EE7:  BSF    03.5
0EE8:  BSF    06.1
0EE9:  BCF    03.5
0EEA:  BTFSS  06.1
0EEB:  GOTO   6FD
0EEC:  BSF    03.5
0EED:  BSF    06.0
0EEE:  BCF    03.5
0EEF:  BTFSS  06.0
0EF0:  GOTO   6FD
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
0EF1:  BSF    03.6
0EF2:  CLRF   18
0EF3:  MOVLW  3F
0EF4:  MOVWF  17
0EF5:  BCF    03.6
0EF6:  MOVF   5E,W
0EF7:  BSF    03.6
0EF8:  MOVWF  19
0EF9:  BCF    0A.3
0EFA:  BCF    03.6
0EFB:  CALL   75E
0EFC:  BSF    0A.3
....................             } 
....................             break; 
....................     } 
0EFD:  BCF    0A.3
0EFE:  BSF    0A.4
0EFF:  GOTO   075 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1072:  BCF    0A.4
1073:  BSF    0A.3
1074:  GOTO   27A
1075:  BSF    0A.4
1076:  BCF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1077:  MOVLW  05
1078:  SUBWF  56,W
1079:  ADDLW  FB
107A:  BTFSC  03.0
107B:  GOTO   711
107C:  ADDLW  05
107D:  GOTO   72C
....................         case STATE_READY: 
....................             output_toggle(PIN_LED); 
107E:  BSF    03.5
107F:  BCF    06.3
1080:  MOVLW  08
1081:  BCF    03.5
1082:  XORWF  06,F
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1083:  BSF    03.6
1084:  CLRF   18
1085:  MOVLW  3F
1086:  MOVWF  17
1087:  CLRF   19
1088:  BCF    0A.4
1089:  BSF    0A.3
108A:  BCF    03.6
108B:  CALL   000
108C:  BSF    0A.4
108D:  BCF    0A.3
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
108E:  BSF    03.5
108F:  BSF    06.1
1090:  BCF    03.5
1091:  BTFSS  06.1
1092:  GOTO   0AA
1093:  BTFSC  3E.3
1094:  GOTO   0AA
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
1095:  BSF    03.6
1096:  CLRF   18
1097:  MOVLW  3F
1098:  MOVWF  17
1099:  MOVLW  02
109A:  MOVWF  19
109B:  BCF    0A.4
109C:  BCF    03.6
109D:  CALL   75E
109E:  BSF    0A.4
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
109F:  BSF    03.6
10A0:  CLRF   18
10A1:  MOVLW  3F
10A2:  MOVWF  17
10A3:  BCF    0A.4
10A4:  BCF    03.6
10A5:  CALL   70B
10A6:  BSF    0A.4
....................                 Time_clearRtcTime(); 
10A7:  BCF    0A.4
10A8:  CALL   7E6
10A9:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
10AA:  BTFSC  3E.2
10AB:  GOTO   0B7
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
10AC:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
10AD:  BSF    03.6
10AE:  CLRF   18
10AF:  MOVLW  3F
10B0:  MOVWF  17
10B1:  MOVLW  06
10B2:  MOVWF  19
10B3:  BCF    0A.4
10B4:  BCF    03.6
10B5:  CALL   75E
10B6:  BSF    0A.4
....................                 //                rtos_disable(Task_checkIfMenuButtonIsHeld); 
....................             } 
....................             break; 
10B7:  GOTO   711
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................  
....................             if (showDisplayCompletely) { 
10B8:  BTFSS  3E.0
10B9:  GOTO   0C5
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
10BA:  BSF    03.6
10BB:  CLRF   18
10BC:  MOVLW  3F
10BD:  MOVWF  17
10BE:  BCF    0A.4
10BF:  BSF    0A.3
10C0:  BCF    03.6
10C1:  CALL   70F
10C2:  BSF    0A.4
10C3:  BCF    0A.3
....................             } else { 
10C4:  GOTO   1A0
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
10C5:  BSF    03.6
10C6:  CLRF   18
10C7:  MOVLW  3F
10C8:  MOVWF  17
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
11A1:  BSF    03.5
11A2:  BCF    03.6
11A3:  BSF    06.1
11A4:  BCF    03.5
11A5:  BTFSC  06.1
11A6:  GOTO   226
....................                 while (!input(PIN_BUTTON_START)) { 
11A7:  BSF    03.5
11A8:  BSF    06.1
11A9:  BCF    03.5
11AA:  BTFSC  06.1
11AB:  GOTO   226
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
11AC:  BSF    03.6
11AD:  CLRF   18
11AE:  MOVLW  3F
11AF:  MOVWF  17
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
120F:  CLRF   18
1210:  MOVLW  3F
1211:  MOVWF  17
1212:  BCF    0A.4
1213:  BSF    0A.3
1214:  BCF    03.6
1215:  CALL   70F
1216:  BSF    0A.4
1217:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1218:  MOVLW  02
1219:  BSF    03.6
121A:  MOVWF  17
121B:  MOVLW  96
121C:  MOVWF  18
121D:  BCF    0A.4
121E:  BCF    03.6
121F:  CALL   7A7
1220:  BSF    0A.4
1221:  BSF    03.6
1222:  DECFSZ 17,F
1223:  GOTO   21B
1224:  BCF    03.6
1225:  GOTO   1A7
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1226:  BTFSC  3E.4
1227:  GOTO   23D
1228:  BSF    03.5
1229:  BSF    06.0
122A:  BCF    03.5
122B:  BTFSS  06.0
122C:  GOTO   23D
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
122D:  MOVF   57,W
122E:  SUBLW  05
122F:  BTFSS  03.2
1230:  GOTO   233
....................                     numberOfMenuButtonHasBeenReleased++; 
1231:  INCF   5F,F
....................                 } else { 
1232:  GOTO   23D
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
1233:  BSF    03.6
1234:  CLRF   18
1235:  MOVLW  3F
1236:  MOVWF  17
1237:  MOVLW  07
1238:  MOVWF  19
1239:  BCF    0A.4
123A:  BCF    03.6
123B:  CALL   75E
123C:  BSF    0A.4
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
123D:  MOVF   5F,W
123E:  SUBLW  01
123F:  BTFSC  03.0
1240:  GOTO   24C
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1241:  CLRF   5F
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
1242:  BSF    03.6
1243:  CLRF   18
1244:  MOVLW  3F
1245:  MOVWF  17
1246:  MOVLW  07
1247:  MOVWF  19
1248:  BCF    0A.4
1249:  BCF    03.6
124A:  CALL   75E
124B:  BSF    0A.4
....................             } 
....................  
....................             break; 
124C:  GOTO   711
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
124D:  BTFSS  3E.0
124E:  GOTO   25A
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
124F:  BSF    03.6
1250:  CLRF   18
1251:  MOVLW  3F
1252:  MOVWF  17
1253:  BCF    0A.4
1254:  BSF    0A.3
1255:  BCF    03.6
1256:  CALL   70F
1257:  BSF    0A.4
1258:  BCF    0A.3
....................             } else { 
1259:  GOTO   339
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
125A:  BSF    03.6
125B:  CLRF   18
125C:  MOVLW  3F
125D:  MOVWF  17
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
133A:  BSF    03.5
133B:  BCF    03.6
133C:  BSF    06.1
133D:  BCF    03.5
133E:  BTFSC  06.1
133F:  GOTO   3C1
....................                 while (!input(PIN_BUTTON_START)) { 
1340:  BSF    03.5
1341:  BSF    06.1
1342:  BCF    03.5
1343:  BTFSC  06.1
1344:  GOTO   3C1
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1345:  BSF    03.6
1346:  CLRF   18
1347:  MOVLW  3F
1348:  MOVWF  17
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
13A9:  BSF    03.6
13AA:  CLRF   18
13AB:  MOVLW  3F
13AC:  MOVWF  17
13AD:  BCF    0A.4
13AE:  BSF    0A.3
13AF:  BCF    03.6
13B0:  CALL   70F
13B1:  BSF    0A.4
13B2:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
13B3:  MOVLW  02
13B4:  BSF    03.6
13B5:  MOVWF  17
13B6:  MOVLW  96
13B7:  MOVWF  18
13B8:  BCF    0A.4
13B9:  BCF    03.6
13BA:  CALL   7A7
13BB:  BSF    0A.4
13BC:  BSF    03.6
13BD:  DECFSZ 17,F
13BE:  GOTO   3B6
13BF:  BCF    03.6
13C0:  GOTO   340
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
13C1:  BTFSC  3E.4
13C2:  GOTO   426
13C3:  BSF    03.5
13C4:  BSF    06.0
13C5:  BCF    03.5
13C6:  BTFSS  06.0
13C7:  GOTO   426
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
13C8:  BSF    03.6
13C9:  CLRF   18
13CA:  MOVLW  3F
13CB:  MOVWF  17
*
140F:  MOVF   78,F
1410:  BTFSC  03.2
1411:  GOTO   41D
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
1412:  CLRF   18
1413:  MOVLW  3F
1414:  MOVWF  17
1415:  MOVLW  08
1416:  MOVWF  19
1417:  BCF    0A.4
1418:  BCF    03.6
1419:  CALL   75E
141A:  BSF    0A.4
....................                 } else { 
141B:  GOTO   426
141C:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
141D:  CLRF   18
141E:  MOVLW  3F
141F:  MOVWF  17
1420:  MOVLW  06
1421:  MOVWF  19
1422:  BCF    0A.4
1423:  BCF    03.6
1424:  CALL   75E
1425:  BSF    0A.4
....................                 } 
....................             } 
....................             break; 
1426:  GOTO   711
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
1427:  BSF    03.6
1428:  CLRF   18
1429:  MOVLW  3F
142A:  MOVWF  17
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
*
145D:  BSF    03.5
145E:  BSF    06.1
145F:  BCF    03.5
1460:  BTFSS  06.1
1461:  GOTO   534
1462:  BTFSC  3E.3
1463:  GOTO   534
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1464:  BSF    03.6
1465:  CLRF   18
1466:  MOVLW  3F
1467:  MOVWF  17
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
*
1534:  BTFSC  3E.4
1535:  GOTO   64A
1536:  BSF    03.5
1537:  BSF    06.0
1538:  BCF    03.5
1539:  BTFSS  06.0
153A:  GOTO   64A
....................                 PolyoneDisplay_saveAlarm(&myPolyoneDisplay); 
153B:  BSF    03.6
153C:  CLRF   18
153D:  MOVLW  3F
153E:  MOVWF  17
....................                 PolyoneDisplay_saveFormat(&myPolyoneDisplay); 
*
1609:  CLRF   18
160A:  MOVLW  3F
160B:  MOVWF  17
....................  
....................                 Time_clearRtcTime(); 
*
1635:  BCF    0A.4
1636:  CALL   7E6
1637:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
1638:  BSF    03.6
1639:  CLRF   47
163A:  MOVLW  3F
163B:  MOVWF  46
163C:  BCF    0A.4
163D:  BCF    03.6
163E:  CALL   54E
163F:  BSF    0A.4
....................  
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1640:  BSF    03.6
1641:  CLRF   18
1642:  MOVLW  3F
1643:  MOVWF  17
1644:  MOVLW  09
1645:  MOVWF  19
1646:  BCF    0A.4
1647:  BCF    03.6
1648:  CALL   75E
1649:  BSF    0A.4
....................             } 
....................             break; 
164A:  GOTO   711
....................  
....................         case STATE_SETTING_BRIGHTNESS: 
....................             if (showDisplayCompletely) { 
164B:  BTFSS  3E.0
164C:  GOTO   654
....................                 PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
164D:  BSF    03.6
164E:  CLRF   18
164F:  MOVLW  3F
1650:  MOVWF  17
1651:  BCF    03.6
1652:  CALL   02E
....................             } else { 
1653:  GOTO   665
....................                 PolyoneDisplay_hideBrightness(); 
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1665:  BSF    03.5
1666:  BSF    06.1
1667:  BCF    03.5
1668:  BTFSC  06.1
1669:  GOTO   6BD
....................                 while (!input(PIN_BUTTON_START)) { 
166A:  BSF    03.5
166B:  BSF    06.1
166C:  BCF    03.5
166D:  BTFSC  06.1
166E:  GOTO   6BD
....................                     PolyoneDisplay_increaseBrightness(&myPolyoneDisplay); 
166F:  BSF    03.6
1670:  CLRF   18
1671:  MOVLW  3F
1672:  MOVWF  17
....................                     PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
*
16A9:  BSF    03.6
16AA:  CLRF   18
16AB:  MOVLW  3F
16AC:  MOVWF  17
16AD:  BCF    03.6
16AE:  CALL   02E
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
16AF:  MOVLW  02
16B0:  BSF    03.6
16B1:  MOVWF  17
16B2:  MOVLW  96
16B3:  MOVWF  18
16B4:  BCF    0A.4
16B5:  BCF    03.6
16B6:  CALL   7A7
16B7:  BSF    0A.4
16B8:  BSF    03.6
16B9:  DECFSZ 17,F
16BA:  GOTO   6B2
16BB:  BCF    03.6
16BC:  GOTO   66A
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
16BD:  BTFSC  3E.4
16BE:  GOTO   700
16BF:  BSF    03.5
16C0:  BSF    06.0
16C1:  BCF    03.5
16C2:  BTFSS  06.0
16C3:  GOTO   700
....................                 if (myPolyoneDisplay.previousState == STATE_SETTING_FORMAT) { 
16C4:  MOVF   57,W
16C5:  SUBLW  08
16C6:  BTFSS  03.2
16C7:  GOTO   6FF
....................                     PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
16C8:  BSF    03.6
16C9:  CLRF   18
16CA:  MOVLW  3F
16CB:  MOVWF  17
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
*
16F4:  BSF    03.6
16F5:  CLRF   18
16F6:  MOVLW  3F
16F7:  MOVWF  17
16F8:  MOVLW  05
16F9:  MOVWF  19
16FA:  BCF    0A.4
16FB:  BCF    03.6
16FC:  CALL   75E
16FD:  BSF    0A.4
....................                     //                    rtos_enable(Task_checkIfMenuButtonIsHeld); 
....................                 } else { 
16FE:  GOTO   700
....................                     numberOfMenuButtonHasBeenReleased++; 
16FF:  INCF   5F,F
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1700:  MOVF   5F,W
1701:  SUBLW  01
1702:  BTFSC  03.0
1703:  GOTO   711
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1704:  CLRF   5F
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, myPolyoneDisplay.previousState); 
1705:  BSF    03.6
1706:  CLRF   18
1707:  MOVLW  3F
1708:  MOVWF  17
1709:  BCF    03.6
170A:  MOVF   57,W
170B:  BSF    03.6
170C:  MOVWF  19
170D:  BCF    0A.4
170E:  BCF    03.6
170F:  CALL   75E
1710:  BSF    0A.4
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(PIN_BUTTON_START); 
1711:  BSF    03.5
1712:  BSF    06.1
1713:  BCF    03.5
1714:  BCF    3E.3
1715:  BTFSC  06.1
1716:  BSF    3E.3
....................     menuButtonState = input(PIN_BUTTON_MENU); 
1717:  BSF    03.5
1718:  BSF    06.0
1719:  BCF    03.5
171A:  BCF    3E.4
171B:  BTFSC  06.0
171C:  BSF    3E.4
....................     rtos_yield(); 
171D:  MOVLW  24
171E:  MOVWF  35
171F:  MOVLW  17
1720:  MOVWF  36
1721:  BSF    0A.3
1722:  BSF    0A.4
1723:  GOTO   094
1724:  MOVLW  72
1725:  MOVWF  35
1726:  MOVLW  10
1727:  MOVWF  36
1728:  BSF    0A.3
1729:  BSF    0A.4
172A:  GOTO   094
172B:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(PIN_BUTTON_START)) { 
*
0FDE:  BSF    03.5
0FDF:  BSF    06.1
0FE0:  BCF    03.5
0FE1:  BTFSC  06.1
0FE2:  GOTO   7E5
....................         nextUpButtonCounter++; 
0FE3:  INCF   60,F
....................     } else { 
0FE4:  GOTO   7E7
....................         nextUpButtonCounter = 0; 
0FE5:  CLRF   60
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0FE6:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0FE7:  MOVF   60,W
0FE8:  SUBLW  13
0FE9:  BTFSC  03.0
0FEA:  GOTO   7ED
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0FEB:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0FEC:  CLRF   60
....................     } 
....................     rtos_yield(); 
0FED:  MOVLW  F4
0FEE:  MOVWF  27
0FEF:  MOVLW  0F
0FF0:  MOVWF  28
0FF1:  BSF    0A.3
0FF2:  BSF    0A.4
0FF3:  GOTO   094
0FF4:  MOVLW  DE
0FF5:  MOVWF  27
0FF6:  MOVLW  0F
0FF7:  MOVWF  28
0FF8:  BSF    0A.3
0FF9:  BSF    0A.4
0FFA:  GOTO   094
0FFB:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(PIN_BUTTON_MENU)) { 
*
1735:  BSF    03.5
1736:  BSF    06.0
1737:  BCF    03.5
1738:  BTFSC  06.0
1739:  GOTO   73C
....................         menuButtonCounter++; 
173A:  INCF   61,F
....................     } else { 
173B:  GOTO   73E
....................         menuButtonCounter = 0; 
173C:  CLRF   61
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
173D:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
173E:  MOVF   61,W
173F:  SUBLW  0C
1740:  BTFSC  03.0
1741:  GOTO   744
....................         buttonStateMenu = BUTTON_STATE_HELD; 
1742:  BCF    3E.2
....................         menuButtonCounter = 0; 
1743:  CLRF   61
....................     } 
....................     rtos_yield(); 
1744:  MOVLW  4B
1745:  MOVWF  2E
1746:  MOVLW  17
1747:  MOVWF  2F
1748:  BSF    0A.3
1749:  BSF    0A.4
174A:  GOTO   094
174B:  MOVLW  35
174C:  MOVWF  2E
174D:  MOVLW  17
174E:  MOVWF  2F
174F:  BSF    0A.3
1750:  BSF    0A.4
1751:  GOTO   094
1752:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
*
07ED:  MOVLW  01
07EE:  XORWF  3E,F
....................     rtos_yield(); 
07EF:  MOVLW  F6
07F0:  MOVWF  3C
07F1:  MOVLW  07
07F2:  MOVWF  3D
07F3:  BSF    0A.3
07F4:  BSF    0A.4
07F5:  GOTO   094
07F6:  MOVLW  ED
07F7:  MOVWF  3C
07F8:  MOVLW  07
07F9:  MOVWF  3D
07FA:  BSF    0A.3
07FB:  BSF    0A.4
07FC:  GOTO   094
07FD:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
*
1753:  MOVLW  00
1754:  MOVWF  78
1755:  IORLW  06
1756:  MOVWF  12
1757:  MOVLW  FF
1758:  BSF    03.5
1759:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
175A:  BCF    03.5
175B:  BCF    20.2
175C:  MOVF   20,W
175D:  BSF    03.5
175E:  MOVWF  07
175F:  BCF    03.5
1760:  BCF    07.2
1761:  MOVLW  0E
1762:  MOVWF  17
1763:  BSF    03.5
1764:  CLRF   1B
1765:  CLRF   1C
1766:  MOVLW  01
1767:  MOVWF  1D
....................  
....................     delay_ms(500); 
1768:  MOVLW  02
1769:  BCF    03.5
176A:  MOVWF  62
176B:  MOVLW  FA
176C:  BSF    03.6
176D:  MOVWF  18
176E:  BCF    0A.4
176F:  BCF    03.6
1770:  CALL   7A7
1771:  BSF    0A.4
1772:  DECFSZ 62,F
1773:  GOTO   76B
....................     port_b_pullups(0xFF); 
1774:  MOVLW  FF
1775:  BSF    03.5
1776:  MOVWF  15
1777:  BCF    01.7
....................     WPUB = 0xFF; 
1778:  MOVWF  15
1779:  BCF    03.5
177A:  BSF    0A.3
177B:  BSF    0A.4
177C:  GOTO   020 (RETURN)
.................... } 
....................  
.................... void turnOnBuzzer(void) { 
....................     output_high(PIN_BUZZER); 
*
0E03:  BCF    20.5
0E04:  MOVF   20,W
0E05:  BSF    03.5
0E06:  MOVWF  07
0E07:  BCF    03.5
0E08:  BSF    07.5
....................     delay_ms(200); 
0E09:  MOVLW  C8
0E0A:  BSF    03.6
0E0B:  MOVWF  18
0E0C:  BCF    0A.3
0E0D:  BCF    03.6
0E0E:  CALL   7A7
0E0F:  BSF    0A.3
....................     output_low(PIN_BUZZER); 
0E10:  BCF    20.5
0E11:  MOVF   20,W
0E12:  BSF    03.5
0E13:  MOVWF  07
0E14:  BCF    03.5
0E15:  BCF    07.5
....................     delay_ms(100); 
0E16:  MOVLW  64
0E17:  BSF    03.6
0E18:  MOVWF  18
0E19:  BCF    0A.3
0E1A:  BCF    03.6
0E1B:  CALL   7A7
0E1C:  BSF    0A.3
....................     output_high(PIN_BUZZER); 
0E1D:  BCF    20.5
0E1E:  MOVF   20,W
0E1F:  BSF    03.5
0E20:  MOVWF  07
0E21:  BCF    03.5
0E22:  BSF    07.5
....................     delay_ms(200); 
0E23:  MOVLW  C8
0E24:  BSF    03.6
0E25:  MOVWF  18
0E26:  BCF    0A.3
0E27:  BCF    03.6
0E28:  CALL   7A7
0E29:  BSF    0A.3
....................     output_low(PIN_BUZZER); 
0E2A:  BCF    20.5
0E2B:  MOVF   20,W
0E2C:  BSF    03.5
0E2D:  MOVWF  07
0E2E:  BCF    03.5
0E2F:  BCF    07.5
.................... } 

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
