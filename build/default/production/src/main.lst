CCS PCM C Compiler, Version 5.015, 5967               09-Nov-17 11:46

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   6123 words (75%)
                           Largest free fragment is 2048
               RAM used:   71 (19%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (2 in main + 6 for interrupts)
               Stack size: 8

*
0000:  MOVLW  17
0001:  MOVWF  0A
0002:  GOTO   75D
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  0A
0028:  RETLW  22
0029:  RETLW  3A
002A:  RETLW  52
002B:  RETLW  6A
002C:  RETLW  82
002D:  RETLW  9A
002E:  RETLW  B2
002F:  RETLW  CA
0030:  RETLW  FF
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  22
0036:  RETLW  00
0037:  RETLW  29
0038:  RETLW  00
0039:  RETLW  30
003A:  RETLW  00
003B:  RETLW  37
003C:  RETLW  00
003D:  BSF    03.5
003E:  BSF    03.6
003F:  MOVF   29,W
0040:  CLRF   78
0041:  SUBWF  28,W
0042:  BTFSC  03.0
0043:  GOTO   047
0044:  MOVF   28,W
0045:  MOVWF  77
0046:  GOTO   053
0047:  CLRF   77
0048:  MOVLW  08
0049:  MOVWF  2A
004A:  RLF    28,F
004B:  RLF    77,F
004C:  MOVF   29,W
004D:  SUBWF  77,W
004E:  BTFSC  03.0
004F:  MOVWF  77
0050:  RLF    78,F
0051:  DECFSZ 2A,F
0052:  GOTO   04A
0053:  BCF    03.5
0054:  BCF    03.6
0055:  RETURN
0056:  CLRF   77
0057:  CLRF   78
0058:  BSF    03.5
0059:  BSF    03.6
005A:  MOVF   26,W
005B:  BCF    03.0
005C:  BTFSC  27.0
005D:  ADDWF  77,F
005E:  RRF    77,F
005F:  RRF    78,F
0060:  BTFSC  27.1
0061:  ADDWF  77,F
0062:  RRF    77,F
0063:  RRF    78,F
0064:  BTFSC  27.2
0065:  ADDWF  77,F
0066:  RRF    77,F
0067:  RRF    78,F
0068:  BTFSC  27.3
0069:  ADDWF  77,F
006A:  RRF    77,F
006B:  RRF    78,F
006C:  BTFSC  27.4
006D:  ADDWF  77,F
006E:  RRF    77,F
006F:  RRF    78,F
0070:  BTFSC  27.5
0071:  ADDWF  77,F
0072:  RRF    77,F
0073:  RRF    78,F
0074:  BTFSC  27.6
0075:  ADDWF  77,F
0076:  RRF    77,F
0077:  RRF    78,F
0078:  BTFSC  27.7
0079:  ADDWF  77,F
007A:  RRF    77,F
007B:  RRF    78,F
007C:  BCF    03.5
007D:  BCF    03.6
007E:  RETURN
*
0192:  MOVLW  20
0193:  BSF    03.5
0194:  BSF    03.6
0195:  MOVWF  32
0196:  CLRF   2E
0197:  CLRF   2F
0198:  CLRF   30
0199:  CLRF   31
019A:  MOVF   29,W
019B:  MOVWF  7A
019C:  MOVF   28,W
019D:  MOVWF  79
019E:  MOVF   27,W
019F:  MOVWF  78
01A0:  MOVF   26,W
01A1:  MOVWF  77
01A2:  BCF    03.0
01A3:  BTFSS  77.0
01A4:  GOTO   1B3
01A5:  MOVF   2A,W
01A6:  ADDWF  2E,F
01A7:  MOVF   2B,W
01A8:  BTFSC  03.0
01A9:  INCFSZ 2B,W
01AA:  ADDWF  2F,F
01AB:  MOVF   2C,W
01AC:  BTFSC  03.0
01AD:  INCFSZ 2C,W
01AE:  ADDWF  30,F
01AF:  MOVF   2D,W
01B0:  BTFSC  03.0
01B1:  INCFSZ 2D,W
01B2:  ADDWF  31,F
01B3:  RRF    31,F
01B4:  RRF    30,F
01B5:  RRF    2F,F
01B6:  RRF    2E,F
01B7:  RRF    7A,F
01B8:  RRF    79,F
01B9:  RRF    78,F
01BA:  RRF    77,F
01BB:  DECFSZ 32,F
01BC:  GOTO   1A2
01BD:  BCF    03.5
01BE:  BCF    03.6
01BF:  RETURN
*
025E:  BTFSC  03.1
025F:  GOTO   263
0260:  MOVLW  AA
0261:  MOVWF  04
0262:  BSF    03.7
0263:  BSF    03.5
0264:  BSF    03.6
0265:  MOVF   25,W
0266:  XORWF  29,W
0267:  ANDLW  80
0268:  MOVWF  2F
0269:  BTFSS  25.7
026A:  GOTO   276
026B:  COMF   22,F
026C:  COMF   23,F
026D:  COMF   24,F
026E:  COMF   25,F
026F:  INCF   22,F
0270:  BTFSC  03.2
0271:  INCF   23,F
0272:  BTFSC  03.2
0273:  INCF   24,F
0274:  BTFSC  03.2
0275:  INCF   25,F
0276:  BTFSS  29.7
0277:  GOTO   283
0278:  COMF   26,F
0279:  COMF   27,F
027A:  COMF   28,F
027B:  COMF   29,F
027C:  INCF   26,F
027D:  BTFSC  03.2
027E:  INCF   27,F
027F:  BTFSC  03.2
0280:  INCF   28,F
0281:  BTFSC  03.2
0282:  INCF   29,F
0283:  CLRF   77
0284:  CLRF   78
0285:  CLRF   79
0286:  CLRF   7A
0287:  CLRF   2A
0288:  CLRF   2B
0289:  CLRF   2C
028A:  CLRF   2D
028B:  MOVF   29,W
028C:  IORWF  28,W
028D:  IORWF  27,W
028E:  IORWF  26,W
028F:  BTFSC  03.2
0290:  GOTO   2C1
0291:  MOVLW  20
0292:  MOVWF  2E
0293:  BCF    03.0
0294:  RLF    22,F
0295:  RLF    23,F
0296:  RLF    24,F
0297:  RLF    25,F
0298:  RLF    2A,F
0299:  RLF    2B,F
029A:  RLF    2C,F
029B:  RLF    2D,F
029C:  MOVF   29,W
029D:  SUBWF  2D,W
029E:  BTFSS  03.2
029F:  GOTO   2AA
02A0:  MOVF   28,W
02A1:  SUBWF  2C,W
02A2:  BTFSS  03.2
02A3:  GOTO   2AA
02A4:  MOVF   27,W
02A5:  SUBWF  2B,W
02A6:  BTFSS  03.2
02A7:  GOTO   2AA
02A8:  MOVF   26,W
02A9:  SUBWF  2A,W
02AA:  BTFSS  03.0
02AB:  GOTO   2BB
02AC:  MOVF   26,W
02AD:  SUBWF  2A,F
02AE:  MOVF   27,W
02AF:  BTFSS  03.0
02B0:  INCFSZ 27,W
02B1:  SUBWF  2B,F
02B2:  MOVF   28,W
02B3:  BTFSS  03.0
02B4:  INCFSZ 28,W
02B5:  SUBWF  2C,F
02B6:  MOVF   29,W
02B7:  BTFSS  03.0
02B8:  INCFSZ 29,W
02B9:  SUBWF  2D,F
02BA:  BSF    03.0
02BB:  RLF    77,F
02BC:  RLF    78,F
02BD:  RLF    79,F
02BE:  RLF    7A,F
02BF:  DECFSZ 2E,F
02C0:  GOTO   293
02C1:  BTFSS  2F.7
02C2:  GOTO   2CE
02C3:  COMF   77,F
02C4:  COMF   78,F
02C5:  COMF   79,F
02C6:  COMF   7A,F
02C7:  INCF   77,F
02C8:  BTFSC  03.2
02C9:  INCF   78,F
02CA:  BTFSC  03.2
02CB:  INCF   79,F
02CC:  BTFSC  03.2
02CD:  INCF   7A,F
02CE:  MOVF   2A,W
02CF:  MOVWF  00
02D0:  INCF   04,F
02D1:  MOVF   2B,W
02D2:  MOVWF  00
02D3:  INCF   04,F
02D4:  MOVF   2C,W
02D5:  MOVWF  00
02D6:  INCF   04,F
02D7:  MOVF   2D,W
02D8:  MOVWF  00
02D9:  BCF    03.5
02DA:  BCF    03.6
02DB:  RETURN
*
0580:  CLRF   78
0581:  CLRF   79
0582:  CLRF   77
0583:  CLRF   7A
0584:  BSF    03.6
0585:  MOVF   47,W
0586:  BTFSS  03.2
0587:  GOTO   58B
0588:  MOVF   46,W
0589:  BTFSC  03.2
058A:  GOTO   5A5
058B:  MOVLW  10
058C:  MOVWF  48
058D:  BCF    03.0
058E:  RLF    44,F
058F:  RLF    45,F
0590:  RLF    77,F
0591:  RLF    7A,F
0592:  MOVF   47,W
0593:  SUBWF  7A,W
0594:  BTFSS  03.2
0595:  GOTO   598
0596:  MOVF   46,W
0597:  SUBWF  77,W
0598:  BTFSS  03.0
0599:  GOTO   5A1
059A:  MOVF   46,W
059B:  SUBWF  77,F
059C:  BTFSS  03.0
059D:  DECF   7A,F
059E:  MOVF   47,W
059F:  SUBWF  7A,F
05A0:  BSF    03.0
05A1:  RLF    78,F
05A2:  RLF    79,F
05A3:  DECFSZ 48,F
05A4:  GOTO   58D
05A5:  BCF    03.6
05A6:  RETURN
*
0EE1:  BCF    0A.0
0EE2:  BSF    0A.1
0EE3:  BSF    0A.2
0EE4:  ADDWF  02,F
0EE5:  GOTO   51A
0EE6:  GOTO   63A
0EE7:  GOTO   56C
0EE8:  GOTO   280
0EE9:  GOTO   67C
0EEA:  GOTO   6DE
0EEB:  GOTO   6DE
0EEC:  GOTO   6DE
0EED:  GOTO   6DE
0EEE:  GOTO   6DE
0EEF:  GOTO   6C8
*
16EE:  BCF    0A.0
16EF:  BSF    0A.1
16F0:  BSF    0A.2
16F1:  ADDWF  02,F
16F2:  GOTO   050
16F3:  GOTO   087
16F4:  GOTO   220
16F5:  GOTO   3FE
16F6:  GOTO   64E
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #device *=16 
.................... #use delay(clock=20M) 
*
07A7:  MOVLW  18
07A8:  MOVWF  04
07A9:  BSF    03.7
07AA:  MOVF   00,W
07AB:  BTFSC  03.2
07AC:  GOTO   7BA
07AD:  MOVLW  06
07AE:  MOVWF  78
07AF:  CLRF   77
07B0:  DECFSZ 77,F
07B1:  GOTO   7B0
07B2:  DECFSZ 78,F
07B3:  GOTO   7AF
07B4:  MOVLW  7B
07B5:  MOVWF  77
07B6:  DECFSZ 77,F
07B7:  GOTO   7B6
07B8:  DECFSZ 00,F
07B9:  GOTO   7AD
07BA:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
009F:  MOVLW  08
00A0:  MOVWF  78
00A1:  NOP
00A2:  BCF    07.3
00A3:  BCF    20.3
00A4:  MOVF   20,W
00A5:  BSF    03.5
00A6:  MOVWF  07
00A7:  NOP
00A8:  BCF    03.5
00A9:  BSF    03.6
00AA:  RLF    5A,F
00AB:  BCF    03.6
00AC:  BCF    07.4
00AD:  BTFSS  03.0
00AE:  GOTO   0B5
00AF:  BSF    20.4
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
00B3:  GOTO   0B9
00B4:  BCF    03.5
00B5:  BCF    20.4
00B6:  MOVF   20,W
00B7:  BSF    03.5
00B8:  MOVWF  07
00B9:  NOP
00BA:  BCF    03.5
00BB:  BSF    20.3
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
00BF:  BCF    03.5
00C0:  BTFSS  07.3
00C1:  GOTO   0C0
00C2:  DECFSZ 78,F
00C3:  GOTO   0A1
00C4:  NOP
00C5:  BCF    07.3
00C6:  BCF    20.3
00C7:  MOVF   20,W
00C8:  BSF    03.5
00C9:  MOVWF  07
00CA:  NOP
00CB:  BCF    03.5
00CC:  BSF    20.4
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  NOP
00D1:  NOP
00D2:  BCF    03.5
00D3:  BSF    20.3
00D4:  MOVF   20,W
00D5:  BSF    03.5
00D6:  MOVWF  07
00D7:  BCF    03.5
00D8:  BTFSS  07.3
00D9:  GOTO   0D8
00DA:  CLRF   78
00DB:  NOP
00DC:  BTFSC  07.4
00DD:  BSF    78.0
00DE:  BCF    07.3
00DF:  BCF    20.3
00E0:  MOVF   20,W
00E1:  BSF    03.5
00E2:  MOVWF  07
00E3:  BCF    03.5
00E4:  BCF    07.4
00E5:  BCF    20.4
00E6:  MOVF   20,W
00E7:  BSF    03.5
00E8:  MOVWF  07
00E9:  BCF    03.5
00EA:  RETURN
*
0476:  MOVLW  08
0477:  BSF    03.6
0478:  MOVWF  5B
0479:  MOVF   77,W
047A:  MOVWF  5C
047B:  BCF    03.6
047C:  BSF    20.4
047D:  MOVF   20,W
047E:  BSF    03.5
047F:  MOVWF  07
0480:  NOP
0481:  BCF    03.5
0482:  BSF    20.3
0483:  MOVF   20,W
0484:  BSF    03.5
0485:  MOVWF  07
0486:  BCF    03.5
0487:  BTFSS  07.3
0488:  GOTO   487
0489:  BTFSC  07.4
048A:  BSF    03.0
048B:  BTFSS  07.4
048C:  BCF    03.0
048D:  RLF    78,F
048E:  NOP
048F:  BCF    20.3
0490:  MOVF   20,W
0491:  BSF    03.5
0492:  MOVWF  07
0493:  BCF    03.5
0494:  BCF    07.3
0495:  BSF    03.6
0496:  DECFSZ 5B,F
0497:  GOTO   47B
0498:  BCF    03.6
0499:  BSF    20.4
049A:  MOVF   20,W
049B:  BSF    03.5
049C:  MOVWF  07
049D:  NOP
049E:  BCF    03.5
049F:  BCF    07.4
04A0:  BSF    03.6
04A1:  MOVF   5C,W
04A2:  BTFSC  03.2
04A3:  GOTO   4AB
04A4:  BCF    03.6
04A5:  BCF    20.4
04A6:  MOVF   20,W
04A7:  BSF    03.5
04A8:  MOVWF  07
04A9:  BCF    03.5
04AA:  BSF    03.6
04AB:  NOP
04AC:  BCF    03.6
04AD:  BSF    20.3
04AE:  MOVF   20,W
04AF:  BSF    03.5
04B0:  MOVWF  07
04B1:  BCF    03.5
04B2:  BTFSS  07.3
04B3:  GOTO   4B2
04B4:  NOP
04B5:  BCF    07.3
04B6:  BCF    20.3
04B7:  MOVF   20,W
04B8:  BSF    03.5
04B9:  MOVWF  07
04BA:  NOP
04BB:  BCF    03.5
04BC:  BCF    07.4
04BD:  BCF    20.4
04BE:  MOVF   20,W
04BF:  BSF    03.5
04C0:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
04E1:  BSF    03.6
04E2:  MOVF   58,W
04E3:  ANDLW  0F
04E4:  MOVWF  59
04E5:  MOVF   58,W
04E6:  ANDLW  F0
04E7:  MOVWF  77
04E8:  SWAPF  77,F
04E9:  MOVLW  0F
04EA:  ANDWF  77,F
04EB:  MOVF   77,W
04EC:  MOVWF  5B
04ED:  BSF    03.5
04EE:  MOVWF  26
04EF:  MOVLW  0A
04F0:  MOVWF  27
04F1:  BCF    03.5
04F2:  BCF    03.6
04F3:  CALL   056
04F4:  MOVF   78,W
04F5:  BSF    03.6
04F6:  ADDWF  59,W
04F7:  MOVWF  78
04F8:  BCF    03.6
04F9:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
007F:  BSF    03.6
0080:  MOVF   56,W
0081:  BSF    03.5
0082:  MOVWF  28
0083:  MOVLW  0A
0084:  MOVWF  29
0085:  BCF    03.5
0086:  BCF    03.6
0087:  CALL   03D
0088:  SWAPF  78,W
0089:  MOVWF  77
008A:  MOVLW  F0
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  ANDLW  F0
008E:  BSF    03.6
008F:  MOVWF  57
0090:  MOVF   56,W
0091:  BSF    03.5
0092:  MOVWF  28
0093:  MOVLW  0A
0094:  MOVWF  29
0095:  BCF    03.5
0096:  BCF    03.6
0097:  CALL   03D
0098:  MOVF   77,W
0099:  ANDLW  0F
009A:  BSF    03.6
009B:  IORWF  57,W
009C:  MOVWF  78
009D:  BCF    03.6
009E:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
042F:  BSF    03.6
0430:  CLRF   59
....................     int value = 0; 
....................     I2C_start(); 
0431:  BCF    03.6
0432:  BSF    20.4
0433:  MOVF   20,W
0434:  BSF    03.5
0435:  MOVWF  07
0436:  NOP
0437:  BCF    03.5
0438:  BSF    20.3
0439:  MOVF   20,W
043A:  BSF    03.5
043B:  MOVWF  07
043C:  NOP
043D:  BCF    03.5
043E:  BCF    07.4
043F:  BCF    20.4
0440:  MOVF   20,W
0441:  BSF    03.5
0442:  MOVWF  07
0443:  NOP
0444:  BCF    03.5
0445:  BCF    07.3
0446:  BCF    20.3
0447:  MOVF   20,W
0448:  BSF    03.5
0449:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
044A:  MOVLW  D0
044B:  BCF    03.5
044C:  BSF    03.6
044D:  MOVWF  5A
044E:  BCF    03.6
044F:  CALL   09F
....................     I2C_write(address); 
0450:  BSF    03.6
0451:  MOVF   58,W
0452:  MOVWF  5A
0453:  BCF    03.6
0454:  CALL   09F
....................     I2C_start(); 
0455:  BSF    20.4
0456:  MOVF   20,W
0457:  BSF    03.5
0458:  MOVWF  07
0459:  NOP
045A:  BCF    03.5
045B:  BSF    20.3
045C:  MOVF   20,W
045D:  BSF    03.5
045E:  MOVWF  07
045F:  NOP
0460:  BCF    03.5
0461:  BTFSS  07.3
0462:  GOTO   461
0463:  BCF    07.4
0464:  BCF    20.4
0465:  MOVF   20,W
0466:  BSF    03.5
0467:  MOVWF  07
0468:  NOP
0469:  BCF    03.5
046A:  BCF    07.3
046B:  BCF    20.3
046C:  MOVF   20,W
046D:  BSF    03.5
046E:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
046F:  MOVLW  D1
0470:  BCF    03.5
0471:  BSF    03.6
0472:  MOVWF  5A
0473:  BCF    03.6
0474:  CALL   09F
....................     value = I2C_read(0); 
0475:  CLRF   77
*
04C1:  MOVF   78,W
04C2:  BCF    03.5
04C3:  BSF    03.6
04C4:  MOVWF  59
....................     I2C_stop(); 
04C5:  BCF    03.6
04C6:  BCF    20.4
04C7:  MOVF   20,W
04C8:  BSF    03.5
04C9:  MOVWF  07
04CA:  NOP
04CB:  BCF    03.5
04CC:  BSF    20.3
04CD:  MOVF   20,W
04CE:  BSF    03.5
04CF:  MOVWF  07
04D0:  BCF    03.5
04D1:  BTFSS  07.3
04D2:  GOTO   4D1
04D3:  NOP
04D4:  GOTO   4D5
04D5:  NOP
04D6:  BSF    20.4
04D7:  MOVF   20,W
04D8:  BSF    03.5
04D9:  MOVWF  07
04DA:  NOP
....................     return value; 
04DB:  BCF    03.5
04DC:  BSF    03.6
04DD:  MOVF   59,W
04DE:  MOVWF  78
04DF:  BCF    03.6
04E0:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
00EB:  BSF    20.4
00EC:  MOVF   20,W
00ED:  BSF    03.5
00EE:  MOVWF  07
00EF:  NOP
00F0:  BCF    03.5
00F1:  BSF    20.3
00F2:  MOVF   20,W
00F3:  BSF    03.5
00F4:  MOVWF  07
00F5:  NOP
00F6:  BCF    03.5
00F7:  BCF    07.4
00F8:  BCF    20.4
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
00FC:  NOP
00FD:  BCF    03.5
00FE:  BCF    07.3
00FF:  BCF    20.3
0100:  MOVF   20,W
0101:  BSF    03.5
0102:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
0103:  MOVLW  D0
0104:  BCF    03.5
0105:  BSF    03.6
0106:  MOVWF  5A
0107:  BCF    03.6
0108:  CALL   09F
....................     I2C_write(address); 
0109:  BSF    03.6
010A:  MOVF   57,W
010B:  MOVWF  5A
010C:  BCF    03.6
010D:  CALL   09F
....................     I2C_write(value); 
010E:  BSF    03.6
010F:  MOVF   58,W
0110:  MOVWF  5A
0111:  BCF    03.6
0112:  CALL   09F
....................     I2C_stop(); 
0113:  BCF    20.4
0114:  MOVF   20,W
0115:  BSF    03.5
0116:  MOVWF  07
0117:  NOP
0118:  BCF    03.5
0119:  BSF    20.3
011A:  MOVF   20,W
011B:  BSF    03.5
011C:  MOVWF  07
011D:  BCF    03.5
011E:  BTFSS  07.3
011F:  GOTO   11E
0120:  NOP
0121:  GOTO   122
0122:  NOP
0123:  BSF    20.4
0124:  MOVF   20,W
0125:  BSF    03.5
0126:  MOVWF  07
0127:  NOP
0128:  BCF    03.5
0129:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
04FE:  CLRF   58
04FF:  BCF    03.6
0500:  CALL   42F
0501:  MOVF   78,W
0502:  BSF    03.6
0503:  MOVWF  54
....................     sec = bcd_to_decimal(sec); 
0504:  MOVF   54,W
0505:  MOVWF  58
0506:  BCF    03.6
0507:  CALL   4E1
0508:  MOVF   78,W
0509:  BSF    03.6
050A:  MOVWF  54
....................     min = DS3231_Read(minuteREG); 
050B:  MOVLW  01
050C:  MOVWF  58
050D:  BCF    03.6
050E:  CALL   42F
050F:  MOVF   78,W
0510:  BSF    03.6
0511:  MOVWF  53
....................     min = bcd_to_decimal(min); 
0512:  MOVF   53,W
0513:  MOVWF  58
0514:  BCF    03.6
0515:  CALL   4E1
0516:  MOVF   78,W
0517:  BSF    03.6
0518:  MOVWF  53
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0519:  MOVLW  02
051A:  MOVWF  58
051B:  BCF    03.6
051C:  CALL   42F
051D:  MOVF   78,W
051E:  ANDLW  3F
051F:  BSF    03.6
0520:  MOVWF  52
....................     hora = bcd_to_decimal(hora); 
0521:  MOVF   52,W
0522:  MOVWF  58
0523:  BCF    03.6
0524:  CALL   4E1
0525:  MOVF   78,W
0526:  BSF    03.6
0527:  MOVWF  52
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
012A:  BSF    03.6
012B:  MOVF   55,W
012C:  MOVWF  56
012D:  BCF    03.6
012E:  CALL   07F
012F:  MOVF   78,W
0130:  BSF    03.6
0131:  MOVWF  56
0132:  CLRF   57
0133:  MOVF   56,W
0134:  MOVWF  58
0135:  BCF    03.6
0136:  CALL   0EB
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0137:  BSF    03.6
0138:  MOVF   54,W
0139:  MOVWF  56
013A:  BCF    03.6
013B:  CALL   07F
013C:  MOVF   78,W
013D:  BSF    03.6
013E:  MOVWF  56
013F:  MOVLW  01
0140:  MOVWF  57
0141:  MOVF   56,W
0142:  MOVWF  58
0143:  BCF    03.6
0144:  CALL   0EB
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0145:  BSF    03.6
0146:  MOVF   53,W
0147:  MOVWF  56
0148:  BCF    03.6
0149:  CALL   07F
014A:  MOVF   78,W
014B:  ANDLW  3F
014C:  BSF    03.6
014D:  MOVWF  56
014E:  MOVLW  02
014F:  MOVWF  57
0150:  MOVF   56,W
0151:  MOVWF  58
0152:  BCF    03.6
0153:  CALL   0EB
0154:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05AE:  CLRF   47
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05AF:  CLRF   47
05B0:  MOVF   46,W
05B1:  SUBWF  47,W
05B2:  BTFSC  03.0
05B3:  GOTO   5BD
....................         array[i] = 0; 
05B4:  MOVF   47,W
05B5:  ADDWF  44,W
05B6:  MOVWF  04
05B7:  BCF    03.7
05B8:  BTFSC  45.0
05B9:  BSF    03.7
05BA:  CLRF   00
05BB:  INCF   47,F
05BC:  GOTO   5B0
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05A7:  BSF    03.6
05A8:  MOVF   40,W
05A9:  MOVWF  45
05AA:  MOVF   3F,W
05AB:  MOVWF  44
05AC:  MOVF   41,W
05AD:  MOVWF  46
....................  
....................     int index = 0; 
*
05BD:  CLRF   42
....................     while (number > 0) { 
05BE:  MOVF   3D,F
05BF:  BTFSS  03.2
05C0:  GOTO   5C4
05C1:  MOVF   3E,F
05C2:  BTFSC  03.2
05C3:  GOTO   5E8
....................         int digit = number % 10; 
05C4:  MOVF   3E,W
05C5:  MOVWF  45
05C6:  MOVF   3D,W
05C7:  MOVWF  44
05C8:  CLRF   47
05C9:  MOVLW  0A
05CA:  MOVWF  46
05CB:  BCF    03.6
05CC:  CALL   580
05CD:  MOVF   77,W
05CE:  BSF    03.6
05CF:  MOVWF  43
....................         digits[index] = digit; 
05D0:  MOVF   42,W
05D1:  ADDWF  3F,W
05D2:  MOVWF  04
05D3:  BCF    03.7
05D4:  BTFSC  40.0
05D5:  BSF    03.7
05D6:  MOVF   43,W
05D7:  MOVWF  00
....................         index++; 
05D8:  INCF   42,F
....................         number /= 10; 
05D9:  MOVF   3E,W
05DA:  MOVWF  45
05DB:  MOVF   3D,W
05DC:  MOVWF  44
05DD:  CLRF   47
05DE:  MOVLW  0A
05DF:  MOVWF  46
05E0:  BCF    03.6
05E1:  CALL   580
05E2:  MOVF   79,W
05E3:  BSF    03.6
05E4:  MOVWF  3E
05E5:  MOVF   78,W
05E6:  MOVWF  3D
05E7:  GOTO   5BE
....................     } 
05E8:  BCF    03.6
05E9:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define Array_getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
0694:  BSF    03.5
0695:  BCF    03.6
0696:  BCF    05.1
0697:  BCF    03.5
0698:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
0699:  BSF    03.5
069A:  BCF    05.1
069B:  BCF    03.5
069C:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0657:  MOVLW  01
0658:  BSF    03.6
0659:  MOVWF  33
065A:  CLRF   34
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
065B:  BSF    03.5
065C:  BCF    03.6
065D:  BCF    05.3
065E:  BCF    03.5
065F:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
0660:  BSF    03.5
0661:  BCF    05.1
0662:  BCF    03.5
0663:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
0664:  BSF    03.6
0665:  CLRF   34
0666:  MOVF   32,W
0667:  SUBWF  34,W
0668:  BTFSC  03.0
0669:  GOTO   694
....................         int character = charactersArray[j]; 
066A:  MOVF   34,W
066B:  ADDWF  30,W
066C:  MOVWF  04
066D:  BCF    03.7
066E:  BTFSC  31.0
066F:  BSF    03.7
0670:  MOVF   00,W
0671:  MOVWF  35
....................  
....................         for (i = 1; i <= 8; i++) { 
0672:  MOVLW  01
0673:  MOVWF  33
0674:  MOVF   33,W
0675:  SUBLW  08
0676:  BTFSS  03.0
0677:  GOTO   692
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0678:  BTFSC  35.0
0679:  GOTO   67E
067A:  BCF    03.6
067B:  BCF    05.0
067C:  GOTO   680
067D:  BSF    03.6
067E:  BCF    03.6
067F:  BSF    05.0
0680:  BSF    03.5
0681:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
0682:  BCF    03.0
0683:  BCF    03.5
0684:  BSF    03.6
0685:  RRF    35,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
0686:  BSF    03.5
0687:  BCF    03.6
0688:  BCF    05.3
0689:  BCF    03.5
068A:  BSF    05.3
....................             output_low(PIN_CLOCK); 
068B:  BSF    03.5
068C:  BCF    05.3
068D:  BCF    03.5
068E:  BCF    05.3
068F:  BSF    03.6
0690:  INCF   33,F
0691:  GOTO   674
....................         } 
0692:  INCF   34,F
0693:  GOTO   666
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
069D:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06DD:  CLRF   33
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06DE:  CLRF   33
06DF:  MOVF   32,W
06E0:  SUBWF  33,W
06E1:  BTFSC  03.0
06E2:  GOTO   702
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06E3:  MOVF   33,W
06E4:  ADDWF  30,W
06E5:  MOVWF  78
06E6:  MOVF   31,W
06E7:  MOVWF  7A
06E8:  BTFSC  03.0
06E9:  INCF   7A,F
06EA:  MOVF   78,W
06EB:  MOVWF  34
06EC:  MOVF   7A,W
06ED:  MOVWF  35
06EE:  MOVF   33,W
06EF:  ADDWF  30,W
06F0:  MOVWF  04
06F1:  BCF    03.7
06F2:  BTFSC  31.0
06F3:  BSF    03.7
06F4:  MOVF   00,W
06F5:  BCF    03.6
06F6:  CALL   004
06F7:  MOVWF  78
06F8:  BSF    03.6
06F9:  MOVF   34,W
06FA:  MOVWF  04
06FB:  BCF    03.7
06FC:  BTFSC  35.0
06FD:  BSF    03.7
06FE:  MOVF   78,W
06FF:  MOVWF  00
0700:  INCF   33,F
0701:  GOTO   6DF
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06A8:  CLRF   33
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06A9:  CLRF   33
06AA:  MOVF   32,W
06AB:  SUBWF  33,W
06AC:  BTFSC  03.0
06AD:  GOTO   6D6
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06AE:  MOVF   33,W
06AF:  ADDWF  30,W
06B0:  MOVWF  78
06B1:  MOVF   31,W
06B2:  MOVWF  7A
06B3:  BTFSC  03.0
06B4:  INCF   7A,F
06B5:  MOVF   78,W
06B6:  MOVWF  34
06B7:  MOVF   7A,W
06B8:  MOVWF  35
06B9:  MOVF   33,W
06BA:  ADDWF  30,W
06BB:  MOVWF  04
06BC:  BCF    03.7
06BD:  BTFSC  31.0
06BE:  BSF    03.7
06BF:  MOVF   00,W
06C0:  BCF    03.6
06C1:  CALL   004
06C2:  MOVWF  78
06C3:  BSF    03.6
06C4:  MOVF   34,W
06C5:  MOVWF  04
06C6:  BCF    03.7
06C7:  BTFSC  35.0
06C8:  BSF    03.7
06C9:  MOVF   78,W
06CA:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06CB:  MOVF   33,W
06CC:  ADDWF  30,W
06CD:  MOVWF  04
06CE:  BCF    03.7
06CF:  BTFSC  31.0
06D0:  BSF    03.7
06D1:  MOVF   00,W
06D2:  IORLW  08
06D3:  MOVWF  00
06D4:  INCF   33,F
06D5:  GOTO   6AA
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
069E:  BSF    03.6
069F:  MOVF   2F,F
06A0:  BTFSC  03.2
06A1:  GOTO   6D7
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
06A2:  MOVF   2D,W
06A3:  MOVWF  31
06A4:  MOVF   2C,W
06A5:  MOVWF  30
06A6:  MOVF   2E,W
06A7:  MOVWF  32
....................     } else { 
*
06D6:  GOTO   702
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06D7:  MOVF   2D,W
06D8:  MOVWF  31
06D9:  MOVF   2C,W
06DA:  MOVWF  30
06DB:  MOVF   2E,W
06DC:  MOVWF  32
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
0702:  MOVF   2D,W
0703:  MOVWF  31
0704:  MOVF   2C,W
0705:  MOVWF  30
0706:  MOVF   2E,W
0707:  MOVWF  32
0708:  BCF    03.6
0709:  CALL   657
070A:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
0E88:  BSF    03.6
0E89:  CLRF   17
0E8A:  CLRF   18
0E8B:  CLRF   19
0E8C:  CLRF   1A
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0E8D:  MOVLW  01
0E8E:  MOVWF  17
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
0E8F:  MOVLW  09
0E90:  MOVWF  18
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0E91:  MOVLW  01
0E92:  MOVWF  19
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0E93:  MOVWF  1A
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
0E94:  MOVWF  31
0E95:  MOVLW  17
0E96:  MOVWF  30
0E97:  MOVLW  04
0E98:  MOVWF  32
0E99:  BCF    0A.3
0E9A:  BCF    03.6
0E9B:  CALL   657
0E9C:  BSF    0A.3
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     Format format; 
....................     int hour; 
....................     int minute; 
....................     int second; 
.................... //    char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
052E:  MOVF   55,W
052F:  MOVWF  59
....................     time.minute = minute; 
0530:  MOVF   56,W
0531:  MOVWF  5A
....................     time.second = second; 
0532:  MOVF   57,W
0533:  MOVWF  5B
....................     return time; 
0534:  MOVF   58,W
0535:  MOVWF  77
0536:  MOVF   59,W
0537:  MOVWF  78
0538:  MOVF   5A,W
0539:  MOVWF  79
053A:  MOVF   5B,W
053B:  MOVWF  7A
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
04FA:  BSF    03.6
04FB:  CLRF   52
04FC:  CLRF   53
04FD:  CLRF   54
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0528:  MOVF   52,W
0529:  MOVWF  55
052A:  MOVF   53,W
052B:  MOVWF  56
052C:  MOVF   54,W
052D:  MOVWF  57
*
053C:  MOVF   7A,W
053D:  MOVWF  51
053E:  MOVF   79,W
053F:  MOVWF  50
0540:  MOVF   78,W
0541:  MOVWF  4F
0542:  MOVF   77,W
0543:  MOVWF  4E
....................  
....................     return currentTime; 
0544:  MOVF   4E,W
0545:  MOVWF  77
0546:  MOVF   4F,W
0547:  MOVWF  78
0548:  MOVF   50,W
0549:  MOVWF  79
054A:  MOVF   51,W
054B:  MOVWF  7A
054C:  BCF    03.6
054D:  RETURN
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
.................... //    newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
.................... //    write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
05EA:  MOVLW  01
05EB:  BSF    03.6
05EC:  ADDWF  32,W
05ED:  MOVWF  04
05EE:  BCF    03.7
05EF:  BTFSC  33.0
05F0:  BSF    03.7
05F1:  MOVF   00,W
05F2:  MOVWF  3B
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
05F3:  MOVF   34,F
05F4:  BTFSC  03.2
05F5:  GOTO   61F
....................         if (timePtr->format == FORMAT_12) { 
05F6:  MOVF   32,W
05F7:  MOVWF  04
05F8:  BCF    03.7
05F9:  BTFSC  33.0
05FA:  BSF    03.7
05FB:  MOVF   00,W
05FC:  ANDLW  01
05FD:  SUBLW  01
05FE:  BTFSS  03.2
05FF:  GOTO   61F
....................             if (timePtr->hour == 0) { 
0600:  MOVLW  01
0601:  ADDWF  32,W
0602:  MOVWF  04
0603:  BCF    03.7
0604:  BTFSC  33.0
0605:  BSF    03.7
0606:  MOVF   00,F
0607:  BTFSS  03.2
0608:  GOTO   60C
....................                 hour = 12; 
0609:  MOVLW  0C
060A:  MOVWF  3B
....................             } else if (timePtr->hour > 12) { 
060B:  GOTO   61F
060C:  MOVLW  01
060D:  ADDWF  32,W
060E:  MOVWF  04
060F:  BCF    03.7
0610:  BTFSC  33.0
0611:  BSF    03.7
0612:  MOVF   00,W
0613:  SUBLW  0C
0614:  BTFSC  03.0
0615:  GOTO   61F
....................                 hour = timePtr->hour - 12; 
0616:  MOVLW  01
0617:  ADDWF  32,W
0618:  MOVWF  04
0619:  BCF    03.7
061A:  BTFSC  33.0
061B:  BSF    03.7
061C:  MOVLW  0C
061D:  SUBWF  00,W
061E:  MOVWF  3B
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             Array_getArraySize(newTimeInDigits.hour) 
....................             ); 
061F:  CLRF   3E
0620:  MOVF   3B,W
0621:  MOVWF  3D
0622:  MOVLW  01
0623:  MOVWF  40
0624:  MOVLW  35
0625:  MOVWF  3F
0626:  MOVLW  02
0627:  MOVWF  41
0628:  BCF    03.6
0629:  CALL   5A7
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             Array_getArraySize(newTimeInDigits.minute) 
....................             ); 
062A:  MOVLW  02
062B:  BSF    03.6
062C:  ADDWF  32,W
062D:  MOVWF  04
062E:  BCF    03.7
062F:  BTFSC  33.0
0630:  BSF    03.7
0631:  MOVF   00,W
0632:  MOVWF  3C
0633:  CLRF   3E
0634:  MOVF   3C,W
0635:  MOVWF  3D
0636:  MOVLW  01
0637:  MOVWF  40
0638:  MOVLW  37
0639:  MOVWF  3F
063A:  MOVLW  02
063B:  MOVWF  41
063C:  BCF    03.6
063D:  CALL   5A7
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             Array_getArraySize(newTimeInDigits.second) 
....................             ); 
063E:  MOVLW  03
063F:  BSF    03.6
0640:  ADDWF  32,W
0641:  MOVWF  04
0642:  BCF    03.7
0643:  BTFSC  33.0
0644:  BSF    03.7
0645:  MOVF   00,W
0646:  MOVWF  3C
0647:  CLRF   3E
0648:  MOVF   3C,W
0649:  MOVWF  3D
064A:  MOVLW  01
064B:  MOVWF  40
064C:  MOVLW  39
064D:  MOVWF  3F
064E:  MOVLW  02
064F:  MOVWF  41
0650:  BCF    03.6
0651:  CALL   5A7
....................  
....................     return newTimeInDigits; 
0652:  MOVLW  35
0653:  MOVWF  78
0654:  MOVLW  01
0655:  MOVWF  79
0656:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
0DC9:  MOVLW  01
0DCA:  ADDWF  1F,W
0DCB:  MOVWF  04
0DCC:  BCF    03.7
0DCD:  BTFSC  20.0
0DCE:  BSF    03.7
0DCF:  MOVF   00,F
0DD0:  BTFSS  03.2
0DD1:  GOTO   5E4
0DD2:  MOVLW  02
0DD3:  ADDWF  1F,W
0DD4:  MOVWF  04
0DD5:  BCF    03.7
0DD6:  BTFSC  20.0
0DD7:  BSF    03.7
0DD8:  MOVF   00,F
0DD9:  BTFSS  03.2
0DDA:  GOTO   5E4
0DDB:  MOVLW  03
0DDC:  ADDWF  1F,W
0DDD:  MOVWF  04
0DDE:  BCF    03.7
0DDF:  BTFSC  20.0
0DE0:  BSF    03.7
0DE1:  MOVF   00,F
0DE2:  BTFSC  03.2
0DE3:  GOTO   5E6
0DE4:  MOVLW  00
0DE5:  GOTO   5E7
0DE6:  MOVLW  01
0DE7:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
0171:  MOVLW  01
0172:  ADDWF  4E,W
0173:  MOVWF  04
0174:  BCF    03.7
0175:  BTFSC  4F.0
0176:  BSF    03.7
0177:  MOVF   00,W
0178:  MOVWF  50
0179:  MOVLW  02
017A:  ADDWF  4E,W
017B:  MOVWF  04
017C:  BCF    03.7
017D:  BTFSC  4F.0
017E:  BSF    03.7
017F:  MOVF   00,W
0180:  MOVWF  51
0181:  MOVLW  03
0182:  ADDWF  4E,W
0183:  MOVWF  04
0184:  BCF    03.7
0185:  BTFSC  4F.0
0186:  BSF    03.7
0187:  MOVF   00,W
0188:  MOVWF  52
0189:  MOVF   50,W
018A:  MOVWF  53
018B:  MOVF   51,W
018C:  MOVWF  54
018D:  MOVF   52,W
018E:  MOVWF  55
018F:  BCF    03.6
0190:  CALL   12A
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01C0:  MOVLW  01
01C1:  BSF    03.5
01C2:  BSF    03.6
01C3:  ADDWF  12,W
01C4:  MOVWF  04
01C5:  BCF    03.7
01C6:  BTFSC  13.0
01C7:  BSF    03.7
01C8:  MOVF   00,W
01C9:  CLRF   23
01CA:  CLRF   22
01CB:  CLRF   21
01CC:  MOVWF  20
01CD:  CLRF   25
01CE:  MOVF   04,W
01CF:  MOVWF  24
01D0:  BCF    25.0
01D1:  BTFSC  03.7
01D2:  BSF    25.0
01D3:  MOVF   23,W
01D4:  MOVWF  29
01D5:  MOVF   22,W
01D6:  MOVWF  28
01D7:  MOVF   21,W
01D8:  MOVWF  27
01D9:  MOVF   20,W
01DA:  MOVWF  26
01DB:  CLRF   2D
01DC:  CLRF   2C
01DD:  MOVLW  0E
01DE:  MOVWF  2B
01DF:  MOVLW  10
01E0:  MOVWF  2A
01E1:  BCF    03.5
01E2:  BCF    03.6
01E3:  CALL   192
01E4:  BSF    03.5
01E5:  BSF    03.6
01E6:  MOVF   24,W
01E7:  MOVWF  04
01E8:  BCF    03.7
01E9:  BTFSC  25.0
01EA:  BSF    03.7
01EB:  MOVF   7A,W
01EC:  MOVWF  17
01ED:  MOVF   79,W
01EE:  MOVWF  16
01EF:  MOVF   78,W
01F0:  MOVWF  15
01F1:  MOVF   77,W
01F2:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01F3:  MOVLW  02
01F4:  ADDWF  12,W
01F5:  MOVWF  04
01F6:  BCF    03.7
01F7:  BTFSC  13.0
01F8:  BSF    03.7
01F9:  MOVF   00,W
01FA:  CLRF   23
01FB:  CLRF   22
01FC:  CLRF   21
01FD:  MOVWF  20
01FE:  CLRF   25
01FF:  MOVF   04,W
0200:  MOVWF  24
0201:  BCF    25.0
0202:  BTFSC  03.7
0203:  BSF    25.0
0204:  MOVF   23,W
0205:  MOVWF  29
0206:  MOVF   22,W
0207:  MOVWF  28
0208:  MOVF   21,W
0209:  MOVWF  27
020A:  MOVF   20,W
020B:  MOVWF  26
020C:  CLRF   2D
020D:  CLRF   2C
020E:  CLRF   2B
020F:  MOVLW  3C
0210:  MOVWF  2A
0211:  BCF    03.5
0212:  BCF    03.6
0213:  CALL   192
0214:  BSF    03.5
0215:  BSF    03.6
0216:  MOVF   24,W
0217:  MOVWF  04
0218:  BCF    03.7
0219:  BTFSC  25.0
021A:  BSF    03.7
021B:  MOVF   7A,W
021C:  MOVWF  1B
021D:  MOVF   79,W
021E:  MOVWF  1A
021F:  MOVF   78,W
0220:  MOVWF  19
0221:  MOVF   77,W
0222:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0223:  MOVF   18,W
0224:  ADDWF  14,W
0225:  MOVWF  20
0226:  MOVF   15,W
0227:  MOVWF  21
0228:  MOVF   19,W
0229:  BTFSC  03.0
022A:  INCFSZ 19,W
022B:  ADDWF  21,F
022C:  MOVF   16,W
022D:  MOVWF  22
022E:  MOVF   1A,W
022F:  BTFSC  03.0
0230:  INCFSZ 1A,W
0231:  ADDWF  22,F
0232:  MOVF   17,W
0233:  MOVWF  23
0234:  MOVF   1B,W
0235:  BTFSC  03.0
0236:  INCFSZ 1B,W
0237:  ADDWF  23,F
0238:  MOVLW  03
0239:  ADDWF  12,W
023A:  MOVWF  04
023B:  BCF    03.7
023C:  BTFSC  13.0
023D:  BSF    03.7
023E:  MOVF   00,W
023F:  ADDWF  20,W
0240:  MOVWF  1C
0241:  MOVF   21,W
0242:  MOVWF  1D
0243:  MOVLW  00
0244:  BTFSC  03.0
0245:  MOVLW  01
0246:  ADDWF  1D,F
0247:  MOVF   22,W
0248:  MOVWF  1E
0249:  MOVLW  00
024A:  BTFSC  03.0
024B:  MOVLW  01
024C:  ADDWF  1E,F
024D:  MOVF   23,W
024E:  MOVWF  1F
024F:  MOVLW  00
0250:  BTFSC  03.0
0251:  MOVLW  01
0252:  ADDWF  1F,F
....................  
....................     return seconds; 
0253:  MOVF   1C,W
0254:  MOVWF  77
0255:  MOVF   1D,W
0256:  MOVWF  78
0257:  MOVF   1E,W
0258:  MOVWF  79
0259:  MOVF   1F,W
025A:  MOVWF  7A
025B:  BCF    03.5
025C:  BCF    03.6
025D:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07E6:  BSF    03.6
07E7:  CLRF   53
07E8:  CLRF   54
07E9:  CLRF   55
07EA:  BCF    03.6
07EB:  CALL   12A
07EC:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... void Time_showHoursMinutesRtc(BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
081B:  CLRF   1B
081C:  CLRF   1C
081D:  CLRF   1D
081E:  CLRF   1E
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
081F:  BCF    0A.3
0820:  BCF    03.6
0821:  CALL   4FA
0822:  BSF    0A.3
0823:  MOVF   7A,W
0824:  BSF    03.6
0825:  MOVWF  28
0826:  MOVF   79,W
0827:  MOVWF  27
0828:  MOVF   78,W
0829:  MOVWF  26
082A:  MOVF   77,W
082B:  MOVWF  25
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
082C:  MOVLW  01
082D:  MOVWF  33
082E:  MOVLW  25
082F:  MOVWF  32
0830:  CLRF   34
0831:  BCF    0A.3
0832:  BCF    03.6
0833:  CALL   5EA
0834:  BSF    0A.3
0835:  MOVF   79,W
0836:  MOVWF  7A
0837:  MOVF   78,W
0838:  BSF    03.6
0839:  MOVWF  29
083A:  MOVF   7A,W
083B:  MOVWF  2A
083C:  MOVLW  01
083D:  MOVWF  2C
083E:  MOVLW  1F
083F:  MOVWF  2B
0840:  MOVLW  06
0841:  MOVWF  78
0842:  MOVF   29,W
0843:  MOVWF  04
0844:  BCF    03.7
0845:  BTFSC  2A.0
0846:  BSF    03.7
0847:  MOVF   00,W
0848:  MOVWF  77
0849:  MOVF   2B,W
084A:  MOVWF  04
084B:  BCF    03.7
084C:  BTFSC  2C.0
084D:  BSF    03.7
084E:  MOVF   77,W
084F:  MOVWF  00
0850:  INCF   2B,F
0851:  BTFSC  03.2
0852:  INCF   2C,F
0853:  INCF   29,F
0854:  BTFSC  03.2
0855:  INCF   2A,F
0856:  DECFSZ 78,F
0857:  GOTO   042
....................     timeToSend[0] = timeInDigits.minute[0]; 
0858:  MOVF   21,W
0859:  MOVWF  1B
....................     timeToSend[1] = timeInDigits.minute[1]; 
085A:  MOVF   22,W
085B:  MOVWF  1C
....................     timeToSend[2] = timeInDigits.hour[0]; 
085C:  MOVF   1F,W
085D:  MOVWF  1D
....................     timeToSend[3] = timeInDigits.hour[1]; 
085E:  MOVF   20,W
085F:  MOVWF  1E
....................  
....................     if (blink) { 
0860:  MOVF   1A,F
0861:  BTFSC  03.2
0862:  GOTO   067
....................         blink = currentTime.second % 2; 
0863:  MOVF   28,W
0864:  ANDLW  01
0865:  MOVWF  1A
....................     } else { 
0866:  GOTO   069
....................         blink = TRUE; 
0867:  MOVLW  01
0868:  MOVWF  1A
....................     } 
....................      
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
0869:  MOVLW  01
086A:  MOVWF  2D
086B:  MOVLW  1B
086C:  MOVWF  2C
086D:  MOVLW  04
086E:  MOVWF  2E
086F:  MOVF   1A,W
0870:  MOVWF  2F
0871:  BCF    0A.3
0872:  BCF    03.6
0873:  CALL   69E
0874:  BSF    0A.3
.................... } 
....................  
.................... void Time_showMinutesSecondsRtc(void) { 
....................     int timeToSend[4] = {0}; 
*
0881:  CLRF   1A
0882:  CLRF   1B
0883:  CLRF   1C
0884:  CLRF   1D
....................     TimeInDigits timeInDigits; 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
0885:  BCF    0A.3
0886:  BCF    03.6
0887:  CALL   4FA
0888:  BSF    0A.3
0889:  MOVF   7A,W
088A:  BSF    03.6
088B:  MOVWF  27
088C:  MOVF   79,W
088D:  MOVWF  26
088E:  MOVF   78,W
088F:  MOVWF  25
0890:  MOVF   77,W
0891:  MOVWF  24
....................     currentTime.minute = (currentTime.minute + currentTime.hour * 60) % 100; 
0892:  MOVF   25,W
0893:  BSF    03.5
0894:  MOVWF  26
0895:  MOVLW  3C
0896:  MOVWF  27
0897:  BCF    0A.3
0898:  BCF    03.5
0899:  BCF    03.6
089A:  CALL   056
089B:  BSF    0A.3
089C:  MOVF   78,W
089D:  BSF    03.6
089E:  ADDWF  26,W
089F:  MOVWF  29
08A0:  BSF    03.5
08A1:  MOVWF  28
08A2:  MOVLW  64
08A3:  MOVWF  29
08A4:  BCF    0A.3
08A5:  BCF    03.5
08A6:  BCF    03.6
08A7:  CALL   03D
08A8:  BSF    0A.3
08A9:  MOVF   77,W
08AA:  BSF    03.6
08AB:  MOVWF  26
....................  
....................     timeInDigits = Time_getTimeInDigits(&currentTime, FALSE); 
08AC:  MOVLW  01
08AD:  MOVWF  33
08AE:  MOVLW  24
08AF:  MOVWF  32
08B0:  CLRF   34
08B1:  BCF    0A.3
08B2:  BCF    03.6
08B3:  CALL   5EA
08B4:  BSF    0A.3
08B5:  MOVF   79,W
08B6:  MOVWF  7A
08B7:  MOVF   78,W
08B8:  BSF    03.6
08B9:  MOVWF  28
08BA:  MOVF   7A,W
08BB:  MOVWF  29
08BC:  MOVLW  01
08BD:  MOVWF  2B
08BE:  MOVLW  1E
08BF:  MOVWF  2A
08C0:  MOVLW  06
08C1:  MOVWF  78
08C2:  MOVF   28,W
08C3:  MOVWF  04
08C4:  BCF    03.7
08C5:  BTFSC  29.0
08C6:  BSF    03.7
08C7:  MOVF   00,W
08C8:  MOVWF  77
08C9:  MOVF   2A,W
08CA:  MOVWF  04
08CB:  BCF    03.7
08CC:  BTFSC  2B.0
08CD:  BSF    03.7
08CE:  MOVF   77,W
08CF:  MOVWF  00
08D0:  INCF   2A,F
08D1:  BTFSC  03.2
08D2:  INCF   2B,F
08D3:  INCF   28,F
08D4:  BTFSC  03.2
08D5:  INCF   29,F
08D6:  DECFSZ 78,F
08D7:  GOTO   0C2
....................     timeToSend[0] = timeInDigits.second[0]; 
08D8:  MOVF   22,W
08D9:  MOVWF  1A
....................     timeToSend[1] = timeInDigits.second[1]; 
08DA:  MOVF   23,W
08DB:  MOVWF  1B
....................     timeToSend[2] = timeInDigits.minute[0]; 
08DC:  MOVF   20,W
08DD:  MOVWF  1C
....................     timeToSend[3] = timeInDigits.minute[1]; 
08DE:  MOVF   21,W
08DF:  MOVWF  1D
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
08E0:  MOVLW  01
08E1:  MOVWF  2D
08E2:  MOVLW  1A
08E3:  MOVWF  2C
08E4:  MOVLW  04
08E5:  MOVWF  2E
08E6:  MOVLW  01
08E7:  MOVWF  2F
08E8:  BCF    0A.3
08E9:  BCF    03.6
08EA:  CALL   69E
08EB:  BSF    0A.3
08EC:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time alarmTime; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
.................... } Timer; 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
02DC:  MOVLW  04
02DD:  BSF    03.6
02DE:  ADDWF  4C,W
02DF:  MOVWF  78
02E0:  MOVF   4D,W
02E1:  MOVWF  7A
02E2:  BTFSC  03.0
02E3:  INCF   7A,F
02E4:  MOVF   78,W
02E5:  BSF    03.5
02E6:  MOVWF  10
02E7:  MOVF   7A,W
02E8:  MOVWF  11
02E9:  MOVWF  13
02EA:  MOVF   10,W
02EB:  MOVWF  12
02EC:  BCF    03.5
02ED:  BCF    03.6
02EE:  CALL   1C0
02EF:  MOVF   7A,W
02F0:  BSF    03.6
02F1:  MOVWF  51
02F2:  MOVF   79,W
02F3:  MOVWF  50
02F4:  MOVF   78,W
02F5:  MOVWF  4F
02F6:  MOVF   77,W
02F7:  MOVWF  4E
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
02F8:  MOVLW  08
02F9:  ADDWF  4C,W
02FA:  MOVWF  78
02FB:  MOVF   4D,W
02FC:  MOVWF  7A
02FD:  BTFSC  03.0
02FE:  INCF   7A,F
02FF:  MOVF   78,W
0300:  BSF    03.5
0301:  MOVWF  10
0302:  MOVF   7A,W
0303:  MOVWF  11
0304:  MOVWF  13
0305:  MOVF   10,W
0306:  MOVWF  12
0307:  BCF    03.5
0308:  BCF    03.6
0309:  CALL   1C0
030A:  MOVF   7A,W
030B:  BSF    03.6
030C:  MOVWF  55
030D:  MOVF   79,W
030E:  MOVWF  54
030F:  MOVF   78,W
0310:  MOVWF  53
0311:  MOVF   77,W
0312:  MOVWF  52
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
0313:  MOVF   4E,W
0314:  SUBWF  52,W
0315:  MOVWF  56
0316:  MOVF   53,W
0317:  MOVWF  57
0318:  MOVF   4F,W
0319:  BTFSS  03.0
031A:  INCFSZ 4F,W
031B:  SUBWF  57,F
031C:  MOVF   54,W
031D:  MOVWF  58
031E:  MOVF   50,W
031F:  BTFSS  03.0
0320:  INCFSZ 50,W
0321:  SUBWF  58,F
0322:  MOVF   55,W
0323:  MOVWF  59
0324:  MOVF   51,W
0325:  BTFSS  03.0
0326:  INCFSZ 51,W
0327:  SUBWF  59,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
0328:  BTFSS  59.7
0329:  GOTO   32F
032A:  CLRF   77
032B:  CLRF   78
032C:  CLRF   79
032D:  CLRF   7A
032E:  GOTO   337
032F:  MOVF   56,W
0330:  MOVWF  77
0331:  MOVF   57,W
0332:  MOVWF  78
0333:  MOVF   58,W
0334:  MOVWF  79
0335:  MOVF   59,W
0336:  MOVWF  7A
0337:  MOVF   7A,W
0338:  MOVWF  59
0339:  MOVF   79,W
033A:  MOVWF  58
033B:  MOVF   78,W
033C:  MOVWF  57
033D:  MOVF   77,W
033E:  MOVWF  56
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
033F:  BCF    03.1
0340:  MOVF   59,W
0341:  BSF    03.5
0342:  MOVWF  25
0343:  BCF    03.5
0344:  MOVF   58,W
0345:  BSF    03.5
0346:  MOVWF  24
0347:  BCF    03.5
0348:  MOVF   57,W
0349:  BSF    03.5
034A:  MOVWF  23
034B:  BCF    03.5
034C:  MOVF   56,W
034D:  BSF    03.5
034E:  MOVWF  22
034F:  CLRF   29
0350:  CLRF   28
0351:  MOVLW  0E
0352:  MOVWF  27
0353:  MOVLW  10
0354:  MOVWF  26
0355:  BCF    03.5
0356:  BCF    03.6
0357:  CALL   25E
0358:  MOVF   7A,W
0359:  BSF    03.6
035A:  MOVWF  5D
035B:  MOVF   79,W
035C:  MOVWF  5C
035D:  MOVF   78,W
035E:  MOVWF  5B
035F:  MOVF   77,W
0360:  MOVWF  5A
0361:  BSF    03.1
0362:  MOVLW  90
0363:  MOVWF  04
0364:  BSF    03.7
0365:  MOVF   59,W
0366:  BSF    03.5
0367:  MOVWF  25
0368:  BCF    03.5
0369:  MOVF   58,W
036A:  BSF    03.5
036B:  MOVWF  24
036C:  BCF    03.5
036D:  MOVF   57,W
036E:  BSF    03.5
036F:  MOVWF  23
0370:  BCF    03.5
0371:  MOVF   56,W
0372:  BSF    03.5
0373:  MOVWF  22
0374:  CLRF   29
0375:  CLRF   28
0376:  MOVLW  0E
0377:  MOVWF  27
0378:  MOVLW  10
0379:  MOVWF  26
037A:  BCF    03.5
037B:  BCF    03.6
037C:  CALL   25E
037D:  BSF    03.5
037E:  BSF    03.6
037F:  MOVF   13,W
0380:  MOVWF  17
0381:  MOVF   12,W
0382:  MOVWF  16
0383:  MOVF   11,W
0384:  MOVWF  15
0385:  MOVF   10,W
0386:  MOVWF  14
0387:  CLRF   19
0388:  MOVF   04,W
0389:  MOVWF  18
038A:  BCF    19.0
038B:  BTFSC  03.7
038C:  BSF    19.0
038D:  BCF    03.1
038E:  MOVF   13,W
038F:  MOVWF  25
0390:  MOVF   12,W
0391:  MOVWF  24
0392:  MOVF   11,W
0393:  MOVWF  23
0394:  MOVF   10,W
0395:  MOVWF  22
0396:  CLRF   29
0397:  CLRF   28
0398:  CLRF   27
0399:  MOVLW  3C
039A:  MOVWF  26
039B:  BCF    03.5
039C:  BCF    03.6
039D:  CALL   25E
039E:  BSF    03.5
039F:  BSF    03.6
03A0:  MOVF   18,W
03A1:  MOVWF  04
03A2:  BCF    03.7
03A3:  BTFSC  19.0
03A4:  BSF    03.7
03A5:  MOVF   7A,W
03A6:  BCF    03.5
03A7:  MOVWF  61
03A8:  MOVF   79,W
03A9:  MOVWF  60
03AA:  MOVF   78,W
03AB:  MOVWF  5F
03AC:  MOVF   77,W
03AD:  MOVWF  5E
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
03AE:  MOVLW  03
03AF:  ADDWF  4C,W
03B0:  MOVWF  78
03B1:  MOVF   4D,W
03B2:  MOVWF  7A
03B3:  BTFSC  03.0
03B4:  INCF   7A,F
03B5:  MOVF   78,W
03B6:  BSF    03.5
03B7:  MOVWF  10
03B8:  MOVF   7A,W
03B9:  MOVWF  11
03BA:  CLRF   13
03BB:  MOVF   04,W
03BC:  MOVWF  12
03BD:  BCF    13.0
03BE:  BTFSC  03.7
03BF:  BSF    13.0
03C0:  BSF    03.1
03C1:  MOVLW  94
03C2:  MOVWF  04
03C3:  BSF    03.7
03C4:  BCF    03.5
03C5:  MOVF   59,W
03C6:  BSF    03.5
03C7:  MOVWF  25
03C8:  BCF    03.5
03C9:  MOVF   58,W
03CA:  BSF    03.5
03CB:  MOVWF  24
03CC:  BCF    03.5
03CD:  MOVF   57,W
03CE:  BSF    03.5
03CF:  MOVWF  23
03D0:  BCF    03.5
03D1:  MOVF   56,W
03D2:  BSF    03.5
03D3:  MOVWF  22
03D4:  CLRF   29
03D5:  CLRF   28
03D6:  MOVLW  0E
03D7:  MOVWF  27
03D8:  MOVLW  10
03D9:  MOVWF  26
03DA:  BCF    03.5
03DB:  BCF    03.6
03DC:  CALL   25E
03DD:  BSF    03.5
03DE:  BSF    03.6
03DF:  MOVF   14,W
03E0:  MOVWF  77
03E1:  MOVF   15,W
03E2:  MOVWF  78
03E3:  MOVF   16,W
03E4:  MOVWF  79
03E5:  MOVF   17,W
03E6:  MOVWF  7A
03E7:  MOVF   12,W
03E8:  MOVWF  04
03E9:  BCF    03.7
03EA:  BTFSC  13.0
03EB:  BSF    03.7
03EC:  MOVF   17,W
03ED:  MOVWF  1B
03EE:  MOVF   16,W
03EF:  MOVWF  1A
03F0:  MOVF   15,W
03F1:  MOVWF  19
03F2:  MOVF   14,W
03F3:  MOVWF  18
03F4:  CLRF   1D
03F5:  MOVF   04,W
03F6:  MOVWF  1C
03F7:  BCF    1D.0
03F8:  BTFSC  03.7
03F9:  BSF    1D.0
03FA:  BSF    03.1
03FB:  MOVLW  9E
03FC:  MOVWF  04
03FD:  BSF    03.7
03FE:  MOVF   17,W
03FF:  MOVWF  25
0400:  MOVF   16,W
0401:  MOVWF  24
0402:  MOVF   15,W
0403:  MOVWF  23
0404:  MOVF   14,W
0405:  MOVWF  22
0406:  CLRF   29
0407:  CLRF   28
0408:  CLRF   27
0409:  MOVLW  3C
040A:  MOVWF  26
040B:  BCF    03.5
040C:  BCF    03.6
040D:  CALL   25E
040E:  BSF    03.5
040F:  BSF    03.6
0410:  MOVF   1C,W
0411:  MOVWF  04
0412:  BCF    03.7
0413:  BTFSC  1D.0
0414:  BSF    03.7
0415:  MOVF   10,W
0416:  MOVWF  04
0417:  BCF    03.7
0418:  BTFSC  11.0
0419:  BSF    03.7
041A:  MOVF   1E,W
041B:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
041C:  MOVLW  01
041D:  BCF    03.5
041E:  ADDWF  4C,W
041F:  MOVWF  04
0420:  BCF    03.7
0421:  BTFSC  4D.0
0422:  BSF    03.7
0423:  MOVF   5A,W
0424:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
0425:  MOVLW  02
0426:  ADDWF  4C,W
0427:  MOVWF  04
0428:  BCF    03.7
0429:  BTFSC  4D.0
042A:  BSF    03.7
042B:  MOVF   5E,W
042C:  MOVWF  00
042D:  BCF    03.6
042E:  RETURN
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ addressAlarmHour, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressRtcHour, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmHours = addressAlarmHour; 
*
0B1C:  MOVF   52,W
0B1D:  BSF    03.5
0B1E:  MOVWF  1F
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
0B1F:  BCF    03.5
0B20:  MOVF   54,W
0B21:  BSF    03.5
0B22:  MOVWF  1E
....................     newTimer.addressRtcHours = addressRtcHour; 
0B23:  BCF    03.5
0B24:  MOVF   56,W
0B25:  BSF    03.5
0B26:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
0B27:  BCF    03.5
0B28:  MOVF   58,W
0B29:  BSF    03.5
0B2A:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
0B2B:  BCF    03.5
0B2C:  MOVF   5A,W
0B2D:  BSF    03.5
0B2E:  MOVWF  22
....................  
....................     newTimer.alarmTime.hour = read_eeprom(addressAlarmHour) % (maximumHours + 1); 
0B2F:  BCF    03.5
0B30:  MOVF   52,W
0B31:  MOVWF  0D
0B32:  BSF    03.5
0B33:  BCF    0C.7
0B34:  BSF    0C.0
0B35:  BCF    03.5
0B36:  MOVF   0C,W
0B37:  MOVWF  5C
0B38:  MOVLW  01
0B39:  ADDWF  50,W
0B3A:  MOVWF  5D
0B3B:  MOVF   5C,W
0B3C:  BSF    03.5
0B3D:  MOVWF  28
0B3E:  BCF    03.5
0B3F:  MOVF   5D,W
0B40:  BSF    03.5
0B41:  MOVWF  29
0B42:  BCF    0A.3
0B43:  BCF    03.5
0B44:  BCF    03.6
0B45:  CALL   03D
0B46:  BSF    0A.3
0B47:  MOVF   77,W
0B48:  BSF    03.5
0B49:  BSF    03.6
0B4A:  MOVWF  19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (maximumMinutes + 1); 
0B4B:  BCF    03.5
0B4C:  MOVF   54,W
0B4D:  MOVWF  0D
0B4E:  BSF    03.5
0B4F:  BCF    0C.7
0B50:  BSF    0C.0
0B51:  BCF    03.5
0B52:  MOVF   0C,W
0B53:  MOVWF  5C
0B54:  MOVLW  01
0B55:  ADDWF  51,W
0B56:  MOVWF  5D
0B57:  MOVF   5C,W
0B58:  BSF    03.5
0B59:  MOVWF  28
0B5A:  BCF    03.5
0B5B:  MOVF   5D,W
0B5C:  BSF    03.5
0B5D:  MOVWF  29
0B5E:  BCF    0A.3
0B5F:  BCF    03.5
0B60:  BCF    03.6
0B61:  CALL   03D
0B62:  BSF    0A.3
0B63:  MOVF   77,W
0B64:  BSF    03.5
0B65:  BSF    03.6
0B66:  MOVWF  1A
....................     newTimer.alarmTime.second = 0; 
0B67:  CLRF   1B
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
0B68:  BCF    03.5
0B69:  MOVF   50,W
0B6A:  BSF    03.5
0B6B:  MOVWF  23
....................     newTimer.minutesUpperBound = maximumMinutes; 
0B6C:  BCF    03.5
0B6D:  MOVF   51,W
0B6E:  BSF    03.5
0B6F:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
0B70:  MOVLW  3B
0B71:  MOVWF  25
....................  
....................     newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 100; 
0B72:  BCF    03.5
0B73:  MOVF   56,W
0B74:  MOVWF  0D
0B75:  BSF    03.5
0B76:  BCF    0C.7
0B77:  BSF    0C.0
0B78:  BCF    03.5
0B79:  MOVF   0C,W
0B7A:  MOVWF  5D
0B7B:  MOVF   5D,W
0B7C:  BSF    03.5
0B7D:  MOVWF  28
0B7E:  MOVLW  64
0B7F:  MOVWF  29
0B80:  BCF    0A.3
0B81:  BCF    03.5
0B82:  BCF    03.6
0B83:  CALL   03D
0B84:  BSF    0A.3
0B85:  MOVF   77,W
0B86:  BSF    03.5
0B87:  BSF    03.6
0B88:  MOVWF  15
....................     newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (maximumMinutes + 1); 
0B89:  BCF    03.5
0B8A:  MOVF   58,W
0B8B:  MOVWF  0D
0B8C:  BSF    03.5
0B8D:  BCF    0C.7
0B8E:  BSF    0C.0
0B8F:  BCF    03.5
0B90:  MOVF   0C,W
0B91:  MOVWF  5C
0B92:  MOVLW  01
0B93:  ADDWF  51,W
0B94:  MOVWF  5D
0B95:  MOVF   5C,W
0B96:  BSF    03.5
0B97:  MOVWF  28
0B98:  BCF    03.5
0B99:  MOVF   5D,W
0B9A:  BSF    03.5
0B9B:  MOVWF  29
0B9C:  BCF    0A.3
0B9D:  BCF    03.5
0B9E:  BCF    03.6
0B9F:  CALL   03D
0BA0:  BSF    0A.3
0BA1:  MOVF   77,W
0BA2:  BSF    03.5
0BA3:  BSF    03.6
0BA4:  MOVWF  16
....................     newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
0BA5:  BCF    03.5
0BA6:  MOVF   5A,W
0BA7:  MOVWF  0D
0BA8:  BSF    03.5
0BA9:  BCF    0C.7
0BAA:  BSF    0C.0
0BAB:  BCF    03.5
0BAC:  MOVF   0C,W
0BAD:  MOVWF  5D
0BAE:  MOVF   5D,W
0BAF:  BSF    03.5
0BB0:  MOVWF  28
0BB1:  MOVLW  3C
0BB2:  MOVWF  29
0BB3:  BCF    0A.3
0BB4:  BCF    03.5
0BB5:  BCF    03.6
0BB6:  CALL   03D
0BB7:  BSF    0A.3
0BB8:  MOVF   77,W
0BB9:  BSF    03.5
0BBA:  BSF    03.6
0BBB:  MOVWF  17
....................  
....................     return newTimer; 
0BBC:  MOVLW  90
0BBD:  MOVWF  78
0BBE:  MOVLW  01
0BBF:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ addressAlarmMinutes, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ addressRtcHour, __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.addressAlarmMinutes = addressAlarmMinutes; 
*
0BF7:  MOVF   51,W
0BF8:  BSF    03.5
0BF9:  MOVWF  1E
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
0BFA:  BCF    03.5
0BFB:  MOVF   53,W
0BFC:  BSF    03.5
0BFD:  MOVWF  1D
....................     newTimer.addressRtcHours = addressRtcHour; 
0BFE:  BCF    03.5
0BFF:  MOVF   55,W
0C00:  BSF    03.5
0C01:  MOVWF  20
....................     newTimer.addressRtcMinutes = addressRtcMinutes; 
0C02:  BCF    03.5
0C03:  MOVF   57,W
0C04:  BSF    03.5
0C05:  MOVWF  21
....................     newTimer.addressRtcSeconds = addressRtcSeconds; 
0C06:  BCF    03.5
0C07:  MOVF   59,W
0C08:  BSF    03.5
0C09:  MOVWF  22
....................  
....................     newTimer.hoursUpperBound = 0; 
0C0A:  CLRF   23
....................     newTimer.minutesUpperBound = maximumMinutes; 
0C0B:  BCF    03.5
0C0C:  MOVF   50,W
0C0D:  BSF    03.5
0C0E:  MOVWF  24
....................     newTimer.secondsUpperBound = 59; 
0C0F:  MOVLW  3B
0C10:  MOVWF  25
....................  
....................     newTimer.alarmTime.hour = 0; 
0C11:  CLRF   19
....................     newTimer.alarmTime.minute = read_eeprom(addressAlarmMinutes) % (maximumMinutes + 1); 
0C12:  BCF    03.5
0C13:  MOVF   51,W
0C14:  MOVWF  0D
0C15:  BSF    03.5
0C16:  BCF    0C.7
0C17:  BSF    0C.0
0C18:  BCF    03.5
0C19:  MOVF   0C,W
0C1A:  MOVWF  5B
0C1B:  MOVLW  01
0C1C:  ADDWF  50,W
0C1D:  MOVWF  5C
0C1E:  MOVF   5B,W
0C1F:  BSF    03.5
0C20:  MOVWF  28
0C21:  BCF    03.5
0C22:  MOVF   5C,W
0C23:  BSF    03.5
0C24:  MOVWF  29
0C25:  BCF    0A.3
0C26:  BCF    03.5
0C27:  BCF    03.6
0C28:  CALL   03D
0C29:  BSF    0A.3
0C2A:  MOVF   77,W
0C2B:  BSF    03.5
0C2C:  BSF    03.6
0C2D:  MOVWF  1A
....................     newTimer.alarmTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
0C2E:  BCF    03.5
0C2F:  MOVF   53,W
0C30:  MOVWF  0D
0C31:  BSF    03.5
0C32:  BCF    0C.7
0C33:  BSF    0C.0
0C34:  BCF    03.5
0C35:  MOVF   0C,W
0C36:  MOVWF  5B
0C37:  MOVLW  01
0C38:  BSF    03.5
0C39:  ADDWF  25,W
0C3A:  BCF    03.5
0C3B:  MOVWF  5C
0C3C:  MOVF   5B,W
0C3D:  BSF    03.5
0C3E:  MOVWF  28
0C3F:  BCF    03.5
0C40:  MOVF   5C,W
0C41:  BSF    03.5
0C42:  MOVWF  29
0C43:  BCF    0A.3
0C44:  BCF    03.5
0C45:  BCF    03.6
0C46:  CALL   03D
0C47:  BSF    0A.3
0C48:  MOVF   77,W
0C49:  BSF    03.5
0C4A:  BSF    03.6
0C4B:  MOVWF  1B
....................  
....................  
....................     newTimer.currentTime.hour = read_eeprom(addressRtcHour) % 2; 
0C4C:  BCF    03.5
0C4D:  MOVF   55,W
0C4E:  MOVWF  0D
0C4F:  BSF    03.5
0C50:  BCF    0C.7
0C51:  BSF    0C.0
0C52:  BCF    03.5
0C53:  MOVF   0C,W
0C54:  ANDLW  01
0C55:  BSF    03.5
0C56:  MOVWF  15
....................     newTimer.currentTime.minute = read_eeprom(addressRtcMinutes) % (maximumMinutes + 1); 
0C57:  BCF    03.5
0C58:  MOVF   57,W
0C59:  MOVWF  0D
0C5A:  BSF    03.5
0C5B:  BCF    0C.7
0C5C:  BSF    0C.0
0C5D:  BCF    03.5
0C5E:  MOVF   0C,W
0C5F:  MOVWF  5B
0C60:  MOVLW  01
0C61:  ADDWF  50,W
0C62:  MOVWF  5C
0C63:  MOVF   5B,W
0C64:  BSF    03.5
0C65:  MOVWF  28
0C66:  BCF    03.5
0C67:  MOVF   5C,W
0C68:  BSF    03.5
0C69:  MOVWF  29
0C6A:  BCF    0A.3
0C6B:  BCF    03.5
0C6C:  BCF    03.6
0C6D:  CALL   03D
0C6E:  BSF    0A.3
0C6F:  MOVF   77,W
0C70:  BSF    03.5
0C71:  BSF    03.6
0C72:  MOVWF  16
....................     newTimer.currentTime.minute = (newTimer.currentTime.minute + newTimer.currentTime.hour * 60) % 100; 
0C73:  MOVF   15,W
0C74:  MOVWF  26
0C75:  MOVLW  3C
0C76:  MOVWF  27
0C77:  BCF    0A.3
0C78:  BCF    03.5
0C79:  BCF    03.6
0C7A:  CALL   056
0C7B:  BSF    0A.3
0C7C:  MOVF   78,W
0C7D:  BSF    03.5
0C7E:  BSF    03.6
0C7F:  ADDWF  16,W
0C80:  BCF    03.5
0C81:  MOVWF  5C
0C82:  BSF    03.5
0C83:  MOVWF  28
0C84:  MOVLW  64
0C85:  MOVWF  29
0C86:  BCF    0A.3
0C87:  BCF    03.5
0C88:  BCF    03.6
0C89:  CALL   03D
0C8A:  BSF    0A.3
0C8B:  MOVF   77,W
0C8C:  BSF    03.5
0C8D:  BSF    03.6
0C8E:  MOVWF  16
....................     newTimer.currentTime.second = read_eeprom(addressRtcSeconds) % 60; 
0C8F:  BCF    03.5
0C90:  MOVF   59,W
0C91:  MOVWF  0D
0C92:  BSF    03.5
0C93:  BCF    0C.7
0C94:  BSF    0C.0
0C95:  BCF    03.5
0C96:  MOVF   0C,W
0C97:  MOVWF  5C
0C98:  MOVF   5C,W
0C99:  BSF    03.5
0C9A:  MOVWF  28
0C9B:  MOVLW  3C
0C9C:  MOVWF  29
0C9D:  BCF    0A.3
0C9E:  BCF    03.5
0C9F:  BCF    03.6
0CA0:  CALL   03D
0CA1:  BSF    0A.3
0CA2:  MOVF   77,W
0CA3:  BSF    03.5
0CA4:  BSF    03.6
0CA5:  MOVWF  17
....................  
....................     return newTimer; 
0CA6:  MOVLW  90
0CA7:  MOVWF  78
0CA8:  MOVLW  01
0CA9:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_setRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
0162:  MOVLW  04
0163:  ADDWF  4A,W
0164:  MOVWF  78
0165:  MOVF   4B,W
0166:  MOVWF  7A
0167:  BTFSC  03.0
0168:  INCF   7A,F
0169:  MOVF   78,W
016A:  MOVWF  4C
016B:  MOVF   7A,W
016C:  MOVWF  4D
016D:  MOVF   4D,W
016E:  MOVWF  4F
016F:  MOVF   4C,W
0170:  MOVWF  4E
.................... } 
....................  
....................  
....................  
.................... //void Timer_updateCountdownTimeMinutesSeconds(Timer *timerPtr) { 
.................... //    signed int32 currentTimeInSeconds; 
.................... //    signed int32 limitTimeInSeconds; 
.................... //    signed int32 countdownTimeInSeconds; 
.................... //    currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
.................... //    limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->alarmTime); 
.................... //    countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
.................... // 
.................... //    countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
.................... // 
.................... //    int32 hour = (countdownTimeInSeconds / 3600); 
.................... //    int32 minute = (countdownTimeInSeconds % 3600) / 60; 
.................... //    timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
.................... // 
.................... //    timerPtr->countdownTime.hour = hour; 
.................... //    timerPtr->countdownTime.minute = minute; 
.................... //} 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
055B:  MOVLW  04
055C:  ADDWF  4A,W
055D:  MOVWF  78
055E:  MOVF   4B,W
055F:  MOVWF  7A
0560:  BTFSC  03.0
0561:  INCF   7A,F
0562:  MOVF   78,W
0563:  MOVWF  4C
0564:  MOVF   7A,W
0565:  MOVWF  4D
0566:  BCF    03.6
0567:  CALL   4FA
0568:  BSF    03.6
0569:  MOVF   4C,W
056A:  MOVWF  04
056B:  BCF    03.7
056C:  BTFSC  4D.0
056D:  BSF    03.7
056E:  MOVF   77,W
056F:  MOVWF  00
0570:  INCF   04,F
0571:  MOVF   78,W
0572:  MOVWF  00
0573:  INCF   04,F
0574:  MOVF   79,W
0575:  MOVWF  00
0576:  INCF   04,F
0577:  MOVF   7A,W
0578:  MOVWF  00
....................     Timer_updateCountdownTime(timerPtr); 
0579:  MOVF   4B,W
057A:  MOVWF  4D
057B:  MOVF   4A,W
057C:  MOVWF  4C
057D:  BCF    03.6
057E:  CALL   2DC
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->alarmTime.hour + 1; 
*
1196:  MOVLW  09
1197:  ADDWF  1B,W
1198:  MOVWF  78
1199:  MOVF   1C,W
119A:  MOVWF  7A
119B:  BTFSC  03.0
119C:  INCF   7A,F
119D:  MOVF   78,W
119E:  MOVWF  1D
119F:  MOVF   7A,W
11A0:  MOVWF  1E
11A1:  MOVLW  09
11A2:  ADDWF  1B,W
11A3:  MOVWF  04
11A4:  BCF    03.7
11A5:  BTFSC  1C.0
11A6:  BSF    03.7
11A7:  MOVF   00,W
11A8:  MOVWF  1F
11A9:  MOVLW  13
11AA:  ADDWF  1B,W
11AB:  MOVWF  04
11AC:  BCF    03.7
11AD:  BTFSC  1C.0
11AE:  BSF    03.7
11AF:  MOVF   00,W
11B0:  SUBWF  1F,W
11B1:  BTFSS  03.2
11B2:  GOTO   1B5
11B3:  MOVLW  00
11B4:  GOTO   1BD
11B5:  MOVLW  09
11B6:  ADDWF  1B,W
11B7:  MOVWF  04
11B8:  BCF    03.7
11B9:  BTFSC  1C.0
11BA:  BSF    03.7
11BB:  MOVLW  01
11BC:  ADDWF  00,W
11BD:  MOVWF  1F
11BE:  MOVF   1D,W
11BF:  MOVWF  04
11C0:  BCF    03.7
11C1:  BTFSC  1E.0
11C2:  BSF    03.7
11C3:  MOVF   1F,W
11C4:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->alarmTime.hour = 
....................             timerPtr->alarmTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->alarmTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->alarmTime.minute + 1; 
*
0FBF:  MOVLW  0A
0FC0:  BSF    03.6
0FC1:  ADDWF  1B,W
0FC2:  MOVWF  78
0FC3:  MOVF   1C,W
0FC4:  MOVWF  7A
0FC5:  BTFSC  03.0
0FC6:  INCF   7A,F
0FC7:  MOVF   78,W
0FC8:  MOVWF  1D
0FC9:  MOVF   7A,W
0FCA:  MOVWF  1E
0FCB:  MOVLW  0A
0FCC:  ADDWF  1B,W
0FCD:  MOVWF  04
0FCE:  BCF    03.7
0FCF:  BTFSC  1C.0
0FD0:  BSF    03.7
0FD1:  MOVF   00,W
0FD2:  MOVWF  1F
0FD3:  MOVLW  14
0FD4:  ADDWF  1B,W
0FD5:  MOVWF  04
0FD6:  BCF    03.7
0FD7:  BTFSC  1C.0
0FD8:  BSF    03.7
0FD9:  MOVF   00,W
0FDA:  SUBWF  1F,W
0FDB:  BTFSS  03.2
0FDC:  GOTO   7DF
0FDD:  MOVLW  00
0FDE:  GOTO   7E7
0FDF:  MOVLW  0A
0FE0:  ADDWF  1B,W
0FE1:  MOVWF  04
0FE2:  BCF    03.7
0FE3:  BTFSC  1C.0
0FE4:  BSF    03.7
0FE5:  MOVLW  01
0FE6:  ADDWF  00,W
0FE7:  MOVWF  1F
0FE8:  MOVF   1D,W
0FE9:  MOVWF  04
0FEA:  BCF    03.7
0FEB:  BTFSC  1E.0
0FEC:  BSF    03.7
0FED:  MOVF   1F,W
0FEE:  MOVWF  00
0FEF:  BCF    03.6
0FF0:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->alarmTime.minute = 
....................             timerPtr->alarmTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->alarmTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->alarmTime.second + 1; 
*
1350:  MOVLW  0B
1351:  ADDWF  1B,W
1352:  MOVWF  78
1353:  MOVF   1C,W
1354:  MOVWF  7A
1355:  BTFSC  03.0
1356:  INCF   7A,F
1357:  MOVF   78,W
1358:  MOVWF  1D
1359:  MOVF   7A,W
135A:  MOVWF  1E
135B:  MOVLW  0B
135C:  ADDWF  1B,W
135D:  MOVWF  04
135E:  BCF    03.7
135F:  BTFSC  1C.0
1360:  BSF    03.7
1361:  MOVF   00,W
1362:  MOVWF  1F
1363:  MOVLW  15
1364:  ADDWF  1B,W
1365:  MOVWF  04
1366:  BCF    03.7
1367:  BTFSC  1C.0
1368:  BSF    03.7
1369:  MOVF   00,W
136A:  SUBWF  1F,W
136B:  BTFSS  03.2
136C:  GOTO   36F
136D:  MOVLW  00
136E:  GOTO   377
136F:  MOVLW  0B
1370:  ADDWF  1B,W
1371:  MOVWF  04
1372:  BCF    03.7
1373:  BTFSC  1C.0
1374:  BSF    03.7
1375:  MOVLW  01
1376:  ADDWF  00,W
1377:  MOVWF  1F
1378:  MOVF   1D,W
1379:  MOVWF  04
137A:  BCF    03.7
137B:  BTFSC  1E.0
137C:  BSF    03.7
137D:  MOVF   1F,W
137E:  MOVWF  00
137F:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->alarmTime.second = 
....................             timerPtr->alarmTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->alarmTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
09FF:  MOVLW  10
0A00:  ADDWF  1B,W
0A01:  MOVWF  04
0A02:  BCF    03.7
0A03:  BTFSC  1C.0
0A04:  BSF    03.7
0A05:  MOVF   00,W
0A06:  MOVWF  1D
0A07:  MOVLW  05
0A08:  ADDWF  1B,W
0A09:  MOVWF  04
0A0A:  BCF    03.7
0A0B:  BTFSC  1C.0
0A0C:  BSF    03.7
0A0D:  MOVF   00,W
0A0E:  MOVWF  1E
0A0F:  BCF    03.6
0A10:  MOVF   0B,W
0A11:  MOVWF  77
0A12:  BCF    0B.7
0A13:  BSF    03.6
0A14:  MOVF   1D,W
0A15:  MOVWF  0D
0A16:  MOVF   1E,W
0A17:  MOVWF  0C
0A18:  BSF    03.5
0A19:  BCF    0C.7
0A1A:  BSF    0C.2
0A1B:  MOVLW  55
0A1C:  MOVWF  0D
0A1D:  MOVLW  AA
0A1E:  MOVWF  0D
0A1F:  BSF    0C.1
0A20:  BTFSC  0C.1
0A21:  GOTO   220
0A22:  BCF    0C.2
0A23:  MOVF   77,W
0A24:  BCF    03.5
0A25:  BCF    03.6
0A26:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0A27:  MOVLW  11
0A28:  BSF    03.6
0A29:  ADDWF  1B,W
0A2A:  MOVWF  04
0A2B:  BCF    03.7
0A2C:  BTFSC  1C.0
0A2D:  BSF    03.7
0A2E:  MOVF   00,W
0A2F:  MOVWF  1D
0A30:  MOVLW  06
0A31:  ADDWF  1B,W
0A32:  MOVWF  04
0A33:  BCF    03.7
0A34:  BTFSC  1C.0
0A35:  BSF    03.7
0A36:  MOVF   00,W
0A37:  MOVWF  1E
0A38:  BCF    03.6
0A39:  MOVF   0B,W
0A3A:  MOVWF  77
0A3B:  BCF    0B.7
0A3C:  BSF    03.6
0A3D:  MOVF   1D,W
0A3E:  MOVWF  0D
0A3F:  MOVF   1E,W
0A40:  MOVWF  0C
0A41:  BSF    03.5
0A42:  BCF    0C.7
0A43:  BSF    0C.2
0A44:  MOVLW  55
0A45:  MOVWF  0D
0A46:  MOVLW  AA
0A47:  MOVWF  0D
0A48:  BSF    0C.1
0A49:  BTFSC  0C.1
0A4A:  GOTO   249
0A4B:  BCF    0C.2
0A4C:  MOVF   77,W
0A4D:  BCF    03.5
0A4E:  BCF    03.6
0A4F:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0A50:  MOVLW  12
0A51:  BSF    03.6
0A52:  ADDWF  1B,W
0A53:  MOVWF  04
0A54:  BCF    03.7
0A55:  BTFSC  1C.0
0A56:  BSF    03.7
0A57:  MOVF   00,W
0A58:  MOVWF  1D
0A59:  MOVLW  07
0A5A:  ADDWF  1B,W
0A5B:  MOVWF  04
0A5C:  BCF    03.7
0A5D:  BTFSC  1C.0
0A5E:  BSF    03.7
0A5F:  MOVF   00,W
0A60:  MOVWF  1E
0A61:  BCF    03.6
0A62:  MOVF   0B,W
0A63:  MOVWF  77
0A64:  BCF    0B.7
0A65:  BSF    03.6
0A66:  MOVF   1D,W
0A67:  MOVWF  0D
0A68:  MOVF   1E,W
0A69:  MOVWF  0C
0A6A:  BSF    03.5
0A6B:  BCF    0C.7
0A6C:  BSF    0C.2
0A6D:  MOVLW  55
0A6E:  MOVWF  0D
0A6F:  MOVLW  AA
0A70:  MOVWF  0D
0A71:  BSF    0C.1
0A72:  BTFSC  0C.1
0A73:  GOTO   272
0A74:  BCF    0C.2
0A75:  MOVF   77,W
0A76:  BCF    03.5
0A77:  BCF    03.6
0A78:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarm(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
.................... } 
.................... void Timer_saveAlarmHoursMinutes(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->alarmTime.hour); 
*
1525:  MOVLW  0F
1526:  ADDWF  19,W
1527:  MOVWF  04
1528:  BCF    03.7
1529:  BTFSC  1A.0
152A:  BSF    03.7
152B:  MOVF   00,W
152C:  MOVWF  1B
152D:  MOVLW  09
152E:  ADDWF  19,W
152F:  MOVWF  04
1530:  BCF    03.7
1531:  BTFSC  1A.0
1532:  BSF    03.7
1533:  MOVF   00,W
1534:  MOVWF  1C
1535:  BCF    03.6
1536:  MOVF   0B,W
1537:  MOVWF  77
1538:  BCF    0B.7
1539:  BSF    03.6
153A:  MOVF   1B,W
153B:  MOVWF  0D
153C:  MOVF   1C,W
153D:  MOVWF  0C
153E:  BSF    03.5
153F:  BCF    0C.7
1540:  BSF    0C.2
1541:  MOVLW  55
1542:  MOVWF  0D
1543:  MOVLW  AA
1544:  MOVWF  0D
1545:  BSF    0C.1
1546:  BTFSC  0C.1
1547:  GOTO   546
1548:  BCF    0C.2
1549:  MOVF   77,W
154A:  BCF    03.5
154B:  BCF    03.6
154C:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute);     
154D:  MOVLW  0E
154E:  BSF    03.6
154F:  ADDWF  19,W
1550:  MOVWF  04
1551:  BCF    03.7
1552:  BTFSC  1A.0
1553:  BSF    03.7
1554:  MOVF   00,W
1555:  MOVWF  1B
1556:  MOVLW  0A
1557:  ADDWF  19,W
1558:  MOVWF  04
1559:  BCF    03.7
155A:  BTFSC  1A.0
155B:  BSF    03.7
155C:  MOVF   00,W
155D:  MOVWF  1C
155E:  BCF    03.6
155F:  MOVF   0B,W
1560:  MOVWF  77
1561:  BCF    0B.7
1562:  BSF    03.6
1563:  MOVF   1B,W
1564:  MOVWF  0D
1565:  MOVF   1C,W
1566:  MOVWF  0C
1567:  BSF    03.5
1568:  BCF    0C.7
1569:  BSF    0C.2
156A:  MOVLW  55
156B:  MOVWF  0D
156C:  MOVLW  AA
156D:  MOVWF  0D
156E:  BSF    0C.1
156F:  BTFSC  0C.1
1570:  GOTO   56F
1571:  BCF    0C.2
1572:  MOVF   77,W
1573:  BCF    03.5
1574:  BCF    03.6
1575:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveAlarmMinutesSeconds(Timer *timerPtr) {   
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->alarmTime.minute); 
*
158E:  MOVLW  0E
158F:  ADDWF  1B,W
1590:  MOVWF  04
1591:  BCF    03.7
1592:  BTFSC  1C.0
1593:  BSF    03.7
1594:  MOVF   00,W
1595:  MOVWF  1D
1596:  MOVLW  0A
1597:  ADDWF  1B,W
1598:  MOVWF  04
1599:  BCF    03.7
159A:  BTFSC  1C.0
159B:  BSF    03.7
159C:  MOVF   00,W
159D:  MOVWF  1E
159E:  BCF    03.6
159F:  MOVF   0B,W
15A0:  MOVWF  77
15A1:  BCF    0B.7
15A2:  BSF    03.6
15A3:  MOVF   1D,W
15A4:  MOVWF  0D
15A5:  MOVF   1E,W
15A6:  MOVWF  0C
15A7:  BSF    03.5
15A8:  BCF    0C.7
15A9:  BSF    0C.2
15AA:  MOVLW  55
15AB:  MOVWF  0D
15AC:  MOVLW  AA
15AD:  MOVWF  0D
15AE:  BSF    0C.1
15AF:  BTFSC  0C.1
15B0:  GOTO   5AF
15B1:  BCF    0C.2
15B2:  MOVF   77,W
15B3:  BCF    03.5
15B4:  BCF    03.6
15B5:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressAlarmSeconds, timerPtr->alarmTime.second); 
15B6:  MOVLW  0D
15B7:  BSF    03.6
15B8:  ADDWF  1B,W
15B9:  MOVWF  04
15BA:  BCF    03.7
15BB:  BTFSC  1C.0
15BC:  BSF    03.7
15BD:  MOVF   00,W
15BE:  MOVWF  1D
15BF:  MOVLW  0B
15C0:  ADDWF  1B,W
15C1:  MOVWF  04
15C2:  BCF    03.7
15C3:  BTFSC  1C.0
15C4:  BSF    03.7
15C5:  MOVF   00,W
15C6:  MOVWF  1E
15C7:  BCF    03.6
15C8:  MOVF   0B,W
15C9:  MOVWF  77
15CA:  BCF    0B.7
15CB:  BSF    03.6
15CC:  MOVF   1D,W
15CD:  MOVWF  0D
15CE:  MOVF   1E,W
15CF:  MOVWF  0C
15D0:  BSF    03.5
15D1:  BCF    0C.7
15D2:  BSF    0C.2
15D3:  MOVLW  55
15D4:  MOVWF  0D
15D5:  MOVLW  AA
15D6:  MOVWF  0D
15D7:  BSF    0C.1
15D8:  BTFSC  0C.1
15D9:  GOTO   5D8
15DA:  BCF    0C.2
15DB:  MOVF   77,W
15DC:  BCF    03.5
15DD:  BCF    03.6
15DE:  IORWF  0B,F
15DF:  BSF    03.6
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
0DBD:  MOVF   1B,W
0DBE:  MOVWF  78
0DBF:  MOVF   1C,W
0DC0:  MOVWF  7A
0DC1:  MOVF   78,W
0DC2:  MOVWF  1D
0DC3:  MOVF   7A,W
0DC4:  MOVWF  1E
0DC5:  MOVF   1E,W
0DC6:  MOVWF  20
0DC7:  MOVF   1D,W
0DC8:  MOVWF  1F
*
0DE8:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->alarmTime.hour == 0)&& (timerPtr->alarmTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
090F:  CLRF   1F
0910:  CLRF   20
0911:  CLRF   21
0912:  CLRF   22
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0913:  MOVF   1C,W
0914:  MOVWF  78
0915:  MOVF   1D,W
0916:  MOVWF  7A
0917:  MOVF   78,W
0918:  MOVWF  29
0919:  MOVF   7A,W
091A:  MOVWF  2A
091B:  MOVWF  33
091C:  MOVF   29,W
091D:  MOVWF  32
091E:  CLRF   34
091F:  BCF    0A.3
0920:  BCF    03.6
0921:  CALL   5EA
0922:  BSF    0A.3
0923:  MOVF   79,W
0924:  MOVWF  7A
0925:  MOVF   78,W
0926:  BSF    03.6
0927:  MOVWF  29
0928:  MOVF   7A,W
0929:  MOVWF  2A
092A:  MOVLW  01
092B:  MOVWF  2C
092C:  MOVLW  23
092D:  MOVWF  2B
092E:  MOVLW  06
092F:  MOVWF  78
0930:  MOVF   29,W
0931:  MOVWF  04
0932:  BCF    03.7
0933:  BTFSC  2A.0
0934:  BSF    03.7
0935:  MOVF   00,W
0936:  MOVWF  77
0937:  MOVF   2B,W
0938:  MOVWF  04
0939:  BCF    03.7
093A:  BTFSC  2C.0
093B:  BSF    03.7
093C:  MOVF   77,W
093D:  MOVWF  00
093E:  INCF   2B,F
093F:  BTFSC  03.2
0940:  INCF   2C,F
0941:  INCF   29,F
0942:  BTFSC  03.2
0943:  INCF   2A,F
0944:  DECFSZ 78,F
0945:  GOTO   130
....................     timeToSend[0] = timeInDigits.minute[0]; 
0946:  MOVF   25,W
0947:  MOVWF  1F
....................     timeToSend[1] = timeInDigits.minute[1]; 
0948:  MOVF   26,W
0949:  MOVWF  20
....................     timeToSend[2] = timeInDigits.hour[0]; 
094A:  MOVF   23,W
094B:  MOVWF  21
....................     timeToSend[3] = timeInDigits.hour[1]; 
094C:  MOVF   24,W
094D:  MOVWF  22
....................  
....................     if (blink) { 
094E:  MOVF   1E,F
094F:  BTFSC  03.2
0950:  GOTO   15B
....................         blink = timerPtr->currentTime.second % 2; 
0951:  MOVLW  07
0952:  ADDWF  1C,W
0953:  MOVWF  04
0954:  BCF    03.7
0955:  BTFSC  1D.0
0956:  BSF    03.7
0957:  MOVF   00,W
0958:  ANDLW  01
0959:  MOVWF  1E
....................     } else { 
095A:  GOTO   15D
....................         blink = TRUE; 
095B:  MOVLW  01
095C:  MOVWF  1E
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             blink 
....................             ); 
095D:  MOVLW  01
095E:  MOVWF  2D
095F:  MOVLW  1F
0960:  MOVWF  2C
0961:  MOVLW  04
0962:  MOVWF  2E
0963:  MOVF   1E,W
0964:  MOVWF  2F
0965:  BCF    0A.3
0966:  BCF    03.6
0967:  CALL   69E
0968:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
097D:  CLRF   1E
097E:  CLRF   1F
097F:  CLRF   20
0980:  CLRF   21
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................  
....................     time = timerPtr->countdownTime; 
0981:  MOVF   1C,W
0982:  MOVWF  04
0983:  BCF    03.7
0984:  BTFSC  1D.0
0985:  BSF    03.7
0986:  MOVF   00,W
0987:  MOVWF  77
0988:  INCF   04,F
0989:  MOVF   00,W
098A:  MOVWF  78
098B:  INCF   04,F
098C:  MOVF   00,W
098D:  MOVWF  79
098E:  INCF   04,F
098F:  MOVF   00,W
0990:  MOVWF  7A
0991:  MOVF   77,W
0992:  MOVWF  28
0993:  MOVF   78,W
0994:  MOVWF  29
0995:  MOVF   79,W
0996:  MOVWF  2A
0997:  MOVF   7A,W
0998:  MOVWF  2B
....................     time.minute = (time.minute + time.hour * 60) % 100; 
0999:  MOVF   29,W
099A:  BSF    03.5
099B:  MOVWF  26
099C:  MOVLW  3C
099D:  MOVWF  27
099E:  BCF    0A.3
099F:  BCF    03.5
09A0:  BCF    03.6
09A1:  CALL   056
09A2:  BSF    0A.3
09A3:  MOVF   78,W
09A4:  BSF    03.6
09A5:  ADDWF  2A,W
09A6:  MOVWF  2D
09A7:  BSF    03.5
09A8:  MOVWF  28
09A9:  MOVLW  64
09AA:  MOVWF  29
09AB:  BCF    0A.3
09AC:  BCF    03.5
09AD:  BCF    03.6
09AE:  CALL   03D
09AF:  BSF    0A.3
09B0:  MOVF   77,W
09B1:  BSF    03.6
09B2:  MOVWF  2A
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE); 
09B3:  MOVLW  01
09B4:  MOVWF  33
09B5:  MOVLW  28
09B6:  MOVWF  32
09B7:  CLRF   34
09B8:  BCF    0A.3
09B9:  BCF    03.6
09BA:  CALL   5EA
09BB:  BSF    0A.3
09BC:  MOVF   79,W
09BD:  MOVWF  7A
09BE:  MOVF   78,W
09BF:  BSF    03.6
09C0:  MOVWF  2C
09C1:  MOVF   7A,W
09C2:  MOVWF  2D
09C3:  MOVLW  01
09C4:  MOVWF  2F
09C5:  MOVLW  22
09C6:  MOVWF  2E
09C7:  MOVLW  06
09C8:  MOVWF  78
09C9:  MOVF   2C,W
09CA:  MOVWF  04
09CB:  BCF    03.7
09CC:  BTFSC  2D.0
09CD:  BSF    03.7
09CE:  MOVF   00,W
09CF:  MOVWF  77
09D0:  MOVF   2E,W
09D1:  MOVWF  04
09D2:  BCF    03.7
09D3:  BTFSC  2F.0
09D4:  BSF    03.7
09D5:  MOVF   77,W
09D6:  MOVWF  00
09D7:  INCF   2E,F
09D8:  BTFSC  03.2
09D9:  INCF   2F,F
09DA:  INCF   2C,F
09DB:  BTFSC  03.2
09DC:  INCF   2D,F
09DD:  DECFSZ 78,F
09DE:  GOTO   1C9
....................     //    timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
....................     timeToSend[0] = timeInDigits.second[0]; 
09DF:  MOVF   26,W
09E0:  MOVWF  1E
....................     timeToSend[1] = timeInDigits.second[1]; 
09E1:  MOVF   27,W
09E2:  MOVWF  1F
....................     timeToSend[2] = timeInDigits.minute[0]; 
09E3:  MOVF   24,W
09E4:  MOVWF  20
....................     timeToSend[3] = timeInDigits.minute[1]; 
09E5:  MOVF   25,W
09E6:  MOVWF  21
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             Array_getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
09E7:  MOVLW  01
09E8:  MOVWF  2D
09E9:  MOVLW  1E
09EA:  MOVWF  2C
09EB:  MOVLW  04
09EC:  MOVWF  2E
09ED:  MOVLW  01
09EE:  MOVWF  2F
09EF:  BCF    0A.3
09F0:  BCF    03.6
09F1:  CALL   69E
09F2:  BSF    0A.3
09F3:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
10AF:  CLRF   1D
10B0:  CLRF   1E
10B1:  CLRF   1F
10B2:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
10B3:  MOVLW  08
10B4:  ADDWF  1B,W
10B5:  MOVWF  78
10B6:  MOVF   1C,W
10B7:  MOVWF  7A
10B8:  BTFSC  03.0
10B9:  INCF   7A,F
10BA:  MOVF   78,W
10BB:  MOVWF  27
10BC:  MOVF   7A,W
10BD:  MOVWF  28
10BE:  MOVWF  33
10BF:  MOVF   27,W
10C0:  MOVWF  32
10C1:  CLRF   34
10C2:  BCF    0A.4
10C3:  BCF    03.6
10C4:  CALL   5EA
10C5:  BSF    0A.4
10C6:  MOVF   79,W
10C7:  MOVWF  7A
10C8:  MOVF   78,W
10C9:  BSF    03.6
10CA:  MOVWF  27
10CB:  MOVF   7A,W
10CC:  MOVWF  28
10CD:  MOVLW  01
10CE:  MOVWF  2A
10CF:  MOVLW  21
10D0:  MOVWF  29
10D1:  MOVLW  06
10D2:  MOVWF  78
10D3:  MOVF   27,W
10D4:  MOVWF  04
10D5:  BCF    03.7
10D6:  BTFSC  28.0
10D7:  BSF    03.7
10D8:  MOVF   00,W
10D9:  MOVWF  77
10DA:  MOVF   29,W
10DB:  MOVWF  04
10DC:  BCF    03.7
10DD:  BTFSC  2A.0
10DE:  BSF    03.7
10DF:  MOVF   77,W
10E0:  MOVWF  00
10E1:  INCF   29,F
10E2:  BTFSC  03.2
10E3:  INCF   2A,F
10E4:  INCF   27,F
10E5:  BTFSC  03.2
10E6:  INCF   28,F
10E7:  DECFSZ 78,F
10E8:  GOTO   0D3
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
10E9:  MOVF   23,W
10EA:  BCF    0A.4
10EB:  BCF    03.6
10EC:  CALL   004
10ED:  BSF    0A.4
10EE:  MOVWF  78
10EF:  BSF    03.6
10F0:  MOVWF  1D
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
10F1:  MOVF   24,W
10F2:  BCF    0A.4
10F3:  BCF    03.6
10F4:  CALL   004
10F5:  BSF    0A.4
10F6:  IORLW  08
10F7:  BSF    03.6
10F8:  MOVWF  1E
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
10F9:  MOVLW  01
10FA:  MOVWF  31
10FB:  MOVLW  1D
10FC:  MOVWF  30
10FD:  MOVLW  04
10FE:  MOVWF  32
10FF:  BCF    0A.4
1100:  BCF    03.6
1101:  CALL   657
1102:  BSF    0A.4
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
111B:  CLRF   1D
111C:  CLRF   1E
111D:  CLRF   1F
111E:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
111F:  MOVLW  08
1120:  ADDWF  1B,W
1121:  MOVWF  78
1122:  MOVF   1C,W
1123:  MOVWF  7A
1124:  BTFSC  03.0
1125:  INCF   7A,F
1126:  MOVF   78,W
1127:  MOVWF  27
1128:  MOVF   7A,W
1129:  MOVWF  28
112A:  MOVWF  33
112B:  MOVF   27,W
112C:  MOVWF  32
112D:  CLRF   34
112E:  BCF    0A.4
112F:  BCF    03.6
1130:  CALL   5EA
1131:  BSF    0A.4
1132:  MOVF   79,W
1133:  MOVWF  7A
1134:  MOVF   78,W
1135:  BSF    03.6
1136:  MOVWF  27
1137:  MOVF   7A,W
1138:  MOVWF  28
1139:  MOVLW  01
113A:  MOVWF  2A
113B:  MOVLW  21
113C:  MOVWF  29
113D:  MOVLW  06
113E:  MOVWF  78
113F:  MOVF   27,W
1140:  MOVWF  04
1141:  BCF    03.7
1142:  BTFSC  28.0
1143:  BSF    03.7
1144:  MOVF   00,W
1145:  MOVWF  77
1146:  MOVF   29,W
1147:  MOVWF  04
1148:  BCF    03.7
1149:  BTFSC  2A.0
114A:  BSF    03.7
114B:  MOVF   77,W
114C:  MOVWF  00
114D:  INCF   29,F
114E:  BTFSC  03.2
114F:  INCF   2A,F
1150:  INCF   27,F
1151:  BTFSC  03.2
1152:  INCF   28,F
1153:  DECFSZ 78,F
1154:  GOTO   13F
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1155:  MOVF   25,W
1156:  BCF    0A.4
1157:  BCF    03.6
1158:  CALL   004
1159:  BSF    0A.4
115A:  MOVWF  78
115B:  BSF    03.6
115C:  MOVWF  1D
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
115D:  MOVF   26,W
115E:  BCF    0A.4
115F:  BCF    03.6
1160:  CALL   004
1161:  BSF    0A.4
1162:  IORLW  08
1163:  BSF    03.6
1164:  MOVWF  1E
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1165:  MOVLW  01
1166:  MOVWF  31
1167:  MOVLW  1D
1168:  MOVWF  30
1169:  MOVLW  04
116A:  MOVWF  32
116B:  BCF    0A.4
116C:  BCF    03.6
116D:  CALL   657
116E:  BSF    0A.4
116F:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0F08:  CLRF   1D
0F09:  CLRF   1E
0F0A:  CLRF   1F
0F0B:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0F0C:  MOVLW  08
0F0D:  ADDWF  1B,W
0F0E:  MOVWF  78
0F0F:  MOVF   1C,W
0F10:  MOVWF  7A
0F11:  BTFSC  03.0
0F12:  INCF   7A,F
0F13:  MOVF   78,W
0F14:  MOVWF  27
0F15:  MOVF   7A,W
0F16:  MOVWF  28
0F17:  MOVWF  33
0F18:  MOVF   27,W
0F19:  MOVWF  32
0F1A:  CLRF   34
0F1B:  BCF    0A.3
0F1C:  BCF    03.6
0F1D:  CALL   5EA
0F1E:  BSF    0A.3
0F1F:  MOVF   79,W
0F20:  MOVWF  7A
0F21:  MOVF   78,W
0F22:  BSF    03.6
0F23:  MOVWF  27
0F24:  MOVF   7A,W
0F25:  MOVWF  28
0F26:  MOVLW  01
0F27:  MOVWF  2A
0F28:  MOVLW  21
0F29:  MOVWF  29
0F2A:  MOVLW  06
0F2B:  MOVWF  78
0F2C:  MOVF   27,W
0F2D:  MOVWF  04
0F2E:  BCF    03.7
0F2F:  BTFSC  28.0
0F30:  BSF    03.7
0F31:  MOVF   00,W
0F32:  MOVWF  77
0F33:  MOVF   29,W
0F34:  MOVWF  04
0F35:  BCF    03.7
0F36:  BTFSC  2A.0
0F37:  BSF    03.7
0F38:  MOVF   77,W
0F39:  MOVWF  00
0F3A:  INCF   29,F
0F3B:  BTFSC  03.2
0F3C:  INCF   2A,F
0F3D:  INCF   27,F
0F3E:  BTFSC  03.2
0F3F:  INCF   28,F
0F40:  DECFSZ 78,F
0F41:  GOTO   72C
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0F42:  MOVF   23,W
0F43:  MOVWF  1D
....................     numbersToSend[1] = displayableTime.minute[1]; 
0F44:  MOVF   24,W
0F45:  MOVWF  1E
....................     numbersToSend[2] = displayableTime.hour[0]; 
0F46:  MOVF   21,W
0F47:  MOVWF  1F
....................     numbersToSend[3] = displayableTime.hour[1]; 
0F48:  MOVF   22,W
0F49:  MOVWF  20
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0F4A:  MOVLW  01
0F4B:  MOVWF  2D
0F4C:  MOVLW  1D
0F4D:  MOVWF  2C
0F4E:  MOVLW  04
0F4F:  MOVWF  2E
0F50:  MOVLW  01
0F51:  MOVWF  2F
0F52:  BCF    0A.3
0F53:  BCF    03.6
0F54:  CALL   69E
0F55:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0F6E:  CLRF   1D
0F6F:  CLRF   1E
0F70:  CLRF   1F
0F71:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
0F72:  MOVLW  08
0F73:  ADDWF  1B,W
0F74:  MOVWF  78
0F75:  MOVF   1C,W
0F76:  MOVWF  7A
0F77:  BTFSC  03.0
0F78:  INCF   7A,F
0F79:  MOVF   78,W
0F7A:  MOVWF  27
0F7B:  MOVF   7A,W
0F7C:  MOVWF  28
0F7D:  MOVWF  33
0F7E:  MOVF   27,W
0F7F:  MOVWF  32
0F80:  CLRF   34
0F81:  BCF    0A.3
0F82:  BCF    03.6
0F83:  CALL   5EA
0F84:  BSF    0A.3
0F85:  MOVF   79,W
0F86:  MOVWF  7A
0F87:  MOVF   78,W
0F88:  BSF    03.6
0F89:  MOVWF  27
0F8A:  MOVF   7A,W
0F8B:  MOVWF  28
0F8C:  MOVLW  01
0F8D:  MOVWF  2A
0F8E:  MOVLW  21
0F8F:  MOVWF  29
0F90:  MOVLW  06
0F91:  MOVWF  78
0F92:  MOVF   27,W
0F93:  MOVWF  04
0F94:  BCF    03.7
0F95:  BTFSC  28.0
0F96:  BSF    03.7
0F97:  MOVF   00,W
0F98:  MOVWF  77
0F99:  MOVF   29,W
0F9A:  MOVWF  04
0F9B:  BCF    03.7
0F9C:  BTFSC  2A.0
0F9D:  BSF    03.7
0F9E:  MOVF   77,W
0F9F:  MOVWF  00
0FA0:  INCF   29,F
0FA1:  BTFSC  03.2
0FA2:  INCF   2A,F
0FA3:  INCF   27,F
0FA4:  BTFSC  03.2
0FA5:  INCF   28,F
0FA6:  DECFSZ 78,F
0FA7:  GOTO   792
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0FA8:  MOVF   25,W
0FA9:  MOVWF  1D
....................     numbersToSend[1] = displayableTime.second[1]; 
0FAA:  MOVF   26,W
0FAB:  MOVWF  1E
....................     numbersToSend[2] = displayableTime.minute[0]; 
0FAC:  MOVF   23,W
0FAD:  MOVWF  1F
....................     numbersToSend[3] = displayableTime.minute[1]; 
0FAE:  MOVF   24,W
0FAF:  MOVWF  20
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             Array_getArraySize(numbersToSend), 
....................             TRUE); 
0FB0:  MOVLW  01
0FB1:  MOVWF  2D
0FB2:  MOVLW  1D
0FB3:  MOVWF  2C
0FB4:  MOVLW  04
0FB5:  MOVWF  2E
0FB6:  MOVLW  01
0FB7:  MOVWF  2F
0FB8:  BCF    0A.3
0FB9:  BCF    03.6
0FBA:  CALL   69E
0FBB:  BSF    0A.3
0FBC:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1248:  CLRF   1D
1249:  CLRF   1E
124A:  CLRF   1F
124B:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
124C:  MOVLW  08
124D:  ADDWF  1B,W
124E:  MOVWF  78
124F:  MOVF   1C,W
1250:  MOVWF  7A
1251:  BTFSC  03.0
1252:  INCF   7A,F
1253:  MOVF   78,W
1254:  MOVWF  27
1255:  MOVF   7A,W
1256:  MOVWF  28
1257:  MOVWF  33
1258:  MOVF   27,W
1259:  MOVWF  32
125A:  CLRF   34
125B:  BCF    0A.4
125C:  BCF    03.6
125D:  CALL   5EA
125E:  BSF    0A.4
125F:  MOVF   79,W
1260:  MOVWF  7A
1261:  MOVF   78,W
1262:  BSF    03.6
1263:  MOVWF  27
1264:  MOVF   7A,W
1265:  MOVWF  28
1266:  MOVLW  01
1267:  MOVWF  2A
1268:  MOVLW  21
1269:  MOVWF  29
126A:  MOVLW  06
126B:  MOVWF  78
126C:  MOVF   27,W
126D:  MOVWF  04
126E:  BCF    03.7
126F:  BTFSC  28.0
1270:  BSF    03.7
1271:  MOVF   00,W
1272:  MOVWF  77
1273:  MOVF   29,W
1274:  MOVWF  04
1275:  BCF    03.7
1276:  BTFSC  2A.0
1277:  BSF    03.7
1278:  MOVF   77,W
1279:  MOVWF  00
127A:  INCF   29,F
127B:  BTFSC  03.2
127C:  INCF   2A,F
127D:  INCF   27,F
127E:  BTFSC  03.2
127F:  INCF   28,F
1280:  DECFSZ 78,F
1281:  GOTO   26C
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1282:  MOVLW  08
1283:  MOVWF  1E
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
1284:  MOVF   21,W
1285:  BCF    0A.4
1286:  BCF    03.6
1287:  CALL   004
1288:  BSF    0A.4
1289:  MOVWF  78
128A:  BSF    03.6
128B:  MOVWF  1F
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
128C:  MOVF   22,W
128D:  BCF    0A.4
128E:  BCF    03.6
128F:  CALL   004
1290:  BSF    0A.4
1291:  MOVWF  78
1292:  BSF    03.6
1293:  MOVWF  20
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1294:  MOVLW  01
1295:  MOVWF  31
1296:  MOVLW  1D
1297:  MOVWF  30
1298:  MOVLW  04
1299:  MOVWF  32
129A:  BCF    0A.4
129B:  BCF    03.6
129C:  CALL   657
129D:  BSF    0A.4
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
12B6:  CLRF   1D
12B7:  CLRF   1E
12B8:  CLRF   1F
12B9:  CLRF   20
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->alarmTime, FALSE); 
12BA:  MOVLW  08
12BB:  ADDWF  1B,W
12BC:  MOVWF  78
12BD:  MOVF   1C,W
12BE:  MOVWF  7A
12BF:  BTFSC  03.0
12C0:  INCF   7A,F
12C1:  MOVF   78,W
12C2:  MOVWF  27
12C3:  MOVF   7A,W
12C4:  MOVWF  28
12C5:  MOVWF  33
12C6:  MOVF   27,W
12C7:  MOVWF  32
12C8:  CLRF   34
12C9:  BCF    0A.4
12CA:  BCF    03.6
12CB:  CALL   5EA
12CC:  BSF    0A.4
12CD:  MOVF   79,W
12CE:  MOVWF  7A
12CF:  MOVF   78,W
12D0:  BSF    03.6
12D1:  MOVWF  27
12D2:  MOVF   7A,W
12D3:  MOVWF  28
12D4:  MOVLW  01
12D5:  MOVWF  2A
12D6:  MOVLW  21
12D7:  MOVWF  29
12D8:  MOVLW  06
12D9:  MOVWF  78
12DA:  MOVF   27,W
12DB:  MOVWF  04
12DC:  BCF    03.7
12DD:  BTFSC  28.0
12DE:  BSF    03.7
12DF:  MOVF   00,W
12E0:  MOVWF  77
12E1:  MOVF   29,W
12E2:  MOVWF  04
12E3:  BCF    03.7
12E4:  BTFSC  2A.0
12E5:  BSF    03.7
12E6:  MOVF   77,W
12E7:  MOVWF  00
12E8:  INCF   29,F
12E9:  BTFSC  03.2
12EA:  INCF   2A,F
12EB:  INCF   27,F
12EC:  BTFSC  03.2
12ED:  INCF   28,F
12EE:  DECFSZ 78,F
12EF:  GOTO   2DA
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
12F0:  MOVLW  08
12F1:  MOVWF  1E
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
12F2:  MOVF   23,W
12F3:  BCF    0A.4
12F4:  BCF    03.6
12F5:  CALL   004
12F6:  BSF    0A.4
12F7:  MOVWF  78
12F8:  BSF    03.6
12F9:  MOVWF  1F
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
12FA:  MOVF   24,W
12FB:  BCF    0A.4
12FC:  BCF    03.6
12FD:  CALL   004
12FE:  BSF    0A.4
12FF:  MOVWF  78
1300:  BSF    03.6
1301:  MOVWF  20
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1302:  MOVLW  01
1303:  MOVWF  31
1304:  MOVLW  1D
1305:  MOVWF  30
1306:  MOVLW  04
1307:  MOVWF  32
1308:  BCF    0A.4
1309:  BCF    03.6
130A:  CALL   657
130B:  BSF    0A.4
130C:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, Array_getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, Array_getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, Array_getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, Array_getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, Array_getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, Array_getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS = 0, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN = 0, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_SETTING_BRIGHTNESS, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char brightness; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
....................     char addressBrightness; 
....................     char addressTypeOfCount; 
.................... } PolyoneDisplay; 
....................  
.................... const int brightnessLevels[10] = {10, 34, 58, 82, 106, 130, 154, 178, 202, 255}; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_setRtc(&polyoneDisplayPtr->timer); 
*
0155:  BSF    03.6
0156:  MOVF   46,W
0157:  MOVWF  78
0158:  MOVF   47,W
0159:  MOVWF  7A
015A:  MOVF   78,W
015B:  MOVWF  48
015C:  MOVF   7A,W
015D:  MOVWF  49
015E:  MOVF   49,W
015F:  MOVWF  4B
0160:  MOVF   48,W
0161:  MOVWF  4A
*
0191:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
054E:  BSF    03.6
054F:  MOVF   46,W
0550:  MOVWF  78
0551:  MOVF   47,W
0552:  MOVWF  7A
0553:  MOVF   78,W
0554:  MOVWF  48
0555:  MOVF   7A,W
0556:  MOVWF  49
0557:  MOVF   49,W
0558:  MOVWF  4B
0559:  MOVF   48,W
055A:  MOVWF  4A
*
057F:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(char addressCurrentState, 
....................         char addressPreviousState, char addressFormat, 
....................         char addressFirstNumberAlarm, 
....................         char addressSecondNumberAlarm, char addressRtcHours, 
....................         char addressRtcMinutes, char addressRtcSeconds, 
....................         char addressBrightness, char addressTypeOfCount) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
0A94:  MOVF   1D,W
0A95:  MOVWF  41
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
0A96:  MOVF   1E,W
0A97:  MOVWF  42
....................     polyoneDisplay.addressFormat = addressFormat; 
0A98:  MOVF   1F,W
0A99:  MOVWF  43
....................     polyoneDisplay.addressBrightness = addressBrightness; 
0A9A:  MOVF   25,W
0A9B:  MOVWF  44
....................     polyoneDisplay.addressTypeOfCount = addressTypeOfCount; 
0A9C:  MOVF   26,W
0A9D:  MOVWF  45
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
0A9E:  MOVF   1F,W
0A9F:  MOVWF  0D
0AA0:  BSF    03.5
0AA1:  BCF    0C.7
0AA2:  BSF    0C.0
0AA3:  BCF    03.5
0AA4:  MOVF   0C,W
0AA5:  ANDLW  01
0AA6:  MOVWF  78
0AA7:  BCF    3D.0
0AA8:  BTFSC  78.0
0AA9:  BSF    3D.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
0AAA:  MOVF   1D,W
0AAB:  MOVWF  0D
0AAC:  BSF    03.5
0AAD:  BCF    0C.7
0AAE:  BSF    0C.0
0AAF:  BCF    03.5
0AB0:  MOVF   0C,W
0AB1:  MOVWF  47
0AB2:  MOVF   47,W
0AB3:  BSF    03.5
0AB4:  MOVWF  28
0AB5:  MOVLW  03
0AB6:  MOVWF  29
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  BCF    03.6
0ABA:  CALL   03D
0ABB:  BSF    0A.3
0ABC:  MOVF   77,W
0ABD:  BSF    03.6
0ABE:  MOVWF  3E
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
0ABF:  MOVF   1E,W
0AC0:  MOVWF  0D
0AC1:  BSF    03.5
0AC2:  BCF    0C.7
0AC3:  BSF    0C.0
0AC4:  BCF    03.5
0AC5:  MOVF   0C,W
0AC6:  MOVWF  47
0AC7:  MOVF   47,W
0AC8:  BSF    03.5
0AC9:  MOVWF  28
0ACA:  MOVLW  03
0ACB:  MOVWF  29
0ACC:  BCF    0A.3
0ACD:  BCF    03.5
0ACE:  BCF    03.6
0ACF:  CALL   03D
0AD0:  BSF    0A.3
0AD1:  MOVF   77,W
0AD2:  BSF    03.6
0AD3:  MOVWF  3F
....................     polyoneDisplay.brightness = read_eeprom(addressBrightness) % 10; 
0AD4:  MOVF   25,W
0AD5:  MOVWF  0D
0AD6:  BSF    03.5
0AD7:  BCF    0C.7
0AD8:  BSF    0C.0
0AD9:  BCF    03.5
0ADA:  MOVF   0C,W
0ADB:  MOVWF  47
0ADC:  MOVF   47,W
0ADD:  BSF    03.5
0ADE:  MOVWF  28
0ADF:  MOVLW  0A
0AE0:  MOVWF  29
0AE1:  BCF    0A.3
0AE2:  BCF    03.5
0AE3:  BCF    03.6
0AE4:  CALL   03D
0AE5:  BSF    0A.3
0AE6:  MOVF   77,W
0AE7:  BSF    03.6
0AE8:  MOVWF  40
....................     polyoneDisplay.typeOfCount = read_eeprom(addressTypeOfCount) % 2; 
0AE9:  MOVF   26,W
0AEA:  MOVWF  0D
0AEB:  BSF    03.5
0AEC:  BCF    0C.7
0AED:  BSF    0C.0
0AEE:  BCF    03.5
0AEF:  MOVF   0C,W
0AF0:  ANDLW  01
0AF1:  MOVWF  78
0AF2:  BCF    3D.1
0AF3:  BTFSC  78.0
0AF4:  BSF    3D.1
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
0AF5:  MOVF   3F,F
0AF6:  BTFSS  03.2
0AF7:  GOTO   2FD
0AF8:  MOVF   3E,F
0AF9:  BTFSS  03.2
0AFA:  GOTO   2FD
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
0AFB:  MOVLW  02
0AFC:  MOVWF  3F
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
0AFD:  MOVLW  00
0AFE:  BTFSC  3D.0
0AFF:  MOVLW  01
0B00:  XORLW  01
0B01:  BCF    03.6
0B02:  BTFSC  03.2
0B03:  GOTO   308
0B04:  XORLW  01
0B05:  BTFSC  03.2
0B06:  GOTO   3E5
0B07:  GOTO   4CE
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0B08:  MOVLW  63
0B09:  BSF    03.6
0B0A:  MOVWF  50
0B0B:  MOVLW  3B
0B0C:  MOVWF  51
0B0D:  CLRF   53
0B0E:  MOVF   20,W
0B0F:  MOVWF  52
0B10:  CLRF   55
0B11:  MOVF   21,W
0B12:  MOVWF  54
0B13:  CLRF   57
0B14:  MOVF   22,W
0B15:  MOVWF  56
0B16:  CLRF   59
0B17:  MOVF   23,W
0B18:  MOVWF  58
0B19:  CLRF   5B
0B1A:  MOVF   24,W
0B1B:  MOVWF  5A
*
0BC0:  MOVF   79,W
0BC1:  MOVWF  7A
0BC2:  MOVF   78,W
0BC3:  BCF    03.5
0BC4:  MOVWF  4A
0BC5:  MOVF   7A,W
0BC6:  MOVWF  4B
0BC7:  MOVLW  01
0BC8:  MOVWF  4D
0BC9:  MOVLW  27
0BCA:  MOVWF  4C
0BCB:  MOVLW  16
0BCC:  MOVWF  78
0BCD:  MOVF   4A,W
0BCE:  MOVWF  04
0BCF:  BCF    03.7
0BD0:  BTFSC  4B.0
0BD1:  BSF    03.7
0BD2:  MOVF   00,W
0BD3:  MOVWF  77
0BD4:  MOVF   4C,W
0BD5:  MOVWF  04
0BD6:  BCF    03.7
0BD7:  BTFSC  4D.0
0BD8:  BSF    03.7
0BD9:  MOVF   77,W
0BDA:  MOVWF  00
0BDB:  INCF   4C,F
0BDC:  BTFSC  03.2
0BDD:  INCF   4D,F
0BDE:  INCF   4A,F
0BDF:  BTFSC  03.2
0BE0:  INCF   4B,F
0BE1:  DECFSZ 78,F
0BE2:  GOTO   3CD
....................             break; 
0BE3:  BCF    03.6
0BE4:  GOTO   4CE
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0BE5:  MOVLW  63
0BE6:  BSF    03.6
0BE7:  MOVWF  50
0BE8:  CLRF   52
0BE9:  MOVF   20,W
0BEA:  MOVWF  51
0BEB:  CLRF   54
0BEC:  MOVF   21,W
0BED:  MOVWF  53
0BEE:  CLRF   56
0BEF:  MOVF   22,W
0BF0:  MOVWF  55
0BF1:  CLRF   58
0BF2:  MOVF   23,W
0BF3:  MOVWF  57
0BF4:  CLRF   5A
0BF5:  MOVF   24,W
0BF6:  MOVWF  59
*
0CAA:  MOVF   79,W
0CAB:  MOVWF  7A
0CAC:  MOVF   78,W
0CAD:  BCF    03.5
0CAE:  MOVWF  4A
0CAF:  MOVF   7A,W
0CB0:  MOVWF  4B
0CB1:  MOVLW  01
0CB2:  MOVWF  4D
0CB3:  MOVLW  27
0CB4:  MOVWF  4C
0CB5:  MOVLW  16
0CB6:  MOVWF  78
0CB7:  MOVF   4A,W
0CB8:  MOVWF  04
0CB9:  BCF    03.7
0CBA:  BTFSC  4B.0
0CBB:  BSF    03.7
0CBC:  MOVF   00,W
0CBD:  MOVWF  77
0CBE:  MOVF   4C,W
0CBF:  MOVWF  04
0CC0:  BCF    03.7
0CC1:  BTFSC  4D.0
0CC2:  BSF    03.7
0CC3:  MOVF   77,W
0CC4:  MOVWF  00
0CC5:  INCF   4C,F
0CC6:  BTFSC  03.2
0CC7:  INCF   4D,F
0CC8:  INCF   4A,F
0CC9:  BTFSC  03.2
0CCA:  INCF   4B,F
0CCB:  DECFSZ 78,F
0CCC:  GOTO   4B7
....................  
....................             break; 
0CCD:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
0CCE:  BSF    03.6
0CCF:  MOVF   3E,F
0CD0:  BTFSS  03.2
0CD1:  GOTO   4E5
....................         //        PolyoneDisplay_updateTimer(&polyoneDisplay); 
....................         //        Timer_updateTimerFromEeprom(&polyoneDisplay.timer); 
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
0CD2:  MOVLW  01
0CD3:  MOVWF  47
0CD4:  MOVLW  27
0CD5:  MOVWF  46
0CD6:  BCF    0A.3
0CD7:  BCF    03.6
0CD8:  CALL   155
0CD9:  BSF    0A.3
....................         Timer_updateCountdownTime(&polyoneDisplay); 
0CDA:  MOVLW  01
0CDB:  BSF    03.6
0CDC:  MOVWF  4D
0CDD:  MOVLW  27
0CDE:  MOVWF  4C
0CDF:  BCF    0A.3
0CE0:  BCF    03.6
0CE1:  CALL   2DC
0CE2:  BSF    0A.3
....................     } else { 
0CE3:  GOTO   4ED
0CE4:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0CE5:  MOVLW  01
0CE6:  MOVWF  47
0CE7:  MOVLW  27
0CE8:  MOVWF  46
0CE9:  BCF    0A.3
0CEA:  BCF    03.6
0CEB:  CALL   54E
0CEC:  BSF    0A.3
....................     } 
....................  
....................     return polyoneDisplay; 
0CED:  MOVLW  27
0CEE:  MOVWF  78
0CEF:  MOVLW  01
0CF0:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->typeOfCount == COUNTUP) { 
*
0800:  MOVLW  16
0801:  BSF    03.6
0802:  ADDWF  17,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  18.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  77
0809:  RRF    77,W
080A:  ANDLW  01
080B:  SUBLW  01
080C:  BTFSS  03.2
080D:  GOTO   0EE
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
080E:  MOVLW  16
080F:  ADDWF  17,W
0810:  MOVWF  04
0811:  BCF    03.7
0812:  BTFSC  18.0
0813:  BSF    03.7
0814:  MOVF   00,W
0815:  ANDLW  01
0816:  SUBLW  01
0817:  BTFSS  03.2
0818:  GOTO   077
....................             Time_showHoursMinutesRtc(withBlink); 
0819:  MOVF   19,W
081A:  MOVWF  1A
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0875:  GOTO   0EC
0876:  BSF    03.6
0877:  MOVLW  16
0878:  ADDWF  17,W
0879:  MOVWF  04
087A:  BCF    03.7
087B:  BTFSC  18.0
087C:  BSF    03.7
087D:  MOVF   00,W
087E:  ANDLW  01
087F:  BTFSS  03.2
0880:  GOTO   0ED
....................             Time_showMinutesSecondsRtc(); 
....................         } 
....................     } else if (polyoneDisplayPtr->typeOfCount == COUNTDOWN) { 
*
08ED:  GOTO   1F4
08EE:  MOVLW  16
08EF:  ADDWF  17,W
08F0:  MOVWF  04
08F1:  BCF    03.7
08F2:  BTFSC  18.0
08F3:  BSF    03.7
08F4:  MOVF   00,W
08F5:  MOVWF  77
08F6:  RRF    77,W
08F7:  ANDLW  01
08F8:  BTFSS  03.2
08F9:  GOTO   1F4
....................         if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
08FA:  MOVLW  16
08FB:  ADDWF  17,W
08FC:  MOVWF  04
08FD:  BCF    03.7
08FE:  BTFSC  18.0
08FF:  BSF    03.7
0900:  MOVF   00,W
0901:  ANDLW  01
0902:  SUBLW  01
0903:  BTFSS  03.2
0904:  GOTO   16B
....................             Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0905:  MOVF   17,W
0906:  MOVWF  1A
0907:  MOVF   18,W
0908:  MOVWF  1B
0909:  MOVF   1B,W
090A:  MOVWF  1D
090B:  MOVF   1A,W
090C:  MOVWF  1C
090D:  MOVF   19,W
090E:  MOVWF  1E
....................         } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0969:  GOTO   1F3
096A:  BSF    03.6
096B:  MOVLW  16
096C:  ADDWF  17,W
096D:  MOVWF  04
096E:  BCF    03.7
096F:  BTFSC  18.0
0970:  BSF    03.7
0971:  MOVF   00,W
0972:  ANDLW  01
0973:  BTFSS  03.2
0974:  GOTO   1F4
....................             Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0975:  MOVF   17,W
0976:  MOVWF  1A
0977:  MOVF   18,W
0978:  MOVWF  1B
0979:  MOVF   1B,W
097A:  MOVWF  1D
097B:  MOVF   1A,W
097C:  MOVWF  1C
....................         } 
....................     } 
*
09F4:  BCF    03.6
09F5:  RETURN
....................  
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0EF0:  MOVLW  16
0EF1:  BSF    03.6
0EF2:  ADDWF  17,W
0EF3:  MOVWF  04
0EF4:  BCF    03.7
0EF5:  BTFSC  18.0
0EF6:  BSF    03.7
0EF7:  MOVF   00,W
0EF8:  ANDLW  01
0EF9:  SUBLW  01
0EFA:  BTFSS  03.2
0EFB:  GOTO   758
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0EFC:  MOVF   17,W
0EFD:  MOVWF  78
0EFE:  MOVF   18,W
0EFF:  MOVWF  7A
0F00:  MOVF   78,W
0F01:  MOVWF  19
0F02:  MOVF   7A,W
0F03:  MOVWF  1A
0F04:  MOVF   1A,W
0F05:  MOVWF  1C
0F06:  MOVF   19,W
0F07:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0F56:  GOTO   7BC
0F57:  BSF    03.6
0F58:  MOVLW  16
0F59:  ADDWF  17,W
0F5A:  MOVWF  04
0F5B:  BCF    03.7
0F5C:  BTFSC  18.0
0F5D:  BSF    03.7
0F5E:  MOVF   00,W
0F5F:  ANDLW  01
0F60:  BTFSS  03.2
0F61:  GOTO   7BD
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0F62:  MOVF   17,W
0F63:  MOVWF  78
0F64:  MOVF   18,W
0F65:  MOVWF  7A
0F66:  MOVF   78,W
0F67:  MOVWF  19
0F68:  MOVF   7A,W
0F69:  MOVWF  1A
0F6A:  MOVF   1A,W
0F6B:  MOVWF  1C
0F6C:  MOVF   19,W
0F6D:  MOVWF  1B
....................     } 
*
0FBD:  BCF    03.6
0FBE:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_hideBrightness(void) { 
....................     int numbersToSend[4] = {0}; 
*
1657:  BSF    03.6
1658:  CLRF   17
1659:  CLRF   18
165A:  CLRF   19
165B:  CLRF   1A
....................  
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
165C:  MOVLW  37
165D:  MOVWF  19
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
165E:  MOVLW  01
165F:  MOVWF  31
1660:  MOVLW  17
1661:  MOVWF  30
1662:  MOVLW  04
1663:  MOVWF  32
1664:  BCF    0A.4
1665:  BCF    03.6
1666:  CALL   657
1667:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_showBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1000:  BSF    03.6
1001:  CLRF   19
1002:  CLRF   1A
1003:  CLRF   1B
1004:  CLRF   1C
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) % 10]; 
1005:  MOVLW  19
1006:  ADDWF  17,W
1007:  MOVWF  04
1008:  BCF    03.7
1009:  BTFSC  18.0
100A:  BSF    03.7
100B:  MOVLW  01
100C:  ADDWF  00,W
100D:  MOVWF  1E
100E:  BSF    03.5
100F:  MOVWF  28
1010:  MOVLW  0A
1011:  MOVWF  29
1012:  BCF    0A.4
1013:  BCF    03.5
1014:  BCF    03.6
1015:  CALL   03D
1016:  BSF    0A.4
1017:  MOVF   77,W
1018:  BCF    0A.4
1019:  CALL   004
101A:  BSF    0A.4
101B:  MOVWF  78
101C:  BSF    03.6
101D:  MOVWF  19
....................     numbersToSend[1] = SevenSegmentDisplay_characters[(polyoneDisplayPtr->brightness + 1) / 10] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
101E:  MOVLW  19
101F:  ADDWF  17,W
1020:  MOVWF  04
1021:  BCF    03.7
1022:  BTFSC  18.0
1023:  BSF    03.7
1024:  MOVLW  01
1025:  ADDWF  00,W
1026:  MOVWF  1E
1027:  BSF    03.5
1028:  MOVWF  28
1029:  MOVLW  0A
102A:  MOVWF  29
102B:  BCF    0A.4
102C:  BCF    03.5
102D:  BCF    03.6
102E:  CALL   03D
102F:  BSF    0A.4
1030:  MOVF   78,W
1031:  BCF    0A.4
1032:  CALL   004
1033:  BSF    0A.4
1034:  IORLW  08
1035:  BSF    03.6
1036:  MOVWF  1A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_B]; 
1037:  MOVLW  37
1038:  MOVWF  1B
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
1039:  MOVLW  01
103A:  MOVWF  31
103B:  MOVLW  19
103C:  MOVWF  30
103D:  MOVLW  04
103E:  MOVWF  32
103F:  BCF    0A.4
1040:  BCF    03.6
1041:  CALL   657
1042:  BSF    0A.4
1043:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1231:  MOVLW  16
1232:  ADDWF  17,W
1233:  MOVWF  04
1234:  BCF    03.7
1235:  BTFSC  18.0
1236:  BSF    03.7
1237:  MOVF   00,W
1238:  ANDLW  01
1239:  SUBLW  01
123A:  BTFSS  03.2
123B:  GOTO   2A0
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
123C:  MOVF   17,W
123D:  MOVWF  78
123E:  MOVF   18,W
123F:  MOVWF  7A
1240:  MOVF   78,W
1241:  MOVWF  19
1242:  MOVF   7A,W
1243:  MOVWF  1A
1244:  MOVF   1A,W
1245:  MOVWF  1C
1246:  MOVF   19,W
1247:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
129E:  GOTO   30C
129F:  BSF    03.6
12A0:  MOVLW  16
12A1:  ADDWF  17,W
12A2:  MOVWF  04
12A3:  BCF    03.7
12A4:  BTFSC  18.0
12A5:  BSF    03.7
12A6:  MOVF   00,W
12A7:  ANDLW  01
12A8:  BTFSS  03.2
12A9:  GOTO   30D
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
12AA:  MOVF   17,W
12AB:  MOVWF  78
12AC:  MOVF   18,W
12AD:  MOVWF  7A
12AE:  MOVF   78,W
12AF:  MOVWF  19
12B0:  MOVF   7A,W
12B1:  MOVWF  1A
12B2:  MOVF   1A,W
12B3:  MOVWF  1C
12B4:  MOVF   19,W
12B5:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1098:  MOVLW  16
1099:  ADDWF  17,W
109A:  MOVWF  04
109B:  BCF    03.7
109C:  BTFSC  18.0
109D:  BSF    03.7
109E:  MOVF   00,W
109F:  ANDLW  01
10A0:  SUBLW  01
10A1:  BTFSS  03.2
10A2:  GOTO   105
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
10A3:  MOVF   17,W
10A4:  MOVWF  78
10A5:  MOVF   18,W
10A6:  MOVWF  7A
10A7:  MOVF   78,W
10A8:  MOVWF  19
10A9:  MOVF   7A,W
10AA:  MOVWF  1A
10AB:  MOVF   1A,W
10AC:  MOVWF  1C
10AD:  MOVF   19,W
10AE:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1103:  GOTO   16F
1104:  BSF    03.6
1105:  MOVLW  16
1106:  ADDWF  17,W
1107:  MOVWF  04
1108:  BCF    03.7
1109:  BTFSC  18.0
110A:  BSF    03.7
110B:  MOVF   00,W
110C:  ANDLW  01
110D:  BTFSS  03.2
110E:  GOTO   170
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
110F:  MOVF   17,W
1110:  MOVWF  78
1111:  MOVF   18,W
1112:  MOVWF  7A
1113:  MOVF   78,W
1114:  MOVWF  19
1115:  MOVF   7A,W
1116:  MOVWF  1A
1117:  MOVF   1A,W
1118:  MOVWF  1C
1119:  MOVF   19,W
111A:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
1402:  CLRF   19
1403:  CLRF   1A
1404:  CLRF   1B
1405:  CLRF   1C
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
1406:  MOVLW  16
1407:  ADDWF  17,W
1408:  MOVWF  04
1409:  BCF    03.7
140A:  BTFSC  18.0
140B:  BSF    03.7
140C:  MOVF   00,W
140D:  ANDLW  01
140E:  SUBLW  01
140F:  BTFSS  03.2
1410:  GOTO   419
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1411:  MOVLW  25
1412:  MOVWF  19
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1413:  MOVLW  2D
1414:  MOVWF  1A
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1415:  MOVLW  67
1416:  MOVWF  1B
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
1417:  MOVWF  1C
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1418:  GOTO   42A
1419:  MOVLW  16
141A:  ADDWF  17,W
141B:  MOVWF  04
141C:  BCF    03.7
141D:  BTFSC  18.0
141E:  BSF    03.7
141F:  MOVF   00,W
1420:  ANDLW  01
1421:  BTFSS  03.2
1422:  GOTO   42A
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
1423:  MOVLW  B3
1424:  MOVWF  19
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1425:  MOVLW  BB
1426:  MOVWF  1A
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1427:  MOVLW  25
1428:  MOVWF  1B
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
1429:  MOVWF  1C
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, Array_getArraySize(numbersToSend)); 
142A:  MOVLW  01
142B:  MOVWF  31
142C:  MOVLW  19
142D:  MOVWF  30
142E:  MOVLW  04
142F:  MOVWF  32
1430:  BCF    0A.4
1431:  BCF    03.6
1432:  CALL   657
1433:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_increaseBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->brightness = (polyoneDisplayPtr->brightness + 1) % 10; 
*
1676:  MOVLW  19
1677:  ADDWF  17,W
1678:  MOVWF  78
1679:  MOVF   18,W
167A:  MOVWF  7A
167B:  BTFSC  03.0
167C:  INCF   7A,F
167D:  MOVF   78,W
167E:  MOVWF  19
167F:  MOVF   7A,W
1680:  MOVWF  1A
1681:  MOVLW  19
1682:  ADDWF  17,W
1683:  MOVWF  04
1684:  BCF    03.7
1685:  BTFSC  18.0
1686:  BSF    03.7
1687:  MOVLW  01
1688:  ADDWF  00,W
1689:  MOVWF  1C
168A:  BSF    03.5
168B:  MOVWF  28
168C:  MOVLW  0A
168D:  MOVWF  29
168E:  BCF    0A.4
168F:  BCF    03.5
1690:  BCF    03.6
1691:  CALL   03D
1692:  BSF    0A.4
1693:  MOVF   77,W
1694:  BSF    03.6
1695:  MOVWF  1B
1696:  MOVF   19,W
1697:  MOVWF  04
1698:  BCF    03.7
1699:  BTFSC  1A.0
169A:  BSF    03.7
169B:  MOVF   1B,W
169C:  MOVWF  00
....................     set_pwm1_duty(brightnessLevels[polyoneDisplayPtr->brightness]); 
169D:  MOVLW  19
169E:  ADDWF  17,W
169F:  MOVWF  04
16A0:  BCF    03.7
16A1:  BTFSC  18.0
16A2:  BSF    03.7
16A3:  MOVF   00,W
16A4:  BCF    0A.4
16A5:  BCF    03.6
16A6:  CALL   023
16A7:  BSF    0A.4
16A8:  BSF    03.6
16A9:  MOVWF  19
16AA:  BCF    03.6
16AB:  MOVWF  15
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
117F:  MOVLW  16
1180:  ADDWF  17,W
1181:  MOVWF  04
1182:  BCF    03.7
1183:  BTFSC  18.0
1184:  BSF    03.7
1185:  MOVF   00,W
1186:  ANDLW  01
1187:  SUBLW  01
1188:  BTFSS  03.2
1189:  GOTO   1C6
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
118A:  MOVF   17,W
118B:  MOVWF  78
118C:  MOVF   18,W
118D:  MOVWF  7A
118E:  MOVF   78,W
118F:  MOVWF  19
1190:  MOVF   7A,W
1191:  MOVWF  1A
1192:  MOVF   1A,W
1193:  MOVWF  1C
1194:  MOVF   19,W
1195:  MOVWF  1B
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
11C5:  GOTO   1E2
11C6:  MOVLW  16
11C7:  ADDWF  17,W
11C8:  MOVWF  04
11C9:  BCF    03.7
11CA:  BTFSC  18.0
11CB:  BSF    03.7
11CC:  MOVF   00,W
11CD:  ANDLW  01
11CE:  BTFSS  03.2
11CF:  GOTO   1E2
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
11D0:  MOVF   17,W
11D1:  MOVWF  78
11D2:  MOVF   18,W
11D3:  MOVWF  7A
11D4:  MOVF   78,W
11D5:  MOVWF  19
11D6:  MOVF   18,W
11D7:  MOVWF  1A
11D8:  MOVWF  1C
11D9:  MOVF   19,W
11DA:  MOVWF  1B
11DB:  BCF    0A.4
11DC:  BSF    0A.3
11DD:  BCF    03.6
11DE:  CALL   7BF
11DF:  BSF    0A.4
11E0:  BCF    0A.3
11E1:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
131C:  MOVLW  16
131D:  ADDWF  17,W
131E:  MOVWF  04
131F:  BCF    03.7
1320:  BTFSC  18.0
1321:  BSF    03.7
1322:  MOVF   00,W
1323:  ANDLW  01
1324:  SUBLW  01
1325:  BTFSS  03.2
1326:  GOTO   33A
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1327:  MOVF   17,W
1328:  MOVWF  78
1329:  MOVF   18,W
132A:  MOVWF  7A
132B:  MOVF   17,W
132C:  MOVWF  19
132D:  MOVF   18,W
132E:  MOVWF  1A
132F:  MOVWF  1C
1330:  MOVF   17,W
1331:  MOVWF  1B
1332:  BCF    0A.4
1333:  BSF    0A.3
1334:  BCF    03.6
1335:  CALL   7BF
1336:  BSF    0A.4
1337:  BCF    0A.3
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1338:  GOTO   380
1339:  BSF    03.6
133A:  MOVLW  16
133B:  ADDWF  17,W
133C:  MOVWF  04
133D:  BCF    03.7
133E:  BTFSC  18.0
133F:  BSF    03.7
1340:  MOVF   00,W
1341:  ANDLW  01
1342:  BTFSS  03.2
1343:  GOTO   37F
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
1344:  MOVF   17,W
1345:  MOVWF  78
1346:  MOVF   18,W
1347:  MOVWF  7A
1348:  MOVF   78,W
1349:  MOVWF  19
134A:  MOVF   7A,W
134B:  MOVWF  1A
134C:  MOVF   1A,W
134D:  MOVWF  1C
134E:  MOVF   19,W
134F:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
143F:  MOVLW  16
1440:  ADDWF  17,W
1441:  MOVWF  78
1442:  MOVF   18,W
1443:  MOVWF  7A
1444:  BTFSC  03.0
1445:  INCF   7A,F
1446:  MOVF   78,W
1447:  MOVWF  19
1448:  MOVF   7A,W
1449:  MOVWF  1A
144A:  MOVLW  16
144B:  ADDWF  17,W
144C:  MOVWF  04
144D:  BCF    03.7
144E:  BTFSC  18.0
144F:  BSF    03.7
1450:  BTFSS  00.0
1451:  GOTO   459
1452:  MOVF   19,W
1453:  MOVWF  04
1454:  BCF    03.7
1455:  BTFSC  1A.0
1456:  BSF    03.7
1457:  BCF    00.0
1458:  GOTO   45F
1459:  MOVF   19,W
145A:  MOVWF  04
145B:  BCF    03.7
145C:  BTFSC  1A.0
145D:  BSF    03.7
145E:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
145F:  MOVLW  16
1460:  ADDWF  17,W
1461:  MOVWF  04
1462:  BCF    03.7
1463:  BTFSC  18.0
1464:  BSF    03.7
1465:  MOVF   00,W
1466:  ANDLW  01
1467:  SUBLW  01
1468:  BTFSS  03.2
1469:  GOTO   4B6
....................         polyoneDisplayPtr->timer.alarmTime.hour = polyoneDisplayPtr->timer.alarmTime.minute; 
146A:  MOVLW  09
146B:  ADDWF  17,W
146C:  MOVWF  78
146D:  MOVF   18,W
146E:  MOVWF  7A
146F:  BTFSC  03.0
1470:  INCF   7A,F
1471:  MOVF   78,W
1472:  MOVWF  19
1473:  MOVF   7A,W
1474:  MOVWF  1A
1475:  MOVLW  0A
1476:  ADDWF  17,W
1477:  MOVWF  04
1478:  BCF    03.7
1479:  BTFSC  18.0
147A:  BSF    03.7
147B:  MOVF   00,W
147C:  MOVWF  1B
147D:  MOVF   19,W
147E:  MOVWF  04
147F:  BCF    03.7
1480:  BTFSC  1A.0
1481:  BSF    03.7
1482:  MOVF   1B,W
1483:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.second; 
1484:  MOVLW  0A
1485:  ADDWF  17,W
1486:  MOVWF  78
1487:  MOVF   18,W
1488:  MOVWF  7A
1489:  BTFSC  03.0
148A:  INCF   7A,F
148B:  MOVF   78,W
148C:  MOVWF  19
148D:  MOVF   7A,W
148E:  MOVWF  1A
148F:  MOVLW  0B
1490:  ADDWF  17,W
1491:  MOVWF  04
1492:  BCF    03.7
1493:  BTFSC  18.0
1494:  BSF    03.7
1495:  MOVF   00,W
1496:  MOVWF  1B
1497:  MOVF   19,W
1498:  MOVWF  04
1499:  BCF    03.7
149A:  BTFSC  1A.0
149B:  BSF    03.7
149C:  MOVF   1B,W
149D:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.second = 0; 
149E:  MOVLW  0B
149F:  ADDWF  17,W
14A0:  MOVWF  04
14A1:  BCF    03.7
14A2:  BTFSC  18.0
14A3:  BSF    03.7
14A4:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
14A5:  MOVLW  13
14A6:  ADDWF  17,W
14A7:  MOVWF  04
14A8:  BCF    03.7
14A9:  BTFSC  18.0
14AA:  BSF    03.7
14AB:  MOVLW  63
14AC:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
14AD:  MOVLW  14
14AE:  ADDWF  17,W
14AF:  MOVWF  04
14B0:  BCF    03.7
14B1:  BTFSC  18.0
14B2:  BSF    03.7
14B3:  MOVLW  3B
14B4:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
14B5:  GOTO   50A
14B6:  MOVLW  16
14B7:  ADDWF  17,W
14B8:  MOVWF  04
14B9:  BCF    03.7
14BA:  BTFSC  18.0
14BB:  BSF    03.7
14BC:  MOVF   00,W
14BD:  ANDLW  01
14BE:  BTFSS  03.2
14BF:  GOTO   50A
....................         polyoneDisplayPtr->timer.alarmTime.second = polyoneDisplayPtr->timer.alarmTime.minute; 
14C0:  MOVLW  0B
14C1:  ADDWF  17,W
14C2:  MOVWF  78
14C3:  MOVF   18,W
14C4:  MOVWF  7A
14C5:  BTFSC  03.0
14C6:  INCF   7A,F
14C7:  MOVF   78,W
14C8:  MOVWF  19
14C9:  MOVF   7A,W
14CA:  MOVWF  1A
14CB:  MOVLW  0A
14CC:  ADDWF  17,W
14CD:  MOVWF  04
14CE:  BCF    03.7
14CF:  BTFSC  18.0
14D0:  BSF    03.7
14D1:  MOVF   00,W
14D2:  MOVWF  1B
14D3:  MOVF   19,W
14D4:  MOVWF  04
14D5:  BCF    03.7
14D6:  BTFSC  1A.0
14D7:  BSF    03.7
14D8:  MOVF   1B,W
14D9:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.minute = polyoneDisplayPtr->timer.alarmTime.hour; 
14DA:  MOVLW  0A
14DB:  ADDWF  17,W
14DC:  MOVWF  78
14DD:  MOVF   18,W
14DE:  MOVWF  7A
14DF:  BTFSC  03.0
14E0:  INCF   7A,F
14E1:  MOVF   78,W
14E2:  MOVWF  19
14E3:  MOVF   7A,W
14E4:  MOVWF  1A
14E5:  MOVLW  09
14E6:  ADDWF  17,W
14E7:  MOVWF  04
14E8:  BCF    03.7
14E9:  BTFSC  18.0
14EA:  BSF    03.7
14EB:  MOVF   00,W
14EC:  MOVWF  1B
14ED:  MOVF   19,W
14EE:  MOVWF  04
14EF:  BCF    03.7
14F0:  BTFSC  1A.0
14F1:  BSF    03.7
14F2:  MOVF   1B,W
14F3:  MOVWF  00
....................         polyoneDisplayPtr->timer.alarmTime.hour = 0; 
14F4:  MOVLW  09
14F5:  ADDWF  17,W
14F6:  MOVWF  04
14F7:  BCF    03.7
14F8:  BTFSC  18.0
14F9:  BSF    03.7
14FA:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
14FB:  MOVLW  13
14FC:  ADDWF  17,W
14FD:  MOVWF  04
14FE:  BCF    03.7
14FF:  BTFSC  18.0
1500:  BSF    03.7
1501:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1502:  MOVLW  14
1503:  ADDWF  17,W
1504:  MOVWF  04
1505:  BCF    03.7
1506:  BTFSC  18.0
1507:  BSF    03.7
1508:  MOVLW  63
1509:  MOVWF  00
150A:  BCF    03.6
....................  
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
13A3:  MOVLW  16
13A4:  ADDWF  17,W
13A5:  MOVWF  04
13A6:  BCF    03.7
13A7:  BTFSC  18.0
13A8:  BSF    03.7
13A9:  MOVF   00,W
13AA:  ANDLW  01
13AB:  SUBLW  01
13AC:  BTFSS  03.2
13AD:  GOTO   3C6
....................         return (polyoneDisplayPtr->timer.alarmTime.hour != 0) || (polyoneDisplayPtr->timer.alarmTime.minute != 0); 
13AE:  MOVLW  09
13AF:  ADDWF  17,W
13B0:  MOVWF  04
13B1:  BCF    03.7
13B2:  BTFSC  18.0
13B3:  BSF    03.7
13B4:  MOVF   00,F
13B5:  BTFSS  03.2
13B6:  GOTO   3C2
13B7:  MOVLW  0A
13B8:  ADDWF  17,W
13B9:  MOVWF  04
13BA:  BCF    03.7
13BB:  BTFSC  18.0
13BC:  BSF    03.7
13BD:  MOVF   00,F
13BE:  BTFSS  03.2
13BF:  GOTO   3C2
13C0:  MOVLW  00
13C1:  GOTO   3C3
13C2:  MOVLW  01
13C3:  MOVWF  78
13C4:  GOTO   3E6
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
13C5:  GOTO   3E6
13C6:  MOVLW  16
13C7:  ADDWF  17,W
13C8:  MOVWF  04
13C9:  BCF    03.7
13CA:  BTFSC  18.0
13CB:  BSF    03.7
13CC:  MOVF   00,W
13CD:  ANDLW  01
13CE:  BTFSS  03.2
13CF:  GOTO   3E6
....................         return (polyoneDisplayPtr->timer.alarmTime.minute != 0) || (polyoneDisplayPtr->timer.alarmTime.second != 0); 
13D0:  MOVLW  0A
13D1:  ADDWF  17,W
13D2:  MOVWF  04
13D3:  BCF    03.7
13D4:  BTFSC  18.0
13D5:  BSF    03.7
13D6:  MOVF   00,F
13D7:  BTFSS  03.2
13D8:  GOTO   3E4
13D9:  MOVLW  0B
13DA:  ADDWF  17,W
13DB:  MOVWF  04
13DC:  BCF    03.7
13DD:  BTFSC  18.0
13DE:  BSF    03.7
13DF:  MOVF   00,F
13E0:  BTFSS  03.2
13E1:  GOTO   3E4
13E2:  MOVLW  00
13E3:  GOTO   3E5
13E4:  MOVLW  01
13E5:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
09F6:  BSF    03.6
09F7:  MOVF   17,W
09F8:  MOVWF  19
09F9:  MOVF   18,W
09FA:  MOVWF  1A
09FB:  MOVF   1A,W
09FC:  MOVWF  1C
09FD:  MOVF   19,W
09FE:  MOVWF  1B
*
0A79:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveTypeOfCount(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressTypeOfCount, polyoneDisplayPtr->typeOfCount); 
*
07BB:  MOVLW  1E
07BC:  BSF    03.6
07BD:  ADDWF  17,W
07BE:  MOVWF  04
07BF:  BCF    03.7
07C0:  BTFSC  18.0
07C1:  BSF    03.7
07C2:  MOVF   00,W
07C3:  MOVWF  19
07C4:  MOVLW  16
07C5:  ADDWF  17,W
07C6:  MOVWF  04
07C7:  BCF    03.7
07C8:  BTFSC  18.0
07C9:  BSF    03.7
07CA:  CLRF   1A
07CB:  BTFSC  00.1
07CC:  INCF   1A,F
07CD:  BCF    03.6
07CE:  MOVF   0B,W
07CF:  MOVWF  77
07D0:  BCF    0B.7
07D1:  BSF    03.6
07D2:  MOVF   19,W
07D3:  MOVWF  0D
07D4:  MOVF   1A,W
07D5:  MOVWF  0C
07D6:  BSF    03.5
07D7:  BCF    0C.7
07D8:  BSF    0C.2
07D9:  MOVLW  55
07DA:  MOVWF  0D
07DB:  MOVLW  AA
07DC:  MOVWF  0D
07DD:  BSF    0C.1
07DE:  BTFSC  0C.1
07DF:  GOTO   7DE
07E0:  BCF    0C.2
07E1:  MOVF   77,W
07E2:  BCF    03.5
07E3:  BCF    03.6
07E4:  IORWF  0B,F
07E5:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveBrightness(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressBrightness, polyoneDisplayPtr->brightness); 
*
1610:  MOVLW  1D
1611:  ADDWF  17,W
1612:  MOVWF  04
1613:  BCF    03.7
1614:  BTFSC  18.0
1615:  BSF    03.7
1616:  MOVF   00,W
1617:  MOVWF  19
1618:  MOVLW  19
1619:  ADDWF  17,W
161A:  MOVWF  04
161B:  BCF    03.7
161C:  BTFSC  18.0
161D:  BSF    03.7
161E:  MOVF   00,W
161F:  MOVWF  1A
1620:  BCF    03.6
1621:  MOVF   0B,W
1622:  MOVWF  77
1623:  BCF    0B.7
1624:  BSF    03.6
1625:  MOVF   19,W
1626:  MOVWF  0D
1627:  MOVF   1A,W
1628:  MOVWF  0C
1629:  BSF    03.5
162A:  BCF    0C.7
162B:  BSF    0C.2
162C:  MOVLW  55
162D:  MOVWF  0D
162E:  MOVLW  AA
162F:  MOVWF  0D
1630:  BSF    0C.1
1631:  BTFSC  0C.1
1632:  GOTO   631
1633:  BCF    0C.2
1634:  MOVF   77,W
1635:  BCF    03.5
1636:  BCF    03.6
1637:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
075E:  MOVLW  18
075F:  BSF    03.6
0760:  ADDWF  17,W
0761:  MOVWF  78
0762:  MOVF   18,W
0763:  MOVWF  7A
0764:  BTFSC  03.0
0765:  INCF   7A,F
0766:  MOVF   78,W
0767:  MOVWF  1A
0768:  MOVF   7A,W
0769:  MOVWF  1B
076A:  MOVLW  17
076B:  ADDWF  17,W
076C:  MOVWF  04
076D:  BCF    03.7
076E:  BTFSC  18.0
076F:  BSF    03.7
0770:  MOVF   00,W
0771:  MOVWF  1C
0772:  MOVF   1A,W
0773:  MOVWF  04
0774:  BCF    03.7
0775:  BTFSC  1B.0
0776:  BSF    03.7
0777:  MOVF   1C,W
0778:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
0779:  MOVLW  17
077A:  ADDWF  17,W
077B:  MOVWF  04
077C:  BCF    03.7
077D:  BTFSC  18.0
077E:  BSF    03.7
077F:  MOVF   19,W
0780:  MOVWF  00
0781:  BCF    03.6
0782:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
0783:  MOVLW  18
0784:  BSF    03.6
0785:  ADDWF  17,W
0786:  MOVWF  78
0787:  MOVF   18,W
0788:  MOVWF  7A
0789:  BTFSC  03.0
078A:  INCF   7A,F
078B:  MOVF   78,W
078C:  MOVWF  19
078D:  MOVF   7A,W
078E:  MOVWF  1A
078F:  MOVLW  17
0790:  ADDWF  17,W
0791:  MOVWF  04
0792:  BCF    03.7
0793:  BTFSC  18.0
0794:  BSF    03.7
0795:  MOVF   00,W
0796:  MOVWF  1B
0797:  MOVF   19,W
0798:  MOVWF  04
0799:  BCF    03.7
079A:  BTFSC  1A.0
079B:  BSF    03.7
079C:  MOVF   1B,W
079D:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
079E:  MOVLW  17
079F:  ADDWF  17,W
07A0:  MOVWF  04
07A1:  BCF    03.7
07A2:  BTFSC  18.0
07A3:  BSF    03.7
07A4:  CLRF   00
07A5:  BCF    03.6
07A6:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
070B:  MOVLW  1A
070C:  BSF    03.6
070D:  ADDWF  17,W
070E:  MOVWF  04
070F:  BCF    03.7
0710:  BTFSC  18.0
0711:  BSF    03.7
0712:  MOVF   00,W
0713:  MOVWF  19
0714:  MOVLW  17
0715:  ADDWF  17,W
0716:  MOVWF  04
0717:  BCF    03.7
0718:  BTFSC  18.0
0719:  BSF    03.7
071A:  MOVF   00,W
071B:  MOVWF  1A
071C:  BCF    03.6
071D:  MOVF   0B,W
071E:  MOVWF  77
071F:  BCF    0B.7
0720:  BSF    03.6
0721:  MOVF   19,W
0722:  MOVWF  0D
0723:  MOVF   1A,W
0724:  MOVWF  0C
0725:  BSF    03.5
0726:  BCF    0C.7
0727:  BSF    0C.2
0728:  MOVLW  55
0729:  MOVWF  0D
072A:  MOVLW  AA
072B:  MOVWF  0D
072C:  BSF    0C.1
072D:  BTFSC  0C.1
072E:  GOTO   72D
072F:  BCF    0C.2
0730:  MOVF   77,W
0731:  BCF    03.5
0732:  BCF    03.6
0733:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0734:  MOVLW  1B
0735:  BSF    03.6
0736:  ADDWF  17,W
0737:  MOVWF  04
0738:  BCF    03.7
0739:  BTFSC  18.0
073A:  BSF    03.7
073B:  MOVF   00,W
073C:  MOVWF  19
073D:  MOVLW  18
073E:  ADDWF  17,W
073F:  MOVWF  04
0740:  BCF    03.7
0741:  BTFSC  18.0
0742:  BSF    03.7
0743:  MOVF   00,W
0744:  MOVWF  1A
0745:  BCF    03.6
0746:  MOVF   0B,W
0747:  MOVWF  77
0748:  BCF    0B.7
0749:  BSF    03.6
074A:  MOVF   19,W
074B:  MOVWF  0D
074C:  MOVF   1A,W
074D:  MOVWF  0C
074E:  BSF    03.5
074F:  BCF    0C.7
0750:  BSF    0C.2
0751:  MOVLW  55
0752:  MOVWF  0D
0753:  MOVLW  AA
0754:  MOVWF  0D
0755:  BSF    0C.1
0756:  BTFSC  0C.1
0757:  GOTO   756
0758:  BCF    0C.2
0759:  MOVF   77,W
075A:  BCF    03.5
075B:  BCF    03.6
075C:  IORWF  0B,F
075D:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_saveFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     write_eeprom(polyoneDisplayPtr->addressFormat, polyoneDisplayPtr->format); 
*
15E3:  MOVLW  1C
15E4:  ADDWF  17,W
15E5:  MOVWF  04
15E6:  BCF    03.7
15E7:  BTFSC  18.0
15E8:  BSF    03.7
15E9:  MOVF   00,W
15EA:  MOVWF  19
15EB:  MOVLW  16
15EC:  ADDWF  17,W
15ED:  MOVWF  04
15EE:  BCF    03.7
15EF:  BTFSC  18.0
15F0:  BSF    03.7
15F1:  CLRF   1A
15F2:  BTFSC  00.0
15F3:  INCF   1A,F
15F4:  BCF    03.6
15F5:  MOVF   0B,W
15F6:  MOVWF  77
15F7:  BCF    0B.7
15F8:  BSF    03.6
15F9:  MOVF   19,W
15FA:  MOVWF  0D
15FB:  MOVF   1A,W
15FC:  MOVWF  0C
15FD:  BSF    03.5
15FE:  BCF    0C.7
15FF:  BSF    0C.2
1600:  MOVLW  55
1601:  MOVWF  0D
1602:  MOVLW  AA
1603:  MOVWF  0D
1604:  BSF    0C.1
1605:  BTFSC  0C.1
1606:  GOTO   605
1607:  BCF    0C.2
1608:  MOVF   77,W
1609:  BCF    03.5
160A:  BCF    03.6
160B:  IORWF  0B,F
.................... } 
....................  
.................... void PolyoneDisplay_saveAlarm(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1516:  MOVLW  16
1517:  ADDWF  17,W
1518:  MOVWF  04
1519:  BCF    03.7
151A:  BTFSC  18.0
151B:  BSF    03.7
151C:  MOVF   00,W
151D:  ANDLW  01
151E:  SUBLW  01
151F:  BTFSS  03.2
1520:  GOTO   578
....................         Timer_saveAlarmHoursMinutes(&polyoneDisplayPtr.timer); 
1521:  MOVLW  01
1522:  MOVWF  1A
1523:  MOVLW  17
1524:  MOVWF  19
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1576:  GOTO   5DF
1577:  BSF    03.6
1578:  MOVLW  16
1579:  ADDWF  17,W
157A:  MOVWF  04
157B:  BCF    03.7
157C:  BTFSC  18.0
157D:  BSF    03.7
157E:  MOVF   00,W
157F:  ANDLW  01
1580:  BTFSS  03.2
1581:  GOTO   5E0
....................         Timer_saveAlarmMinutesSeconds(&polyoneDisplayPtr->timer); 
1582:  MOVF   17,W
1583:  MOVWF  78
1584:  MOVF   18,W
1585:  MOVWF  7A
1586:  MOVF   78,W
1587:  MOVWF  19
1588:  MOVF   7A,W
1589:  MOVWF  1A
158A:  MOVF   1A,W
158B:  MOVWF  1C
158C:  MOVF   19,W
158D:  MOVWF  1B
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
0D25:  MOVLW  17
0D26:  ADDWF  17,W
0D27:  MOVWF  04
0D28:  BCF    03.7
0D29:  BTFSC  18.0
0D2A:  BSF    03.7
0D2B:  MOVF   00,W
0D2C:  MOVWF  19
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
0D2D:  MOVLW  17
0D2E:  ADDWF  17,W
0D2F:  MOVWF  78
0D30:  MOVF   18,W
0D31:  MOVWF  7A
0D32:  BTFSC  03.0
0D33:  INCF   7A,F
0D34:  MOVF   78,W
0D35:  MOVWF  1A
0D36:  MOVF   7A,W
0D37:  MOVWF  1B
0D38:  MOVLW  18
0D39:  ADDWF  17,W
0D3A:  MOVWF  04
0D3B:  BCF    03.7
0D3C:  BTFSC  18.0
0D3D:  BSF    03.7
0D3E:  MOVF   00,W
0D3F:  MOVWF  1C
0D40:  MOVF   1A,W
0D41:  MOVWF  04
0D42:  BCF    03.7
0D43:  BTFSC  1B.0
0D44:  BSF    03.7
0D45:  MOVF   1C,W
0D46:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
0D47:  MOVLW  18
0D48:  ADDWF  17,W
0D49:  MOVWF  04
0D4A:  BCF    03.7
0D4B:  BTFSC  18.0
0D4C:  BSF    03.7
0D4D:  MOVF   19,W
0D4E:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
0DB1:  MOVF   17,W
0DB2:  MOVWF  78
0DB3:  MOVF   18,W
0DB4:  MOVWF  7A
0DB5:  MOVF   78,W
0DB6:  MOVWF  19
0DB7:  MOVF   7A,W
0DB8:  MOVWF  1A
0DB9:  MOVF   1A,W
0DBA:  MOVWF  1C
0DBB:  MOVF   19,W
0DBC:  MOVWF  1B
*
0DE9:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  PIN_BUTTON_START   PIN_B1 
.................... #define  PIN_BUTTON_MENU    PIN_B0 
.................... #define  PIN_BUZZER         PIN_C5 
.................... #define PIN_LED PIN_B3 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
....................     EEPROM_BRIGHTNESS, 
....................     EEPROM_TYPE_OF_COUNT 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... void turnOnBuzzer(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
175D:  MOVF   03,W
175E:  ANDLW  1F
175F:  MOVWF  03
1760:  MOVLW  FF
1761:  MOVWF  20
1762:  BSF    3E.0
1763:  BSF    3E.1
1764:  BSF    3E.2
1765:  BSF    3E.3
1766:  BSF    3E.4
1767:  CLRF   5F
1768:  CLRF   60
1769:  CLRF   61
176A:  BSF    03.5
176B:  BSF    03.6
176C:  MOVF   09,W
176D:  ANDLW  C0
176E:  MOVWF  09
176F:  BCF    03.6
1770:  BCF    1F.4
1771:  BCF    1F.5
1772:  MOVLW  00
1773:  BSF    03.6
1774:  MOVWF  08
1775:  BCF    03.5
1776:  CLRF   07
1777:  CLRF   08
1778:  CLRF   09
1779:  BCF    03.7
....................     setupHardware(); 
177A:  BCF    03.6
177B:  GOTO   733
....................     myPolyoneDisplay.currentState = STATE_INIT; 
177C:  MOVLW  03
177D:  MOVWF  56
....................     rtos_run(); 
177E:  CLRF   22
177F:  CLRF   24
1780:  MOVLW  05
1781:  MOVWF  23
1782:  CLRF   26
1783:  CLRF   25
1784:  MOVLW  F7
1785:  MOVWF  27
1786:  MOVLW  16
1787:  MOVWF  28
1788:  CLRF   29
1789:  CLRF   2B
178A:  MOVLW  05
178B:  MOVWF  2A
178C:  CLRF   2D
178D:  MOVLW  01
178E:  MOVWF  2C
178F:  MOVLW  15
1790:  MOVWF  2E
1791:  MOVLW  17
1792:  MOVWF  2F
1793:  CLRF   30
1794:  CLRF   32
1795:  MOVLW  01
1796:  MOVWF  31
1797:  CLRF   34
1798:  CLRF   33
1799:  MOVLW  44
179A:  MOVWF  35
179B:  MOVLW  10
179C:  MOVWF  36
179D:  CLRF   37
179E:  CLRF   39
179F:  MOVLW  14
17A0:  MOVWF  38
17A1:  CLRF   3B
17A2:  MOVLW  02
17A3:  MOVWF  3A
17A4:  MOVLW  ED
17A5:  MOVWF  3C
17A6:  MOVLW  07
17A7:  MOVWF  3D
17A8:  CLRF   21
17A9:  BSF    03.5
17AA:  MOVF   01,W
17AB:  ANDLW  C0
17AC:  IORLW  07
17AD:  MOVWF  01
17AE:  MOVLW  3D
17AF:  BCF    03.5
17B0:  MOVWF  01
17B1:  BCF    0B.2
17B2:  BCF    03.0
17B3:  RLF    21,W
17B4:  MOVWF  77
17B5:  BCF    0A.4
17B6:  CALL   031
17B7:  BSF    0A.4
17B8:  MOVWF  79
17B9:  MOVLW  01
17BA:  ADDWF  77,W
17BB:  BCF    0A.4
17BC:  CALL   031
17BD:  BSF    0A.4
17BE:  MOVWF  7A
17BF:  MOVF   79,W
17C0:  MOVWF  04
17C1:  BCF    03.7
17C2:  BTFSC  7A.0
17C3:  BSF    03.7
17C4:  MOVF   00,W
17C5:  MOVWF  79
17C6:  INCF   04,F
17C7:  MOVF   00,W
17C8:  MOVWF  77
17C9:  INCF   04,F
17CA:  MOVF   00,W
17CB:  MOVWF  78
17CC:  INCF   04,F
17CD:  INCF   00,F
17CE:  MOVF   00,W
17CF:  MOVWF  7A
17D0:  BTFSS  03.2
17D1:  GOTO   7D5
17D2:  INCF   04,F
17D3:  INCF   00,F
17D4:  DECF   04,F
17D5:  INCF   04,F
17D6:  MOVF   00,W
17D7:  SUBWF  78,W
17D8:  BTFSS  03.2
17D9:  GOTO   7ED
17DA:  MOVF   77,W
17DB:  SUBWF  7A,W
17DC:  BTFSS  03.2
17DD:  GOTO   7ED
17DE:  DECF   04,F
17DF:  CLRF   00
17E0:  INCF   04,F
17E1:  CLRF   00
17E2:  INCF   04,F
17E3:  BTFSC  79.7
17E4:  GOTO   7ED
17E5:  INCF   04,F
17E6:  MOVF   00,W
17E7:  MOVWF  0A
17E8:  DECF   04,F
17E9:  MOVF   00,W
17EA:  MOVWF  02
17EB:  BCF    03.5
17EC:  BCF    03.6
17ED:  INCF   21,F
17EE:  MOVLW  04
17EF:  SUBWF  21,W
17F0:  BTFSS  03.2
17F1:  GOTO   7B2
17F2:  CLRF   21
17F3:  MOVF   01,W
17F4:  BTFSS  0B.2
17F5:  GOTO   7F8
17F6:  BSF    03.5
17F7:  GOTO   7AE
17F8:  GOTO   7F3
17F9:  MOVLW  FF
17FA:  MOVWF  21
.................... } 
....................  
17FB:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
0A7A:  MOVF   56,W
0A7B:  ADDLW  F5
0A7C:  BTFSC  03.0
0A7D:  GOTO   6DE
0A7E:  ADDLW  0B
0A7F:  GOTO   6E1
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new(EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS, 
....................                     EEPROM_BRIGHTNESS, 
....................                     EEPROM_TYPE_OF_COUNT 
....................                     ); 
0A80:  BSF    03.6
0A81:  CLRF   1D
0A82:  MOVLW  01
0A83:  MOVWF  1E
0A84:  MOVLW  02
0A85:  MOVWF  1F
0A86:  MOVLW  03
0A87:  MOVWF  20
0A88:  MOVLW  04
0A89:  MOVWF  21
0A8A:  MOVLW  05
0A8B:  MOVWF  22
0A8C:  MOVLW  06
0A8D:  MOVWF  23
0A8E:  MOVLW  07
0A8F:  MOVWF  24
0A90:  MOVLW  08
0A91:  MOVWF  25
0A92:  MOVLW  09
0A93:  MOVWF  26
*
0CF1:  MOVF   79,W
0CF2:  MOVWF  7A
0CF3:  MOVF   78,W
0CF4:  BSF    03.6
0CF5:  MOVWF  17
0CF6:  MOVF   7A,W
0CF7:  MOVWF  18
0CF8:  CLRF   1A
0CF9:  MOVLW  3F
0CFA:  MOVWF  19
0CFB:  MOVLW  1F
0CFC:  MOVWF  78
0CFD:  MOVF   17,W
0CFE:  MOVWF  04
0CFF:  BCF    03.7
0D00:  BTFSC  18.0
0D01:  BSF    03.7
0D02:  MOVF   00,W
0D03:  MOVWF  77
0D04:  MOVF   19,W
0D05:  MOVWF  04
0D06:  BCF    03.7
0D07:  BTFSC  1A.0
0D08:  BSF    03.7
0D09:  MOVF   77,W
0D0A:  MOVWF  00
0D0B:  INCF   19,F
0D0C:  BTFSC  03.2
0D0D:  INCF   1A,F
0D0E:  INCF   17,F
0D0F:  BTFSC  03.2
0D10:  INCF   18,F
0D11:  DECFSZ 78,F
0D12:  GOTO   4FD
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0D13:  CLRF   18
0D14:  MOVLW  3F
0D15:  MOVWF  17
0D16:  CLRF   19
0D17:  BCF    03.6
0D18:  CALL   000
....................             break; 
0D19:  GOTO   6DE
....................  
....................         case STATE_IDLE: 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0D1A:  BSF    03.5
0D1B:  BSF    06.1
0D1C:  BCF    03.5
0D1D:  BTFSS  06.1
0D1E:  GOTO   55E
0D1F:  BTFSC  3E.3
0D20:  GOTO   55E
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
0D21:  BSF    03.6
0D22:  CLRF   18
0D23:  MOVLW  3F
0D24:  MOVWF  17
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0D4F:  CLRF   18
0D50:  MOVLW  3F
0D51:  MOVWF  17
0D52:  BCF    0A.3
0D53:  BCF    03.6
0D54:  CALL   70B
0D55:  BSF    0A.3
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
0D56:  BSF    03.6
0D57:  CLRF   47
0D58:  MOVLW  3F
0D59:  MOVWF  46
0D5A:  BCF    0A.3
0D5B:  BCF    03.6
0D5C:  CALL   155
0D5D:  BSF    0A.3
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0D5E:  BTFSC  3E.1
0D5F:  GOTO   56B
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D60:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0D61:  BSF    03.6
0D62:  CLRF   18
0D63:  MOVLW  3F
0D64:  MOVWF  17
0D65:  MOVLW  04
0D66:  MOVWF  19
0D67:  BCF    0A.3
0D68:  BCF    03.6
0D69:  CALL   75E
0D6A:  BSF    0A.3
....................             } 
....................             break; 
0D6B:  GOTO   6DE
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0D6C:  BSF    03.6
0D6D:  CLRF   47
0D6E:  MOVLW  3F
0D6F:  MOVWF  46
0D70:  BCF    0A.3
0D71:  BCF    03.6
0D72:  CALL   54E
0D73:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0D74:  BSF    03.6
0D75:  CLRF   18
0D76:  MOVLW  3F
0D77:  MOVWF  17
0D78:  MOVLW  01
0D79:  MOVWF  19
0D7A:  BCF    03.6
0D7B:  CALL   000
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0D7C:  BTFSC  3E.1
0D7D:  GOTO   589
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D7E:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0D7F:  BSF    03.6
0D80:  CLRF   18
0D81:  MOVLW  3F
0D82:  MOVWF  17
0D83:  MOVLW  04
0D84:  MOVWF  19
0D85:  BCF    0A.3
0D86:  BCF    03.6
0D87:  CALL   75E
0D88:  BSF    0A.3
....................             } 
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0D89:  BSF    03.5
0D8A:  BSF    06.1
0D8B:  BCF    03.5
0D8C:  BTFSS  06.1
0D8D:  GOTO   5AD
0D8E:  BTFSC  3E.3
0D8F:  GOTO   5AD
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0D90:  BSF    03.6
0D91:  CLRF   18
0D92:  MOVLW  3F
0D93:  MOVWF  17
0D94:  BCF    0A.3
0D95:  BCF    03.6
0D96:  CALL   783
0D97:  BSF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
0D98:  BSF    03.6
0D99:  CLRF   18
0D9A:  MOVLW  3F
0D9B:  MOVWF  17
0D9C:  BCF    03.6
0D9D:  CALL   1F6
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
0D9E:  BSF    03.6
0D9F:  CLRF   18
0DA0:  MOVLW  3F
0DA1:  MOVWF  17
0DA2:  BCF    0A.3
0DA3:  BCF    03.6
0DA4:  CALL   70B
0DA5:  BSF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0DA6:  BSF    03.6
0DA7:  CLRF   18
0DA8:  MOVLW  3F
0DA9:  MOVWF  17
0DAA:  CLRF   19
0DAB:  BCF    03.6
0DAC:  CALL   000
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
0DAD:  BSF    03.6
0DAE:  CLRF   18
0DAF:  MOVLW  3F
0DB0:  MOVWF  17
*
0DEA:  MOVF   78,F
0DEB:  BTFSC  03.2
0DEC:  GOTO   638
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
0DED:  CLRF   18
0DEE:  MOVLW  3F
0DEF:  MOVWF  17
0DF0:  MOVLW  01
0DF1:  MOVWF  19
0DF2:  BCF    0A.3
0DF3:  BCF    03.6
0DF4:  CALL   75E
0DF5:  BSF    0A.3
....................                 turnOnBuzzer(); 
....................                 myPolyoneDisplay.typeOfCount = COUNTUP; 
*
0E23:  BSF    55.1
....................                 PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
0E24:  BSF    03.6
0E25:  CLRF   18
0E26:  MOVLW  3F
0E27:  MOVWF  17
0E28:  BCF    0A.3
0E29:  BCF    03.6
0E2A:  CALL   7BB
0E2B:  BSF    0A.3
....................                 Time_clearRtcTime(); 
0E2C:  BCF    0A.3
0E2D:  CALL   7E6
0E2E:  BSF    0A.3
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0E2F:  BSF    03.6
0E30:  CLRF   47
0E31:  MOVLW  3F
0E32:  MOVWF  46
0E33:  BCF    0A.3
0E34:  BCF    03.6
0E35:  CALL   54E
0E36:  BSF    0A.3
0E37:  BSF    03.6
....................             } 
....................             break; 
0E38:  BCF    03.6
0E39:  GOTO   6DE
....................  
....................         case STATE_COUNTING_UP: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0E3A:  BSF    03.6
0E3B:  CLRF   47
0E3C:  MOVLW  3F
0E3D:  MOVWF  46
0E3E:  BCF    0A.3
0E3F:  BCF    03.6
0E40:  CALL   54E
0E41:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0E42:  BSF    03.6
0E43:  CLRF   18
0E44:  MOVLW  3F
0E45:  MOVWF  17
0E46:  MOVLW  01
0E47:  MOVWF  19
0E48:  BCF    03.6
0E49:  CALL   000
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
0E4A:  BSF    03.5
0E4B:  BSF    06.1
0E4C:  BCF    03.5
0E4D:  BTFSS  06.1
0E4E:  GOTO   66E
0E4F:  BTFSC  3E.3
0E50:  GOTO   66E
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0E51:  BSF    03.6
0E52:  CLRF   18
0E53:  MOVLW  3F
0E54:  MOVWF  17
0E55:  BCF    0A.3
0E56:  BCF    03.6
0E57:  CALL   783
0E58:  BSF    0A.3
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
0E59:  BSF    03.6
0E5A:  CLRF   18
0E5B:  MOVLW  3F
0E5C:  MOVWF  17
0E5D:  BCF    03.6
0E5E:  CALL   1F6
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
0E5F:  BSF    03.6
0E60:  CLRF   18
0E61:  MOVLW  3F
0E62:  MOVWF  17
0E63:  BCF    0A.3
0E64:  BCF    03.6
0E65:  CALL   70B
0E66:  BSF    0A.3
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0E67:  BSF    03.6
0E68:  CLRF   18
0E69:  MOVLW  3F
0E6A:  MOVWF  17
0E6B:  CLRF   19
0E6C:  BCF    03.6
0E6D:  CALL   000
....................             } 
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0E6E:  BTFSC  3E.1
0E6F:  GOTO   67B
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0E70:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0E71:  BSF    03.6
0E72:  CLRF   18
0E73:  MOVLW  3F
0E74:  MOVWF  17
0E75:  MOVLW  04
0E76:  MOVWF  19
0E77:  BCF    0A.3
0E78:  BCF    03.6
0E79:  CALL   75E
0E7A:  BSF    0A.3
....................             } 
....................             break; 
0E7B:  GOTO   6DE
....................  
....................         case STATE_RESETTING: 
....................             myPolyoneDisplay.typeOfCount = COUNTDOWN; 
0E7C:  BCF    55.1
....................             PolyoneDisplay_saveTypeOfCount(&myPolyoneDisplay); 
0E7D:  BSF    03.6
0E7E:  CLRF   18
0E7F:  MOVLW  3F
0E80:  MOVWF  17
0E81:  BCF    0A.3
0E82:  BCF    03.6
0E83:  CALL   7BB
0E84:  BSF    0A.3
....................             Time_clearRtcTime(); 
0E85:  BCF    0A.3
0E86:  CALL   7E6
0E87:  BSF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
0E9D:  MOVLW  08
0E9E:  BSF    03.6
0E9F:  MOVWF  17
0EA0:  MOVLW  FA
0EA1:  MOVWF  18
0EA2:  BCF    0A.3
0EA3:  BCF    03.6
0EA4:  CALL   7A7
0EA5:  BSF    0A.3
0EA6:  BSF    03.6
0EA7:  DECFSZ 17,F
0EA8:  GOTO   6A0
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
0EA9:  CLRF   18
0EAA:  MOVLW  3F
0EAB:  MOVWF  17
0EAC:  MOVLW  0A
0EAD:  MOVWF  19
0EAE:  BCF    0A.3
0EAF:  BCF    03.6
0EB0:  CALL   75E
0EB1:  BSF    0A.3
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
0EB2:  MOVLW  05
0EB3:  MOVWF  5E
....................             Time_clearRtcTime(); 
0EB4:  BCF    0A.3
0EB5:  CALL   7E6
0EB6:  BSF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0EB7:  BSF    03.6
0EB8:  CLRF   47
0EB9:  MOVLW  3F
0EBA:  MOVWF  46
0EBB:  BCF    0A.3
0EBC:  BCF    03.6
0EBD:  CALL   54E
0EBE:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0EBF:  BSF    03.6
0EC0:  CLRF   18
0EC1:  MOVLW  3F
0EC2:  MOVWF  17
0EC3:  CLRF   19
0EC4:  BCF    03.6
0EC5:  CALL   000
....................             rtos_enable(Task_checkIfMenuButtonIsHeld); 
0EC6:  BCF    29.7
....................             break; 
0EC7:  GOTO   6DE
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(PIN_BUTTON_START) && input(PIN_BUTTON_MENU)) { 
0EC8:  BSF    03.5
0EC9:  BSF    06.1
0ECA:  BCF    03.5
0ECB:  BTFSS  06.1
0ECC:  GOTO   6DE
0ECD:  BSF    03.5
0ECE:  BSF    06.0
0ECF:  BCF    03.5
0ED0:  BTFSS  06.0
0ED1:  GOTO   6DE
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
0ED2:  BSF    03.6
0ED3:  CLRF   18
0ED4:  MOVLW  3F
0ED5:  MOVWF  17
0ED6:  BCF    03.6
0ED7:  MOVF   5E,W
0ED8:  BSF    03.6
0ED9:  MOVWF  19
0EDA:  BCF    0A.3
0EDB:  BCF    03.6
0EDC:  CALL   75E
0EDD:  BSF    0A.3
....................             } 
....................             break; 
....................     } 
0EDE:  BCF    0A.3
0EDF:  BSF    0A.4
0EE0:  GOTO   047 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1044:  BCF    0A.4
1045:  BSF    0A.3
1046:  GOTO   27A
1047:  BSF    0A.4
1048:  BCF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1049:  MOVLW  05
104A:  SUBWF  56,W
104B:  ADDLW  FB
104C:  BTFSC  03.0
104D:  GOTO   6D3
104E:  ADDLW  05
104F:  GOTO   6EE
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
1050:  BSF    03.6
1051:  CLRF   18
1052:  MOVLW  3F
1053:  MOVWF  17
1054:  CLRF   19
1055:  BCF    0A.4
1056:  BSF    0A.3
1057:  BCF    03.6
1058:  CALL   000
1059:  BSF    0A.4
105A:  BCF    0A.3
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
105B:  BSF    03.5
105C:  BSF    06.1
105D:  BCF    03.5
105E:  BTFSS  06.1
105F:  GOTO   077
1060:  BTFSC  3E.3
1061:  GOTO   077
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
1062:  BSF    03.6
1063:  CLRF   18
1064:  MOVLW  3F
1065:  MOVWF  17
1066:  MOVLW  02
1067:  MOVWF  19
1068:  BCF    0A.4
1069:  BCF    03.6
106A:  CALL   75E
106B:  BSF    0A.4
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
106C:  BSF    03.6
106D:  CLRF   18
106E:  MOVLW  3F
106F:  MOVWF  17
1070:  BCF    0A.4
1071:  BCF    03.6
1072:  CALL   70B
1073:  BSF    0A.4
....................                 Time_clearRtcTime(); 
1074:  BCF    0A.4
1075:  CALL   7E6
1076:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1077:  BTFSC  3E.2
1078:  GOTO   086
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1079:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
107A:  BSF    03.6
107B:  CLRF   18
107C:  MOVLW  3F
107D:  MOVWF  17
107E:  MOVLW  06
107F:  MOVWF  19
1080:  BCF    0A.4
1081:  BCF    03.6
1082:  CALL   75E
1083:  BSF    0A.4
....................                 rtos_enable(Task_blinkDisplay); 
1084:  BCF    37.7
....................                 rtos_disable(Task_checkIfMenuButtonIsHeld); 
1085:  BSF    29.7
....................             } 
....................             break; 
1086:  GOTO   6D3
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................  
....................             if (showDisplayCompletely) { 
1087:  BTFSS  3E.0
1088:  GOTO   094
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1089:  BSF    03.6
108A:  CLRF   18
108B:  MOVLW  3F
108C:  MOVWF  17
108D:  BCF    0A.4
108E:  BSF    0A.3
108F:  BCF    03.6
1090:  CALL   6F0
1091:  BSF    0A.4
1092:  BCF    0A.3
....................             } else { 
1093:  GOTO   16F
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
1094:  BSF    03.6
1095:  CLRF   18
1096:  MOVLW  3F
1097:  MOVWF  17
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1170:  BSF    03.5
1171:  BCF    03.6
1172:  BSF    06.1
1173:  BCF    03.5
1174:  BTFSC  06.1
1175:  GOTO   1F9
....................                 while (!input(PIN_BUTTON_START)) { 
1176:  BSF    03.5
1177:  BSF    06.1
1178:  BCF    03.5
1179:  BTFSC  06.1
117A:  GOTO   1F9
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
117B:  BSF    03.6
117C:  CLRF   18
117D:  MOVLW  3F
117E:  MOVWF  17
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
11E2:  CLRF   18
11E3:  MOVLW  3F
11E4:  MOVWF  17
11E5:  BCF    0A.4
11E6:  BSF    0A.3
11E7:  BCF    03.6
11E8:  CALL   6F0
11E9:  BSF    0A.4
11EA:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
11EB:  MOVLW  02
11EC:  BSF    03.6
11ED:  MOVWF  17
11EE:  MOVLW  96
11EF:  MOVWF  18
11F0:  BCF    0A.4
11F1:  BCF    03.6
11F2:  CALL   7A7
11F3:  BSF    0A.4
11F4:  BSF    03.6
11F5:  DECFSZ 17,F
11F6:  GOTO   1EE
11F7:  BCF    03.6
11F8:  GOTO   176
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
11F9:  BTFSC  3E.4
11FA:  GOTO   210
11FB:  BSF    03.5
11FC:  BSF    06.0
11FD:  BCF    03.5
11FE:  BTFSS  06.0
11FF:  GOTO   210
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
1200:  MOVF   57,W
1201:  SUBLW  05
1202:  BTFSS  03.2
1203:  GOTO   206
....................                     numberOfMenuButtonHasBeenReleased++; 
1204:  INCF   5F,F
....................                 } else { 
1205:  GOTO   210
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
1206:  BSF    03.6
1207:  CLRF   18
1208:  MOVLW  3F
1209:  MOVWF  17
120A:  MOVLW  07
120B:  MOVWF  19
120C:  BCF    0A.4
120D:  BCF    03.6
120E:  CALL   75E
120F:  BSF    0A.4
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
1210:  MOVF   5F,W
1211:  SUBLW  01
1212:  BTFSC  03.0
1213:  GOTO   21F
....................                 numberOfMenuButtonHasBeenReleased = 0; 
1214:  CLRF   5F
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
1215:  BSF    03.6
1216:  CLRF   18
1217:  MOVLW  3F
1218:  MOVWF  17
1219:  MOVLW  07
121A:  MOVWF  19
121B:  BCF    0A.4
121C:  BCF    03.6
121D:  CALL   75E
121E:  BSF    0A.4
....................  
....................             } 
....................  
....................             break; 
121F:  GOTO   6D3
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
1220:  BTFSS  3E.0
1221:  GOTO   22D
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1222:  BSF    03.6
1223:  CLRF   18
1224:  MOVLW  3F
1225:  MOVWF  17
1226:  BCF    0A.4
1227:  BSF    0A.3
1228:  BCF    03.6
1229:  CALL   6F0
122A:  BSF    0A.4
122B:  BCF    0A.3
....................             } else { 
122C:  GOTO   30C
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
122D:  BSF    03.6
122E:  CLRF   18
122F:  MOVLW  3F
1230:  MOVWF  17
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
130D:  BSF    03.5
130E:  BCF    03.6
130F:  BSF    06.1
1310:  BCF    03.5
1311:  BTFSC  06.1
1312:  GOTO   398
....................                 while (!input(PIN_BUTTON_START)) { 
1313:  BSF    03.5
1314:  BSF    06.1
1315:  BCF    03.5
1316:  BTFSC  06.1
1317:  GOTO   398
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
1318:  BSF    03.6
1319:  CLRF   18
131A:  MOVLW  3F
131B:  MOVWF  17
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1380:  BSF    03.6
1381:  CLRF   18
1382:  MOVLW  3F
1383:  MOVWF  17
1384:  BCF    0A.4
1385:  BSF    0A.3
1386:  BCF    03.6
1387:  CALL   6F0
1388:  BSF    0A.4
1389:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
138A:  MOVLW  02
138B:  BSF    03.6
138C:  MOVWF  17
138D:  MOVLW  96
138E:  MOVWF  18
138F:  BCF    0A.4
1390:  BCF    03.6
1391:  CALL   7A7
1392:  BSF    0A.4
1393:  BSF    03.6
1394:  DECFSZ 17,F
1395:  GOTO   38D
1396:  BCF    03.6
1397:  GOTO   313
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
1398:  BTFSC  3E.4
1399:  GOTO   3FD
139A:  BSF    03.5
139B:  BSF    06.0
139C:  BCF    03.5
139D:  BTFSS  06.0
139E:  GOTO   3FD
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
139F:  BSF    03.6
13A0:  CLRF   18
13A1:  MOVLW  3F
13A2:  MOVWF  17
*
13E6:  MOVF   78,F
13E7:  BTFSC  03.2
13E8:  GOTO   3F4
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
13E9:  CLRF   18
13EA:  MOVLW  3F
13EB:  MOVWF  17
13EC:  MOVLW  08
13ED:  MOVWF  19
13EE:  BCF    0A.4
13EF:  BCF    03.6
13F0:  CALL   75E
13F1:  BSF    0A.4
....................                 } else { 
13F2:  GOTO   3FD
13F3:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
13F4:  CLRF   18
13F5:  MOVLW  3F
13F6:  MOVWF  17
13F7:  MOVLW  06
13F8:  MOVWF  19
13F9:  BCF    0A.4
13FA:  BCF    03.6
13FB:  CALL   75E
13FC:  BSF    0A.4
....................                 } 
....................             } 
....................             break; 
13FD:  GOTO   6D3
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
13FE:  BSF    03.6
13FF:  CLRF   18
1400:  MOVLW  3F
1401:  MOVWF  17
....................             if (input(PIN_BUTTON_START) && (!startStopButtonState)) { 
*
1434:  BSF    03.5
1435:  BSF    06.1
1436:  BCF    03.5
1437:  BTFSS  06.1
1438:  GOTO   50B
1439:  BTFSC  3E.3
143A:  GOTO   50B
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
143B:  BSF    03.6
143C:  CLRF   18
143D:  MOVLW  3F
143E:  MOVWF  17
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
*
150B:  BTFSC  3E.4
150C:  GOTO   64D
150D:  BSF    03.5
150E:  BSF    06.0
150F:  BCF    03.5
1510:  BTFSS  06.0
1511:  GOTO   64D
....................                 PolyoneDisplay_saveAlarm(&myPolyoneDisplay); 
1512:  BSF    03.6
1513:  CLRF   18
1514:  MOVLW  3F
1515:  MOVWF  17
....................                 PolyoneDisplay_saveFormat(&myPolyoneDisplay); 
*
15E0:  CLRF   18
15E1:  MOVLW  3F
15E2:  MOVWF  17
....................                 PolyoneDisplay_saveBrightness(&myPolyoneDisplay); 
*
160C:  BSF    03.6
160D:  CLRF   18
160E:  MOVLW  3F
160F:  MOVWF  17
....................                 Time_clearRtcTime(); 
*
1638:  BCF    0A.4
1639:  CALL   7E6
163A:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
163B:  BSF    03.6
163C:  CLRF   47
163D:  MOVLW  3F
163E:  MOVWF  46
163F:  BCF    0A.4
1640:  BCF    03.6
1641:  CALL   54E
1642:  BSF    0A.4
....................  
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_BRIGHTNESS); 
1643:  BSF    03.6
1644:  CLRF   18
1645:  MOVLW  3F
1646:  MOVWF  17
1647:  MOVLW  09
1648:  MOVWF  19
1649:  BCF    0A.4
164A:  BCF    03.6
164B:  CALL   75E
164C:  BSF    0A.4
....................             } 
....................             break; 
164D:  GOTO   6D3
....................  
....................         case STATE_SETTING_BRIGHTNESS: 
....................             if (showDisplayCompletely) { 
164E:  BTFSS  3E.0
164F:  GOTO   657
....................                 PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
1650:  BSF    03.6
1651:  CLRF   18
1652:  MOVLW  3F
1653:  MOVWF  17
1654:  BCF    03.6
1655:  CALL   000
....................             } else { 
1656:  GOTO   668
....................                 PolyoneDisplay_hideBrightness(); 
....................             } 
....................             if (!input(PIN_BUTTON_START)) { 
*
1668:  BSF    03.5
1669:  BSF    06.1
166A:  BCF    03.5
166B:  BTFSC  06.1
166C:  GOTO   6C0
....................                 while (!input(PIN_BUTTON_START)) { 
166D:  BSF    03.5
166E:  BSF    06.1
166F:  BCF    03.5
1670:  BTFSC  06.1
1671:  GOTO   6C0
....................                     PolyoneDisplay_increaseBrightness(&myPolyoneDisplay); 
1672:  BSF    03.6
1673:  CLRF   18
1674:  MOVLW  3F
1675:  MOVWF  17
....................                     PolyoneDisplay_showBrightness(&myPolyoneDisplay); 
*
16AC:  BSF    03.6
16AD:  CLRF   18
16AE:  MOVLW  3F
16AF:  MOVWF  17
16B0:  BCF    03.6
16B1:  CALL   000
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
16B2:  MOVLW  02
16B3:  BSF    03.6
16B4:  MOVWF  17
16B5:  MOVLW  96
16B6:  MOVWF  18
16B7:  BCF    0A.4
16B8:  BCF    03.6
16B9:  CALL   7A7
16BA:  BSF    0A.4
16BB:  BSF    03.6
16BC:  DECFSZ 17,F
16BD:  GOTO   6B5
16BE:  BCF    03.6
16BF:  GOTO   66D
....................                 } 
....................             } 
....................             if (!menuButtonState && input(PIN_BUTTON_MENU)) { 
16C0:  BTFSC  3E.4
16C1:  GOTO   6D3
16C2:  BSF    03.5
16C3:  BSF    06.0
16C4:  BCF    03.5
16C5:  BTFSS  06.0
16C6:  GOTO   6D3
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
16C7:  BSF    03.6
16C8:  CLRF   18
16C9:  MOVLW  3F
16CA:  MOVWF  17
16CB:  MOVLW  05
16CC:  MOVWF  19
16CD:  BCF    0A.4
16CE:  BCF    03.6
16CF:  CALL   75E
16D0:  BSF    0A.4
....................                 rtos_enable(Task_checkIfMenuButtonIsHeld); 
16D1:  BCF    29.7
....................                 rtos_disable(Task_blinkDisplay); 
16D2:  BSF    37.7
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(PIN_BUTTON_START); 
16D3:  BSF    03.5
16D4:  BSF    06.1
16D5:  BCF    03.5
16D6:  BCF    3E.3
16D7:  BTFSC  06.1
16D8:  BSF    3E.3
....................     menuButtonState = input(PIN_BUTTON_MENU); 
16D9:  BSF    03.5
16DA:  BSF    06.0
16DB:  BCF    03.5
16DC:  BCF    3E.4
16DD:  BTFSC  06.0
16DE:  BSF    3E.4
....................     rtos_yield(); 
16DF:  MOVLW  E6
16E0:  MOVWF  35
16E1:  MOVLW  16
16E2:  MOVWF  36
16E3:  BCF    0A.3
16E4:  BSF    0A.4
16E5:  GOTO   7EB
16E6:  MOVLW  44
16E7:  MOVWF  35
16E8:  MOVLW  10
16E9:  MOVWF  36
16EA:  BCF    0A.3
16EB:  BSF    0A.4
16EC:  GOTO   7EB
16ED:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(PIN_BUTTON_START)) { 
*
16F7:  BSF    03.5
16F8:  BSF    06.1
16F9:  BCF    03.5
16FA:  BTFSC  06.1
16FB:  GOTO   6FE
....................         nextUpButtonCounter++; 
16FC:  INCF   60,F
....................     } else { 
16FD:  GOTO   700
....................         nextUpButtonCounter = 0; 
16FE:  CLRF   60
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
16FF:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
1700:  MOVF   60,W
1701:  SUBLW  13
1702:  BTFSC  03.0
1703:  GOTO   706
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
1704:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
1705:  CLRF   60
....................     } 
....................     rtos_yield(); 
1706:  MOVLW  0D
1707:  MOVWF  27
1708:  MOVLW  17
1709:  MOVWF  28
170A:  BCF    0A.3
170B:  BSF    0A.4
170C:  GOTO   7EB
170D:  MOVLW  F7
170E:  MOVWF  27
170F:  MOVLW  16
1710:  MOVWF  28
1711:  BCF    0A.3
1712:  BSF    0A.4
1713:  GOTO   7EB
1714:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(PIN_BUTTON_MENU)) { 
1715:  BSF    03.5
1716:  BSF    06.0
1717:  BCF    03.5
1718:  BTFSC  06.0
1719:  GOTO   71C
....................         menuButtonCounter++; 
171A:  INCF   61,F
....................     } else { 
171B:  GOTO   71E
....................         menuButtonCounter = 0; 
171C:  CLRF   61
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
171D:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
171E:  MOVF   61,W
171F:  SUBLW  0C
1720:  BTFSC  03.0
1721:  GOTO   724
....................         buttonStateMenu = BUTTON_STATE_HELD; 
1722:  BCF    3E.2
....................         menuButtonCounter = 0; 
1723:  CLRF   61
....................     } 
....................     rtos_yield(); 
1724:  MOVLW  2B
1725:  MOVWF  2E
1726:  MOVLW  17
1727:  MOVWF  2F
1728:  BCF    0A.3
1729:  BSF    0A.4
172A:  GOTO   7EB
172B:  MOVLW  15
172C:  MOVWF  2E
172D:  MOVLW  17
172E:  MOVWF  2F
172F:  BCF    0A.3
1730:  BSF    0A.4
1731:  GOTO   7EB
1732:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
*
07ED:  MOVLW  01
07EE:  XORWF  3E,F
....................     rtos_yield(); 
07EF:  MOVLW  F6
07F0:  MOVWF  3C
07F1:  MOVLW  07
07F2:  MOVWF  3D
07F3:  BCF    0A.3
07F4:  BSF    0A.4
07F5:  GOTO   7EB
07F6:  MOVLW  ED
07F7:  MOVWF  3C
07F8:  MOVLW  07
07F9:  MOVWF  3D
07FA:  BCF    0A.3
07FB:  BSF    0A.4
07FC:  GOTO   7EB
07FD:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
*
1733:  MOVLW  00
1734:  MOVWF  78
1735:  IORLW  06
1736:  MOVWF  12
1737:  MOVLW  FF
1738:  BSF    03.5
1739:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
173A:  BCF    03.5
173B:  BCF    20.2
173C:  MOVF   20,W
173D:  BSF    03.5
173E:  MOVWF  07
173F:  BCF    03.5
1740:  BCF    07.2
1741:  MOVLW  0E
1742:  MOVWF  17
1743:  BSF    03.5
1744:  CLRF   1B
1745:  CLRF   1C
1746:  MOVLW  01
1747:  MOVWF  1D
....................  
....................     delay_ms(500); 
1748:  MOVLW  02
1749:  BCF    03.5
174A:  MOVWF  62
174B:  MOVLW  FA
174C:  BSF    03.6
174D:  MOVWF  18
174E:  BCF    0A.4
174F:  BCF    03.6
1750:  CALL   7A7
1751:  BSF    0A.4
1752:  DECFSZ 62,F
1753:  GOTO   74B
....................     port_b_pullups(0xFF); 
1754:  MOVLW  FF
1755:  BSF    03.5
1756:  MOVWF  15
1757:  BCF    01.7
....................     WPUB = 0xFF; 
1758:  MOVWF  15
1759:  BCF    03.5
175A:  BCF    0A.3
175B:  BSF    0A.4
175C:  GOTO   77C (RETURN)
.................... } 
....................  
.................... void turnOnBuzzer(void) { 
....................     output_high(PIN_BUZZER); 
*
0DF6:  BCF    20.5
0DF7:  MOVF   20,W
0DF8:  BSF    03.5
0DF9:  MOVWF  07
0DFA:  BCF    03.5
0DFB:  BSF    07.5
....................     delay_ms(200); 
0DFC:  MOVLW  C8
0DFD:  BSF    03.6
0DFE:  MOVWF  18
0DFF:  BCF    0A.3
0E00:  BCF    03.6
0E01:  CALL   7A7
0E02:  BSF    0A.3
....................     output_low(PIN_BUZZER); 
0E03:  BCF    20.5
0E04:  MOVF   20,W
0E05:  BSF    03.5
0E06:  MOVWF  07
0E07:  BCF    03.5
0E08:  BCF    07.5
....................     delay_ms(100); 
0E09:  MOVLW  64
0E0A:  BSF    03.6
0E0B:  MOVWF  18
0E0C:  BCF    0A.3
0E0D:  BCF    03.6
0E0E:  CALL   7A7
0E0F:  BSF    0A.3
....................     output_high(PIN_BUZZER); 
0E10:  BCF    20.5
0E11:  MOVF   20,W
0E12:  BSF    03.5
0E13:  MOVWF  07
0E14:  BCF    03.5
0E15:  BSF    07.5
....................     delay_ms(200); 
0E16:  MOVLW  C8
0E17:  BSF    03.6
0E18:  MOVWF  18
0E19:  BCF    0A.3
0E1A:  BCF    03.6
0E1B:  CALL   7A7
0E1C:  BSF    0A.3
....................     output_low(PIN_BUZZER); 
0E1D:  BCF    20.5
0E1E:  MOVF   20,W
0E1F:  BSF    03.5
0E20:  MOVWF  07
0E21:  BCF    03.5
0E22:  BCF    07.5
.................... } 

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
