CCS PCM C Compiler, Version 5.015, 5967               08-Nov-17 12:14

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   4191 words (51%)
                           Largest free fragment is 2048
               RAM used:   74 (20%) at main() level
                           315 (86%) worst case
               Stack used: 7 locations (2 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  75
0016:  RETLW  17
0017:  RETLW  04
0018:  RETLW  87
0019:  RETLW  64
001A:  RETLW  96
001B:  RETLW  C3
001C:  RETLW  35
001D:  RETLW  35
001E:  RETLW  97
001F:  BCF    0A.0
0020:  BCF    0A.1
0021:  BCF    0A.2
0022:  ADDWF  02,F
0023:  RETLW  22
0024:  RETLW  00
0025:  RETLW  29
0026:  RETLW  00
0027:  RETLW  30
0028:  RETLW  00
0029:  RETLW  37
002A:  RETLW  00
002B:  BSF    03.5
002C:  BSF    03.6
002D:  MOVF   35,W
002E:  CLRF   78
002F:  SUBWF  34,W
0030:  BTFSC  03.0
0031:  GOTO   035
0032:  MOVF   34,W
0033:  MOVWF  77
0034:  GOTO   041
0035:  CLRF   77
0036:  MOVLW  08
0037:  MOVWF  36
0038:  RLF    34,F
0039:  RLF    77,F
003A:  MOVF   35,W
003B:  SUBWF  77,W
003C:  BTFSC  03.0
003D:  MOVWF  77
003E:  RLF    78,F
003F:  DECFSZ 36,F
0040:  GOTO   038
0041:  BCF    03.5
0042:  BCF    03.6
0043:  RETURN
*
015D:  CLRF   77
015E:  CLRF   78
015F:  MOVF   19,W
0160:  BCF    03.0
0161:  BTFSC  1A.0
0162:  ADDWF  77,F
0163:  RRF    77,F
0164:  RRF    78,F
0165:  BTFSC  1A.1
0166:  ADDWF  77,F
0167:  RRF    77,F
0168:  RRF    78,F
0169:  BTFSC  1A.2
016A:  ADDWF  77,F
016B:  RRF    77,F
016C:  RRF    78,F
016D:  BTFSC  1A.3
016E:  ADDWF  77,F
016F:  RRF    77,F
0170:  RRF    78,F
0171:  BTFSC  1A.4
0172:  ADDWF  77,F
0173:  RRF    77,F
0174:  RRF    78,F
0175:  BTFSC  1A.5
0176:  ADDWF  77,F
0177:  RRF    77,F
0178:  RRF    78,F
0179:  BTFSC  1A.6
017A:  ADDWF  77,F
017B:  RRF    77,F
017C:  RRF    78,F
017D:  BTFSC  1A.7
017E:  ADDWF  77,F
017F:  RRF    77,F
0180:  RRF    78,F
*
0187:  MOVLW  20
0188:  BSF    03.5
0189:  BSF    03.6
018A:  MOVWF  3A
018B:  CLRF   36
018C:  CLRF   37
018D:  CLRF   38
018E:  CLRF   39
018F:  MOVF   31,W
0190:  MOVWF  7A
0191:  MOVF   30,W
0192:  MOVWF  79
0193:  MOVF   2F,W
0194:  MOVWF  78
0195:  MOVF   2E,W
0196:  MOVWF  77
0197:  BCF    03.0
0198:  BTFSS  77.0
0199:  GOTO   1A8
019A:  MOVF   32,W
019B:  ADDWF  36,F
019C:  MOVF   33,W
019D:  BTFSC  03.0
019E:  INCFSZ 33,W
019F:  ADDWF  37,F
01A0:  MOVF   34,W
01A1:  BTFSC  03.0
01A2:  INCFSZ 34,W
01A3:  ADDWF  38,F
01A4:  MOVF   35,W
01A5:  BTFSC  03.0
01A6:  INCFSZ 35,W
01A7:  ADDWF  39,F
01A8:  RRF    39,F
01A9:  RRF    38,F
01AA:  RRF    37,F
01AB:  RRF    36,F
01AC:  RRF    7A,F
01AD:  RRF    79,F
01AE:  RRF    78,F
01AF:  RRF    77,F
01B0:  DECFSZ 3A,F
01B1:  GOTO   197
01B2:  BCF    03.5
01B3:  BCF    03.6
01B4:  RETURN
*
0252:  BTFSC  03.1
0253:  GOTO   257
0254:  MOVLW  B2
0255:  MOVWF  04
0256:  BSF    03.7
0257:  BSF    03.5
0258:  BSF    03.6
0259:  MOVF   2D,W
025A:  XORWF  31,W
025B:  ANDLW  80
025C:  MOVWF  37
025D:  BTFSS  2D.7
025E:  GOTO   26A
025F:  COMF   2A,F
0260:  COMF   2B,F
0261:  COMF   2C,F
0262:  COMF   2D,F
0263:  INCF   2A,F
0264:  BTFSC  03.2
0265:  INCF   2B,F
0266:  BTFSC  03.2
0267:  INCF   2C,F
0268:  BTFSC  03.2
0269:  INCF   2D,F
026A:  BTFSS  31.7
026B:  GOTO   277
026C:  COMF   2E,F
026D:  COMF   2F,F
026E:  COMF   30,F
026F:  COMF   31,F
0270:  INCF   2E,F
0271:  BTFSC  03.2
0272:  INCF   2F,F
0273:  BTFSC  03.2
0274:  INCF   30,F
0275:  BTFSC  03.2
0276:  INCF   31,F
0277:  CLRF   77
0278:  CLRF   78
0279:  CLRF   79
027A:  CLRF   7A
027B:  CLRF   32
027C:  CLRF   33
027D:  CLRF   34
027E:  CLRF   35
027F:  MOVF   31,W
0280:  IORWF  30,W
0281:  IORWF  2F,W
0282:  IORWF  2E,W
0283:  BTFSC  03.2
0284:  GOTO   2B5
0285:  MOVLW  20
0286:  MOVWF  36
0287:  BCF    03.0
0288:  RLF    2A,F
0289:  RLF    2B,F
028A:  RLF    2C,F
028B:  RLF    2D,F
028C:  RLF    32,F
028D:  RLF    33,F
028E:  RLF    34,F
028F:  RLF    35,F
0290:  MOVF   31,W
0291:  SUBWF  35,W
0292:  BTFSS  03.2
0293:  GOTO   29E
0294:  MOVF   30,W
0295:  SUBWF  34,W
0296:  BTFSS  03.2
0297:  GOTO   29E
0298:  MOVF   2F,W
0299:  SUBWF  33,W
029A:  BTFSS  03.2
029B:  GOTO   29E
029C:  MOVF   2E,W
029D:  SUBWF  32,W
029E:  BTFSS  03.0
029F:  GOTO   2AF
02A0:  MOVF   2E,W
02A1:  SUBWF  32,F
02A2:  MOVF   2F,W
02A3:  BTFSS  03.0
02A4:  INCFSZ 2F,W
02A5:  SUBWF  33,F
02A6:  MOVF   30,W
02A7:  BTFSS  03.0
02A8:  INCFSZ 30,W
02A9:  SUBWF  34,F
02AA:  MOVF   31,W
02AB:  BTFSS  03.0
02AC:  INCFSZ 31,W
02AD:  SUBWF  35,F
02AE:  BSF    03.0
02AF:  RLF    77,F
02B0:  RLF    78,F
02B1:  RLF    79,F
02B2:  RLF    7A,F
02B3:  DECFSZ 36,F
02B4:  GOTO   287
02B5:  BTFSS  37.7
02B6:  GOTO   2C2
02B7:  COMF   77,F
02B8:  COMF   78,F
02B9:  COMF   79,F
02BA:  COMF   7A,F
02BB:  INCF   77,F
02BC:  BTFSC  03.2
02BD:  INCF   78,F
02BE:  BTFSC  03.2
02BF:  INCF   79,F
02C0:  BTFSC  03.2
02C1:  INCF   7A,F
02C2:  MOVF   32,W
02C3:  MOVWF  00
02C4:  INCF   04,F
02C5:  MOVF   33,W
02C6:  MOVWF  00
02C7:  INCF   04,F
02C8:  MOVF   34,W
02C9:  MOVWF  00
02CA:  INCF   04,F
02CB:  MOVF   35,W
02CC:  MOVWF  00
02CD:  BCF    03.5
02CE:  BCF    03.6
02CF:  RETURN
*
059C:  CLRF   78
059D:  CLRF   79
059E:  CLRF   77
059F:  CLRF   7A
05A0:  BSF    03.6
05A1:  MOVF   52,W
05A2:  BTFSS  03.2
05A3:  GOTO   5A7
05A4:  MOVF   51,W
05A5:  BTFSC  03.2
05A6:  GOTO   5C1
05A7:  MOVLW  10
05A8:  MOVWF  53
05A9:  BCF    03.0
05AA:  RLF    4F,F
05AB:  RLF    50,F
05AC:  RLF    77,F
05AD:  RLF    7A,F
05AE:  MOVF   52,W
05AF:  SUBWF  7A,W
05B0:  BTFSS  03.2
05B1:  GOTO   5B4
05B2:  MOVF   51,W
05B3:  SUBWF  77,W
05B4:  BTFSS  03.0
05B5:  GOTO   5BD
05B6:  MOVF   51,W
05B7:  SUBWF  77,F
05B8:  BTFSS  03.0
05B9:  DECF   7A,F
05BA:  MOVF   52,W
05BB:  SUBWF  7A,F
05BC:  BSF    03.0
05BD:  RLF    78,F
05BE:  RLF    79,F
05BF:  DECFSZ 53,F
05C0:  GOTO   5A9
05C1:  BCF    03.6
05C2:  RETURN
*
0F3A:  BSF    0A.0
0F3B:  BSF    0A.1
0F3C:  BSF    0A.2
0F3D:  ADDWF  02,F
0F3E:  GOTO   323
0F3F:  GOTO   48F
0F40:  GOTO   36F
0F41:  GOTO   13C
0F42:  GOTO   490
0F43:  GOTO   4DA
0F44:  GOTO   71F
0F45:  GOTO   522
0F46:  GOTO   621
0F47:  GOTO   71F
0F48:  GOTO   4CD
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #use delay(clock=20M) 
*
0853:  MOVLW  24
0854:  MOVWF  04
0855:  BSF    03.7
0856:  MOVF   00,W
0857:  BTFSC  03.2
0858:  GOTO   066
0859:  MOVLW  06
085A:  MOVWF  78
085B:  CLRF   77
085C:  DECFSZ 77,F
085D:  GOTO   05C
085E:  DECFSZ 78,F
085F:  GOTO   05B
0860:  MOVLW  7B
0861:  MOVWF  77
0862:  DECFSZ 77,F
0863:  GOTO   062
0864:  DECFSZ 00,F
0865:  GOTO   059
0866:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0044:  MOVLW  08
0045:  MOVWF  78
0046:  NOP
0047:  BCF    07.3
0048:  BCF    20.3
0049:  MOVF   20,W
004A:  BSF    03.5
004B:  MOVWF  07
004C:  NOP
004D:  BSF    03.6
004E:  RLF    17,F
004F:  BCF    03.5
0050:  BCF    03.6
0051:  BCF    07.4
0052:  BTFSS  03.0
0053:  GOTO   05A
0054:  BSF    20.4
0055:  MOVF   20,W
0056:  BSF    03.5
0057:  MOVWF  07
0058:  GOTO   05E
0059:  BCF    03.5
005A:  BCF    20.4
005B:  MOVF   20,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  NOP
005F:  BCF    03.5
0060:  BSF    20.3
0061:  MOVF   20,W
0062:  BSF    03.5
0063:  MOVWF  07
0064:  BCF    03.5
0065:  BTFSS  07.3
0066:  GOTO   065
0067:  DECFSZ 78,F
0068:  GOTO   046
0069:  NOP
006A:  BCF    07.3
006B:  BCF    20.3
006C:  MOVF   20,W
006D:  BSF    03.5
006E:  MOVWF  07
006F:  NOP
0070:  BCF    03.5
0071:  BSF    20.4
0072:  MOVF   20,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  NOP
0076:  NOP
0077:  BCF    03.5
0078:  BSF    20.3
0079:  MOVF   20,W
007A:  BSF    03.5
007B:  MOVWF  07
007C:  BCF    03.5
007D:  BTFSS  07.3
007E:  GOTO   07D
007F:  CLRF   78
0080:  NOP
0081:  BTFSC  07.4
0082:  BSF    78.0
0083:  BCF    07.3
0084:  BCF    20.3
0085:  MOVF   20,W
0086:  BSF    03.5
0087:  MOVWF  07
0088:  BCF    03.5
0089:  BCF    07.4
008A:  BCF    20.4
008B:  MOVF   20,W
008C:  BSF    03.5
008D:  MOVWF  07
008E:  BCF    03.5
008F:  RETURN
*
00DB:  MOVLW  08
00DC:  BSF    03.5
00DD:  BSF    03.6
00DE:  MOVWF  18
00DF:  MOVF   77,W
00E0:  MOVWF  19
00E1:  BCF    03.5
00E2:  BCF    03.6
00E3:  BSF    20.4
00E4:  MOVF   20,W
00E5:  BSF    03.5
00E6:  MOVWF  07
00E7:  NOP
00E8:  BCF    03.5
00E9:  BSF    20.3
00EA:  MOVF   20,W
00EB:  BSF    03.5
00EC:  MOVWF  07
00ED:  BCF    03.5
00EE:  BTFSS  07.3
00EF:  GOTO   0EE
00F0:  BTFSC  07.4
00F1:  BSF    03.0
00F2:  BTFSS  07.4
00F3:  BCF    03.0
00F4:  RLF    78,F
00F5:  NOP
00F6:  BCF    20.3
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
00FA:  BCF    03.5
00FB:  BCF    07.3
00FC:  BSF    03.5
00FD:  BSF    03.6
00FE:  DECFSZ 18,F
00FF:  GOTO   0E1
0100:  BCF    03.5
0101:  BCF    03.6
0102:  BSF    20.4
0103:  MOVF   20,W
0104:  BSF    03.5
0105:  MOVWF  07
0106:  NOP
0107:  BCF    03.5
0108:  BCF    07.4
0109:  BSF    03.5
010A:  BSF    03.6
010B:  MOVF   19,W
010C:  BTFSC  03.2
010D:  GOTO   115
010E:  BCF    03.5
010F:  BCF    03.6
0110:  BCF    20.4
0111:  MOVF   20,W
0112:  BSF    03.5
0113:  MOVWF  07
0114:  BSF    03.6
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BSF    20.3
0119:  MOVF   20,W
011A:  BSF    03.5
011B:  MOVWF  07
011C:  BCF    03.5
011D:  BTFSS  07.3
011E:  GOTO   11D
011F:  NOP
0120:  BCF    07.3
0121:  BCF    20.3
0122:  MOVF   20,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  NOP
0126:  BCF    03.5
0127:  BCF    07.4
0128:  BCF    20.4
0129:  MOVF   20,W
012A:  BSF    03.5
012B:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
014C:  BSF    03.5
014D:  BSF    03.6
014E:  MOVF   15,W
014F:  ANDLW  0F
0150:  MOVWF  16
0151:  MOVF   15,W
0152:  ANDLW  F0
0153:  MOVWF  77
0154:  SWAPF  77,F
0155:  MOVLW  0F
0156:  ANDWF  77,F
0157:  MOVF   77,W
0158:  MOVWF  18
0159:  MOVF   18,W
015A:  MOVWF  19
015B:  MOVLW  0A
015C:  MOVWF  1A
*
0181:  MOVF   78,W
0182:  ADDWF  16,W
0183:  MOVWF  78
0184:  BCF    03.5
0185:  BCF    03.6
0186:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
04D2:  BSF    03.6
04D3:  MOVF   6B,W
04D4:  BSF    03.5
04D5:  MOVWF  34
04D6:  MOVLW  0A
04D7:  MOVWF  35
04D8:  BCF    03.5
04D9:  BCF    03.6
04DA:  CALL   02B
04DB:  SWAPF  78,W
04DC:  MOVWF  77
04DD:  MOVLW  F0
04DE:  ANDWF  77,F
04DF:  MOVF   77,W
04E0:  ANDLW  F0
04E1:  BSF    03.6
04E2:  MOVWF  6C
04E3:  MOVF   6B,W
04E4:  BSF    03.5
04E5:  MOVWF  34
04E6:  MOVLW  0A
04E7:  MOVWF  35
04E8:  BCF    03.5
04E9:  BCF    03.6
04EA:  CALL   02B
04EB:  MOVF   77,W
04EC:  ANDLW  0F
04ED:  BSF    03.6
04EE:  IORWF  6C,W
04EF:  MOVWF  78
04F0:  BCF    03.6
04F1:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
0090:  BSF    03.5
0091:  BSF    03.6
0092:  CLRF   16
....................     int value = 0; 
....................     I2C_start(); 
0093:  BCF    03.5
0094:  BCF    03.6
0095:  BSF    20.4
0096:  MOVF   20,W
0097:  BSF    03.5
0098:  MOVWF  07
0099:  NOP
009A:  BCF    03.5
009B:  BSF    20.3
009C:  MOVF   20,W
009D:  BSF    03.5
009E:  MOVWF  07
009F:  NOP
00A0:  BCF    03.5
00A1:  BCF    07.4
00A2:  BCF    20.4
00A3:  MOVF   20,W
00A4:  BSF    03.5
00A5:  MOVWF  07
00A6:  NOP
00A7:  BCF    03.5
00A8:  BCF    07.3
00A9:  BCF    20.3
00AA:  MOVF   20,W
00AB:  BSF    03.5
00AC:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
00AD:  MOVLW  D0
00AE:  BSF    03.6
00AF:  MOVWF  17
00B0:  BCF    03.5
00B1:  BCF    03.6
00B2:  CALL   044
....................     I2C_write(address); 
00B3:  BSF    03.5
00B4:  BSF    03.6
00B5:  MOVF   15,W
00B6:  MOVWF  17
00B7:  BCF    03.5
00B8:  BCF    03.6
00B9:  CALL   044
....................     I2C_start(); 
00BA:  BSF    20.4
00BB:  MOVF   20,W
00BC:  BSF    03.5
00BD:  MOVWF  07
00BE:  NOP
00BF:  BCF    03.5
00C0:  BSF    20.3
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  NOP
00C5:  BCF    03.5
00C6:  BTFSS  07.3
00C7:  GOTO   0C6
00C8:  BCF    07.4
00C9:  BCF    20.4
00CA:  MOVF   20,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  NOP
00CE:  BCF    03.5
00CF:  BCF    07.3
00D0:  BCF    20.3
00D1:  MOVF   20,W
00D2:  BSF    03.5
00D3:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
00D4:  MOVLW  D1
00D5:  BSF    03.6
00D6:  MOVWF  17
00D7:  BCF    03.5
00D8:  BCF    03.6
00D9:  CALL   044
....................     value = I2C_read(0); 
00DA:  CLRF   77
*
012C:  MOVF   78,W
012D:  BSF    03.6
012E:  MOVWF  16
....................     I2C_stop(); 
012F:  BCF    03.5
0130:  BCF    03.6
0131:  BCF    20.4
0132:  MOVF   20,W
0133:  BSF    03.5
0134:  MOVWF  07
0135:  NOP
0136:  BCF    03.5
0137:  BSF    20.3
0138:  MOVF   20,W
0139:  BSF    03.5
013A:  MOVWF  07
013B:  BCF    03.5
013C:  BTFSS  07.3
013D:  GOTO   13C
013E:  NOP
013F:  GOTO   140
0140:  NOP
0141:  BSF    20.4
0142:  MOVF   20,W
0143:  BSF    03.5
0144:  MOVWF  07
0145:  NOP
....................     return value; 
0146:  BSF    03.6
0147:  MOVF   16,W
0148:  MOVWF  78
0149:  BCF    03.5
014A:  BCF    03.6
014B:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
04F2:  BSF    20.4
04F3:  MOVF   20,W
04F4:  BSF    03.5
04F5:  MOVWF  07
04F6:  NOP
04F7:  BCF    03.5
04F8:  BSF    20.3
04F9:  MOVF   20,W
04FA:  BSF    03.5
04FB:  MOVWF  07
04FC:  NOP
04FD:  BCF    03.5
04FE:  BCF    07.4
04FF:  BCF    20.4
0500:  MOVF   20,W
0501:  BSF    03.5
0502:  MOVWF  07
0503:  NOP
0504:  BCF    03.5
0505:  BCF    07.3
0506:  BCF    20.3
0507:  MOVF   20,W
0508:  BSF    03.5
0509:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
050A:  MOVLW  D0
050B:  BSF    03.6
050C:  MOVWF  17
050D:  BCF    03.5
050E:  BCF    03.6
050F:  CALL   044
....................     I2C_write(address); 
0510:  BSF    03.6
0511:  MOVF   6C,W
0512:  BSF    03.5
0513:  MOVWF  17
0514:  BCF    03.5
0515:  BCF    03.6
0516:  CALL   044
....................     I2C_write(value); 
0517:  BSF    03.6
0518:  MOVF   6D,W
0519:  BSF    03.5
051A:  MOVWF  17
051B:  BCF    03.5
051C:  BCF    03.6
051D:  CALL   044
....................     I2C_stop(); 
051E:  BCF    20.4
051F:  MOVF   20,W
0520:  BSF    03.5
0521:  MOVWF  07
0522:  NOP
0523:  BCF    03.5
0524:  BSF    20.3
0525:  MOVF   20,W
0526:  BSF    03.5
0527:  MOVWF  07
0528:  BCF    03.5
0529:  BTFSS  07.3
052A:  GOTO   529
052B:  NOP
052C:  GOTO   52D
052D:  NOP
052E:  BSF    20.4
052F:  MOVF   20,W
0530:  BSF    03.5
0531:  MOVWF  07
0532:  NOP
0533:  BCF    03.5
0534:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
02EC:  CLRF   15
02ED:  BCF    03.5
02EE:  BCF    03.6
02EF:  CALL   090
02F0:  MOVF   78,W
02F1:  BSF    03.5
02F2:  BSF    03.6
02F3:  MOVWF  11
....................     sec = bcd_to_decimal(sec); 
02F4:  MOVF   11,W
02F5:  MOVWF  15
02F6:  BCF    03.5
02F7:  BCF    03.6
02F8:  CALL   14C
02F9:  MOVF   78,W
02FA:  BSF    03.5
02FB:  BSF    03.6
02FC:  MOVWF  11
....................     min = DS3231_Read(minuteREG); 
02FD:  MOVLW  01
02FE:  MOVWF  15
02FF:  BCF    03.5
0300:  BCF    03.6
0301:  CALL   090
0302:  MOVF   78,W
0303:  BSF    03.5
0304:  BSF    03.6
0305:  MOVWF  10
....................     min = bcd_to_decimal(min); 
0306:  MOVF   10,W
0307:  MOVWF  15
0308:  BCF    03.5
0309:  BCF    03.6
030A:  CALL   14C
030B:  MOVF   78,W
030C:  BSF    03.5
030D:  BSF    03.6
030E:  MOVWF  10
....................     hora = (0x3F & DS3231_Read(hourREG)); 
030F:  MOVLW  02
0310:  MOVWF  15
0311:  BCF    03.5
0312:  BCF    03.6
0313:  CALL   090
0314:  MOVF   78,W
0315:  ANDLW  3F
0316:  BSF    03.6
0317:  MOVWF  6F
....................     hora = bcd_to_decimal(hora); 
0318:  MOVF   6F,W
0319:  BSF    03.5
031A:  MOVWF  15
031B:  BCF    03.5
031C:  BCF    03.6
031D:  CALL   14C
031E:  MOVF   78,W
031F:  BSF    03.6
0320:  MOVWF  6F
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
0535:  BSF    03.6
0536:  MOVF   6A,W
0537:  MOVWF  6B
0538:  BCF    03.6
0539:  CALL   4D2
053A:  MOVF   78,W
053B:  BSF    03.6
053C:  MOVWF  6B
053D:  CLRF   6C
053E:  MOVF   6B,W
053F:  MOVWF  6D
0540:  BCF    03.6
0541:  CALL   4F2
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0542:  BSF    03.6
0543:  MOVF   69,W
0544:  MOVWF  6B
0545:  BCF    03.6
0546:  CALL   4D2
0547:  MOVF   78,W
0548:  BSF    03.6
0549:  MOVWF  6B
054A:  MOVLW  01
054B:  MOVWF  6C
054C:  MOVF   6B,W
054D:  MOVWF  6D
054E:  BCF    03.6
054F:  CALL   4F2
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0550:  BSF    03.6
0551:  MOVF   68,W
0552:  MOVWF  6B
0553:  BCF    03.6
0554:  CALL   4D2
0555:  MOVF   78,W
0556:  ANDLW  3F
0557:  BSF    03.6
0558:  MOVWF  6B
0559:  MOVLW  02
055A:  MOVWF  6C
055B:  MOVF   6B,W
055C:  MOVWF  6D
055D:  BCF    03.6
055E:  CALL   4F2
055F:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05CA:  CLRF   52
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05CB:  CLRF   52
05CC:  MOVF   51,W
05CD:  SUBWF  52,W
05CE:  BTFSC  03.0
05CF:  GOTO   5D9
....................         array[i] = 0; 
05D0:  MOVF   52,W
05D1:  ADDWF  4F,W
05D2:  MOVWF  04
05D3:  BCF    03.7
05D4:  BTFSC  50.0
05D5:  BSF    03.7
05D6:  CLRF   00
05D7:  INCF   52,F
05D8:  GOTO   5CC
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05C3:  BSF    03.6
05C4:  MOVF   4B,W
05C5:  MOVWF  50
05C6:  MOVF   4A,W
05C7:  MOVWF  4F
05C8:  MOVF   4C,W
05C9:  MOVWF  51
....................  
....................     int index = 0; 
*
05D9:  CLRF   4D
....................     while (number > 0) { 
05DA:  MOVF   48,F
05DB:  BTFSS  03.2
05DC:  GOTO   5E0
05DD:  MOVF   49,F
05DE:  BTFSC  03.2
05DF:  GOTO   604
....................         int digit = number % 10; 
05E0:  MOVF   49,W
05E1:  MOVWF  50
05E2:  MOVF   48,W
05E3:  MOVWF  4F
05E4:  CLRF   52
05E5:  MOVLW  0A
05E6:  MOVWF  51
05E7:  BCF    03.6
05E8:  CALL   59C
05E9:  MOVF   77,W
05EA:  BSF    03.6
05EB:  MOVWF  4E
....................         digits[index] = digit; 
05EC:  MOVF   4D,W
05ED:  ADDWF  4A,W
05EE:  MOVWF  04
05EF:  BCF    03.7
05F0:  BTFSC  4B.0
05F1:  BSF    03.7
05F2:  MOVF   4E,W
05F3:  MOVWF  00
....................         index++; 
05F4:  INCF   4D,F
....................         number /= 10; 
05F5:  MOVF   49,W
05F6:  MOVWF  50
05F7:  MOVF   48,W
05F8:  MOVWF  4F
05F9:  CLRF   52
05FA:  MOVLW  0A
05FB:  MOVWF  51
05FC:  BCF    03.6
05FD:  CALL   59C
05FE:  MOVF   79,W
05FF:  BSF    03.6
0600:  MOVWF  49
0601:  MOVF   78,W
0602:  MOVWF  48
0603:  GOTO   5DA
....................     } 
0604:  BCF    03.6
0605:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     Format format; 
....................     __EEADDRESS__ formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
0328:  MOVF   18,W
0329:  MOVWF  1B
....................     time.minute = minute; 
032A:  MOVF   19,W
032B:  MOVWF  1C
....................     time.second = second; 
032C:  MOVF   1A,W
032D:  MOVWF  1D
....................     return time; 
032E:  MOVLW  9B
032F:  MOVWF  78
0330:  MOVLW  01
0331:  MOVWF  79
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
02E8:  CLRF   6F
02E9:  BSF    03.5
02EA:  CLRF   10
02EB:  CLRF   11
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0321:  MOVF   6F,W
0322:  BSF    03.5
0323:  MOVWF  18
0324:  MOVF   10,W
0325:  MOVWF  19
0326:  MOVF   11,W
0327:  MOVWF  1A
*
0332:  MOVF   79,W
0333:  MOVWF  7A
0334:  MOVF   78,W
0335:  MOVWF  12
0336:  MOVF   7A,W
0337:  MOVWF  13
0338:  MOVLW  01
0339:  MOVWF  15
033A:  MOVLW  69
033B:  MOVWF  14
033C:  MOVLW  06
033D:  MOVWF  78
033E:  MOVF   12,W
033F:  MOVWF  04
0340:  BCF    03.7
0341:  BTFSC  13.0
0342:  BSF    03.7
0343:  MOVF   00,W
0344:  MOVWF  77
0345:  MOVF   14,W
0346:  MOVWF  04
0347:  BCF    03.7
0348:  BTFSC  15.0
0349:  BSF    03.7
034A:  MOVF   77,W
034B:  MOVWF  00
034C:  INCF   14,F
034D:  BTFSC  03.2
034E:  INCF   15,F
034F:  INCF   12,F
0350:  BTFSC  03.2
0351:  INCF   13,F
0352:  DECFSZ 78,F
0353:  GOTO   33E
....................  
....................     return currentTime; 
0354:  MOVLW  69
0355:  MOVWF  78
0356:  MOVLW  01
0357:  MOVWF  79
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
0606:  BSF    03.6
0607:  MOVF   3D,W
0608:  MOVWF  04
0609:  BCF    03.7
060A:  BTFSC  3E.0
060B:  BSF    03.7
060C:  MOVF   00,W
060D:  MOVWF  46
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
060E:  MOVF   3F,F
060F:  BTFSC  03.2
0610:  GOTO   638
....................         if (timePtr->format == FORMAT_12) { 
0611:  MOVLW  03
0612:  ADDWF  3D,W
0613:  MOVWF  04
0614:  BCF    03.7
0615:  BTFSC  3E.0
0616:  BSF    03.7
0617:  MOVF   00,W
0618:  ANDLW  01
0619:  SUBLW  01
061A:  BTFSS  03.2
061B:  GOTO   638
....................             if (timePtr->hour == 0) { 
061C:  MOVF   3D,W
061D:  MOVWF  04
061E:  BCF    03.7
061F:  BTFSC  3E.0
0620:  BSF    03.7
0621:  MOVF   00,F
0622:  BTFSS  03.2
0623:  GOTO   627
....................                 hour = 12; 
0624:  MOVLW  0C
0625:  MOVWF  46
....................             } else if (timePtr->hour > 12) { 
0626:  GOTO   638
0627:  MOVF   3D,W
0628:  MOVWF  04
0629:  BCF    03.7
062A:  BTFSC  3E.0
062B:  BSF    03.7
062C:  MOVF   00,W
062D:  SUBLW  0C
062E:  BTFSC  03.0
062F:  GOTO   638
....................                 hour = timePtr->hour - 12; 
0630:  MOVF   3D,W
0631:  MOVWF  04
0632:  BCF    03.7
0633:  BTFSC  3E.0
0634:  BSF    03.7
0635:  MOVLW  0C
0636:  SUBWF  00,W
0637:  MOVWF  46
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             getArraySize(newTimeInDigits.hour) 
....................             ); 
0638:  CLRF   49
0639:  MOVF   46,W
063A:  MOVWF  48
063B:  MOVLW  01
063C:  MOVWF  4B
063D:  MOVLW  40
063E:  MOVWF  4A
063F:  MOVLW  02
0640:  MOVWF  4C
0641:  BCF    03.6
0642:  CALL   5C3
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             getArraySize(newTimeInDigits.minute) 
....................             ); 
0643:  MOVLW  01
0644:  BSF    03.6
0645:  ADDWF  3D,W
0646:  MOVWF  04
0647:  BCF    03.7
0648:  BTFSC  3E.0
0649:  BSF    03.7
064A:  MOVF   00,W
064B:  MOVWF  47
064C:  CLRF   49
064D:  MOVF   47,W
064E:  MOVWF  48
064F:  MOVLW  01
0650:  MOVWF  4B
0651:  MOVLW  42
0652:  MOVWF  4A
0653:  MOVLW  02
0654:  MOVWF  4C
0655:  BCF    03.6
0656:  CALL   5C3
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             getArraySize(newTimeInDigits.second) 
....................             ); 
0657:  MOVLW  02
0658:  BSF    03.6
0659:  ADDWF  3D,W
065A:  MOVWF  04
065B:  BCF    03.7
065C:  BTFSC  3E.0
065D:  BSF    03.7
065E:  MOVF   00,W
065F:  MOVWF  47
0660:  CLRF   49
0661:  MOVF   47,W
0662:  MOVWF  48
0663:  MOVLW  01
0664:  MOVWF  4B
0665:  MOVLW  44
0666:  MOVWF  4A
0667:  MOVLW  02
0668:  MOVWF  4C
0669:  BCF    03.6
066A:  CALL   5C3
....................  
....................     return newTimeInDigits; 
066B:  MOVLW  40
066C:  MOVWF  78
066D:  MOVLW  01
066E:  MOVWF  79
066F:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
0C66:  MOVF   2B,W
0C67:  MOVWF  04
0C68:  BCF    03.7
0C69:  BTFSC  2C.0
0C6A:  BSF    03.7
0C6B:  MOVF   00,F
0C6C:  BTFSS  03.2
0C6D:  GOTO   480
0C6E:  MOVLW  01
0C6F:  ADDWF  2B,W
0C70:  MOVWF  04
0C71:  BCF    03.7
0C72:  BTFSC  2C.0
0C73:  BSF    03.7
0C74:  MOVF   00,F
0C75:  BTFSS  03.2
0C76:  GOTO   480
0C77:  MOVLW  02
0C78:  ADDWF  2B,W
0C79:  MOVWF  04
0C7A:  BCF    03.7
0C7B:  BTFSC  2C.0
0C7C:  BSF    03.7
0C7D:  MOVF   00,F
0C7E:  BTFSC  03.2
0C7F:  GOTO   482
0C80:  MOVLW  00
0C81:  GOTO   483
0C82:  MOVLW  01
0C83:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
.................... //////// 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
057C:  MOVF   63,W
057D:  MOVWF  04
057E:  BCF    03.7
057F:  BTFSC  64.0
0580:  BSF    03.7
0581:  MOVF   00,W
0582:  MOVWF  65
0583:  MOVLW  01
0584:  ADDWF  63,W
0585:  MOVWF  04
0586:  BCF    03.7
0587:  BTFSC  64.0
0588:  BSF    03.7
0589:  MOVF   00,W
058A:  MOVWF  66
058B:  MOVLW  02
058C:  ADDWF  63,W
058D:  MOVWF  04
058E:  BCF    03.7
058F:  BTFSC  64.0
0590:  BSF    03.7
0591:  MOVF   00,W
0592:  MOVWF  67
0593:  MOVF   65,W
0594:  MOVWF  68
0595:  MOVF   66,W
0596:  MOVWF  69
0597:  MOVF   67,W
0598:  MOVWF  6A
0599:  BCF    03.6
059A:  CALL   535
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01B5:  BSF    03.5
01B6:  BSF    03.6
01B7:  MOVF   1A,W
01B8:  MOVWF  04
01B9:  BCF    03.7
01BA:  BTFSC  1B.0
01BB:  BSF    03.7
01BC:  MOVF   00,W
01BD:  CLRF   2B
01BE:  CLRF   2A
01BF:  CLRF   29
01C0:  MOVWF  28
01C1:  CLRF   2D
01C2:  MOVF   04,W
01C3:  MOVWF  2C
01C4:  BCF    2D.0
01C5:  BTFSC  03.7
01C6:  BSF    2D.0
01C7:  MOVF   2B,W
01C8:  MOVWF  31
01C9:  MOVF   2A,W
01CA:  MOVWF  30
01CB:  MOVF   29,W
01CC:  MOVWF  2F
01CD:  MOVF   28,W
01CE:  MOVWF  2E
01CF:  CLRF   35
01D0:  CLRF   34
01D1:  MOVLW  0E
01D2:  MOVWF  33
01D3:  MOVLW  10
01D4:  MOVWF  32
01D5:  BCF    03.5
01D6:  BCF    03.6
01D7:  CALL   187
01D8:  BSF    03.5
01D9:  BSF    03.6
01DA:  MOVF   2C,W
01DB:  MOVWF  04
01DC:  BCF    03.7
01DD:  BTFSC  2D.0
01DE:  BSF    03.7
01DF:  MOVF   7A,W
01E0:  MOVWF  1F
01E1:  MOVF   79,W
01E2:  MOVWF  1E
01E3:  MOVF   78,W
01E4:  MOVWF  1D
01E5:  MOVF   77,W
01E6:  MOVWF  1C
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01E7:  MOVLW  01
01E8:  ADDWF  1A,W
01E9:  MOVWF  04
01EA:  BCF    03.7
01EB:  BTFSC  1B.0
01EC:  BSF    03.7
01ED:  MOVF   00,W
01EE:  CLRF   2B
01EF:  CLRF   2A
01F0:  CLRF   29
01F1:  MOVWF  28
01F2:  CLRF   2D
01F3:  MOVF   04,W
01F4:  MOVWF  2C
01F5:  BCF    2D.0
01F6:  BTFSC  03.7
01F7:  BSF    2D.0
01F8:  MOVF   2B,W
01F9:  MOVWF  31
01FA:  MOVF   2A,W
01FB:  MOVWF  30
01FC:  MOVF   29,W
01FD:  MOVWF  2F
01FE:  MOVF   28,W
01FF:  MOVWF  2E
0200:  CLRF   35
0201:  CLRF   34
0202:  CLRF   33
0203:  MOVLW  3C
0204:  MOVWF  32
0205:  BCF    03.5
0206:  BCF    03.6
0207:  CALL   187
0208:  BSF    03.5
0209:  BSF    03.6
020A:  MOVF   2C,W
020B:  MOVWF  04
020C:  BCF    03.7
020D:  BTFSC  2D.0
020E:  BSF    03.7
020F:  MOVF   7A,W
0210:  MOVWF  23
0211:  MOVF   79,W
0212:  MOVWF  22
0213:  MOVF   78,W
0214:  MOVWF  21
0215:  MOVF   77,W
0216:  MOVWF  20
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0217:  MOVF   20,W
0218:  ADDWF  1C,W
0219:  MOVWF  28
021A:  MOVF   1D,W
021B:  MOVWF  29
021C:  MOVF   21,W
021D:  BTFSC  03.0
021E:  INCFSZ 21,W
021F:  ADDWF  29,F
0220:  MOVF   1E,W
0221:  MOVWF  2A
0222:  MOVF   22,W
0223:  BTFSC  03.0
0224:  INCFSZ 22,W
0225:  ADDWF  2A,F
0226:  MOVF   1F,W
0227:  MOVWF  2B
0228:  MOVF   23,W
0229:  BTFSC  03.0
022A:  INCFSZ 23,W
022B:  ADDWF  2B,F
022C:  MOVLW  02
022D:  ADDWF  1A,W
022E:  MOVWF  04
022F:  BCF    03.7
0230:  BTFSC  1B.0
0231:  BSF    03.7
0232:  MOVF   00,W
0233:  ADDWF  28,W
0234:  MOVWF  24
0235:  MOVF   29,W
0236:  MOVWF  25
0237:  MOVLW  00
0238:  BTFSC  03.0
0239:  MOVLW  01
023A:  ADDWF  25,F
023B:  MOVF   2A,W
023C:  MOVWF  26
023D:  MOVLW  00
023E:  BTFSC  03.0
023F:  MOVLW  01
0240:  ADDWF  26,F
0241:  MOVF   2B,W
0242:  MOVWF  27
0243:  MOVLW  00
0244:  BTFSC  03.0
0245:  MOVLW  01
0246:  ADDWF  27,F
....................  
....................     return seconds; 
0247:  MOVF   24,W
0248:  MOVWF  77
0249:  MOVF   25,W
024A:  MOVWF  78
024B:  MOVF   26,W
024C:  MOVWF  79
024D:  MOVF   27,W
024E:  MOVWF  7A
024F:  BCF    03.5
0250:  BCF    03.6
0251:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07F6:  BSF    03.6
07F7:  CLRF   68
07F8:  CLRF   69
07F9:  CLRF   6A
07FA:  BCF    03.6
07FB:  CALL   535
07FC:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
06AD:  BSF    03.5
06AE:  BCF    03.6
06AF:  BCF    05.1
06B0:  BCF    03.5
06B1:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
06B2:  BSF    03.5
06B3:  BCF    05.1
06B4:  BCF    03.5
06B5:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0670:  MOVLW  01
0671:  BSF    03.6
0672:  MOVWF  3C
0673:  CLRF   3D
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
0674:  BSF    03.5
0675:  BCF    03.6
0676:  BCF    05.3
0677:  BCF    03.5
0678:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
0679:  BSF    03.5
067A:  BCF    05.1
067B:  BCF    03.5
067C:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
067D:  BSF    03.6
067E:  CLRF   3D
067F:  MOVF   3B,W
0680:  SUBWF  3D,W
0681:  BTFSC  03.0
0682:  GOTO   6AD
....................         int character = charactersArray[j]; 
0683:  MOVF   3D,W
0684:  ADDWF  39,W
0685:  MOVWF  04
0686:  BCF    03.7
0687:  BTFSC  3A.0
0688:  BSF    03.7
0689:  MOVF   00,W
068A:  MOVWF  3E
....................  
....................         for (i = 1; i <= 8; i++) { 
068B:  MOVLW  01
068C:  MOVWF  3C
068D:  MOVF   3C,W
068E:  SUBLW  08
068F:  BTFSS  03.0
0690:  GOTO   6AB
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0691:  BTFSC  3E.0
0692:  GOTO   697
0693:  BCF    03.6
0694:  BCF    05.0
0695:  GOTO   699
0696:  BSF    03.6
0697:  BCF    03.6
0698:  BSF    05.0
0699:  BSF    03.5
069A:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
069B:  BCF    03.0
069C:  BCF    03.5
069D:  BSF    03.6
069E:  RRF    3E,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
069F:  BSF    03.5
06A0:  BCF    03.6
06A1:  BCF    05.3
06A2:  BCF    03.5
06A3:  BSF    05.3
....................             output_low(PIN_CLOCK); 
06A4:  BSF    03.5
06A5:  BCF    05.3
06A6:  BCF    03.5
06A7:  BCF    05.3
06A8:  BSF    03.6
06A9:  INCF   3C,F
06AA:  GOTO   68D
....................         } 
06AB:  INCF   3D,F
06AC:  GOTO   67F
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
06B6:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000 // .    
....................     0b11100111, // A 
....................     0b01110101, // a 
....................     0b00010111, 
....................     0b00000100, 
....................     0b10000111, // F 
....................     0b01100100, 
....................     0b10010110, // C 
....................     0b11000011, 
....................     0b00110101, 
....................     0b00110101, 
....................     0b10010111, // E 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06F6:  CLRF   3C
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06F7:  CLRF   3C
06F8:  MOVF   3B,W
06F9:  SUBWF  3C,W
06FA:  BTFSC  03.0
06FB:  GOTO   71B
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06FC:  MOVF   3C,W
06FD:  ADDWF  39,W
06FE:  MOVWF  78
06FF:  MOVF   3A,W
0700:  MOVWF  7A
0701:  BTFSC  03.0
0702:  INCF   7A,F
0703:  MOVF   78,W
0704:  MOVWF  3D
0705:  MOVF   7A,W
0706:  MOVWF  3E
0707:  MOVF   3C,W
0708:  ADDWF  39,W
0709:  MOVWF  04
070A:  BCF    03.7
070B:  BTFSC  3A.0
070C:  BSF    03.7
070D:  MOVF   00,W
070E:  BCF    03.6
070F:  CALL   004
0710:  MOVWF  78
0711:  BSF    03.6
0712:  MOVF   3D,W
0713:  MOVWF  04
0714:  BCF    03.7
0715:  BTFSC  3E.0
0716:  BSF    03.7
0717:  MOVF   78,W
0718:  MOVWF  00
0719:  INCF   3C,F
071A:  GOTO   6F8
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06C1:  CLRF   3C
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06C2:  CLRF   3C
06C3:  MOVF   3B,W
06C4:  SUBWF  3C,W
06C5:  BTFSC  03.0
06C6:  GOTO   6EF
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06C7:  MOVF   3C,W
06C8:  ADDWF  39,W
06C9:  MOVWF  78
06CA:  MOVF   3A,W
06CB:  MOVWF  7A
06CC:  BTFSC  03.0
06CD:  INCF   7A,F
06CE:  MOVF   78,W
06CF:  MOVWF  3D
06D0:  MOVF   7A,W
06D1:  MOVWF  3E
06D2:  MOVF   3C,W
06D3:  ADDWF  39,W
06D4:  MOVWF  04
06D5:  BCF    03.7
06D6:  BTFSC  3A.0
06D7:  BSF    03.7
06D8:  MOVF   00,W
06D9:  BCF    03.6
06DA:  CALL   004
06DB:  MOVWF  78
06DC:  BSF    03.6
06DD:  MOVF   3D,W
06DE:  MOVWF  04
06DF:  BCF    03.7
06E0:  BTFSC  3E.0
06E1:  BSF    03.7
06E2:  MOVF   78,W
06E3:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06E4:  MOVF   3C,W
06E5:  ADDWF  39,W
06E6:  MOVWF  04
06E7:  BCF    03.7
06E8:  BTFSC  3A.0
06E9:  BSF    03.7
06EA:  MOVF   00,W
06EB:  IORLW  08
06EC:  MOVWF  00
06ED:  INCF   3C,F
06EE:  GOTO   6C3
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
06B7:  BSF    03.6
06B8:  MOVF   38,F
06B9:  BTFSC  03.2
06BA:  GOTO   6F0
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
06BB:  MOVF   36,W
06BC:  MOVWF  3A
06BD:  MOVF   35,W
06BE:  MOVWF  39
06BF:  MOVF   37,W
06C0:  MOVWF  3B
....................     } else { 
*
06EF:  GOTO   71B
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06F0:  MOVF   36,W
06F1:  MOVWF  3A
06F2:  MOVF   35,W
06F3:  MOVWF  39
06F4:  MOVF   37,W
06F5:  MOVWF  3B
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
071B:  MOVF   36,W
071C:  MOVWF  3A
071D:  MOVF   35,W
071E:  MOVWF  39
071F:  MOVF   37,W
0720:  MOVWF  3B
0721:  BCF    03.6
0722:  CALL   670
0723:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
0C93:  BSF    03.6
0C94:  CLRF   23
0C95:  CLRF   24
0C96:  CLRF   25
0C97:  CLRF   26
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0C98:  MOVLW  01
0C99:  MOVWF  23
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
0C9A:  MOVLW  09
0C9B:  MOVWF  24
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0C9C:  MOVLW  01
0C9D:  MOVWF  25
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0C9E:  MOVWF  26
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
0C9F:  MOVWF  3A
0CA0:  MOVLW  23
0CA1:  MOVWF  39
0CA2:  MOVLW  04
0CA3:  MOVWF  3B
0CA4:  BCF    0A.3
0CA5:  BCF    03.6
0CA6:  CALL   670
0CA7:  BSF    0A.3
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time limitTime; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
.................... } Timer; 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.limitTime.hour = read_eeprom(alarmHourAddress) % (maximumHours + 1); 
*
09C7:  BCF    03.5
09C8:  MOVF   6B,W
09C9:  MOVWF  0D
09CA:  BSF    03.5
09CB:  BCF    0C.7
09CC:  BSF    0C.0
09CD:  BCF    03.5
09CE:  MOVF   0C,W
09CF:  BSF    03.5
09D0:  MOVWF  32
09D1:  MOVLW  01
09D2:  BCF    03.5
09D3:  ADDWF  69,W
09D4:  BSF    03.5
09D5:  MOVWF  33
09D6:  MOVF   32,W
09D7:  MOVWF  34
09D8:  MOVF   33,W
09D9:  MOVWF  35
09DA:  BCF    0A.3
09DB:  BCF    03.5
09DC:  BCF    03.6
09DD:  CALL   02B
09DE:  BSF    0A.3
09DF:  MOVF   77,W
09E0:  BSF    03.5
09E1:  BSF    03.6
09E2:  MOVWF  22
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
09E3:  BCF    03.5
09E4:  MOVF   6D,W
09E5:  MOVWF  0D
09E6:  BSF    03.5
09E7:  BCF    0C.7
09E8:  BSF    0C.0
09E9:  BCF    03.5
09EA:  MOVF   0C,W
09EB:  BSF    03.5
09EC:  MOVWF  32
09ED:  MOVLW  01
09EE:  BCF    03.5
09EF:  ADDWF  6A,W
09F0:  BSF    03.5
09F1:  MOVWF  33
09F2:  MOVF   32,W
09F3:  MOVWF  34
09F4:  MOVF   33,W
09F5:  MOVWF  35
09F6:  BCF    0A.3
09F7:  BCF    03.5
09F8:  BCF    03.6
09F9:  CALL   02B
09FA:  BSF    0A.3
09FB:  MOVF   77,W
09FC:  BSF    03.5
09FD:  BSF    03.6
09FE:  MOVWF  23
....................     newTimer.limitTime.second = 0; 
09FF:  CLRF   24
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
0A00:  BCF    03.5
0A01:  MOVF   69,W
0A02:  BSF    03.5
0A03:  MOVWF  28
....................     newTimer.minutesUpperBound = maximumMinutes; 
0A04:  BCF    03.5
0A05:  MOVF   6A,W
0A06:  BSF    03.5
0A07:  MOVWF  29
....................     newTimer.secondsUpperBound = 59; 
0A08:  MOVLW  3B
0A09:  MOVWF  2A
....................  
....................     newTimer.addressAlarmHours = alarmHourAddress; 
0A0A:  BCF    03.5
0A0B:  MOVF   6B,W
0A0C:  BSF    03.5
0A0D:  MOVWF  2E
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
0A0E:  BCF    03.5
0A0F:  MOVF   6D,W
0A10:  BSF    03.5
0A11:  MOVWF  2D
....................     newTimer.addressRtcHours = rtcHour; 
0A12:  MOVF   10,W
0A13:  MOVWF  2F
....................     newTimer.addressRtcMinutes = rtcMinutes; 
0A14:  MOVF   12,W
0A15:  MOVWF  30
....................     newTimer.addressRtcSeconds = rtcSeconds; 
0A16:  MOVF   14,W
0A17:  MOVWF  31
....................  
....................     return newTimer; 
0A18:  MOVLW  96
0A19:  MOVWF  78
0A1A:  MOVLW  01
0A1B:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.hoursUpperBound = 0; 
*
0A5F:  CLRF   26
....................     newTimer.minutesUpperBound = maximumMinutes; 
0A60:  BCF    03.5
0A61:  MOVF   69,W
0A62:  BSF    03.5
0A63:  MOVWF  27
....................     newTimer.secondsUpperBound = 59; 
0A64:  MOVLW  3B
0A65:  MOVWF  28
....................  
....................     newTimer.limitTime.hour = 0; 
0A66:  CLRF   20
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
0A67:  BCF    03.5
0A68:  MOVF   6A,W
0A69:  MOVWF  0D
0A6A:  BSF    03.5
0A6B:  BCF    0C.7
0A6C:  BSF    0C.0
0A6D:  BCF    03.5
0A6E:  MOVF   0C,W
0A6F:  BSF    03.5
0A70:  MOVWF  30
0A71:  MOVLW  01
0A72:  BCF    03.5
0A73:  ADDWF  69,W
0A74:  BSF    03.5
0A75:  MOVWF  31
0A76:  MOVF   30,W
0A77:  MOVWF  34
0A78:  MOVF   31,W
0A79:  MOVWF  35
0A7A:  BCF    0A.3
0A7B:  BCF    03.5
0A7C:  BCF    03.6
0A7D:  CALL   02B
0A7E:  BSF    0A.3
0A7F:  MOVF   77,W
0A80:  BSF    03.5
0A81:  BSF    03.6
0A82:  MOVWF  21
....................     newTimer.limitTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
0A83:  BCF    03.5
0A84:  MOVF   6C,W
0A85:  MOVWF  0D
0A86:  BSF    03.5
0A87:  BCF    0C.7
0A88:  BSF    0C.0
0A89:  BCF    03.5
0A8A:  MOVF   0C,W
0A8B:  BSF    03.5
0A8C:  MOVWF  30
0A8D:  MOVLW  01
0A8E:  ADDWF  28,W
0A8F:  MOVWF  31
0A90:  MOVF   30,W
0A91:  MOVWF  34
0A92:  MOVF   31,W
0A93:  MOVWF  35
0A94:  BCF    0A.3
0A95:  BCF    03.5
0A96:  BCF    03.6
0A97:  CALL   02B
0A98:  BSF    0A.3
0A99:  MOVF   77,W
0A9A:  BSF    03.5
0A9B:  BSF    03.6
0A9C:  MOVWF  22
....................  
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
0A9D:  BCF    03.5
0A9E:  MOVF   6A,W
0A9F:  BSF    03.5
0AA0:  MOVWF  2B
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
0AA1:  BCF    03.5
0AA2:  MOVF   6C,W
0AA3:  BSF    03.5
0AA4:  MOVWF  2A
....................     newTimer.addressRtcHours = rtcHour; 
0AA5:  BCF    03.5
0AA6:  MOVF   6E,W
0AA7:  BSF    03.5
0AA8:  MOVWF  2D
....................     newTimer.addressRtcMinutes = rtcMinutes; 
0AA9:  MOVF   10,W
0AAA:  MOVWF  2E
....................     newTimer.addressRtcSeconds = rtcSeconds; 
0AAB:  MOVF   12,W
0AAC:  MOVWF  2F
....................  
....................     return newTimer; 
0AAD:  MOVLW  94
0AAE:  MOVWF  78
0AAF:  MOVLW  01
0AB0:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_updateRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
056D:  MOVLW  06
056E:  ADDWF  5F,W
056F:  MOVWF  78
0570:  MOVF   60,W
0571:  MOVWF  7A
0572:  BTFSC  03.0
0573:  INCF   7A,F
0574:  MOVF   78,W
0575:  MOVWF  61
0576:  MOVF   7A,W
0577:  MOVWF  62
0578:  MOVF   62,W
0579:  MOVWF  64
057A:  MOVF   61,W
057B:  MOVWF  63
.................... } 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
037B:  MOVLW  06
037C:  ADDWF  61,W
037D:  MOVWF  78
037E:  MOVF   62,W
037F:  MOVWF  7A
0380:  BTFSC  03.0
0381:  INCF   7A,F
0382:  MOVF   78,W
0383:  BSF    03.5
0384:  MOVWF  18
0385:  MOVF   7A,W
0386:  MOVWF  19
0387:  MOVWF  1B
0388:  MOVF   18,W
0389:  MOVWF  1A
038A:  BCF    03.5
038B:  BCF    03.6
038C:  CALL   1B5
038D:  MOVF   7A,W
038E:  BSF    03.6
038F:  MOVWF  66
0390:  MOVF   79,W
0391:  MOVWF  65
0392:  MOVF   78,W
0393:  MOVWF  64
0394:  MOVF   77,W
0395:  MOVWF  63
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->limitTime); 
0396:  MOVLW  0C
0397:  ADDWF  61,W
0398:  MOVWF  78
0399:  MOVF   62,W
039A:  MOVWF  7A
039B:  BTFSC  03.0
039C:  INCF   7A,F
039D:  MOVF   78,W
039E:  BSF    03.5
039F:  MOVWF  18
03A0:  MOVF   7A,W
03A1:  MOVWF  19
03A2:  MOVWF  1B
03A3:  MOVF   18,W
03A4:  MOVWF  1A
03A5:  BCF    03.5
03A6:  BCF    03.6
03A7:  CALL   1B5
03A8:  MOVF   7A,W
03A9:  BSF    03.6
03AA:  MOVWF  6A
03AB:  MOVF   79,W
03AC:  MOVWF  69
03AD:  MOVF   78,W
03AE:  MOVWF  68
03AF:  MOVF   77,W
03B0:  MOVWF  67
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
03B1:  MOVF   63,W
03B2:  SUBWF  67,W
03B3:  MOVWF  6B
03B4:  MOVF   68,W
03B5:  MOVWF  6C
03B6:  MOVF   64,W
03B7:  BTFSS  03.0
03B8:  INCFSZ 64,W
03B9:  SUBWF  6C,F
03BA:  MOVF   69,W
03BB:  MOVWF  6D
03BC:  MOVF   65,W
03BD:  BTFSS  03.0
03BE:  INCFSZ 65,W
03BF:  SUBWF  6D,F
03C0:  MOVF   6A,W
03C1:  MOVWF  6E
03C2:  MOVF   66,W
03C3:  BTFSS  03.0
03C4:  INCFSZ 66,W
03C5:  SUBWF  6E,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
03C6:  BTFSS  6E.7
03C7:  GOTO   3CD
03C8:  CLRF   77
03C9:  CLRF   78
03CA:  CLRF   79
03CB:  CLRF   7A
03CC:  GOTO   3D5
03CD:  MOVF   6B,W
03CE:  MOVWF  77
03CF:  MOVF   6C,W
03D0:  MOVWF  78
03D1:  MOVF   6D,W
03D2:  MOVWF  79
03D3:  MOVF   6E,W
03D4:  MOVWF  7A
03D5:  MOVF   7A,W
03D6:  MOVWF  6E
03D7:  MOVF   79,W
03D8:  MOVWF  6D
03D9:  MOVF   78,W
03DA:  MOVWF  6C
03DB:  MOVF   77,W
03DC:  MOVWF  6B
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
03DD:  BCF    03.1
03DE:  MOVF   6E,W
03DF:  BSF    03.5
03E0:  MOVWF  2D
03E1:  BCF    03.5
03E2:  MOVF   6D,W
03E3:  BSF    03.5
03E4:  MOVWF  2C
03E5:  BCF    03.5
03E6:  MOVF   6C,W
03E7:  BSF    03.5
03E8:  MOVWF  2B
03E9:  BCF    03.5
03EA:  MOVF   6B,W
03EB:  BSF    03.5
03EC:  MOVWF  2A
03ED:  CLRF   31
03EE:  CLRF   30
03EF:  MOVLW  0E
03F0:  MOVWF  2F
03F1:  MOVLW  10
03F2:  MOVWF  2E
03F3:  BCF    03.5
03F4:  BCF    03.6
03F5:  CALL   252
03F6:  MOVF   7A,W
03F7:  BSF    03.5
03F8:  BSF    03.6
03F9:  MOVWF  13
03FA:  MOVF   79,W
03FB:  MOVWF  12
03FC:  MOVF   78,W
03FD:  MOVWF  11
03FE:  MOVF   77,W
03FF:  MOVWF  10
0400:  BSF    03.1
0401:  MOVLW  98
0402:  MOVWF  04
0403:  BSF    03.7
0404:  BCF    03.5
0405:  MOVF   6E,W
0406:  BSF    03.5
0407:  MOVWF  2D
0408:  BCF    03.5
0409:  MOVF   6D,W
040A:  BSF    03.5
040B:  MOVWF  2C
040C:  BCF    03.5
040D:  MOVF   6C,W
040E:  BSF    03.5
040F:  MOVWF  2B
0410:  BCF    03.5
0411:  MOVF   6B,W
0412:  BSF    03.5
0413:  MOVWF  2A
0414:  CLRF   31
0415:  CLRF   30
0416:  MOVLW  0E
0417:  MOVWF  2F
0418:  MOVLW  10
0419:  MOVWF  2E
041A:  BCF    03.5
041B:  BCF    03.6
041C:  CALL   252
041D:  BSF    03.5
041E:  BSF    03.6
041F:  MOVF   1B,W
0420:  MOVWF  1F
0421:  MOVF   1A,W
0422:  MOVWF  1E
0423:  MOVF   19,W
0424:  MOVWF  1D
0425:  MOVF   18,W
0426:  MOVWF  1C
0427:  CLRF   21
0428:  MOVF   04,W
0429:  MOVWF  20
042A:  BCF    21.0
042B:  BTFSC  03.7
042C:  BSF    21.0
042D:  BCF    03.1
042E:  MOVF   1B,W
042F:  MOVWF  2D
0430:  MOVF   1A,W
0431:  MOVWF  2C
0432:  MOVF   19,W
0433:  MOVWF  2B
0434:  MOVF   18,W
0435:  MOVWF  2A
0436:  CLRF   31
0437:  CLRF   30
0438:  CLRF   2F
0439:  MOVLW  3C
043A:  MOVWF  2E
043B:  BCF    03.5
043C:  BCF    03.6
043D:  CALL   252
043E:  BSF    03.5
043F:  BSF    03.6
0440:  MOVF   20,W
0441:  MOVWF  04
0442:  BCF    03.7
0443:  BTFSC  21.0
0444:  BSF    03.7
0445:  MOVF   7A,W
0446:  MOVWF  17
0447:  MOVF   79,W
0448:  MOVWF  16
0449:  MOVF   78,W
044A:  MOVWF  15
044B:  MOVF   77,W
044C:  MOVWF  14
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
044D:  MOVLW  02
044E:  BCF    03.5
044F:  ADDWF  61,W
0450:  MOVWF  78
0451:  MOVF   62,W
0452:  MOVWF  7A
0453:  BTFSC  03.0
0454:  INCF   7A,F
0455:  MOVF   78,W
0456:  BSF    03.5
0457:  MOVWF  18
0458:  MOVF   7A,W
0459:  MOVWF  19
045A:  CLRF   1B
045B:  MOVF   04,W
045C:  MOVWF  1A
045D:  BCF    1B.0
045E:  BTFSC  03.7
045F:  BSF    1B.0
0460:  BSF    03.1
0461:  MOVLW  9C
0462:  MOVWF  04
0463:  BSF    03.7
0464:  BCF    03.5
0465:  MOVF   6E,W
0466:  BSF    03.5
0467:  MOVWF  2D
0468:  BCF    03.5
0469:  MOVF   6D,W
046A:  BSF    03.5
046B:  MOVWF  2C
046C:  BCF    03.5
046D:  MOVF   6C,W
046E:  BSF    03.5
046F:  MOVWF  2B
0470:  BCF    03.5
0471:  MOVF   6B,W
0472:  BSF    03.5
0473:  MOVWF  2A
0474:  CLRF   31
0475:  CLRF   30
0476:  MOVLW  0E
0477:  MOVWF  2F
0478:  MOVLW  10
0479:  MOVWF  2E
047A:  BCF    03.5
047B:  BCF    03.6
047C:  CALL   252
047D:  BSF    03.5
047E:  BSF    03.6
047F:  MOVF   1C,W
0480:  MOVWF  77
0481:  MOVF   1D,W
0482:  MOVWF  78
0483:  MOVF   1E,W
0484:  MOVWF  79
0485:  MOVF   1F,W
0486:  MOVWF  7A
0487:  MOVF   1A,W
0488:  MOVWF  04
0489:  BCF    03.7
048A:  BTFSC  1B.0
048B:  BSF    03.7
048C:  MOVF   1F,W
048D:  MOVWF  23
048E:  MOVF   1E,W
048F:  MOVWF  22
0490:  MOVF   1D,W
0491:  MOVWF  21
0492:  MOVF   1C,W
0493:  MOVWF  20
0494:  CLRF   25
0495:  MOVF   04,W
0496:  MOVWF  24
0497:  BCF    25.0
0498:  BTFSC  03.7
0499:  BSF    25.0
049A:  BSF    03.1
049B:  MOVLW  A6
049C:  MOVWF  04
049D:  BSF    03.7
049E:  MOVF   1F,W
049F:  MOVWF  2D
04A0:  MOVF   1E,W
04A1:  MOVWF  2C
04A2:  MOVF   1D,W
04A3:  MOVWF  2B
04A4:  MOVF   1C,W
04A5:  MOVWF  2A
04A6:  CLRF   31
04A7:  CLRF   30
04A8:  CLRF   2F
04A9:  MOVLW  3C
04AA:  MOVWF  2E
04AB:  BCF    03.5
04AC:  BCF    03.6
04AD:  CALL   252
04AE:  BSF    03.5
04AF:  BSF    03.6
04B0:  MOVF   24,W
04B1:  MOVWF  04
04B2:  BCF    03.7
04B3:  BTFSC  25.0
04B4:  BSF    03.7
04B5:  MOVF   18,W
04B6:  MOVWF  04
04B7:  BCF    03.7
04B8:  BTFSC  19.0
04B9:  BSF    03.7
04BA:  MOVF   26,W
04BB:  MOVWF  00
....................  
....................     //    if ((minute + 60) <= 99 && (hour > 0)) { 
....................     //        hour -= 1; 
....................     //        minute += 60; 
....................     //    } 
....................     timerPtr->countdownTime.hour = hour; 
04BC:  BCF    03.5
04BD:  MOVF   61,W
04BE:  MOVWF  04
04BF:  BCF    03.7
04C0:  BTFSC  62.0
04C1:  BSF    03.7
04C2:  BSF    03.5
04C3:  MOVF   10,W
04C4:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
04C5:  MOVLW  01
04C6:  BCF    03.5
04C7:  ADDWF  61,W
04C8:  MOVWF  04
04C9:  BCF    03.7
04CA:  BTFSC  62.0
04CB:  BSF    03.7
04CC:  BSF    03.5
04CD:  MOVF   14,W
04CE:  MOVWF  00
....................  
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
02DD:  MOVLW  06
02DE:  ADDWF  5F,W
02DF:  MOVWF  78
02E0:  MOVF   60,W
02E1:  MOVWF  7A
02E2:  BTFSC  03.0
02E3:  INCF   7A,F
02E4:  MOVF   78,W
02E5:  MOVWF  61
02E6:  MOVF   7A,W
02E7:  MOVWF  62
*
0358:  MOVF   79,W
0359:  MOVWF  7A
035A:  MOVF   78,W
035B:  BCF    03.5
035C:  MOVWF  63
035D:  MOVF   7A,W
035E:  MOVWF  64
035F:  MOVLW  06
0360:  MOVWF  78
0361:  MOVF   63,W
0362:  MOVWF  04
0363:  BCF    03.7
0364:  BTFSC  64.0
0365:  BSF    03.7
0366:  MOVF   00,W
0367:  MOVWF  77
0368:  MOVF   61,W
0369:  MOVWF  04
036A:  BCF    03.7
036B:  BTFSC  62.0
036C:  BSF    03.7
036D:  MOVF   77,W
036E:  MOVWF  00
036F:  INCF   61,F
0370:  BTFSC  03.2
0371:  INCF   62,F
0372:  INCF   63,F
0373:  BTFSC  03.2
0374:  INCF   64,F
0375:  DECFSZ 78,F
0376:  GOTO   361
....................     Timer_updateCountdownTime(timerPtr); 
0377:  MOVF   60,W
0378:  MOVWF  62
0379:  MOVF   5F,W
037A:  MOVWF  61
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->limitTime.hour + 1; 
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->limitTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->limitTime.minute + 1; 
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->limitTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->limitTime.second + 1; 
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->limitTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0BC1:  MOVLW  19
0BC2:  ADDWF  27,W
0BC3:  MOVWF  04
0BC4:  BCF    03.7
0BC5:  BTFSC  28.0
0BC6:  BSF    03.7
0BC7:  MOVF   00,W
0BC8:  MOVWF  29
0BC9:  MOVLW  06
0BCA:  ADDWF  27,W
0BCB:  MOVWF  04
0BCC:  BCF    03.7
0BCD:  BTFSC  28.0
0BCE:  BSF    03.7
0BCF:  MOVF   00,W
0BD0:  MOVWF  2A
0BD1:  BCF    03.6
0BD2:  MOVF   0B,W
0BD3:  MOVWF  77
0BD4:  BCF    0B.7
0BD5:  BSF    03.6
0BD6:  MOVF   29,W
0BD7:  MOVWF  0D
0BD8:  MOVF   2A,W
0BD9:  MOVWF  0C
0BDA:  BSF    03.5
0BDB:  BCF    0C.7
0BDC:  BSF    0C.2
0BDD:  MOVLW  55
0BDE:  MOVWF  0D
0BDF:  MOVLW  AA
0BE0:  MOVWF  0D
0BE1:  BSF    0C.1
0BE2:  BTFSC  0C.1
0BE3:  GOTO   3E2
0BE4:  BCF    0C.2
0BE5:  MOVF   77,W
0BE6:  BCF    03.5
0BE7:  BCF    03.6
0BE8:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0BE9:  MOVLW  1A
0BEA:  BSF    03.6
0BEB:  ADDWF  27,W
0BEC:  MOVWF  04
0BED:  BCF    03.7
0BEE:  BTFSC  28.0
0BEF:  BSF    03.7
0BF0:  MOVF   00,W
0BF1:  MOVWF  29
0BF2:  MOVLW  07
0BF3:  ADDWF  27,W
0BF4:  MOVWF  04
0BF5:  BCF    03.7
0BF6:  BTFSC  28.0
0BF7:  BSF    03.7
0BF8:  MOVF   00,W
0BF9:  MOVWF  2A
0BFA:  BCF    03.6
0BFB:  MOVF   0B,W
0BFC:  MOVWF  77
0BFD:  BCF    0B.7
0BFE:  BSF    03.6
0BFF:  MOVF   29,W
0C00:  MOVWF  0D
0C01:  MOVF   2A,W
0C02:  MOVWF  0C
0C03:  BSF    03.5
0C04:  BCF    0C.7
0C05:  BSF    0C.2
0C06:  MOVLW  55
0C07:  MOVWF  0D
0C08:  MOVLW  AA
0C09:  MOVWF  0D
0C0A:  BSF    0C.1
0C0B:  BTFSC  0C.1
0C0C:  GOTO   40B
0C0D:  BCF    0C.2
0C0E:  MOVF   77,W
0C0F:  BCF    03.5
0C10:  BCF    03.6
0C11:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0C12:  MOVLW  1B
0C13:  BSF    03.6
0C14:  ADDWF  27,W
0C15:  MOVWF  04
0C16:  BCF    03.7
0C17:  BTFSC  28.0
0C18:  BSF    03.7
0C19:  MOVF   00,W
0C1A:  MOVWF  29
0C1B:  MOVLW  08
0C1C:  ADDWF  27,W
0C1D:  MOVWF  04
0C1E:  BCF    03.7
0C1F:  BTFSC  28.0
0C20:  BSF    03.7
0C21:  MOVF   00,W
0C22:  MOVWF  2A
0C23:  BCF    03.6
0C24:  MOVF   0B,W
0C25:  MOVWF  77
0C26:  BCF    0B.7
0C27:  BSF    03.6
0C28:  MOVF   29,W
0C29:  MOVWF  0D
0C2A:  MOVF   2A,W
0C2B:  MOVWF  0C
0C2C:  BSF    03.5
0C2D:  BCF    0C.7
0C2E:  BSF    0C.2
0C2F:  MOVLW  55
0C30:  MOVWF  0D
0C31:  MOVLW  AA
0C32:  MOVWF  0D
0C33:  BSF    0C.1
0C34:  BTFSC  0C.1
0C35:  GOTO   434
0C36:  BCF    0C.2
0C37:  MOVF   77,W
0C38:  BCF    03.5
0C39:  BCF    03.6
0C3A:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveLimitTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->limitTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->limitTime.minute); 
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
0C5A:  MOVF   27,W
0C5B:  MOVWF  78
0C5C:  MOVF   28,W
0C5D:  MOVWF  7A
0C5E:  MOVF   78,W
0C5F:  MOVWF  29
0C60:  MOVF   7A,W
0C61:  MOVWF  2A
0C62:  MOVF   2A,W
0C63:  MOVWF  2C
0C64:  MOVF   29,W
0C65:  MOVWF  2B
*
0C84:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->limitTime.hour == 0)&& (timerPtr->limitTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
073E:  CLRF   2B
073F:  CLRF   2C
0740:  CLRF   2D
0741:  CLRF   2E
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0742:  MOVF   28,W
0743:  MOVWF  78
0744:  MOVF   29,W
0745:  MOVWF  7A
0746:  MOVF   78,W
0747:  MOVWF  35
0748:  MOVF   7A,W
0749:  MOVWF  36
074A:  MOVWF  3E
074B:  MOVF   35,W
074C:  MOVWF  3D
074D:  CLRF   3F
074E:  BCF    03.6
074F:  CALL   606
0750:  MOVF   79,W
0751:  MOVWF  7A
0752:  MOVF   78,W
0753:  BSF    03.6
0754:  MOVWF  35
0755:  MOVF   7A,W
0756:  MOVWF  36
0757:  MOVLW  01
0758:  MOVWF  38
0759:  MOVLW  2F
075A:  MOVWF  37
075B:  MOVLW  06
075C:  MOVWF  78
075D:  MOVF   35,W
075E:  MOVWF  04
075F:  BCF    03.7
0760:  BTFSC  36.0
0761:  BSF    03.7
0762:  MOVF   00,W
0763:  MOVWF  77
0764:  MOVF   37,W
0765:  MOVWF  04
0766:  BCF    03.7
0767:  BTFSC  38.0
0768:  BSF    03.7
0769:  MOVF   77,W
076A:  MOVWF  00
076B:  INCF   37,F
076C:  BTFSC  03.2
076D:  INCF   38,F
076E:  INCF   35,F
076F:  BTFSC  03.2
0770:  INCF   36,F
0771:  DECFSZ 78,F
0772:  GOTO   75D
....................     timeToSend[0] = timeInDigits.minute[0]; 
0773:  MOVF   31,W
0774:  MOVWF  2B
....................     timeToSend[1] = timeInDigits.minute[1]; 
0775:  MOVF   32,W
0776:  MOVWF  2C
....................     timeToSend[2] = timeInDigits.hour[0]; 
0777:  MOVF   2F,W
0778:  MOVWF  2D
....................     timeToSend[3] = timeInDigits.hour[1]; 
0779:  MOVF   30,W
077A:  MOVWF  2E
....................  
....................     if (blink) { 
077B:  MOVF   2A,F
077C:  BTFSC  03.2
077D:  GOTO   788
....................         blink = timerPtr->currentTime.second % 2; 
077E:  MOVLW  08
077F:  ADDWF  28,W
0780:  MOVWF  04
0781:  BCF    03.7
0782:  BTFSC  29.0
0783:  BSF    03.7
0784:  MOVF   00,W
0785:  ANDLW  01
0786:  MOVWF  2A
....................     } else { 
0787:  GOTO   78A
....................         blink = TRUE; 
0788:  MOVLW  01
0789:  MOVWF  2A
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             blink 
....................             ); 
078A:  MOVLW  01
078B:  MOVWF  36
078C:  MOVLW  2B
078D:  MOVWF  35
078E:  MOVLW  04
078F:  MOVWF  37
0790:  MOVF   2A,W
0791:  MOVWF  38
0792:  BCF    03.6
0793:  CALL   6B7
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
07AC:  CLRF   2A
07AD:  CLRF   2B
07AE:  CLRF   2C
07AF:  CLRF   2D
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
07B0:  MOVF   28,W
07B1:  MOVWF  78
07B2:  MOVF   29,W
07B3:  MOVWF  7A
07B4:  MOVF   78,W
07B5:  MOVWF  34
07B6:  MOVF   7A,W
07B7:  MOVWF  35
07B8:  MOVWF  3E
07B9:  MOVF   34,W
07BA:  MOVWF  3D
07BB:  CLRF   3F
07BC:  BCF    03.6
07BD:  CALL   606
07BE:  MOVF   79,W
07BF:  MOVWF  7A
07C0:  MOVF   78,W
07C1:  BSF    03.6
07C2:  MOVWF  34
07C3:  MOVF   7A,W
07C4:  MOVWF  35
07C5:  MOVLW  01
07C6:  MOVWF  37
07C7:  MOVLW  2E
07C8:  MOVWF  36
07C9:  MOVLW  06
07CA:  MOVWF  78
07CB:  MOVF   34,W
07CC:  MOVWF  04
07CD:  BCF    03.7
07CE:  BTFSC  35.0
07CF:  BSF    03.7
07D0:  MOVF   00,W
07D1:  MOVWF  77
07D2:  MOVF   36,W
07D3:  MOVWF  04
07D4:  BCF    03.7
07D5:  BTFSC  37.0
07D6:  BSF    03.7
07D7:  MOVF   77,W
07D8:  MOVWF  00
07D9:  INCF   36,F
07DA:  BTFSC  03.2
07DB:  INCF   37,F
07DC:  INCF   34,F
07DD:  BTFSC  03.2
07DE:  INCF   35,F
07DF:  DECFSZ 78,F
07E0:  GOTO   7CB
....................     timeToSend[0] = timeInDigits.second[0]; 
07E1:  MOVF   32,W
07E2:  MOVWF  2A
....................     timeToSend[1] = timeInDigits.second[1]; 
07E3:  MOVF   33,W
07E4:  MOVWF  2B
....................     timeToSend[2] = timeInDigits.minute[0]; 
07E5:  MOVF   30,W
07E6:  MOVWF  2C
....................     timeToSend[3] = timeInDigits.minute[1]; 
07E7:  MOVF   31,W
07E8:  MOVWF  2D
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
07E9:  MOVLW  01
07EA:  MOVWF  36
07EB:  MOVLW  2A
07EC:  MOVWF  35
07ED:  MOVLW  04
07EE:  MOVWF  37
07EF:  MOVLW  01
07F0:  MOVWF  38
07F1:  BCF    03.6
07F2:  CALL   6B7
07F3:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0D46:  CLRF   29
0D47:  CLRF   2A
0D48:  CLRF   2B
0D49:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0D4A:  MOVLW  0C
0D4B:  ADDWF  27,W
0D4C:  MOVWF  78
0D4D:  MOVF   28,W
0D4E:  MOVWF  7A
0D4F:  BTFSC  03.0
0D50:  INCF   7A,F
0D51:  MOVF   78,W
0D52:  MOVWF  33
0D53:  MOVF   7A,W
0D54:  MOVWF  34
0D55:  MOVWF  3E
0D56:  MOVF   33,W
0D57:  MOVWF  3D
0D58:  CLRF   3F
0D59:  BCF    0A.3
0D5A:  BCF    03.6
0D5B:  CALL   606
0D5C:  BSF    0A.3
0D5D:  MOVF   79,W
0D5E:  MOVWF  7A
0D5F:  MOVF   78,W
0D60:  BSF    03.6
0D61:  MOVWF  33
0D62:  MOVF   7A,W
0D63:  MOVWF  34
0D64:  MOVLW  01
0D65:  MOVWF  36
0D66:  MOVLW  2D
0D67:  MOVWF  35
0D68:  MOVLW  06
0D69:  MOVWF  78
0D6A:  MOVF   33,W
0D6B:  MOVWF  04
0D6C:  BCF    03.7
0D6D:  BTFSC  34.0
0D6E:  BSF    03.7
0D6F:  MOVF   00,W
0D70:  MOVWF  77
0D71:  MOVF   35,W
0D72:  MOVWF  04
0D73:  BCF    03.7
0D74:  BTFSC  36.0
0D75:  BSF    03.7
0D76:  MOVF   77,W
0D77:  MOVWF  00
0D78:  INCF   35,F
0D79:  BTFSC  03.2
0D7A:  INCF   36,F
0D7B:  INCF   33,F
0D7C:  BTFSC  03.2
0D7D:  INCF   34,F
0D7E:  DECFSZ 78,F
0D7F:  GOTO   56A
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
0D80:  MOVF   2F,W
0D81:  BCF    0A.3
0D82:  BCF    03.6
0D83:  CALL   004
0D84:  BSF    0A.3
0D85:  MOVWF  78
0D86:  BSF    03.6
0D87:  MOVWF  29
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0D88:  MOVF   30,W
0D89:  BCF    0A.3
0D8A:  BCF    03.6
0D8B:  CALL   004
0D8C:  BSF    0A.3
0D8D:  IORLW  08
0D8E:  BSF    03.6
0D8F:  MOVWF  2A
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
0D90:  MOVLW  01
0D91:  MOVWF  3A
0D92:  MOVLW  29
0D93:  MOVWF  39
0D94:  MOVLW  04
0D95:  MOVWF  3B
0D96:  BCF    0A.3
0D97:  BCF    03.6
0D98:  CALL   670
0D99:  BSF    0A.3
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0DB2:  CLRF   29
0DB3:  CLRF   2A
0DB4:  CLRF   2B
0DB5:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0DB6:  MOVLW  0C
0DB7:  ADDWF  27,W
0DB8:  MOVWF  78
0DB9:  MOVF   28,W
0DBA:  MOVWF  7A
0DBB:  BTFSC  03.0
0DBC:  INCF   7A,F
0DBD:  MOVF   78,W
0DBE:  MOVWF  33
0DBF:  MOVF   7A,W
0DC0:  MOVWF  34
0DC1:  MOVWF  3E
0DC2:  MOVF   33,W
0DC3:  MOVWF  3D
0DC4:  CLRF   3F
0DC5:  BCF    0A.3
0DC6:  BCF    03.6
0DC7:  CALL   606
0DC8:  BSF    0A.3
0DC9:  MOVF   79,W
0DCA:  MOVWF  7A
0DCB:  MOVF   78,W
0DCC:  BSF    03.6
0DCD:  MOVWF  33
0DCE:  MOVF   7A,W
0DCF:  MOVWF  34
0DD0:  MOVLW  01
0DD1:  MOVWF  36
0DD2:  MOVLW  2D
0DD3:  MOVWF  35
0DD4:  MOVLW  06
0DD5:  MOVWF  78
0DD6:  MOVF   33,W
0DD7:  MOVWF  04
0DD8:  BCF    03.7
0DD9:  BTFSC  34.0
0DDA:  BSF    03.7
0DDB:  MOVF   00,W
0DDC:  MOVWF  77
0DDD:  MOVF   35,W
0DDE:  MOVWF  04
0DDF:  BCF    03.7
0DE0:  BTFSC  36.0
0DE1:  BSF    03.7
0DE2:  MOVF   77,W
0DE3:  MOVWF  00
0DE4:  INCF   35,F
0DE5:  BTFSC  03.2
0DE6:  INCF   36,F
0DE7:  INCF   33,F
0DE8:  BTFSC  03.2
0DE9:  INCF   34,F
0DEA:  DECFSZ 78,F
0DEB:  GOTO   5D6
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
0DEC:  MOVF   31,W
0DED:  BCF    0A.3
0DEE:  BCF    03.6
0DEF:  CALL   004
0DF0:  BSF    0A.3
0DF1:  MOVWF  78
0DF2:  BSF    03.6
0DF3:  MOVWF  29
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0DF4:  MOVF   32,W
0DF5:  BCF    0A.3
0DF6:  BCF    03.6
0DF7:  CALL   004
0DF8:  BSF    0A.3
0DF9:  IORLW  08
0DFA:  BSF    03.6
0DFB:  MOVWF  2A
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
0DFC:  MOVLW  01
0DFD:  MOVWF  3A
0DFE:  MOVLW  29
0DFF:  MOVWF  39
0E00:  MOVLW  04
0E01:  MOVWF  3B
0E02:  BCF    0A.3
0E03:  BCF    03.6
0E04:  CALL   670
0E05:  BSF    0A.3
0E06:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
087F:  CLRF   29
0880:  CLRF   2A
0881:  CLRF   2B
0882:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0883:  MOVLW  0C
0884:  ADDWF  27,W
0885:  MOVWF  78
0886:  MOVF   28,W
0887:  MOVWF  7A
0888:  BTFSC  03.0
0889:  INCF   7A,F
088A:  MOVF   78,W
088B:  MOVWF  33
088C:  MOVF   7A,W
088D:  MOVWF  34
088E:  MOVWF  3E
088F:  MOVF   33,W
0890:  MOVWF  3D
0891:  CLRF   3F
0892:  BCF    0A.3
0893:  BCF    03.6
0894:  CALL   606
0895:  BSF    0A.3
0896:  MOVF   79,W
0897:  MOVWF  7A
0898:  MOVF   78,W
0899:  BSF    03.6
089A:  MOVWF  33
089B:  MOVF   7A,W
089C:  MOVWF  34
089D:  MOVLW  01
089E:  MOVWF  36
089F:  MOVLW  2D
08A0:  MOVWF  35
08A1:  MOVLW  06
08A2:  MOVWF  78
08A3:  MOVF   33,W
08A4:  MOVWF  04
08A5:  BCF    03.7
08A6:  BTFSC  34.0
08A7:  BSF    03.7
08A8:  MOVF   00,W
08A9:  MOVWF  77
08AA:  MOVF   35,W
08AB:  MOVWF  04
08AC:  BCF    03.7
08AD:  BTFSC  36.0
08AE:  BSF    03.7
08AF:  MOVF   77,W
08B0:  MOVWF  00
08B1:  INCF   35,F
08B2:  BTFSC  03.2
08B3:  INCF   36,F
08B4:  INCF   33,F
08B5:  BTFSC  03.2
08B6:  INCF   34,F
08B7:  DECFSZ 78,F
08B8:  GOTO   0A3
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
08B9:  MOVF   2F,W
08BA:  MOVWF  29
....................     numbersToSend[1] = displayableTime.minute[1]; 
08BB:  MOVF   30,W
08BC:  MOVWF  2A
....................     numbersToSend[2] = displayableTime.hour[0]; 
08BD:  MOVF   2D,W
08BE:  MOVWF  2B
....................     numbersToSend[3] = displayableTime.hour[1]; 
08BF:  MOVF   2E,W
08C0:  MOVWF  2C
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
08C1:  MOVLW  01
08C2:  MOVWF  36
08C3:  MOVLW  29
08C4:  MOVWF  35
08C5:  MOVLW  04
08C6:  MOVWF  37
08C7:  MOVLW  01
08C8:  MOVWF  38
08C9:  BCF    0A.3
08CA:  BCF    03.6
08CB:  CALL   6B7
08CC:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
08E5:  CLRF   29
08E6:  CLRF   2A
08E7:  CLRF   2B
08E8:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
08E9:  MOVLW  0C
08EA:  ADDWF  27,W
08EB:  MOVWF  78
08EC:  MOVF   28,W
08ED:  MOVWF  7A
08EE:  BTFSC  03.0
08EF:  INCF   7A,F
08F0:  MOVF   78,W
08F1:  MOVWF  33
08F2:  MOVF   7A,W
08F3:  MOVWF  34
08F4:  MOVWF  3E
08F5:  MOVF   33,W
08F6:  MOVWF  3D
08F7:  CLRF   3F
08F8:  BCF    0A.3
08F9:  BCF    03.6
08FA:  CALL   606
08FB:  BSF    0A.3
08FC:  MOVF   79,W
08FD:  MOVWF  7A
08FE:  MOVF   78,W
08FF:  BSF    03.6
0900:  MOVWF  33
0901:  MOVF   7A,W
0902:  MOVWF  34
0903:  MOVLW  01
0904:  MOVWF  36
0905:  MOVLW  2D
0906:  MOVWF  35
0907:  MOVLW  06
0908:  MOVWF  78
0909:  MOVF   33,W
090A:  MOVWF  04
090B:  BCF    03.7
090C:  BTFSC  34.0
090D:  BSF    03.7
090E:  MOVF   00,W
090F:  MOVWF  77
0910:  MOVF   35,W
0911:  MOVWF  04
0912:  BCF    03.7
0913:  BTFSC  36.0
0914:  BSF    03.7
0915:  MOVF   77,W
0916:  MOVWF  00
0917:  INCF   35,F
0918:  BTFSC  03.2
0919:  INCF   36,F
091A:  INCF   33,F
091B:  BTFSC  03.2
091C:  INCF   34,F
091D:  DECFSZ 78,F
091E:  GOTO   109
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
091F:  MOVF   31,W
0920:  MOVWF  29
....................     numbersToSend[1] = displayableTime.second[1]; 
0921:  MOVF   32,W
0922:  MOVWF  2A
....................     numbersToSend[2] = displayableTime.minute[0]; 
0923:  MOVF   2F,W
0924:  MOVWF  2B
....................     numbersToSend[3] = displayableTime.minute[1]; 
0925:  MOVF   30,W
0926:  MOVWF  2C
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0927:  MOVLW  01
0928:  MOVWF  36
0929:  MOVLW  29
092A:  MOVWF  35
092B:  MOVLW  04
092C:  MOVWF  37
092D:  MOVLW  01
092E:  MOVWF  38
092F:  BCF    0A.3
0930:  BCF    03.6
0931:  CALL   6B7
0932:  BSF    0A.3
0933:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0E45:  CLRF   29
0E46:  CLRF   2A
0E47:  CLRF   2B
0E48:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0E49:  MOVLW  0C
0E4A:  ADDWF  27,W
0E4B:  MOVWF  78
0E4C:  MOVF   28,W
0E4D:  MOVWF  7A
0E4E:  BTFSC  03.0
0E4F:  INCF   7A,F
0E50:  MOVF   78,W
0E51:  MOVWF  33
0E52:  MOVF   7A,W
0E53:  MOVWF  34
0E54:  MOVWF  3E
0E55:  MOVF   33,W
0E56:  MOVWF  3D
0E57:  CLRF   3F
0E58:  BCF    0A.3
0E59:  BCF    03.6
0E5A:  CALL   606
0E5B:  BSF    0A.3
0E5C:  MOVF   79,W
0E5D:  MOVWF  7A
0E5E:  MOVF   78,W
0E5F:  BSF    03.6
0E60:  MOVWF  33
0E61:  MOVF   7A,W
0E62:  MOVWF  34
0E63:  MOVLW  01
0E64:  MOVWF  36
0E65:  MOVLW  2D
0E66:  MOVWF  35
0E67:  MOVLW  06
0E68:  MOVWF  78
0E69:  MOVF   33,W
0E6A:  MOVWF  04
0E6B:  BCF    03.7
0E6C:  BTFSC  34.0
0E6D:  BSF    03.7
0E6E:  MOVF   00,W
0E6F:  MOVWF  77
0E70:  MOVF   35,W
0E71:  MOVWF  04
0E72:  BCF    03.7
0E73:  BTFSC  36.0
0E74:  BSF    03.7
0E75:  MOVF   77,W
0E76:  MOVWF  00
0E77:  INCF   35,F
0E78:  BTFSC  03.2
0E79:  INCF   36,F
0E7A:  INCF   33,F
0E7B:  BTFSC  03.2
0E7C:  INCF   34,F
0E7D:  DECFSZ 78,F
0E7E:  GOTO   669
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0E7F:  MOVLW  08
0E80:  MOVWF  2A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
0E81:  MOVF   2D,W
0E82:  BCF    0A.3
0E83:  BCF    03.6
0E84:  CALL   004
0E85:  BSF    0A.3
0E86:  MOVWF  78
0E87:  BSF    03.6
0E88:  MOVWF  2B
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
0E89:  MOVF   2E,W
0E8A:  BCF    0A.3
0E8B:  BCF    03.6
0E8C:  CALL   004
0E8D:  BSF    0A.3
0E8E:  MOVWF  78
0E8F:  BSF    03.6
0E90:  MOVWF  2C
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
0E91:  MOVLW  01
0E92:  MOVWF  3A
0E93:  MOVLW  29
0E94:  MOVWF  39
0E95:  MOVLW  04
0E96:  MOVWF  3B
0E97:  BCF    0A.3
0E98:  BCF    03.6
0E99:  CALL   670
0E9A:  BSF    0A.3
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0EB3:  CLRF   29
0EB4:  CLRF   2A
0EB5:  CLRF   2B
0EB6:  CLRF   2C
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0EB7:  MOVLW  0C
0EB8:  ADDWF  27,W
0EB9:  MOVWF  78
0EBA:  MOVF   28,W
0EBB:  MOVWF  7A
0EBC:  BTFSC  03.0
0EBD:  INCF   7A,F
0EBE:  MOVF   78,W
0EBF:  MOVWF  33
0EC0:  MOVF   7A,W
0EC1:  MOVWF  34
0EC2:  MOVWF  3E
0EC3:  MOVF   33,W
0EC4:  MOVWF  3D
0EC5:  CLRF   3F
0EC6:  BCF    0A.3
0EC7:  BCF    03.6
0EC8:  CALL   606
0EC9:  BSF    0A.3
0ECA:  MOVF   79,W
0ECB:  MOVWF  7A
0ECC:  MOVF   78,W
0ECD:  BSF    03.6
0ECE:  MOVWF  33
0ECF:  MOVF   7A,W
0ED0:  MOVWF  34
0ED1:  MOVLW  01
0ED2:  MOVWF  36
0ED3:  MOVLW  2D
0ED4:  MOVWF  35
0ED5:  MOVLW  06
0ED6:  MOVWF  78
0ED7:  MOVF   33,W
0ED8:  MOVWF  04
0ED9:  BCF    03.7
0EDA:  BTFSC  34.0
0EDB:  BSF    03.7
0EDC:  MOVF   00,W
0EDD:  MOVWF  77
0EDE:  MOVF   35,W
0EDF:  MOVWF  04
0EE0:  BCF    03.7
0EE1:  BTFSC  36.0
0EE2:  BSF    03.7
0EE3:  MOVF   77,W
0EE4:  MOVWF  00
0EE5:  INCF   35,F
0EE6:  BTFSC  03.2
0EE7:  INCF   36,F
0EE8:  INCF   33,F
0EE9:  BTFSC  03.2
0EEA:  INCF   34,F
0EEB:  DECFSZ 78,F
0EEC:  GOTO   6D7
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
0EED:  MOVLW  08
0EEE:  MOVWF  2A
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
0EEF:  MOVF   2F,W
0EF0:  BCF    0A.3
0EF1:  BCF    03.6
0EF2:  CALL   004
0EF3:  BSF    0A.3
0EF4:  MOVWF  78
0EF5:  BSF    03.6
0EF6:  MOVWF  2B
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
0EF7:  MOVF   30,W
0EF8:  BCF    0A.3
0EF9:  BCF    03.6
0EFA:  CALL   004
0EFB:  BSF    0A.3
0EFC:  MOVWF  78
0EFD:  BSF    03.6
0EFE:  MOVWF  2C
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
0EFF:  MOVLW  01
0F00:  MOVWF  3A
0F01:  MOVLW  29
0F02:  MOVWF  39
0F03:  MOVLW  04
0F04:  MOVWF  3B
0F05:  BCF    0A.3
0F06:  BCF    03.6
0F07:  CALL   670
0F08:  BSF    0A.3
0F09:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000 // .    
....................     0b11100111, // A 
....................     0b01110101, // a 
....................     0b00010111, 
....................     0b00000100, 
....................     0b10000111, // F 
....................     0b01100100, 
....................     0b10010110, // C 
....................     0b11000011, 
....................     0b00110101, 
....................     0b00110101, 
....................     0b10010111, // E 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_OVERFLOWED, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
.................... } PolyoneDisplay; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateRtc(&polyoneDisplayPtr->timer); 
*
0560:  BSF    03.6
0561:  MOVF   5B,W
0562:  MOVWF  78
0563:  MOVF   5C,W
0564:  MOVWF  7A
0565:  MOVF   78,W
0566:  MOVWF  5D
0567:  MOVF   7A,W
0568:  MOVWF  5E
0569:  MOVF   5E,W
056A:  MOVWF  60
056B:  MOVF   5D,W
056C:  MOVWF  5F
*
059B:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
02D0:  BSF    03.6
02D1:  MOVF   5B,W
02D2:  MOVWF  78
02D3:  MOVF   5C,W
02D4:  MOVWF  7A
02D5:  MOVF   78,W
02D6:  MOVWF  5D
02D7:  MOVF   7A,W
02D8:  MOVWF  5E
02D9:  MOVF   5E,W
02DA:  MOVWF  60
02DB:  MOVF   5D,W
02DC:  MOVWF  5F
*
04CF:  BCF    03.5
04D0:  BCF    03.6
04D1:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(__EEADDRESS__ addressCurrentState, 
....................         __EEADDRESS__ addressPreviousState, __EEADDRESS__ addressFormat, 
....................         __EEADDRESS__ addressFirstNumberAlarm, 
....................         __EEADDRESS__ addressSecondNumberAlarm, __EEADDRESS__ addressRtcHours, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
0954:  MOVF   29,W
0955:  MOVWF  58
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
0956:  MOVF   2B,W
0957:  MOVWF  59
....................     polyoneDisplay.addressFormat = addressFormat; 
0958:  MOVF   2D,W
0959:  MOVWF  5A
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
095A:  MOVF   2D,W
095B:  MOVWF  0D
095C:  BSF    03.5
095D:  BCF    0C.7
095E:  BSF    0C.0
095F:  BCF    03.5
0960:  MOVF   0C,W
0961:  ANDLW  01
0962:  MOVWF  78
0963:  BCF    55.0
0964:  BTFSC  78.0
0965:  BSF    55.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
0966:  MOVF   29,W
0967:  MOVWF  0D
0968:  BSF    03.5
0969:  BCF    0C.7
096A:  BSF    0C.0
096B:  BCF    03.5
096C:  MOVF   0C,W
096D:  MOVWF  5C
096E:  MOVF   5C,W
096F:  BSF    03.5
0970:  MOVWF  34
0971:  MOVLW  03
0972:  MOVWF  35
0973:  BCF    0A.3
0974:  BCF    03.5
0975:  BCF    03.6
0976:  CALL   02B
0977:  BSF    0A.3
0978:  MOVF   77,W
0979:  BSF    03.6
097A:  MOVWF  56
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
097B:  MOVF   2B,W
097C:  MOVWF  0D
097D:  BSF    03.5
097E:  BCF    0C.7
097F:  BSF    0C.0
0980:  BCF    03.5
0981:  MOVF   0C,W
0982:  MOVWF  5C
0983:  MOVF   5C,W
0984:  BSF    03.5
0985:  MOVWF  34
0986:  MOVLW  03
0987:  MOVWF  35
0988:  BCF    0A.3
0989:  BCF    03.5
098A:  BCF    03.6
098B:  CALL   02B
098C:  BSF    0A.3
098D:  MOVF   77,W
098E:  BSF    03.6
098F:  MOVWF  57
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
0990:  MOVF   57,F
0991:  BTFSS  03.2
0992:  GOTO   198
0993:  MOVF   56,F
0994:  BTFSS  03.2
0995:  GOTO   198
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
0996:  MOVLW  02
0997:  MOVWF  57
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
0998:  MOVLW  00
0999:  BTFSC  55.0
099A:  MOVLW  01
099B:  XORLW  01
099C:  BCF    03.6
099D:  BTFSC  03.2
099E:  GOTO   1A3
099F:  XORLW  01
09A0:  BTFSC  03.2
09A1:  GOTO   241
09A2:  GOTO   2D5
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
09A3:  MOVLW  63
09A4:  BSF    03.6
09A5:  MOVWF  69
09A6:  MOVLW  3B
09A7:  MOVWF  6A
09A8:  MOVF   30,W
09A9:  MOVWF  6C
09AA:  MOVF   2F,W
09AB:  MOVWF  6B
09AC:  MOVF   32,W
09AD:  MOVWF  6E
09AE:  MOVF   31,W
09AF:  MOVWF  6D
09B0:  MOVF   34,W
09B1:  BSF    03.5
09B2:  MOVWF  11
09B3:  BCF    03.5
09B4:  MOVF   33,W
09B5:  BSF    03.5
09B6:  MOVWF  10
09B7:  BCF    03.5
09B8:  MOVF   36,W
09B9:  BSF    03.5
09BA:  MOVWF  13
09BB:  BCF    03.5
09BC:  MOVF   35,W
09BD:  BSF    03.5
09BE:  MOVWF  12
09BF:  BCF    03.5
09C0:  MOVF   38,W
09C1:  BSF    03.5
09C2:  MOVWF  15
09C3:  BCF    03.5
09C4:  MOVF   37,W
09C5:  BSF    03.5
09C6:  MOVWF  14
*
0A1C:  MOVF   79,W
0A1D:  MOVWF  7A
0A1E:  MOVF   78,W
0A1F:  BCF    03.5
0A20:  MOVWF  63
0A21:  MOVF   7A,W
0A22:  MOVWF  64
0A23:  MOVLW  01
0A24:  MOVWF  66
0A25:  MOVLW  39
0A26:  MOVWF  65
0A27:  MOVLW  1C
0A28:  MOVWF  78
0A29:  MOVF   63,W
0A2A:  MOVWF  04
0A2B:  BCF    03.7
0A2C:  BTFSC  64.0
0A2D:  BSF    03.7
0A2E:  MOVF   00,W
0A2F:  MOVWF  77
0A30:  MOVF   65,W
0A31:  MOVWF  04
0A32:  BCF    03.7
0A33:  BTFSC  66.0
0A34:  BSF    03.7
0A35:  MOVF   77,W
0A36:  MOVWF  00
0A37:  INCF   65,F
0A38:  BTFSC  03.2
0A39:  INCF   66,F
0A3A:  INCF   63,F
0A3B:  BTFSC  03.2
0A3C:  INCF   64,F
0A3D:  DECFSZ 78,F
0A3E:  GOTO   229
....................             break; 
0A3F:  BCF    03.6
0A40:  GOTO   2D5
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0A41:  MOVLW  63
0A42:  BSF    03.6
0A43:  MOVWF  69
0A44:  MOVF   30,W
0A45:  MOVWF  6B
0A46:  MOVF   2F,W
0A47:  MOVWF  6A
0A48:  MOVF   32,W
0A49:  MOVWF  6D
0A4A:  MOVF   31,W
0A4B:  MOVWF  6C
0A4C:  MOVF   34,W
0A4D:  MOVWF  6F
0A4E:  MOVF   33,W
0A4F:  MOVWF  6E
0A50:  MOVF   36,W
0A51:  BSF    03.5
0A52:  MOVWF  11
0A53:  BCF    03.5
0A54:  MOVF   35,W
0A55:  BSF    03.5
0A56:  MOVWF  10
0A57:  BCF    03.5
0A58:  MOVF   38,W
0A59:  BSF    03.5
0A5A:  MOVWF  13
0A5B:  BCF    03.5
0A5C:  MOVF   37,W
0A5D:  BSF    03.5
0A5E:  MOVWF  12
*
0AB1:  MOVF   79,W
0AB2:  MOVWF  7A
0AB3:  MOVF   78,W
0AB4:  BCF    03.5
0AB5:  MOVWF  63
0AB6:  MOVF   7A,W
0AB7:  MOVWF  64
0AB8:  MOVLW  01
0AB9:  MOVWF  66
0ABA:  MOVLW  39
0ABB:  MOVWF  65
0ABC:  MOVLW  1C
0ABD:  MOVWF  78
0ABE:  MOVF   63,W
0ABF:  MOVWF  04
0AC0:  BCF    03.7
0AC1:  BTFSC  64.0
0AC2:  BSF    03.7
0AC3:  MOVF   00,W
0AC4:  MOVWF  77
0AC5:  MOVF   65,W
0AC6:  MOVWF  04
0AC7:  BCF    03.7
0AC8:  BTFSC  66.0
0AC9:  BSF    03.7
0ACA:  MOVF   77,W
0ACB:  MOVWF  00
0ACC:  INCF   65,F
0ACD:  BTFSC  03.2
0ACE:  INCF   66,F
0ACF:  INCF   63,F
0AD0:  BTFSC  03.2
0AD1:  INCF   64,F
0AD2:  DECFSZ 78,F
0AD3:  GOTO   2BE
....................  
....................             break; 
0AD4:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
0AD5:  BSF    03.6
0AD6:  MOVF   56,F
0AD7:  BTFSS  03.2
0AD8:  GOTO   2EC
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0AD9:  MOVLW  01
0ADA:  MOVWF  5C
0ADB:  MOVLW  39
0ADC:  MOVWF  5B
0ADD:  BCF    0A.3
0ADE:  BCF    03.6
0ADF:  CALL   2D0
0AE0:  BSF    0A.3
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
0AE1:  MOVLW  01
0AE2:  BSF    03.6
0AE3:  MOVWF  5C
0AE4:  MOVLW  39
0AE5:  MOVWF  5B
0AE6:  BCF    0A.3
0AE7:  BCF    03.6
0AE8:  CALL   560
0AE9:  BSF    0A.3
....................     } else { 
0AEA:  GOTO   2F4
0AEB:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0AEC:  MOVLW  01
0AED:  MOVWF  5C
0AEE:  MOVLW  39
0AEF:  MOVWF  5B
0AF0:  BCF    0A.3
0AF1:  BCF    03.6
0AF2:  CALL   2D0
0AF3:  BSF    0A.3
....................     } 
....................  
....................     return polyoneDisplay; 
0AF4:  MOVLW  39
0AF5:  MOVWF  78
0AF6:  MOVLW  01
0AF7:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0724:  MOVLW  1C
0725:  BSF    03.6
0726:  ADDWF  23,W
0727:  MOVWF  04
0728:  BCF    03.7
0729:  BTFSC  24.0
072A:  BSF    03.7
072B:  MOVF   00,W
072C:  ANDLW  01
072D:  SUBLW  01
072E:  BTFSS  03.2
072F:  GOTO   796
....................         Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0730:  MOVF   23,W
0731:  MOVWF  78
0732:  MOVF   24,W
0733:  MOVWF  7A
0734:  MOVF   78,W
0735:  MOVWF  26
0736:  MOVF   7A,W
0737:  MOVWF  27
0738:  MOVF   27,W
0739:  MOVWF  29
073A:  MOVF   26,W
073B:  MOVWF  28
073C:  MOVF   25,W
073D:  MOVWF  2A
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0794:  GOTO   7F3
0795:  BSF    03.6
0796:  MOVLW  1C
0797:  ADDWF  23,W
0798:  MOVWF  04
0799:  BCF    03.7
079A:  BTFSC  24.0
079B:  BSF    03.7
079C:  MOVF   00,W
079D:  ANDLW  01
079E:  BTFSS  03.2
079F:  GOTO   7F4
....................  
....................         Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
07A0:  MOVF   23,W
07A1:  MOVWF  78
07A2:  MOVF   24,W
07A3:  MOVWF  7A
07A4:  MOVF   78,W
07A5:  MOVWF  26
07A6:  MOVF   7A,W
07A7:  MOVWF  27
07A8:  MOVF   27,W
07A9:  MOVWF  29
07AA:  MOVF   26,W
07AB:  MOVWF  28
....................     } 
*
07F4:  BCF    03.6
07F5:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0867:  MOVLW  1C
0868:  BSF    03.6
0869:  ADDWF  23,W
086A:  MOVWF  04
086B:  BCF    03.7
086C:  BTFSC  24.0
086D:  BSF    03.7
086E:  MOVF   00,W
086F:  ANDLW  01
0870:  SUBLW  01
0871:  BTFSS  03.2
0872:  GOTO   0CF
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0873:  MOVF   23,W
0874:  MOVWF  78
0875:  MOVF   24,W
0876:  MOVWF  7A
0877:  MOVF   78,W
0878:  MOVWF  25
0879:  MOVF   7A,W
087A:  MOVWF  26
087B:  MOVF   26,W
087C:  MOVWF  28
087D:  MOVF   25,W
087E:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
08CD:  GOTO   133
08CE:  BSF    03.6
08CF:  MOVLW  1C
08D0:  ADDWF  23,W
08D1:  MOVWF  04
08D2:  BCF    03.7
08D3:  BTFSC  24.0
08D4:  BSF    03.7
08D5:  MOVF   00,W
08D6:  ANDLW  01
08D7:  BTFSS  03.2
08D8:  GOTO   134
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
08D9:  MOVF   23,W
08DA:  MOVWF  78
08DB:  MOVF   24,W
08DC:  MOVWF  7A
08DD:  MOVF   78,W
08DE:  MOVWF  25
08DF:  MOVF   7A,W
08E0:  MOVWF  26
08E1:  MOVF   26,W
08E2:  MOVWF  28
08E3:  MOVF   25,W
08E4:  MOVWF  27
....................     } 
*
0934:  BCF    03.6
0935:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0E2E:  MOVLW  1C
0E2F:  ADDWF  23,W
0E30:  MOVWF  04
0E31:  BCF    03.7
0E32:  BTFSC  24.0
0E33:  BSF    03.7
0E34:  MOVF   00,W
0E35:  ANDLW  01
0E36:  SUBLW  01
0E37:  BTFSS  03.2
0E38:  GOTO   69D
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
0E39:  MOVF   23,W
0E3A:  MOVWF  78
0E3B:  MOVF   24,W
0E3C:  MOVWF  7A
0E3D:  MOVF   78,W
0E3E:  MOVWF  25
0E3F:  MOVF   7A,W
0E40:  MOVWF  26
0E41:  MOVF   26,W
0E42:  MOVWF  28
0E43:  MOVF   25,W
0E44:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0E9B:  GOTO   709
0E9C:  BSF    03.6
0E9D:  MOVLW  1C
0E9E:  ADDWF  23,W
0E9F:  MOVWF  04
0EA0:  BCF    03.7
0EA1:  BTFSC  24.0
0EA2:  BSF    03.7
0EA3:  MOVF   00,W
0EA4:  ANDLW  01
0EA5:  BTFSS  03.2
0EA6:  GOTO   70A
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0EA7:  MOVF   23,W
0EA8:  MOVWF  78
0EA9:  MOVF   24,W
0EAA:  MOVWF  7A
0EAB:  MOVF   78,W
0EAC:  MOVWF  25
0EAD:  MOVF   7A,W
0EAE:  MOVWF  26
0EAF:  MOVF   26,W
0EB0:  MOVWF  28
0EB1:  MOVF   25,W
0EB2:  MOVWF  27
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0D2F:  MOVLW  1C
0D30:  ADDWF  23,W
0D31:  MOVWF  04
0D32:  BCF    03.7
0D33:  BTFSC  24.0
0D34:  BSF    03.7
0D35:  MOVF   00,W
0D36:  ANDLW  01
0D37:  SUBLW  01
0D38:  BTFSS  03.2
0D39:  GOTO   59C
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0D3A:  MOVF   23,W
0D3B:  MOVWF  78
0D3C:  MOVF   24,W
0D3D:  MOVWF  7A
0D3E:  MOVF   78,W
0D3F:  MOVWF  25
0D40:  MOVF   7A,W
0D41:  MOVWF  26
0D42:  MOVF   26,W
0D43:  MOVWF  28
0D44:  MOVF   25,W
0D45:  MOVWF  27
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0D9A:  GOTO   606
0D9B:  BSF    03.6
0D9C:  MOVLW  1C
0D9D:  ADDWF  23,W
0D9E:  MOVWF  04
0D9F:  BCF    03.7
0DA0:  BTFSC  24.0
0DA1:  BSF    03.7
0DA2:  MOVF   00,W
0DA3:  ANDLW  01
0DA4:  BTFSS  03.2
0DA5:  GOTO   607
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0DA6:  MOVF   23,W
0DA7:  MOVWF  78
0DA8:  MOVF   24,W
0DA9:  MOVWF  7A
0DAA:  MOVF   78,W
0DAB:  MOVWF  25
0DAC:  MOVF   7A,W
0DAD:  MOVWF  26
0DAE:  MOVF   26,W
0DAF:  MOVWF  28
0DB0:  MOVF   25,W
0DB1:  MOVWF  27
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0BB5:  MOVF   23,W
0BB6:  MOVWF  78
0BB7:  MOVF   24,W
0BB8:  MOVWF  7A
0BB9:  MOVF   78,W
0BBA:  MOVWF  25
0BBB:  MOVF   7A,W
0BBC:  MOVWF  26
0BBD:  MOVF   26,W
0BBE:  MOVWF  28
0BBF:  MOVF   25,W
0BC0:  MOVWF  27
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0CF0:  MOVLW  1E
0CF1:  ADDWF  23,W
0CF2:  MOVWF  78
0CF3:  MOVF   24,W
0CF4:  MOVWF  7A
0CF5:  BTFSC  03.0
0CF6:  INCF   7A,F
0CF7:  MOVF   78,W
0CF8:  MOVWF  26
0CF9:  MOVF   7A,W
0CFA:  MOVWF  27
0CFB:  MOVLW  1D
0CFC:  ADDWF  23,W
0CFD:  MOVWF  04
0CFE:  BCF    03.7
0CFF:  BTFSC  24.0
0D00:  BSF    03.7
0D01:  MOVF   00,W
0D02:  MOVWF  28
0D03:  MOVF   26,W
0D04:  MOVWF  04
0D05:  BCF    03.7
0D06:  BTFSC  27.0
0D07:  BSF    03.7
0D08:  MOVF   28,W
0D09:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
0D0A:  MOVLW  1D
0D0B:  ADDWF  23,W
0D0C:  MOVWF  04
0D0D:  BCF    03.7
0D0E:  BTFSC  24.0
0D0F:  BSF    03.7
0D10:  MOVF   25,W
0D11:  MOVWF  00
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0B91:  MOVLW  1E
0B92:  ADDWF  23,W
0B93:  MOVWF  78
0B94:  MOVF   24,W
0B95:  MOVWF  7A
0B96:  BTFSC  03.0
0B97:  INCF   7A,F
0B98:  MOVF   78,W
0B99:  MOVWF  25
0B9A:  MOVF   7A,W
0B9B:  MOVWF  26
0B9C:  MOVLW  1D
0B9D:  ADDWF  23,W
0B9E:  MOVWF  04
0B9F:  BCF    03.7
0BA0:  BTFSC  24.0
0BA1:  BSF    03.7
0BA2:  MOVF   00,W
0BA3:  MOVWF  27
0BA4:  MOVF   25,W
0BA5:  MOVWF  04
0BA6:  BCF    03.7
0BA7:  BTFSC  26.0
0BA8:  BSF    03.7
0BA9:  MOVF   27,W
0BAA:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0BAB:  MOVLW  1D
0BAC:  ADDWF  23,W
0BAD:  MOVWF  04
0BAE:  BCF    03.7
0BAF:  BTFSC  24.0
0BB0:  BSF    03.7
0BB1:  CLRF   00
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0800:  MOVLW  1F
0801:  BSF    03.6
0802:  ADDWF  23,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  24.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  25
0809:  MOVLW  1D
080A:  ADDWF  23,W
080B:  MOVWF  04
080C:  BCF    03.7
080D:  BTFSC  24.0
080E:  BSF    03.7
080F:  MOVF   00,W
0810:  MOVWF  26
0811:  BCF    03.6
0812:  MOVF   0B,W
0813:  MOVWF  77
0814:  BCF    0B.7
0815:  BSF    03.6
0816:  MOVF   25,W
0817:  MOVWF  0D
0818:  MOVF   26,W
0819:  MOVWF  0C
081A:  BSF    03.5
081B:  BCF    0C.7
081C:  BSF    0C.2
081D:  MOVLW  55
081E:  MOVWF  0D
081F:  MOVLW  AA
0820:  MOVWF  0D
0821:  BSF    0C.1
0822:  BTFSC  0C.1
0823:  GOTO   022
0824:  BCF    0C.2
0825:  MOVF   77,W
0826:  BCF    03.5
0827:  BCF    03.6
0828:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0829:  MOVLW  20
082A:  BSF    03.6
082B:  ADDWF  23,W
082C:  MOVWF  04
082D:  BCF    03.7
082E:  BTFSC  24.0
082F:  BSF    03.7
0830:  MOVF   00,W
0831:  MOVWF  25
0832:  MOVLW  1E
0833:  ADDWF  23,W
0834:  MOVWF  04
0835:  BCF    03.7
0836:  BTFSC  24.0
0837:  BSF    03.7
0838:  MOVF   00,W
0839:  MOVWF  26
083A:  BCF    03.6
083B:  MOVF   0B,W
083C:  MOVWF  77
083D:  BCF    0B.7
083E:  BSF    03.6
083F:  MOVF   25,W
0840:  MOVWF  0D
0841:  MOVF   26,W
0842:  MOVWF  0C
0843:  BSF    03.5
0844:  BCF    0C.7
0845:  BSF    0C.2
0846:  MOVLW  55
0847:  MOVWF  0D
0848:  MOVLW  AA
0849:  MOVWF  0D
084A:  BSF    0C.1
084B:  BTFSC  0C.1
084C:  GOTO   04B
084D:  BCF    0C.2
084E:  MOVF   77,W
084F:  BCF    03.5
0850:  BCF    03.6
0851:  IORWF  0B,F
0852:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
0B32:  MOVLW  1D
0B33:  ADDWF  23,W
0B34:  MOVWF  04
0B35:  BCF    03.7
0B36:  BTFSC  24.0
0B37:  BSF    03.7
0B38:  MOVF   00,W
0B39:  MOVWF  25
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
0B3A:  MOVLW  1D
0B3B:  ADDWF  23,W
0B3C:  MOVWF  78
0B3D:  MOVF   24,W
0B3E:  MOVWF  7A
0B3F:  BTFSC  03.0
0B40:  INCF   7A,F
0B41:  MOVF   78,W
0B42:  MOVWF  26
0B43:  MOVF   7A,W
0B44:  MOVWF  27
0B45:  MOVLW  1E
0B46:  ADDWF  23,W
0B47:  MOVWF  04
0B48:  BCF    03.7
0B49:  BTFSC  24.0
0B4A:  BSF    03.7
0B4B:  MOVF   00,W
0B4C:  MOVWF  28
0B4D:  MOVF   26,W
0B4E:  MOVWF  04
0B4F:  BCF    03.7
0B50:  BTFSC  27.0
0B51:  BSF    03.7
0B52:  MOVF   28,W
0B53:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
0B54:  MOVLW  1E
0B55:  ADDWF  23,W
0B56:  MOVWF  04
0B57:  BCF    03.7
0B58:  BTFSC  24.0
0B59:  BSF    03.7
0B5A:  MOVF   25,W
0B5B:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
0C4E:  MOVF   23,W
0C4F:  MOVWF  78
0C50:  MOVF   24,W
0C51:  MOVWF  7A
0C52:  MOVF   78,W
0C53:  MOVWF  25
0C54:  MOVF   7A,W
0C55:  MOVWF  26
0C56:  MOVF   26,W
0C57:  MOVWF  28
0C58:  MOVF   25,W
0C59:  MOVWF  27
*
0C85:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... // Buttons 
.................... #define  BUTTON_START_STOP_RESET    PIN_B1 
.................... #define  BUTTON_MENU                PIN_B0 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
.................... } EEPROM_ADDRESS; 
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... void main(void) { 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  FF
1004:  MOVWF  20
1005:  BSF    3E.0
1006:  BSF    3E.1
1007:  BSF    3E.2
1008:  BSF    3E.3
1009:  BSF    3E.4
100A:  CLRF   62
100B:  CLRF   63
100C:  CLRF   64
100D:  BSF    03.5
100E:  BSF    03.6
100F:  MOVF   09,W
1010:  ANDLW  C0
1011:  MOVWF  09
1012:  BCF    03.6
1013:  BCF    1F.4
1014:  BCF    1F.5
1015:  MOVLW  00
1016:  BSF    03.6
1017:  MOVWF  08
1018:  BCF    03.5
1019:  CLRF   07
101A:  CLRF   08
101B:  CLRF   09
101C:  BCF    03.7
....................     setupHardware(); 
*
101F:  BCF    0A.4
1020:  BSF    0A.3
1021:  GOTO   796
1022:  BSF    0A.4
1023:  BCF    0A.3
....................     myPolyoneDisplay.currentState = STATE_INIT; 
1024:  MOVLW  03
1025:  MOVWF  5C
....................     rtos_run(); 
1026:  CLRF   22
1027:  CLRF   24
1028:  MOVLW  05
1029:  MOVWF  23
102A:  CLRF   26
102B:  CLRF   25
102C:  MOVLW  49
102D:  MOVWF  27
102E:  MOVLW  0F
102F:  MOVWF  28
1030:  CLRF   29
1031:  CLRF   2B
1032:  MOVLW  05
1033:  MOVWF  2A
1034:  CLRF   2D
1035:  MOVLW  01
1036:  MOVWF  2C
1037:  MOVLW  67
1038:  MOVWF  2E
1039:  MOVLW  0F
103A:  MOVWF  2F
103B:  CLRF   30
103C:  CLRF   32
103D:  MOVLW  01
103E:  MOVWF  31
103F:  CLRF   34
1040:  CLRF   33
1041:  MOVLW  36
1042:  MOVWF  35
1043:  MOVLW  09
1044:  MOVWF  36
1045:  CLRF   37
1046:  CLRF   39
1047:  MOVLW  14
1048:  MOVWF  38
1049:  CLRF   3B
104A:  MOVLW  02
104B:  MOVWF  3A
104C:  MOVLW  85
104D:  MOVWF  3C
104E:  MOVLW  0F
104F:  MOVWF  3D
1050:  CLRF   21
1051:  BSF    03.5
1052:  MOVF   01,W
1053:  ANDLW  C0
1054:  IORLW  07
1055:  MOVWF  01
1056:  MOVLW  3D
1057:  BCF    03.5
1058:  MOVWF  01
1059:  BCF    0B.2
105A:  BCF    03.0
105B:  RLF    21,W
105C:  MOVWF  77
105D:  BCF    0A.4
105E:  CALL   01F
105F:  BSF    0A.4
1060:  MOVWF  79
1061:  MOVLW  01
1062:  ADDWF  77,W
1063:  BCF    0A.4
1064:  CALL   01F
1065:  BSF    0A.4
1066:  MOVWF  7A
1067:  MOVF   79,W
1068:  MOVWF  04
1069:  BCF    03.7
106A:  BTFSC  7A.0
106B:  BSF    03.7
106C:  MOVF   00,W
106D:  MOVWF  79
106E:  INCF   04,F
106F:  MOVF   00,W
1070:  MOVWF  77
1071:  INCF   04,F
1072:  MOVF   00,W
1073:  MOVWF  78
1074:  INCF   04,F
1075:  INCF   00,F
1076:  MOVF   00,W
1077:  MOVWF  7A
1078:  BTFSS  03.2
1079:  GOTO   07D
107A:  INCF   04,F
107B:  INCF   00,F
107C:  DECF   04,F
107D:  INCF   04,F
107E:  MOVF   00,W
107F:  SUBWF  78,W
1080:  BTFSS  03.2
1081:  GOTO   095
1082:  MOVF   77,W
1083:  SUBWF  7A,W
1084:  BTFSS  03.2
1085:  GOTO   095
1086:  DECF   04,F
1087:  CLRF   00
1088:  INCF   04,F
1089:  CLRF   00
108A:  INCF   04,F
108B:  BTFSC  79.7
108C:  GOTO   095
108D:  INCF   04,F
108E:  MOVF   00,W
108F:  MOVWF  0A
1090:  DECF   04,F
1091:  MOVF   00,W
1092:  MOVWF  02
1093:  BCF    03.5
1094:  BCF    03.6
1095:  INCF   21,F
1096:  MOVLW  04
1097:  SUBWF  21,W
1098:  BTFSS  03.2
1099:  GOTO   05A
109A:  CLRF   21
109B:  MOVF   01,W
109C:  BTFSS  0B.2
109D:  GOTO   0A0
109E:  BSF    03.5
109F:  GOTO   056
10A0:  GOTO   09B
10A1:  MOVLW  FF
10A2:  MOVWF  21
.................... } 
....................  
10A3:  SLEEP
.................... void Task_runStateMachine(void) { 
....................     static BOOLEAN startStopButtonState = TRUE; 
....................     static BOOLEAN menuButtonState = TRUE; 
....................     static PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
*
101D:  BCF    03.6
101E:  CLRF   61
....................     static int numberOfMenuButtonHasBeenReleased = 0; 
....................  
....................     switch (myPolyoneDisplay.currentState) { 
*
0936:  MOVF   5C,W
0937:  ADDLW  F5
0938:  BTFSC  03.0
0939:  GOTO   71F
093A:  ADDLW  0B
093B:  GOTO   73A
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new( 
....................                     EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS 
....................                     ); 
093C:  BSF    03.6
093D:  CLRF   2A
093E:  CLRF   29
093F:  CLRF   2C
0940:  MOVLW  01
0941:  MOVWF  2B
0942:  CLRF   2E
0943:  MOVLW  02
0944:  MOVWF  2D
0945:  CLRF   30
0946:  MOVLW  03
0947:  MOVWF  2F
0948:  CLRF   32
0949:  MOVLW  04
094A:  MOVWF  31
094B:  CLRF   34
094C:  MOVLW  05
094D:  MOVWF  33
094E:  CLRF   36
094F:  MOVLW  06
0950:  MOVWF  35
0951:  CLRF   38
0952:  MOVLW  07
0953:  MOVWF  37
*
0AF8:  MOVF   79,W
0AF9:  MOVWF  7A
0AFA:  MOVF   78,W
0AFB:  BSF    03.6
0AFC:  MOVWF  23
0AFD:  MOVF   7A,W
0AFE:  MOVWF  24
0AFF:  CLRF   26
0B00:  MOVLW  3F
0B01:  MOVWF  25
0B02:  MOVLW  22
0B03:  MOVWF  78
0B04:  MOVF   23,W
0B05:  MOVWF  04
0B06:  BCF    03.7
0B07:  BTFSC  24.0
0B08:  BSF    03.7
0B09:  MOVF   00,W
0B0A:  MOVWF  77
0B0B:  MOVF   25,W
0B0C:  MOVWF  04
0B0D:  BCF    03.7
0B0E:  BTFSC  26.0
0B0F:  BSF    03.7
0B10:  MOVF   77,W
0B11:  MOVWF  00
0B12:  INCF   25,F
0B13:  BTFSC  03.2
0B14:  INCF   26,F
0B15:  INCF   23,F
0B16:  BTFSC  03.2
0B17:  INCF   24,F
0B18:  DECFSZ 78,F
0B19:  GOTO   304
....................  
....................             //            if (myPolyoneDisplay.currentState == STATE_IDLE) { 
....................             //                PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
....................             //                PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
....................             //            } else { 
....................             //                PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
....................             //            } 
....................  
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0B1A:  CLRF   24
0B1B:  MOVLW  3F
0B1C:  MOVWF  23
0B1D:  CLRF   25
0B1E:  BCF    0A.3
0B1F:  BCF    03.6
0B20:  CALL   724
0B21:  BSF    0A.3
....................  
....................             break; 
0B22:  GOTO   71F
....................  
....................         case STATE_IDLE: 
....................             output_high(PIN_B3); 
0B23:  BSF    03.5
0B24:  BCF    06.3
0B25:  BCF    03.5
0B26:  BSF    06.3
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0B27:  BSF    03.5
0B28:  BSF    06.1
0B29:  BCF    03.5
0B2A:  BTFSS  06.1
0B2B:  GOTO   369
0B2C:  BTFSC  3E.3
0B2D:  GOTO   369
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
0B2E:  BSF    03.6
0B2F:  CLRF   24
0B30:  MOVLW  3F
0B31:  MOVWF  23
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0B5C:  CLRF   24
0B5D:  MOVLW  3F
0B5E:  MOVWF  23
0B5F:  BCF    03.6
0B60:  CALL   000
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
0B61:  BSF    03.6
0B62:  CLRF   5C
0B63:  MOVLW  3F
0B64:  MOVWF  5B
0B65:  BCF    0A.3
0B66:  BCF    03.6
0B67:  CALL   560
0B68:  BSF    0A.3
....................  
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0B69:  BTFSC  3E.1
0B6A:  GOTO   36E
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0B6B:  BSF    3E.1
....................                 myPolyoneDisplay.currentState = STATE_RESETTING; 
0B6C:  MOVLW  04
0B6D:  MOVWF  5C
....................             } 
....................             break; 
0B6E:  GOTO   71F
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0B6F:  BSF    03.6
0B70:  CLRF   5C
0B71:  MOVLW  3F
0B72:  MOVWF  5B
0B73:  BCF    0A.3
0B74:  BCF    03.6
0B75:  CALL   2D0
0B76:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0B77:  BSF    03.6
0B78:  CLRF   24
0B79:  MOVLW  3F
0B7A:  MOVWF  23
0B7B:  MOVLW  01
0B7C:  MOVWF  25
0B7D:  BCF    0A.3
0B7E:  BCF    03.6
0B7F:  CALL   724
0B80:  BSF    0A.3
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0B81:  BTFSC  3E.1
0B82:  GOTO   386
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0B83:  BSF    3E.1
....................                 myPolyoneDisplay.currentState = STATE_RESETTING; 
0B84:  MOVLW  04
0B85:  MOVWF  5C
....................             } 
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0B86:  BSF    03.5
0B87:  BSF    06.1
0B88:  BCF    03.5
0B89:  BTFSS  06.1
0B8A:  GOTO   44A
0B8B:  BTFSC  3E.3
0B8C:  GOTO   44A
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0B8D:  BSF    03.6
0B8E:  CLRF   24
0B8F:  MOVLW  3F
0B90:  MOVWF  23
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
*
0BB2:  CLRF   24
0BB3:  MOVLW  3F
0BB4:  MOVWF  23
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0C3B:  BSF    03.6
0C3C:  CLRF   24
0C3D:  MOVLW  3F
0C3E:  MOVWF  23
0C3F:  BCF    03.6
0C40:  CALL   000
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0C41:  BSF    03.6
0C42:  CLRF   24
0C43:  MOVLW  3F
0C44:  MOVWF  23
0C45:  CLRF   25
0C46:  BCF    0A.3
0C47:  BCF    03.6
0C48:  CALL   724
0C49:  BSF    0A.3
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
0C4A:  BSF    03.6
0C4B:  CLRF   24
0C4C:  MOVLW  3F
0C4D:  MOVWF  23
*
0C86:  MOVF   78,F
0C87:  BTFSC  03.2
0C88:  GOTO   48D
....................  
....................                 myPolyoneDisplay.currentState = STATE_COUNTING_UP; 
0C89:  MOVLW  01
0C8A:  BCF    03.6
0C8B:  MOVWF  5C
0C8C:  BSF    03.6
....................             } 
....................             break; 
0C8D:  BCF    03.6
0C8E:  GOTO   71F
....................  
....................         case STATE_COUNTING_UP: 
....................  
....................             break; 
0C8F:  GOTO   71F
....................  
....................         case STATE_RESETTING: 
....................             Time_clearRtcTime(); 
0C90:  BCF    0A.3
0C91:  CALL   7F6
0C92:  BSF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
0CA8:  MOVLW  08
0CA9:  BSF    03.6
0CAA:  MOVWF  23
0CAB:  MOVLW  FA
0CAC:  MOVWF  24
0CAD:  BCF    03.6
0CAE:  CALL   053
0CAF:  BSF    03.6
0CB0:  DECFSZ 23,F
0CB1:  GOTO   4AB
....................             myPolyoneDisplay.currentState = STATE_WAITING_FOR_BUTTON_BEING_RELEASED; 
0CB2:  MOVLW  0A
0CB3:  BCF    03.6
0CB4:  MOVWF  5C
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
0CB5:  MOVLW  05
0CB6:  MOVWF  61
....................             Time_clearRtcTime(); 
0CB7:  BCF    0A.3
0CB8:  CALL   7F6
0CB9:  BSF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0CBA:  BSF    03.6
0CBB:  CLRF   5C
0CBC:  MOVLW  3F
0CBD:  MOVWF  5B
0CBE:  BCF    0A.3
0CBF:  BCF    03.6
0CC0:  CALL   2D0
0CC1:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0CC2:  BSF    03.6
0CC3:  CLRF   24
0CC4:  MOVLW  3F
0CC5:  MOVWF  23
0CC6:  CLRF   25
0CC7:  BCF    0A.3
0CC8:  BCF    03.6
0CC9:  CALL   724
0CCA:  BSF    0A.3
....................             rtos_enable(Task_checkIfMenuButtonIsHeld); 
0CCB:  BCF    29.7
....................             break; 
0CCC:  GOTO   71F
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(BUTTON_START_STOP_RESET) && input(BUTTON_MENU)) { 
0CCD:  BSF    03.5
0CCE:  BSF    06.1
0CCF:  BCF    03.5
0CD0:  BTFSS  06.1
0CD1:  GOTO   4D9
0CD2:  BSF    03.5
0CD3:  BSF    06.0
0CD4:  BCF    03.5
0CD5:  BTFSS  06.0
0CD6:  GOTO   4D9
....................                 myPolyoneDisplay.currentState = nextStateAfterWaitingForButtonBeingReleased; 
0CD7:  MOVF   61,W
0CD8:  MOVWF  5C
....................             } 
....................             break; 
0CD9:  GOTO   71F
....................  
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0CDA:  BSF    03.6
0CDB:  CLRF   24
0CDC:  MOVLW  3F
0CDD:  MOVWF  23
0CDE:  CLRF   25
0CDF:  BCF    0A.3
0CE0:  BCF    03.6
0CE1:  CALL   724
0CE2:  BSF    0A.3
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0CE3:  BSF    03.5
0CE4:  BSF    06.1
0CE5:  BCF    03.5
0CE6:  BTFSS  06.1
0CE7:  GOTO   51A
0CE8:  BTFSC  3E.3
0CE9:  GOTO   51A
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
0CEA:  BSF    03.6
0CEB:  CLRF   24
0CEC:  MOVLW  3F
0CED:  MOVWF  23
0CEE:  MOVLW  02
0CEF:  MOVWF  25
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0D12:  CLRF   24
0D13:  MOVLW  3F
0D14:  MOVWF  23
0D15:  BCF    03.6
0D16:  CALL   000
....................                 Time_clearRtcTime(); 
0D17:  BCF    0A.3
0D18:  CALL   7F6
0D19:  BSF    0A.3
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
0D1A:  BTFSC  3E.2
0D1B:  GOTO   521
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0D1C:  BSF    3E.2
....................                 myPolyoneDisplay.currentState = STATE_SETTING_FIRST_NUMBER; 
0D1D:  MOVLW  07
0D1E:  MOVWF  5C
....................                 rtos_enable(Task_blinkDisplay); 
0D1F:  BCF    37.7
....................                 rtos_disable(Task_checkIfMenuButtonIsHeld); 
0D20:  BSF    29.7
....................             } 
....................             break; 
0D21:  GOTO   71F
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             if (showDisplayCompletely) { 
0D22:  BTFSS  3E.0
0D23:  GOTO   52B
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
0D24:  BSF    03.6
0D25:  CLRF   24
0D26:  MOVLW  3F
0D27:  MOVWF  23
0D28:  BCF    03.6
0D29:  CALL   067
....................             } else { 
0D2A:  GOTO   606
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
0D2B:  BSF    03.6
0D2C:  CLRF   24
0D2D:  MOVLW  3F
0D2E:  MOVWF  23
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
0E07:  BSF    03.5
0E08:  BCF    03.6
0E09:  BSF    06.1
0E0A:  BCF    03.5
0E0B:  BTFSC  06.1
0E0C:  GOTO   612
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
0E0D:  BSF    03.5
0E0E:  BSF    06.1
0E0F:  BCF    03.5
0E10:  BTFSS  06.1
0E11:  GOTO   60D
....................                     //                    Timer_increaseTimerHours(&myTimer); 
....................                     //                    SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(&myTimer); 
....................                     //                    delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
....................                 } 
....................             } 
....................  
....................  
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
0E12:  BTFSC  3E.4
0E13:  GOTO   619
0E14:  BSF    03.5
0E15:  BSF    06.0
0E16:  BCF    03.5
0E17:  BTFSC  06.0
....................                 numberOfMenuButtonHasBeenReleased++; 
0E18:  INCF   62,F
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
0E19:  MOVF   62,W
0E1A:  SUBLW  01
0E1B:  BTFSC  03.0
0E1C:  GOTO   620
....................                 numberOfMenuButtonHasBeenReleased = 0; 
0E1D:  CLRF   62
....................                 myPolyoneDisplay.currentState = STATE_SETTING_SECOND_NUMBER; 
0E1E:  MOVLW  08
0E1F:  MOVWF  5C
....................             } 
....................  
....................             break; 
0E20:  GOTO   71F
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
0E21:  BTFSS  3E.0
0E22:  GOTO   62A
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
0E23:  BSF    03.6
0E24:  CLRF   24
0E25:  MOVLW  3F
0E26:  MOVWF  23
0E27:  BCF    03.6
0E28:  CALL   067
....................             } else { 
0E29:  GOTO   709
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
0E2A:  BSF    03.6
0E2B:  CLRF   24
0E2C:  MOVLW  3F
0E2D:  MOVWF  23
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
0F0A:  BSF    03.5
0F0B:  BCF    03.6
0F0C:  BSF    06.1
0F0D:  BCF    03.5
0F0E:  BTFSC  06.1
0F0F:  GOTO   715
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
0F10:  BSF    03.5
0F11:  BSF    06.1
0F12:  BCF    03.5
0F13:  BTFSS  06.1
0F14:  GOTO   710
....................                     //                    Timer_increaseTimerHours(&myTimer); 
....................                     //                    SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(&myTimer); 
....................                     //                    delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
....................                 } 
....................             } 
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
0F15:  BTFSC  3E.4
0F16:  GOTO   71E
0F17:  BSF    03.5
0F18:  BSF    06.0
0F19:  BCF    03.5
0F1A:  BTFSS  06.0
0F1B:  GOTO   71E
....................                 myPolyoneDisplay.currentState = STATE_SETTING_FORMAT; 
0F1C:  MOVLW  09
0F1D:  MOVWF  5C
....................             } 
....................             break; 
0F1E:  GOTO   71F
....................         case STATE_SETTING_FORMAT: 
....................             break; 
....................  
....................  
....................     } 
....................     startStopButtonState = input(BUTTON_START_STOP_RESET); 
0F1F:  BSF    03.5
0F20:  BSF    06.1
0F21:  BCF    03.5
0F22:  BCF    3E.3
0F23:  BTFSC  06.1
0F24:  BSF    3E.3
....................     menuButtonState = input(BUTTON_MENU); 
0F25:  BSF    03.5
0F26:  BSF    06.0
0F27:  BCF    03.5
0F28:  BCF    3E.4
0F29:  BTFSC  06.0
0F2A:  BSF    3E.4
....................     rtos_yield(); 
0F2B:  MOVLW  32
0F2C:  MOVWF  35
0F2D:  MOVLW  0F
0F2E:  MOVWF  36
0F2F:  BCF    0A.3
0F30:  BSF    0A.4
0F31:  GOTO   093
0F32:  MOVLW  36
0F33:  MOVWF  35
0F34:  MOVLW  09
0F35:  MOVWF  36
0F36:  BCF    0A.3
0F37:  BSF    0A.4
0F38:  GOTO   093
0F39:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
0F49:  BSF    03.5
0F4A:  BSF    06.1
0F4B:  BCF    03.5
0F4C:  BTFSC  06.1
0F4D:  GOTO   750
....................         nextUpButtonCounter++; 
0F4E:  INCF   63,F
....................     } else { 
0F4F:  GOTO   752
....................         nextUpButtonCounter = 0; 
0F50:  CLRF   63
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0F51:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0F52:  MOVF   63,W
0F53:  SUBLW  13
0F54:  BTFSC  03.0
0F55:  GOTO   758
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0F56:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0F57:  CLRF   63
....................     } 
....................     rtos_yield(); 
0F58:  MOVLW  5F
0F59:  MOVWF  27
0F5A:  MOVLW  0F
0F5B:  MOVWF  28
0F5C:  BCF    0A.3
0F5D:  BSF    0A.4
0F5E:  GOTO   093
0F5F:  MOVLW  49
0F60:  MOVWF  27
0F61:  MOVLW  0F
0F62:  MOVWF  28
0F63:  BCF    0A.3
0F64:  BSF    0A.4
0F65:  GOTO   093
0F66:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(BUTTON_MENU)) { 
0F67:  BSF    03.5
0F68:  BSF    06.0
0F69:  BCF    03.5
0F6A:  BTFSC  06.0
0F6B:  GOTO   76E
....................         menuButtonCounter++; 
0F6C:  INCF   64,F
....................     } else { 
0F6D:  GOTO   770
....................         menuButtonCounter = 0; 
0F6E:  CLRF   64
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0F6F:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0F70:  MOVF   64,W
0F71:  SUBLW  0C
0F72:  BTFSC  03.0
0F73:  GOTO   776
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0F74:  BCF    3E.2
....................         menuButtonCounter = 0; 
0F75:  CLRF   64
....................     } 
....................     rtos_yield(); 
0F76:  MOVLW  7D
0F77:  MOVWF  2E
0F78:  MOVLW  0F
0F79:  MOVWF  2F
0F7A:  BCF    0A.3
0F7B:  BSF    0A.4
0F7C:  GOTO   093
0F7D:  MOVLW  67
0F7E:  MOVWF  2E
0F7F:  MOVLW  0F
0F80:  MOVWF  2F
0F81:  BCF    0A.3
0F82:  BSF    0A.4
0F83:  GOTO   093
0F84:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0F85:  MOVLW  01
0F86:  XORWF  3E,F
....................     rtos_yield(); 
0F87:  MOVLW  8E
0F88:  MOVWF  3C
0F89:  MOVLW  0F
0F8A:  MOVWF  3D
0F8B:  BCF    0A.3
0F8C:  BSF    0A.4
0F8D:  GOTO   093
0F8E:  MOVLW  85
0F8F:  MOVWF  3C
0F90:  MOVLW  0F
0F91:  MOVWF  3D
0F92:  BCF    0A.3
0F93:  BSF    0A.4
0F94:  GOTO   093
0F95:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
0F96:  MOVLW  00
0F97:  MOVWF  78
0F98:  IORLW  06
0F99:  MOVWF  12
0F9A:  MOVLW  FF
0F9B:  BSF    03.5
0F9C:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0F9D:  BCF    03.5
0F9E:  BCF    20.2
0F9F:  MOVF   20,W
0FA0:  BSF    03.5
0FA1:  MOVWF  07
0FA2:  BCF    03.5
0FA3:  BCF    07.2
0FA4:  MOVLW  0E
0FA5:  MOVWF  17
0FA6:  BSF    03.5
0FA7:  CLRF   1B
0FA8:  CLRF   1C
0FA9:  MOVLW  01
0FAA:  MOVWF  1D
....................  
....................     delay_ms(500); 
0FAB:  MOVLW  02
0FAC:  BCF    03.5
0FAD:  MOVWF  65
0FAE:  MOVLW  FA
0FAF:  BSF    03.6
0FB0:  MOVWF  24
0FB1:  BCF    03.6
0FB2:  CALL   053
0FB3:  DECFSZ 65,F
0FB4:  GOTO   7AE
....................     port_b_pullups(0xFF); 
0FB5:  MOVLW  FF
0FB6:  BSF    03.5
0FB7:  MOVWF  15
0FB8:  BCF    01.7
....................     WPUB = 0xFF; 
0FB9:  MOVWF  15
0FBA:  BCF    03.5
0FBB:  BCF    0A.3
0FBC:  BSF    0A.4
0FBD:  GOTO   022 (RETURN)
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
