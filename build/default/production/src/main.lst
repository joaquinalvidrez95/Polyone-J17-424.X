CCS PCM C Compiler, Version 5.015, 5967               08-Nov-17 17:24

               Filename:   C:\Users\Diseno4\MPLABXProjects\Polyone J17-424.X\build\default\production\src\main.lst

               ROM used:   4983 words (61%)
                           Largest free fragment is 2048
               RAM used:   71 (19%) at main() level
                           307 (83%) worst case
               Stack used: 8 locations (2 in main + 6 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   5CA
0003:  NOP
.................... /*  
....................  * File:   main.c 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 10:58 AM 
....................  */ 
....................  
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  F6
0009:  RETLW  60
000A:  RETLW  D5
000B:  RETLW  F1
000C:  RETLW  63
000D:  RETLW  B3
000E:  RETLW  B7
000F:  RETLW  E0
0010:  RETLW  F7
0011:  RETLW  F3
0012:  RETLW  01
0013:  RETLW  08
0014:  RETLW  E7
0015:  RETLW  96
0016:  RETLW  97
0017:  RETLW  87
0018:  RETLW  67
0019:  RETLW  37
001A:  RETLW  96
001B:  RETLW  75
001C:  RETLW  25
001D:  RETLW  76
001E:  RETLW  17
001F:  RETLW  04
0020:  RETLW  64
0021:  RETLW  C3
0022:  RETLW  35
0023:  BCF    0A.0
0024:  BCF    0A.1
0025:  BCF    0A.2
0026:  ADDWF  02,F
0027:  RETLW  22
0028:  RETLW  00
0029:  RETLW  29
002A:  RETLW  00
002B:  RETLW  30
002C:  RETLW  00
002D:  RETLW  37
002E:  RETLW  00
002F:  BSF    03.5
0030:  BSF    03.6
0031:  MOVF   2C,W
0032:  CLRF   78
0033:  SUBWF  2B,W
0034:  BTFSC  03.0
0035:  GOTO   039
0036:  MOVF   2B,W
0037:  MOVWF  77
0038:  GOTO   045
0039:  CLRF   77
003A:  MOVLW  08
003B:  MOVWF  2D
003C:  RLF    2B,F
003D:  RLF    77,F
003E:  MOVF   2C,W
003F:  SUBWF  77,W
0040:  BTFSC  03.0
0041:  MOVWF  77
0042:  RLF    78,F
0043:  DECFSZ 2D,F
0044:  GOTO   03C
0045:  BCF    03.5
0046:  BCF    03.6
0047:  RETURN
*
0146:  CLRF   77
0147:  CLRF   78
0148:  BSF    03.6
0149:  MOVF   6F,W
014A:  BCF    03.0
014B:  BSF    03.5
014C:  BTFSC  10.0
014D:  ADDWF  77,F
014E:  RRF    77,F
014F:  RRF    78,F
0150:  BTFSC  10.1
0151:  ADDWF  77,F
0152:  RRF    77,F
0153:  RRF    78,F
0154:  BTFSC  10.2
0155:  ADDWF  77,F
0156:  RRF    77,F
0157:  RRF    78,F
0158:  BTFSC  10.3
0159:  ADDWF  77,F
015A:  RRF    77,F
015B:  RRF    78,F
015C:  BTFSC  10.4
015D:  ADDWF  77,F
015E:  RRF    77,F
015F:  RRF    78,F
0160:  BTFSC  10.5
0161:  ADDWF  77,F
0162:  RRF    77,F
0163:  RRF    78,F
0164:  BTFSC  10.6
0165:  ADDWF  77,F
0166:  RRF    77,F
0167:  RRF    78,F
0168:  BTFSC  10.7
0169:  ADDWF  77,F
016A:  RRF    77,F
016B:  RRF    78,F
016C:  BCF    03.5
016D:  BCF    03.6
016E:  RETURN
*
0188:  MOVLW  20
0189:  BSF    03.5
018A:  BSF    03.6
018B:  MOVWF  32
018C:  CLRF   2E
018D:  CLRF   2F
018E:  CLRF   30
018F:  CLRF   31
0190:  MOVF   29,W
0191:  MOVWF  7A
0192:  MOVF   28,W
0193:  MOVWF  79
0194:  MOVF   27,W
0195:  MOVWF  78
0196:  MOVF   26,W
0197:  MOVWF  77
0198:  BCF    03.0
0199:  BTFSS  77.0
019A:  GOTO   1A9
019B:  MOVF   2A,W
019C:  ADDWF  2E,F
019D:  MOVF   2B,W
019E:  BTFSC  03.0
019F:  INCFSZ 2B,W
01A0:  ADDWF  2F,F
01A1:  MOVF   2C,W
01A2:  BTFSC  03.0
01A3:  INCFSZ 2C,W
01A4:  ADDWF  30,F
01A5:  MOVF   2D,W
01A6:  BTFSC  03.0
01A7:  INCFSZ 2D,W
01A8:  ADDWF  31,F
01A9:  RRF    31,F
01AA:  RRF    30,F
01AB:  RRF    2F,F
01AC:  RRF    2E,F
01AD:  RRF    7A,F
01AE:  RRF    79,F
01AF:  RRF    78,F
01B0:  RRF    77,F
01B1:  DECFSZ 32,F
01B2:  GOTO   198
01B3:  BCF    03.5
01B4:  BCF    03.6
01B5:  RETURN
*
0253:  BTFSC  03.1
0254:  GOTO   258
0255:  MOVLW  AA
0256:  MOVWF  04
0257:  BSF    03.7
0258:  BSF    03.5
0259:  BSF    03.6
025A:  MOVF   25,W
025B:  XORWF  29,W
025C:  ANDLW  80
025D:  MOVWF  2F
025E:  BTFSS  25.7
025F:  GOTO   26B
0260:  COMF   22,F
0261:  COMF   23,F
0262:  COMF   24,F
0263:  COMF   25,F
0264:  INCF   22,F
0265:  BTFSC  03.2
0266:  INCF   23,F
0267:  BTFSC  03.2
0268:  INCF   24,F
0269:  BTFSC  03.2
026A:  INCF   25,F
026B:  BTFSS  29.7
026C:  GOTO   278
026D:  COMF   26,F
026E:  COMF   27,F
026F:  COMF   28,F
0270:  COMF   29,F
0271:  INCF   26,F
0272:  BTFSC  03.2
0273:  INCF   27,F
0274:  BTFSC  03.2
0275:  INCF   28,F
0276:  BTFSC  03.2
0277:  INCF   29,F
0278:  CLRF   77
0279:  CLRF   78
027A:  CLRF   79
027B:  CLRF   7A
027C:  CLRF   2A
027D:  CLRF   2B
027E:  CLRF   2C
027F:  CLRF   2D
0280:  MOVF   29,W
0281:  IORWF  28,W
0282:  IORWF  27,W
0283:  IORWF  26,W
0284:  BTFSC  03.2
0285:  GOTO   2B6
0286:  MOVLW  20
0287:  MOVWF  2E
0288:  BCF    03.0
0289:  RLF    22,F
028A:  RLF    23,F
028B:  RLF    24,F
028C:  RLF    25,F
028D:  RLF    2A,F
028E:  RLF    2B,F
028F:  RLF    2C,F
0290:  RLF    2D,F
0291:  MOVF   29,W
0292:  SUBWF  2D,W
0293:  BTFSS  03.2
0294:  GOTO   29F
0295:  MOVF   28,W
0296:  SUBWF  2C,W
0297:  BTFSS  03.2
0298:  GOTO   29F
0299:  MOVF   27,W
029A:  SUBWF  2B,W
029B:  BTFSS  03.2
029C:  GOTO   29F
029D:  MOVF   26,W
029E:  SUBWF  2A,W
029F:  BTFSS  03.0
02A0:  GOTO   2B0
02A1:  MOVF   26,W
02A2:  SUBWF  2A,F
02A3:  MOVF   27,W
02A4:  BTFSS  03.0
02A5:  INCFSZ 27,W
02A6:  SUBWF  2B,F
02A7:  MOVF   28,W
02A8:  BTFSS  03.0
02A9:  INCFSZ 28,W
02AA:  SUBWF  2C,F
02AB:  MOVF   29,W
02AC:  BTFSS  03.0
02AD:  INCFSZ 29,W
02AE:  SUBWF  2D,F
02AF:  BSF    03.0
02B0:  RLF    77,F
02B1:  RLF    78,F
02B2:  RLF    79,F
02B3:  RLF    7A,F
02B4:  DECFSZ 2E,F
02B5:  GOTO   288
02B6:  BTFSS  2F.7
02B7:  GOTO   2C3
02B8:  COMF   77,F
02B9:  COMF   78,F
02BA:  COMF   79,F
02BB:  COMF   7A,F
02BC:  INCF   77,F
02BD:  BTFSC  03.2
02BE:  INCF   78,F
02BF:  BTFSC  03.2
02C0:  INCF   79,F
02C1:  BTFSC  03.2
02C2:  INCF   7A,F
02C3:  MOVF   2A,W
02C4:  MOVWF  00
02C5:  INCF   04,F
02C6:  MOVF   2B,W
02C7:  MOVWF  00
02C8:  INCF   04,F
02C9:  MOVF   2C,W
02CA:  MOVWF  00
02CB:  INCF   04,F
02CC:  MOVF   2D,W
02CD:  MOVWF  00
02CE:  BCF    03.5
02CF:  BCF    03.6
02D0:  RETURN
*
057C:  CLRF   78
057D:  CLRF   79
057E:  CLRF   77
057F:  CLRF   7A
0580:  BSF    03.6
0581:  MOVF   4E,W
0582:  BTFSS  03.2
0583:  GOTO   587
0584:  MOVF   4D,W
0585:  BTFSC  03.2
0586:  GOTO   5A1
0587:  MOVLW  10
0588:  MOVWF  4F
0589:  BCF    03.0
058A:  RLF    4B,F
058B:  RLF    4C,F
058C:  RLF    77,F
058D:  RLF    7A,F
058E:  MOVF   4E,W
058F:  SUBWF  7A,W
0590:  BTFSS  03.2
0591:  GOTO   594
0592:  MOVF   4D,W
0593:  SUBWF  77,W
0594:  BTFSS  03.0
0595:  GOTO   59D
0596:  MOVF   4D,W
0597:  SUBWF  77,F
0598:  BTFSS  03.0
0599:  DECF   7A,F
059A:  MOVF   4E,W
059B:  SUBWF  7A,F
059C:  BSF    03.0
059D:  RLF    78,F
059E:  RLF    79,F
059F:  DECFSZ 4F,F
05A0:  GOTO   589
05A1:  BCF    03.6
05A2:  RETURN
*
0C46:  BCF    0A.0
0C47:  BCF    0A.1
0C48:  BSF    0A.2
0C49:  ADDWF  02,F
0C4A:  GOTO   275
0C4B:  GOTO   3ED
0C4C:  GOTO   2C3
0C4D:  GOTO   092
0C4E:  GOTO   3EE
0C4F:  GOTO   443
0C50:  GOTO   443
0C51:  GOTO   443
0C52:  GOTO   443
0C53:  GOTO   42F
*
1512:  BSF    0A.0
1513:  BCF    0A.1
1514:  BSF    0A.2
1515:  ADDWF  02,F
1516:  GOTO   00C
1517:  GOTO   047
1518:  GOTO   1E6
1519:  GOTO   3CA
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS, PUT, NOLVP, PROTECT,NOMCLR, BROWNOUT, NODEBUG      
.................... #device *=16 
.................... #use delay(clock=20M) 
*
0878:  MOVLW  1E
0879:  MOVWF  04
087A:  BSF    03.7
087B:  MOVF   00,W
087C:  BTFSC  03.2
087D:  GOTO   08B
087E:  MOVLW  06
087F:  MOVWF  78
0880:  CLRF   77
0881:  DECFSZ 77,F
0882:  GOTO   081
0883:  DECFSZ 78,F
0884:  GOTO   080
0885:  MOVLW  7B
0886:  MOVWF  77
0887:  DECFSZ 77,F
0888:  GOTO   087
0889:  DECFSZ 00,F
088A:  GOTO   07E
088B:  RETURN
.................... #use standard_io(a) 
.................... #use standard_io(c) 
.................... #use standard_io(b) 
.................... #use rtos(timer=0) 
.................... #byte WPUB = 0x95 
....................  
.................... #include "polyonedisplay.h" 
.................... /*  
....................  * File:   polyonedisplay.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on November 7, 2017, 11:36 AM 
....................  */ 
....................  
.................... #ifndef POLYONEDISPLAY_H 
.................... #define	POLYONEDISPLAY_H 
....................  
.................... #include "timer.h" 
.................... /*  
....................  * File:   timer.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:59 PM 
....................  */ 
....................  
.................... #ifndef TIMER_H 
.................... #define	TIMER_H 
....................  
.................... #include "tiempo.h" 
.................... /*  
....................  * File:   time.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 03:54 PM 
....................  */ 
....................  
.................... #ifndef TIME_H 
.................... #define	TIME_H 
....................  
.................... #include "ds3231.h" 
.................... #ifndef DS3231_H 
.................... #define DS3231_H 
....................  
.................... #define RTC_SDA  PIN_C4 
.................... #define RTC_SCL  PIN_C3  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL,fast=400000)  
*
0048:  MOVLW  08
0049:  MOVWF  78
004A:  NOP
004B:  BCF    07.3
004C:  BCF    20.3
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  NOP
0051:  BCF    03.5
0052:  BSF    03.6
0053:  RLF    6D,F
0054:  BCF    03.6
0055:  BCF    07.4
0056:  BTFSS  03.0
0057:  GOTO   05E
0058:  BSF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
005C:  GOTO   062
005D:  BCF    03.5
005E:  BCF    20.4
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  NOP
0063:  BCF    03.5
0064:  BSF    20.3
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
0068:  BCF    03.5
0069:  BTFSS  07.3
006A:  GOTO   069
006B:  DECFSZ 78,F
006C:  GOTO   04A
006D:  NOP
006E:  BCF    07.3
006F:  BCF    20.3
0070:  MOVF   20,W
0071:  BSF    03.5
0072:  MOVWF  07
0073:  NOP
0074:  BCF    03.5
0075:  BSF    20.4
0076:  MOVF   20,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  NOP
007A:  NOP
007B:  BCF    03.5
007C:  BSF    20.3
007D:  MOVF   20,W
007E:  BSF    03.5
007F:  MOVWF  07
0080:  BCF    03.5
0081:  BTFSS  07.3
0082:  GOTO   081
0083:  CLRF   78
0084:  NOP
0085:  BTFSC  07.4
0086:  BSF    78.0
0087:  BCF    07.3
0088:  BCF    20.3
0089:  MOVF   20,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  BCF    03.5
008D:  BCF    07.4
008E:  BCF    20.4
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  BCF    03.5
0093:  RETURN
*
00DB:  MOVLW  08
00DC:  BSF    03.6
00DD:  MOVWF  6E
00DE:  MOVF   77,W
00DF:  MOVWF  6F
00E0:  BCF    03.6
00E1:  BSF    20.4
00E2:  MOVF   20,W
00E3:  BSF    03.5
00E4:  MOVWF  07
00E5:  NOP
00E6:  BCF    03.5
00E7:  BSF    20.3
00E8:  MOVF   20,W
00E9:  BSF    03.5
00EA:  MOVWF  07
00EB:  BCF    03.5
00EC:  BTFSS  07.3
00ED:  GOTO   0EC
00EE:  BTFSC  07.4
00EF:  BSF    03.0
00F0:  BTFSS  07.4
00F1:  BCF    03.0
00F2:  RLF    78,F
00F3:  NOP
00F4:  BCF    20.3
00F5:  MOVF   20,W
00F6:  BSF    03.5
00F7:  MOVWF  07
00F8:  BCF    03.5
00F9:  BCF    07.3
00FA:  BSF    03.6
00FB:  DECFSZ 6E,F
00FC:  GOTO   0E0
00FD:  BCF    03.6
00FE:  BSF    20.4
00FF:  MOVF   20,W
0100:  BSF    03.5
0101:  MOVWF  07
0102:  NOP
0103:  BCF    03.5
0104:  BCF    07.4
0105:  BSF    03.6
0106:  MOVF   6F,W
0107:  BTFSC  03.2
0108:  GOTO   110
0109:  BCF    03.6
010A:  BCF    20.4
010B:  MOVF   20,W
010C:  BSF    03.5
010D:  MOVWF  07
010E:  BCF    03.5
010F:  BSF    03.6
0110:  NOP
0111:  BCF    03.6
0112:  BSF    20.3
0113:  MOVF   20,W
0114:  BSF    03.5
0115:  MOVWF  07
0116:  BCF    03.5
0117:  BTFSS  07.3
0118:  GOTO   117
0119:  NOP
011A:  BCF    07.3
011B:  BCF    20.3
011C:  MOVF   20,W
011D:  BSF    03.5
011E:  MOVWF  07
011F:  NOP
0120:  BCF    03.5
0121:  BCF    07.4
0122:  BCF    20.4
0123:  MOVF   20,W
0124:  BSF    03.5
0125:  MOVWF  07
....................  
.................... #define DS3231_Address              0x68 
....................  
.................... #define DS3231_Read_addr            ((DS3231_Address << 1) | 0x01) 
.................... #define DS3231_Write_addr           ((DS3231_Address << 1) & 0xFE) 
....................  
.................... #define secondREG                   0x00 
.................... #define minuteREG                   0x01 
.................... #define hourREG                     0x02 
.................... #define dayREG                      0x03 
.................... #define dateREG                     0x04                              
.................... #define monthREG                    0x05                            
.................... #define yearREG                     0x06                    
.................... #define alarm1secREG                0x07        
.................... #define alarm1minREG                0x08 
.................... #define alarm1hrREG                 0x09            
.................... #define alarm1dateREG               0x0A  
.................... #define alarm2minREG                0x0B    
.................... #define alarm2hrREG                 0x0C 
.................... #define alarm2dateREG               0x0D 
.................... #define controlREG                  0x0E 
.................... #define statusREG                   0x0F 
.................... #define ageoffsetREG                0x10 
.................... #define tempMSBREG                  0x11 
.................... #define tempLSBREG                  0x12 
....................  
.................... #define _24_hour_format             0 
.................... #define _12_hour_format             1 
.................... #define am                          0 
.................... #define pm                          1 
....................  
....................  
.................... int bcd_to_decimal(int d); 
.................... int decimal_to_bcd(int d); 
.................... int DS3231_Read(int address); 
.................... void DS3231_Write(int address, int value); 
.................... void DS3231_init(); 
....................  
.................... int bcd_to_decimal(int d) { 
....................     return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10)); 
*
016F:  BSF    03.6
0170:  MOVF   6B,W
0171:  ANDLW  0F
0172:  MOVWF  6C
0173:  MOVF   6B,W
0174:  ANDLW  F0
0175:  MOVWF  77
0176:  SWAPF  77,F
0177:  MOVLW  0F
0178:  ANDWF  77,F
0179:  MOVF   77,W
017A:  MOVWF  6E
017B:  MOVWF  6F
017C:  MOVLW  0A
017D:  BSF    03.5
017E:  MOVWF  10
017F:  BCF    03.5
0180:  BCF    03.6
0181:  CALL   146
0182:  MOVF   78,W
0183:  BSF    03.6
0184:  ADDWF  6C,W
0185:  MOVWF  78
0186:  BCF    03.6
0187:  RETURN
.................... } 
....................  
.................... int decimal_to_bcd(int d) { 
....................     return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F); 
*
04B6:  BSF    03.6
04B7:  MOVF   62,W
04B8:  BSF    03.5
04B9:  MOVWF  2B
04BA:  MOVLW  0A
04BB:  MOVWF  2C
04BC:  BCF    03.5
04BD:  BCF    03.6
04BE:  CALL   02F
04BF:  SWAPF  78,W
04C0:  MOVWF  77
04C1:  MOVLW  F0
04C2:  ANDWF  77,F
04C3:  MOVF   77,W
04C4:  ANDLW  F0
04C5:  BSF    03.6
04C6:  MOVWF  63
04C7:  MOVF   62,W
04C8:  BSF    03.5
04C9:  MOVWF  2B
04CA:  MOVLW  0A
04CB:  MOVWF  2C
04CC:  BCF    03.5
04CD:  BCF    03.6
04CE:  CALL   02F
04CF:  MOVF   77,W
04D0:  ANDLW  0F
04D1:  BSF    03.6
04D2:  IORWF  63,W
04D3:  MOVWF  78
04D4:  BCF    03.6
04D5:  RETURN
.................... } 
....................  
.................... int DS3231_Read(int address) { 
*
0094:  BSF    03.6
0095:  CLRF   6C
....................     int value = 0; 
....................     I2C_start(); 
0096:  BCF    03.6
0097:  BSF    20.4
0098:  MOVF   20,W
0099:  BSF    03.5
009A:  MOVWF  07
009B:  NOP
009C:  BCF    03.5
009D:  BSF    20.3
009E:  MOVF   20,W
009F:  BSF    03.5
00A0:  MOVWF  07
00A1:  NOP
00A2:  BCF    03.5
00A3:  BCF    07.4
00A4:  BCF    20.4
00A5:  MOVF   20,W
00A6:  BSF    03.5
00A7:  MOVWF  07
00A8:  NOP
00A9:  BCF    03.5
00AA:  BCF    07.3
00AB:  BCF    20.3
00AC:  MOVF   20,W
00AD:  BSF    03.5
00AE:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
00AF:  MOVLW  D0
00B0:  BCF    03.5
00B1:  BSF    03.6
00B2:  MOVWF  6D
00B3:  BCF    03.6
00B4:  CALL   048
....................     I2C_write(address); 
00B5:  BSF    03.6
00B6:  MOVF   6B,W
00B7:  MOVWF  6D
00B8:  BCF    03.6
00B9:  CALL   048
....................     I2C_start(); 
00BA:  BSF    20.4
00BB:  MOVF   20,W
00BC:  BSF    03.5
00BD:  MOVWF  07
00BE:  NOP
00BF:  BCF    03.5
00C0:  BSF    20.3
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
00C4:  NOP
00C5:  BCF    03.5
00C6:  BTFSS  07.3
00C7:  GOTO   0C6
00C8:  BCF    07.4
00C9:  BCF    20.4
00CA:  MOVF   20,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  NOP
00CE:  BCF    03.5
00CF:  BCF    07.3
00D0:  BCF    20.3
00D1:  MOVF   20,W
00D2:  BSF    03.5
00D3:  MOVWF  07
....................     I2C_write(DS3231_Read_addr); 
00D4:  MOVLW  D1
00D5:  BCF    03.5
00D6:  BSF    03.6
00D7:  MOVWF  6D
00D8:  BCF    03.6
00D9:  CALL   048
....................     value = I2C_read(0); 
00DA:  CLRF   77
*
0126:  MOVF   78,W
0127:  BCF    03.5
0128:  BSF    03.6
0129:  MOVWF  6C
....................     I2C_stop(); 
012A:  BCF    03.6
012B:  BCF    20.4
012C:  MOVF   20,W
012D:  BSF    03.5
012E:  MOVWF  07
012F:  NOP
0130:  BCF    03.5
0131:  BSF    20.3
0132:  MOVF   20,W
0133:  BSF    03.5
0134:  MOVWF  07
0135:  BCF    03.5
0136:  BTFSS  07.3
0137:  GOTO   136
0138:  NOP
0139:  GOTO   13A
013A:  NOP
013B:  BSF    20.4
013C:  MOVF   20,W
013D:  BSF    03.5
013E:  MOVWF  07
013F:  NOP
....................     return value; 
0140:  BCF    03.5
0141:  BSF    03.6
0142:  MOVF   6C,W
0143:  MOVWF  78
0144:  BCF    03.6
0145:  RETURN
.................... } 
....................  
.................... void DS3231_Write(int address, int value) { 
....................     I2C_start(); 
*
04D6:  BSF    20.4
04D7:  MOVF   20,W
04D8:  BSF    03.5
04D9:  MOVWF  07
04DA:  NOP
04DB:  BCF    03.5
04DC:  BSF    20.3
04DD:  MOVF   20,W
04DE:  BSF    03.5
04DF:  MOVWF  07
04E0:  NOP
04E1:  BCF    03.5
04E2:  BCF    07.4
04E3:  BCF    20.4
04E4:  MOVF   20,W
04E5:  BSF    03.5
04E6:  MOVWF  07
04E7:  NOP
04E8:  BCF    03.5
04E9:  BCF    07.3
04EA:  BCF    20.3
04EB:  MOVF   20,W
04EC:  BSF    03.5
04ED:  MOVWF  07
....................     I2C_write(DS3231_Write_addr); 
04EE:  MOVLW  D0
04EF:  BCF    03.5
04F0:  BSF    03.6
04F1:  MOVWF  6D
04F2:  BCF    03.6
04F3:  CALL   048
....................     I2C_write(address); 
04F4:  BSF    03.6
04F5:  MOVF   63,W
04F6:  MOVWF  6D
04F7:  BCF    03.6
04F8:  CALL   048
....................     I2C_write(value); 
04F9:  BSF    03.6
04FA:  MOVF   64,W
04FB:  MOVWF  6D
04FC:  BCF    03.6
04FD:  CALL   048
....................     I2C_stop(); 
04FE:  BCF    20.4
04FF:  MOVF   20,W
0500:  BSF    03.5
0501:  MOVWF  07
0502:  NOP
0503:  BCF    03.5
0504:  BSF    20.3
0505:  MOVF   20,W
0506:  BSF    03.5
0507:  MOVWF  07
0508:  BCF    03.5
0509:  BTFSS  07.3
050A:  GOTO   509
050B:  NOP
050C:  GOTO   50D
050D:  NOP
050E:  BSF    20.4
050F:  MOVF   20,W
0510:  BSF    03.5
0511:  MOVWF  07
0512:  NOP
0513:  BCF    03.5
0514:  RETURN
.................... } 
....................  
.................... void DS3231_init() { 
....................     DS3231_Write(controlREG, 0x00); 
....................     DS3231_Write(statusREG, 0x08); 
.................... } 
....................  
.................... void ds3231_get_Time(int &hora, int &min, int &sec) { 
....................     sec = DS3231_Read(secondREG); 
*
02EC:  CLRF   6B
02ED:  BCF    03.6
02EE:  CALL   094
02EF:  MOVF   78,W
02F0:  BSF    03.6
02F1:  MOVWF  67
....................     sec = bcd_to_decimal(sec); 
02F2:  MOVF   67,W
02F3:  MOVWF  6B
02F4:  BCF    03.6
02F5:  CALL   16F
02F6:  MOVF   78,W
02F7:  BSF    03.6
02F8:  MOVWF  67
....................     min = DS3231_Read(minuteREG); 
02F9:  MOVLW  01
02FA:  MOVWF  6B
02FB:  BCF    03.6
02FC:  CALL   094
02FD:  MOVF   78,W
02FE:  BSF    03.6
02FF:  MOVWF  66
....................     min = bcd_to_decimal(min); 
0300:  MOVF   66,W
0301:  MOVWF  6B
0302:  BCF    03.6
0303:  CALL   16F
0304:  MOVF   78,W
0305:  BSF    03.6
0306:  MOVWF  66
....................     hora = (0x3F & DS3231_Read(hourREG)); 
0307:  MOVLW  02
0308:  MOVWF  6B
0309:  BCF    03.6
030A:  CALL   094
030B:  MOVF   78,W
030C:  ANDLW  3F
030D:  BSF    03.6
030E:  MOVWF  65
....................     hora = bcd_to_decimal(hora); 
030F:  MOVF   65,W
0310:  MOVWF  6B
0311:  BCF    03.6
0312:  CALL   16F
0313:  MOVF   78,W
0314:  BSF    03.6
0315:  MOVWF  65
.................... } 
....................  
.................... void DS3231_get_Date(int &date, int &month, int &year, int &dow) { 
....................     year = DS3231_Read(yearREG); 
....................     year = bcd_to_decimal(year); 
....................     month = (0x1F & DS3231_Read(monthREG)); 
....................     month = bcd_to_decimal(month); 
....................     date = (0x3F & DS3231_Read(dateREG)); 
....................     date = bcd_to_decimal(date); 
....................     dow = (0x07 & DS3231_Read(dayREG)); 
....................     dow = bcd_to_decimal(dow); 
.................... } 
....................  
.................... void setTime(int hSet, int mSet, int sSet) { 
....................     DS3231_Write(secondREG, (decimal_to_bcd(sSet))); 
*
0515:  BSF    03.6
0516:  MOVF   61,W
0517:  MOVWF  62
0518:  BCF    03.6
0519:  CALL   4B6
051A:  MOVF   78,W
051B:  BSF    03.6
051C:  MOVWF  62
051D:  CLRF   63
051E:  MOVF   62,W
051F:  MOVWF  64
0520:  BCF    03.6
0521:  CALL   4D6
....................     DS3231_Write(minuteREG, (decimal_to_bcd(mSet))); 
0522:  BSF    03.6
0523:  MOVF   60,W
0524:  MOVWF  62
0525:  BCF    03.6
0526:  CALL   4B6
0527:  MOVF   78,W
0528:  BSF    03.6
0529:  MOVWF  62
052A:  MOVLW  01
052B:  MOVWF  63
052C:  MOVF   62,W
052D:  MOVWF  64
052E:  BCF    03.6
052F:  CALL   4D6
....................     DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet)))); 
0530:  BSF    03.6
0531:  MOVF   5F,W
0532:  MOVWF  62
0533:  BCF    03.6
0534:  CALL   4B6
0535:  MOVF   78,W
0536:  ANDLW  3F
0537:  BSF    03.6
0538:  MOVWF  62
0539:  MOVLW  02
053A:  MOVWF  63
053B:  MOVF   62,W
053C:  MOVWF  64
053D:  BCF    03.6
053E:  CALL   4D6
053F:  RETURN
....................  
.................... } 
....................  
.................... void setDate(int daySet, int dateSet, int monthSet, int yearSet) { 
....................     DS3231_Write(dayREG, (decimal_to_bcd(daySet))); 
....................     DS3231_Write(dateREG, (decimal_to_bcd(dateSet))); 
....................     DS3231_Write(monthREG, (decimal_to_bcd(monthSet))); 
....................     DS3231_Write(yearREG, (decimal_to_bcd(yearSet))); 
.................... } 
....................  
.................... void DS3231_set_date_time(int dia, int mes, int year, int dow, int hora, int min, int sec) { 
....................     settime(hora, min, sec); 
....................     setdate(dow, dia, mes, year); 
.................... } 
....................  
.................... float getTemp() { 
....................     register float t = 0.0; 
....................     int lowByte = 0; 
....................     signed char highByte = 0; 
....................     lowByte = DS3231_Read(tempLSBREG); 
....................     highByte = DS3231_Read(tempMSBREG); 
....................     lowByte >>= 6; 
....................     lowByte &= 0x03; 
....................     t = ((float) lowByte); 
....................     t *= 0.25; 
....................     t += highByte; 
....................     return t; 
....................  
.................... } 
.................... #endif 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
*
05AA:  CLRF   4E
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
05AB:  CLRF   4E
05AC:  MOVF   4D,W
05AD:  SUBWF  4E,W
05AE:  BTFSC  03.0
05AF:  GOTO   5B9
....................         array[i] = 0; 
05B0:  MOVF   4E,W
05B1:  ADDWF  4B,W
05B2:  MOVWF  04
05B3:  BCF    03.7
05B4:  BTFSC  4C.0
05B5:  BSF    03.7
05B6:  CLRF   00
05B7:  INCF   4E,F
05B8:  GOTO   5AC
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
*
05A3:  BSF    03.6
05A4:  MOVF   47,W
05A5:  MOVWF  4C
05A6:  MOVF   46,W
05A7:  MOVWF  4B
05A8:  MOVF   48,W
05A9:  MOVWF  4D
....................  
....................     int index = 0; 
*
05B9:  CLRF   49
....................     while (number > 0) { 
05BA:  MOVF   44,F
05BB:  BTFSS  03.2
05BC:  GOTO   5C0
05BD:  MOVF   45,F
05BE:  BTFSC  03.2
05BF:  GOTO   5E4
....................         int digit = number % 10; 
05C0:  MOVF   45,W
05C1:  MOVWF  4C
05C2:  MOVF   44,W
05C3:  MOVWF  4B
05C4:  CLRF   4E
05C5:  MOVLW  0A
05C6:  MOVWF  4D
05C7:  BCF    03.6
05C8:  CALL   57C
05C9:  MOVF   77,W
05CA:  BSF    03.6
05CB:  MOVWF  4A
....................         digits[index] = digit; 
05CC:  MOVF   49,W
05CD:  ADDWF  46,W
05CE:  MOVWF  04
05CF:  BCF    03.7
05D0:  BTFSC  47.0
05D1:  BSF    03.7
05D2:  MOVF   4A,W
05D3:  MOVWF  00
....................         index++; 
05D4:  INCF   49,F
....................         number /= 10; 
05D5:  MOVF   45,W
05D6:  MOVWF  4C
05D7:  MOVF   44,W
05D8:  MOVWF  4B
05D9:  CLRF   4E
05DA:  MOVLW  0A
05DB:  MOVWF  4D
05DC:  BCF    03.6
05DD:  CALL   57C
05DE:  MOVF   79,W
05DF:  BSF    03.6
05E0:  MOVWF  45
05E1:  MOVF   78,W
05E2:  MOVWF  44
05E3:  GOTO   5BA
....................     } 
05E4:  BCF    03.6
05E5:  RETURN
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     FORMAT_24 = 0, 
....................     FORMAT_12 
.................... } Format; 
....................  
.................... typedef struct { 
....................     int hour; 
....................     int minute; 
....................     int second; 
....................     Format format; 
....................     char formatAddress; 
.................... } Time; 
....................  
.................... typedef struct { 
....................     int hour[2]; 
....................     int minute[2]; 
....................     int second[2]; 
.................... } TimeInDigits; 
....................  
.................... Time createTime(int hour, int minute, int second) { 
....................     Time time; 
....................  
....................     time.hour = hour; 
*
031D:  BCF    03.5
031E:  MOVF   6E,W
031F:  BSF    03.5
0320:  MOVWF  11
....................     time.minute = minute; 
0321:  BCF    03.5
0322:  MOVF   6F,W
0323:  BSF    03.5
0324:  MOVWF  12
....................     time.second = second; 
0325:  MOVF   10,W
0326:  MOVWF  13
....................     return time; 
0327:  MOVLW  91
0328:  MOVWF  78
0329:  MOVLW  01
032A:  MOVWF  79
.................... } 
....................  
.................... Time Time_getCurrentTime() { 
*
02E9:  CLRF   65
02EA:  CLRF   66
02EB:  CLRF   67
....................     Time currentTime; 
....................     int currentHour = 0; 
....................     int currentMinute = 0; 
....................     int currentSecond = 0; 
....................  
....................     ds3231_get_Time(currentHour, currentMinute, currentSecond); 
....................     currentTime = createTime(currentHour, currentMinute, currentSecond); 
*
0316:  MOVF   65,W
0317:  MOVWF  6E
0318:  MOVF   66,W
0319:  MOVWF  6F
031A:  MOVF   67,W
031B:  BSF    03.5
031C:  MOVWF  10
*
032B:  MOVF   78,W
032C:  MOVWF  04
032D:  BCF    03.7
032E:  BTFSC  79.0
032F:  BSF    03.7
0330:  MOVF   00,W
0331:  BCF    03.5
0332:  MOVWF  60
0333:  INCF   04,F
0334:  MOVF   00,W
0335:  MOVWF  61
0336:  INCF   04,F
0337:  MOVF   00,W
0338:  MOVWF  62
0339:  INCF   04,F
033A:  MOVF   00,W
033B:  MOVWF  63
033C:  INCF   04,F
033D:  MOVF   00,W
033E:  MOVWF  64
....................  
....................     return currentTime; 
033F:  MOVLW  60
0340:  MOVWF  78
0341:  MOVLW  01
0342:  MOVWF  79
.................... } 
....................  
.................... Time Time_new(__EEADDRESS__ formatAddress) { 
....................     Time newTime; 
....................     newTime = Time_getCurrentTime(); 
....................     newTime.formatAddress = formatAddress; 
....................     newTime.format = read_eeprom(formatAddress) % 2; 
....................  
....................     return newTime; 
.................... } 
....................  
.................... void Time_updateTime(Time *timePtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................     timePtr->hour = currentTime.hour; 
....................     timePtr->minute = currentTime.minute; 
....................     timePtr->second = currentTime.second; 
.................... } 
....................  
.................... void Time_saveFormat(Time *timePtr) { 
....................     write_eeprom(timePtr->formatAddress, timePtr->format); 
.................... } 
....................  
.................... void Time_changeTimeFormat(Time *timePtr) { 
....................     if (timePtr->format == FORMAT_12) { 
....................         timePtr->format = FORMAT_24; 
....................     } else if (timePtr->format == FORMAT_24) { 
....................         timePtr->format = FORMAT_12; 
....................     } 
.................... } 
....................  
.................... TimeInDigits Time_getTimeInDigits(Time *timePtr, BOOLEAN formatted) { 
*
05E6:  BSF    03.6
05E7:  MOVF   39,W
05E8:  MOVWF  04
05E9:  BCF    03.7
05EA:  BTFSC  3A.0
05EB:  BSF    03.7
05EC:  MOVF   00,W
05ED:  MOVWF  42
....................     TimeInDigits newTimeInDigits; 
....................     int hour = timePtr->hour; 
....................  
....................     if (formatted) { 
05EE:  MOVF   3B,F
05EF:  BTFSC  03.2
05F0:  GOTO   618
....................         if (timePtr->format == FORMAT_12) { 
05F1:  MOVLW  03
05F2:  ADDWF  39,W
05F3:  MOVWF  04
05F4:  BCF    03.7
05F5:  BTFSC  3A.0
05F6:  BSF    03.7
05F7:  MOVF   00,W
05F8:  ANDLW  01
05F9:  SUBLW  01
05FA:  BTFSS  03.2
05FB:  GOTO   618
....................             if (timePtr->hour == 0) { 
05FC:  MOVF   39,W
05FD:  MOVWF  04
05FE:  BCF    03.7
05FF:  BTFSC  3A.0
0600:  BSF    03.7
0601:  MOVF   00,F
0602:  BTFSS  03.2
0603:  GOTO   607
....................                 hour = 12; 
0604:  MOVLW  0C
0605:  MOVWF  42
....................             } else if (timePtr->hour > 12) { 
0606:  GOTO   618
0607:  MOVF   39,W
0608:  MOVWF  04
0609:  BCF    03.7
060A:  BTFSC  3A.0
060B:  BSF    03.7
060C:  MOVF   00,W
060D:  SUBLW  0C
060E:  BTFSC  03.0
060F:  GOTO   618
....................                 hour = timePtr->hour - 12; 
0610:  MOVF   39,W
0611:  MOVWF  04
0612:  BCF    03.7
0613:  BTFSC  3A.0
0614:  BSF    03.7
0615:  MOVLW  0C
0616:  SUBWF  00,W
0617:  MOVWF  42
....................             } 
....................         } 
....................     } 
....................  
....................     Array_splitNumberIntoDigits( 
....................             hour, 
....................             newTimeInDigits.hour, 
....................             getArraySize(newTimeInDigits.hour) 
....................             ); 
0618:  CLRF   45
0619:  MOVF   42,W
061A:  MOVWF  44
061B:  MOVLW  01
061C:  MOVWF  47
061D:  MOVLW  3C
061E:  MOVWF  46
061F:  MOVLW  02
0620:  MOVWF  48
0621:  BCF    03.6
0622:  CALL   5A3
....................     Array_splitNumberIntoDigits( 
....................             timePtr->minute, 
....................             newTimeInDigits.minute, 
....................             getArraySize(newTimeInDigits.minute) 
....................             ); 
0623:  MOVLW  01
0624:  BSF    03.6
0625:  ADDWF  39,W
0626:  MOVWF  04
0627:  BCF    03.7
0628:  BTFSC  3A.0
0629:  BSF    03.7
062A:  MOVF   00,W
062B:  MOVWF  43
062C:  CLRF   45
062D:  MOVF   43,W
062E:  MOVWF  44
062F:  MOVLW  01
0630:  MOVWF  47
0631:  MOVLW  3E
0632:  MOVWF  46
0633:  MOVLW  02
0634:  MOVWF  48
0635:  BCF    03.6
0636:  CALL   5A3
....................  
....................     Array_splitNumberIntoDigits( 
....................             timePtr->second, 
....................             newTimeInDigits.second, 
....................             getArraySize(newTimeInDigits.second) 
....................             ); 
0637:  MOVLW  02
0638:  BSF    03.6
0639:  ADDWF  39,W
063A:  MOVWF  04
063B:  BCF    03.7
063C:  BTFSC  3A.0
063D:  BSF    03.7
063E:  MOVF   00,W
063F:  MOVWF  43
0640:  CLRF   45
0641:  MOVF   43,W
0642:  MOVWF  44
0643:  MOVLW  01
0644:  MOVWF  47
0645:  MOVLW  40
0646:  MOVWF  46
0647:  MOVLW  02
0648:  MOVWF  48
0649:  BCF    03.6
064A:  CALL   5A3
....................  
....................     return newTimeInDigits; 
064B:  MOVLW  3C
064C:  MOVWF  78
064D:  MOVLW  01
064E:  MOVWF  79
064F:  RETURN
.................... } 
....................  
.................... BOOLEAN Time_isTimeEqual(Time *timePtr1, Time *timePtr2) { 
....................     return ( 
....................             timePtr1->hour == timePtr2->hour)&&( 
....................             timePtr1->minute == timePtr2->minute)&&( 
....................             timePtr1->second == timePtr2->second); 
.................... } 
....................  
.................... BOOLEAN Time_isANewDay(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeZero(Time *timePtr) { 
....................     return (timePtr->hour == 0)&&(timePtr->minute == 0)&&(timePtr->second == 0); 
*
0BC0:  MOVF   25,W
0BC1:  MOVWF  04
0BC2:  BCF    03.7
0BC3:  BTFSC  26.0
0BC4:  BSF    03.7
0BC5:  MOVF   00,F
0BC6:  BTFSS  03.2
0BC7:  GOTO   3DA
0BC8:  MOVLW  01
0BC9:  ADDWF  25,W
0BCA:  MOVWF  04
0BCB:  BCF    03.7
0BCC:  BTFSC  26.0
0BCD:  BSF    03.7
0BCE:  MOVF   00,F
0BCF:  BTFSS  03.2
0BD0:  GOTO   3DA
0BD1:  MOVLW  02
0BD2:  ADDWF  25,W
0BD3:  MOVWF  04
0BD4:  BCF    03.7
0BD5:  BTFSC  26.0
0BD6:  BSF    03.7
0BD7:  MOVF   00,F
0BD8:  BTFSC  03.2
0BD9:  GOTO   3DC
0BDA:  MOVLW  00
0BDB:  GOTO   3DD
0BDC:  MOVLW  01
0BDD:  MOVWF  78
.................... } 
....................  
.................... Time getInitialTime() { 
....................     return createTime(0, 0, 0); 
.................... } 
....................  
.................... Time getCountdownTime(Time *limitTimePtr, Time *currentTimePtr) { 
....................     Time time; 
....................     signed int16 hoursInSeconds; 
....................     signed int16 minutesInSeconds; 
....................     signed int16 seconds; 
....................  
....................     hoursInSeconds = ((signed int16)limitTimePtr->hour 
....................             - (signed int16)currentTimePtr->hour)*3600; 
....................     minutesInSeconds = ((signed int16)limitTimePtr->minute 
....................             - (signed int16)currentTimePtr->minute)*60; 
....................     seconds = (signed int16)(limitTimePtr->second) 
....................             -(signed int16)(currentTimePtr->second); 
....................  
....................     seconds += hoursInSeconds + minutesInSeconds; 
....................     seconds = seconds < 0 ? 0 : seconds; 
....................  
....................     time.hour = seconds / 3600; 
....................     time.minute = (seconds % 3600) / 60; 
....................     time.second = (seconds % 3600) % 60; 
....................  
....................     return time; 
.................... } 
....................  
.................... void Time_increaseHours(Time *timePtr, int maximumHours) { 
....................     timePtr->hour = timePtr->hour == maximumHours ? 0 : timePtr->hour + 1; 
.................... } 
....................  
.................... void Time_increaseMinutes(Time *timePtr, int maximumMinutes) { 
....................     timePtr->minute = timePtr->minute == maximumMinutes ? 0 : timePtr->minute + 1; 
.................... } 
....................  
.................... void Time_increaseSeconds(Time *timePtr, int maximumSeconds) { 
....................     timePtr->second = timePtr->second == maximumSeconds ? 0 : timePtr->second + 1; 
.................... } 
....................  
.................... void Time_resetSeconds(Time *timePtr) { 
....................     timePtr->second = 0; 
.................... } 
.................... //////// 
....................  
.................... void Time_setClockTime(Time *timePtr) { 
....................     setTime( 
....................             timePtr->hour, 
....................             timePtr->minute, 
....................             timePtr->second 
....................             ); 
*
055C:  MOVF   5A,W
055D:  MOVWF  04
055E:  BCF    03.7
055F:  BTFSC  5B.0
0560:  BSF    03.7
0561:  MOVF   00,W
0562:  MOVWF  5C
0563:  MOVLW  01
0564:  ADDWF  5A,W
0565:  MOVWF  04
0566:  BCF    03.7
0567:  BTFSC  5B.0
0568:  BSF    03.7
0569:  MOVF   00,W
056A:  MOVWF  5D
056B:  MOVLW  02
056C:  ADDWF  5A,W
056D:  MOVWF  04
056E:  BCF    03.7
056F:  BTFSC  5B.0
0570:  BSF    03.7
0571:  MOVF   00,W
0572:  MOVWF  5E
0573:  MOVF   5C,W
0574:  MOVWF  5F
0575:  MOVF   5D,W
0576:  MOVWF  60
0577:  MOVF   5E,W
0578:  MOVWF  61
0579:  BCF    03.6
057A:  CALL   515
.................... } 
....................  
.................... int32 Time_changeTimeToSeconds(Time *timePtr) { 
....................     int32 hoursInSeconds; 
....................     int32 minutesInSeconds; 
....................     int32 seconds; 
....................  
....................     hoursInSeconds = (int32) timePtr->hour * 3600; 
*
01B6:  BSF    03.5
01B7:  BSF    03.6
01B8:  MOVF   12,W
01B9:  MOVWF  04
01BA:  BCF    03.7
01BB:  BTFSC  13.0
01BC:  BSF    03.7
01BD:  MOVF   00,W
01BE:  CLRF   23
01BF:  CLRF   22
01C0:  CLRF   21
01C1:  MOVWF  20
01C2:  CLRF   25
01C3:  MOVF   04,W
01C4:  MOVWF  24
01C5:  BCF    25.0
01C6:  BTFSC  03.7
01C7:  BSF    25.0
01C8:  MOVF   23,W
01C9:  MOVWF  29
01CA:  MOVF   22,W
01CB:  MOVWF  28
01CC:  MOVF   21,W
01CD:  MOVWF  27
01CE:  MOVF   20,W
01CF:  MOVWF  26
01D0:  CLRF   2D
01D1:  CLRF   2C
01D2:  MOVLW  0E
01D3:  MOVWF  2B
01D4:  MOVLW  10
01D5:  MOVWF  2A
01D6:  BCF    03.5
01D7:  BCF    03.6
01D8:  CALL   188
01D9:  BSF    03.5
01DA:  BSF    03.6
01DB:  MOVF   24,W
01DC:  MOVWF  04
01DD:  BCF    03.7
01DE:  BTFSC  25.0
01DF:  BSF    03.7
01E0:  MOVF   7A,W
01E1:  MOVWF  17
01E2:  MOVF   79,W
01E3:  MOVWF  16
01E4:  MOVF   78,W
01E5:  MOVWF  15
01E6:  MOVF   77,W
01E7:  MOVWF  14
....................     minutesInSeconds = (int32) timePtr->minute * 60; 
01E8:  MOVLW  01
01E9:  ADDWF  12,W
01EA:  MOVWF  04
01EB:  BCF    03.7
01EC:  BTFSC  13.0
01ED:  BSF    03.7
01EE:  MOVF   00,W
01EF:  CLRF   23
01F0:  CLRF   22
01F1:  CLRF   21
01F2:  MOVWF  20
01F3:  CLRF   25
01F4:  MOVF   04,W
01F5:  MOVWF  24
01F6:  BCF    25.0
01F7:  BTFSC  03.7
01F8:  BSF    25.0
01F9:  MOVF   23,W
01FA:  MOVWF  29
01FB:  MOVF   22,W
01FC:  MOVWF  28
01FD:  MOVF   21,W
01FE:  MOVWF  27
01FF:  MOVF   20,W
0200:  MOVWF  26
0201:  CLRF   2D
0202:  CLRF   2C
0203:  CLRF   2B
0204:  MOVLW  3C
0205:  MOVWF  2A
0206:  BCF    03.5
0207:  BCF    03.6
0208:  CALL   188
0209:  BSF    03.5
020A:  BSF    03.6
020B:  MOVF   24,W
020C:  MOVWF  04
020D:  BCF    03.7
020E:  BTFSC  25.0
020F:  BSF    03.7
0210:  MOVF   7A,W
0211:  MOVWF  1B
0212:  MOVF   79,W
0213:  MOVWF  1A
0214:  MOVF   78,W
0215:  MOVWF  19
0216:  MOVF   77,W
0217:  MOVWF  18
....................     seconds = hoursInSeconds + minutesInSeconds + timePtr->second; 
0218:  MOVF   18,W
0219:  ADDWF  14,W
021A:  MOVWF  20
021B:  MOVF   15,W
021C:  MOVWF  21
021D:  MOVF   19,W
021E:  BTFSC  03.0
021F:  INCFSZ 19,W
0220:  ADDWF  21,F
0221:  MOVF   16,W
0222:  MOVWF  22
0223:  MOVF   1A,W
0224:  BTFSC  03.0
0225:  INCFSZ 1A,W
0226:  ADDWF  22,F
0227:  MOVF   17,W
0228:  MOVWF  23
0229:  MOVF   1B,W
022A:  BTFSC  03.0
022B:  INCFSZ 1B,W
022C:  ADDWF  23,F
022D:  MOVLW  02
022E:  ADDWF  12,W
022F:  MOVWF  04
0230:  BCF    03.7
0231:  BTFSC  13.0
0232:  BSF    03.7
0233:  MOVF   00,W
0234:  ADDWF  20,W
0235:  MOVWF  1C
0236:  MOVF   21,W
0237:  MOVWF  1D
0238:  MOVLW  00
0239:  BTFSC  03.0
023A:  MOVLW  01
023B:  ADDWF  1D,F
023C:  MOVF   22,W
023D:  MOVWF  1E
023E:  MOVLW  00
023F:  BTFSC  03.0
0240:  MOVLW  01
0241:  ADDWF  1E,F
0242:  MOVF   23,W
0243:  MOVWF  1F
0244:  MOVLW  00
0245:  BTFSC  03.0
0246:  MOVLW  01
0247:  ADDWF  1F,F
....................  
....................     return seconds; 
0248:  MOVF   1C,W
0249:  MOVWF  77
024A:  MOVF   1D,W
024B:  MOVWF  78
024C:  MOVF   1E,W
024D:  MOVWF  79
024E:  MOVF   1F,W
024F:  MOVWF  7A
0250:  BCF    03.5
0251:  BCF    03.6
0252:  RETURN
.................... } 
....................  
.................... void Time_clearRtcTime() { 
....................     setTime(0, 0, 0); 
*
07ED:  BSF    03.6
07EE:  CLRF   5F
07EF:  CLRF   60
07F0:  CLRF   61
07F1:  BCF    03.6
07F2:  CALL   515
07F3:  RETURN
.................... } 
....................  
.................... void Time_saveRtcCurrentTime(int hourAddress, 
....................         int minuteAddress, int secondAddress) { 
....................     Time currentTime; 
....................  
....................     currentTime = Time_getCurrentTime(); 
....................     write_eeprom(hourAddress, currentTime.hour); 
....................     write_eeprom(minuteAddress, currentTime.minute); 
....................     write_eeprom(secondAddress, currentTime.second); 
.................... } 
....................  
.................... void saveLimitTime(Time *limitTimePtr, int limitHourAddress, 
....................         int limitMinuteAddress, int limitSecondAddress) { 
....................  
....................     write_eeprom(limitHourAddress, limitTimePtr->hour); 
....................     write_eeprom(limitMinuteAddress, limitTimePtr->minute); 
....................     write_eeprom(limitSecondAddress, limitTimePtr->second); 
.................... } 
....................  
.................... int getYear(void) { 
....................     int date, month, year, dow; 
....................     DS3231_get_Date(date, month, year, dow); 
....................  
....................     return year; 
.................... } 
....................  
.................... void Time_fixTimeToSummerDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 3; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... void Time_fixTimeToWinterDayLightSavingTime(Time *timePtr) { 
....................     timePtr->hour = 1; 
....................     Time_setClockTime(timePtr); 
.................... } 
....................  
.................... BOOLEAN Time_isTimeToStartDayLightSavingTime(Time *timePtr) { 
....................     return (timePtr->hour == 2)&& 
....................             (timePtr->minute == 0)&& 
....................             (timePtr->second == 0); 
.................... } 
....................  
.................... #endif	/* TIME_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... /*  
....................  * File:   array.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:01 PM 
....................  */ 
....................  
.................... #ifndef ARRAY_H 
.................... #define	ARRAY_H 
....................  
.................... #define getArraySize(array)(sizeof((array))/sizeof((array)[0])) 
....................  
.................... void Array_clearArray(int array[], int arraySize) { 
....................     int i = 0; 
....................  
....................     for (i = 0; i < arraySize; i++) { 
....................         array[i] = 0; 
....................     } 
.................... } 
....................  
.................... void Array_splitNumberIntoDigits(int16 number, int digits[], int arraySize) { 
....................     Array_clearArray(digits, arraySize); 
....................  
....................     int index = 0; 
....................     while (number > 0) { 
....................         int digit = number % 10; 
....................         digits[index] = digit; 
....................         index++; 
....................         number /= 10; 
....................     } 
.................... } 
....................  
.................... #endif	/* ARRAY_H */ 
....................  
....................  
.................... #include "shiftregister.h" 
.................... /*  
....................  * File:   shiftregister.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:09 PM 
....................  */ 
....................  
.................... #ifndef SHIFTREGISTER_H 
.................... #define	SHIFTREGISTER_H 
....................  
.................... #define  PIN_CLOCK                      PIN_A3      //CLK 
.................... #define  PIN_DATA                       PIN_A0    //NEAR R 
.................... #define  PIN_STROBE                     PIN_A1      //SCLK 
....................  
.................... void ShiftRegister_closeStrobe() { 
....................     output_high(PIN_STROBE); // transfiere los datos a las salidas del registro 4094 
*
068D:  BSF    03.5
068E:  BCF    03.6
068F:  BCF    05.1
0690:  BCF    03.5
0691:  BSF    05.1
....................     output_low(PIN_STROBE); // un pulso de strobe  
0692:  BSF    03.5
0693:  BCF    05.1
0694:  BCF    03.5
0695:  BCF    05.1
.................... } 
....................  
.................... void ShiftRegister_sendData(int charactersArray [], int arraySize) { 
*
0650:  MOVLW  01
0651:  BSF    03.6
0652:  MOVWF  3A
0653:  CLRF   3B
....................     int i = 1; 
....................     int j = 0; 
....................  
....................     output_low(PIN_CLOCK); // EL pin clk se pone en bajo antes de enviar bits 
0654:  BSF    03.5
0655:  BCF    03.6
0656:  BCF    05.3
0657:  BCF    03.5
0658:  BCF    05.3
....................     output_low(PIN_STROBE); // strobe en bajo 
0659:  BSF    03.5
065A:  BCF    05.1
065B:  BCF    03.5
065C:  BCF    05.1
....................  
....................     for (j = 0; j < arraySize; j++) { 
065D:  BSF    03.6
065E:  CLRF   3B
065F:  MOVF   39,W
0660:  SUBWF  3B,W
0661:  BTFSC  03.0
0662:  GOTO   68D
....................         int character = charactersArray[j]; 
0663:  MOVF   3B,W
0664:  ADDWF  37,W
0665:  MOVWF  04
0666:  BCF    03.7
0667:  BTFSC  38.0
0668:  BSF    03.7
0669:  MOVF   00,W
066A:  MOVWF  3C
....................  
....................         for (i = 1; i <= 8; i++) { 
066B:  MOVLW  01
066C:  MOVWF  3A
066D:  MOVF   3A,W
066E:  SUBLW  08
066F:  BTFSS  03.0
0670:  GOTO   68B
....................             output_bit(PIN_DATA, (character & 0x01)); // operación and para sacar bit a bit 
0671:  BTFSC  3C.0
0672:  GOTO   677
0673:  BCF    03.6
0674:  BCF    05.0
0675:  GOTO   679
0676:  BSF    03.6
0677:  BCF    03.6
0678:  BSF    05.0
0679:  BSF    03.5
067A:  BCF    05.0
....................             character >>= 1; //desplazo un bit a la derecha a datob y lo almaceno en dato  
067B:  BCF    03.0
067C:  BCF    03.5
067D:  BSF    03.6
067E:  RRF    3C,F
....................             output_high(PIN_CLOCK); // saca un pulso de reloj 
067F:  BSF    03.5
0680:  BCF    03.6
0681:  BCF    05.3
0682:  BCF    03.5
0683:  BSF    05.3
....................             output_low(PIN_CLOCK); 
0684:  BSF    03.5
0685:  BCF    05.3
0686:  BCF    03.5
0687:  BCF    05.3
0688:  BSF    03.6
0689:  INCF   3A,F
068A:  GOTO   66D
....................         } 
068B:  INCF   3B,F
068C:  GOTO   65F
....................     } 
....................  
....................     ShiftRegister_closeStrobe(); 
*
0696:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #endif	/* SHIFTREGISTER_H */ 
....................  
....................  
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
*
06D6:  CLRF   3A
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06D7:  CLRF   3A
06D8:  MOVF   39,W
06D9:  SUBWF  3A,W
06DA:  BTFSC  03.0
06DB:  GOTO   6FB
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06DC:  MOVF   3A,W
06DD:  ADDWF  37,W
06DE:  MOVWF  78
06DF:  MOVF   38,W
06E0:  MOVWF  7A
06E1:  BTFSC  03.0
06E2:  INCF   7A,F
06E3:  MOVF   78,W
06E4:  MOVWF  3B
06E5:  MOVF   7A,W
06E6:  MOVWF  3C
06E7:  MOVF   3A,W
06E8:  ADDWF  37,W
06E9:  MOVWF  04
06EA:  BCF    03.7
06EB:  BTFSC  38.0
06EC:  BSF    03.7
06ED:  MOVF   00,W
06EE:  BCF    03.6
06EF:  CALL   004
06F0:  MOVWF  78
06F1:  BSF    03.6
06F2:  MOVF   3B,W
06F3:  MOVWF  04
06F4:  BCF    03.7
06F5:  BTFSC  3C.0
06F6:  BSF    03.7
06F7:  MOVF   78,W
06F8:  MOVWF  00
06F9:  INCF   3A,F
06FA:  GOTO   6D8
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
*
06A1:  CLRF   3A
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
06A2:  CLRF   3A
06A3:  MOVF   39,W
06A4:  SUBWF  3A,W
06A5:  BTFSC  03.0
06A6:  GOTO   6CF
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
06A7:  MOVF   3A,W
06A8:  ADDWF  37,W
06A9:  MOVWF  78
06AA:  MOVF   38,W
06AB:  MOVWF  7A
06AC:  BTFSC  03.0
06AD:  INCF   7A,F
06AE:  MOVF   78,W
06AF:  MOVWF  3B
06B0:  MOVF   7A,W
06B1:  MOVWF  3C
06B2:  MOVF   3A,W
06B3:  ADDWF  37,W
06B4:  MOVWF  04
06B5:  BCF    03.7
06B6:  BTFSC  38.0
06B7:  BSF    03.7
06B8:  MOVF   00,W
06B9:  BCF    03.6
06BA:  CALL   004
06BB:  MOVWF  78
06BC:  BSF    03.6
06BD:  MOVF   3B,W
06BE:  MOVWF  04
06BF:  BCF    03.7
06C0:  BTFSC  3C.0
06C1:  BSF    03.7
06C2:  MOVF   78,W
06C3:  MOVWF  00
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
06C4:  MOVF   3A,W
06C5:  ADDWF  37,W
06C6:  MOVWF  04
06C7:  BCF    03.7
06C8:  BTFSC  38.0
06C9:  BSF    03.7
06CA:  MOVF   00,W
06CB:  IORLW  08
06CC:  MOVWF  00
06CD:  INCF   3A,F
06CE:  GOTO   6A3
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
*
0697:  BSF    03.6
0698:  MOVF   36,F
0699:  BTFSC  03.2
069A:  GOTO   6D0
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
069B:  MOVF   34,W
069C:  MOVWF  38
069D:  MOVF   33,W
069E:  MOVWF  37
069F:  MOVF   35,W
06A0:  MOVWF  39
....................     } else { 
*
06CF:  GOTO   6FB
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
06D0:  MOVF   34,W
06D1:  MOVWF  38
06D2:  MOVF   33,W
06D3:  MOVWF  37
06D4:  MOVF   35,W
06D5:  MOVWF  39
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
*
06FB:  MOVF   34,W
06FC:  MOVWF  38
06FD:  MOVF   33,W
06FE:  MOVWF  37
06FF:  MOVF   35,W
0700:  MOVWF  39
0701:  BCF    03.6
0702:  CALL   650
0703:  RETURN
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
*
0BF1:  BSF    03.6
0BF2:  CLRF   1D
0BF3:  CLRF   1E
0BF4:  CLRF   1F
0BF5:  CLRF   20
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BF6:  MOVLW  01
0BF7:  MOVWF  1D
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
0BF8:  MOVLW  09
0BF9:  MOVWF  1E
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BFA:  MOVLW  01
0BFB:  MOVWF  1F
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
0BFC:  MOVWF  20
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
0BFD:  MOVWF  38
0BFE:  MOVLW  1D
0BFF:  MOVWF  37
0C00:  MOVLW  04
0C01:  MOVWF  39
0C02:  BCF    0A.3
0C03:  BCF    03.6
0C04:  CALL   650
0C05:  BSF    0A.3
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... typedef struct { 
....................     Time countdownTime; 
....................     Time currentTime; 
....................     Time limitTime; 
....................     int hoursUpperBound; 
....................     int minutesUpperBound; 
....................     int secondsUpperBound; 
....................     char addressIsCounting; 
....................     char addressAlarmSeconds; 
....................     char addressAlarmMinutes; 
....................     char addressAlarmHours; 
....................     char addressRtcHours; 
....................     char addressRtcMinutes; 
....................     char addressRtcSeconds; 
.................... } Timer; 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.limitTime.hour = read_eeprom(alarmHourAddress) % (maximumHours + 1); 
*
0912:  MOVF   62,W
0913:  MOVWF  0D
0914:  BSF    03.5
0915:  BCF    0C.7
0916:  BSF    0C.0
0917:  BCF    03.5
0918:  MOVF   0C,W
0919:  MOVWF  6C
091A:  MOVLW  01
091B:  ADDWF  60,W
091C:  MOVWF  6D
091D:  MOVF   6C,W
091E:  BSF    03.5
091F:  MOVWF  2B
0920:  BCF    03.5
0921:  MOVF   6D,W
0922:  BSF    03.5
0923:  MOVWF  2C
0924:  BCF    0A.3
0925:  BCF    03.5
0926:  BCF    03.6
0927:  CALL   02F
0928:  BSF    0A.3
0929:  MOVF   77,W
092A:  BSF    03.5
092B:  BSF    03.6
092C:  MOVWF  1A
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
092D:  BCF    03.5
092E:  MOVF   64,W
092F:  MOVWF  0D
0930:  BSF    03.5
0931:  BCF    0C.7
0932:  BSF    0C.0
0933:  BCF    03.5
0934:  MOVF   0C,W
0935:  MOVWF  6C
0936:  MOVLW  01
0937:  ADDWF  61,W
0938:  MOVWF  6D
0939:  MOVF   6C,W
093A:  BSF    03.5
093B:  MOVWF  2B
093C:  BCF    03.5
093D:  MOVF   6D,W
093E:  BSF    03.5
093F:  MOVWF  2C
0940:  BCF    0A.3
0941:  BCF    03.5
0942:  BCF    03.6
0943:  CALL   02F
0944:  BSF    0A.3
0945:  MOVF   77,W
0946:  BSF    03.5
0947:  BSF    03.6
0948:  MOVWF  1B
....................     newTimer.limitTime.second = 0; 
0949:  CLRF   1C
....................  
....................     newTimer.hoursUpperBound = maximumHours; 
094A:  BCF    03.5
094B:  MOVF   60,W
094C:  BSF    03.5
094D:  MOVWF  1F
....................     newTimer.minutesUpperBound = maximumMinutes; 
094E:  BCF    03.5
094F:  MOVF   61,W
0950:  BSF    03.5
0951:  MOVWF  20
....................     newTimer.secondsUpperBound = 59; 
0952:  MOVLW  3B
0953:  MOVWF  21
....................  
....................     newTimer.addressAlarmHours = alarmHourAddress; 
0954:  BCF    03.5
0955:  MOVF   62,W
0956:  BSF    03.5
0957:  MOVWF  25
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
0958:  BCF    03.5
0959:  MOVF   64,W
095A:  BSF    03.5
095B:  MOVWF  24
....................     newTimer.addressRtcHours = rtcHour; 
095C:  BCF    03.5
095D:  MOVF   66,W
095E:  BSF    03.5
095F:  MOVWF  26
....................     newTimer.addressRtcMinutes = rtcMinutes; 
0960:  BCF    03.5
0961:  MOVF   68,W
0962:  BSF    03.5
0963:  MOVWF  27
....................     newTimer.addressRtcSeconds = rtcSeconds; 
0964:  BCF    03.5
0965:  MOVF   6A,W
0966:  BSF    03.5
0967:  MOVWF  28
....................  
....................     return newTimer; 
0968:  MOVLW  90
0969:  MOVWF  78
096A:  MOVLW  01
096B:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer.hoursUpperBound = 0; 
*
09A8:  BSF    03.5
09A9:  CLRF   1F
....................     newTimer.minutesUpperBound = maximumMinutes; 
09AA:  BCF    03.5
09AB:  MOVF   60,W
09AC:  BSF    03.5
09AD:  MOVWF  20
....................     newTimer.secondsUpperBound = 59; 
09AE:  MOVLW  3B
09AF:  MOVWF  21
....................  
....................     newTimer.limitTime.hour = 0; 
09B0:  CLRF   1A
....................     newTimer.limitTime.minute = read_eeprom(alarmMinutesAddress) % (maximumMinutes + 1); 
09B1:  BCF    03.5
09B2:  MOVF   61,W
09B3:  MOVWF  0D
09B4:  BSF    03.5
09B5:  BCF    0C.7
09B6:  BSF    0C.0
09B7:  BCF    03.5
09B8:  MOVF   0C,W
09B9:  MOVWF  6B
09BA:  MOVLW  01
09BB:  ADDWF  60,W
09BC:  MOVWF  6C
09BD:  MOVF   6B,W
09BE:  BSF    03.5
09BF:  MOVWF  2B
09C0:  BCF    03.5
09C1:  MOVF   6C,W
09C2:  BSF    03.5
09C3:  MOVWF  2C
09C4:  BCF    0A.3
09C5:  BCF    03.5
09C6:  BCF    03.6
09C7:  CALL   02F
09C8:  BSF    0A.3
09C9:  MOVF   77,W
09CA:  BSF    03.5
09CB:  BSF    03.6
09CC:  MOVWF  1B
....................     newTimer.limitTime.second = 
....................             read_eeprom(addressAlarmSeconds) % (newTimer.secondsUpperBound + 1); 
09CD:  BCF    03.5
09CE:  MOVF   63,W
09CF:  MOVWF  0D
09D0:  BSF    03.5
09D1:  BCF    0C.7
09D2:  BSF    0C.0
09D3:  BCF    03.5
09D4:  MOVF   0C,W
09D5:  MOVWF  6B
09D6:  MOVLW  01
09D7:  BSF    03.5
09D8:  ADDWF  21,W
09D9:  BCF    03.5
09DA:  MOVWF  6C
09DB:  MOVF   6B,W
09DC:  BSF    03.5
09DD:  MOVWF  2B
09DE:  BCF    03.5
09DF:  MOVF   6C,W
09E0:  BSF    03.5
09E1:  MOVWF  2C
09E2:  BCF    0A.3
09E3:  BCF    03.5
09E4:  BCF    03.6
09E5:  CALL   02F
09E6:  BSF    0A.3
09E7:  MOVF   77,W
09E8:  BSF    03.5
09E9:  BSF    03.6
09EA:  MOVWF  1C
....................  
....................     newTimer.addressAlarmMinutes = alarmMinutesAddress; 
09EB:  BCF    03.5
09EC:  MOVF   61,W
09ED:  BSF    03.5
09EE:  MOVWF  24
....................     newTimer.addressAlarmSeconds = addressAlarmSeconds; 
09EF:  BCF    03.5
09F0:  MOVF   63,W
09F1:  BSF    03.5
09F2:  MOVWF  23
....................     newTimer.addressRtcHours = rtcHour; 
09F3:  BCF    03.5
09F4:  MOVF   65,W
09F5:  BSF    03.5
09F6:  MOVWF  26
....................     newTimer.addressRtcMinutes = rtcMinutes; 
09F7:  BCF    03.5
09F8:  MOVF   67,W
09F9:  BSF    03.5
09FA:  MOVWF  27
....................     newTimer.addressRtcSeconds = rtcSeconds; 
09FB:  BCF    03.5
09FC:  MOVF   69,W
09FD:  BSF    03.5
09FE:  MOVWF  28
....................  
....................     return newTimer; 
09FF:  MOVLW  90
0A00:  MOVWF  78
0A01:  MOVLW  01
0A02:  MOVWF  79
.................... } 
....................  
.................... Timer Timer_newHoursMinutes(int maximumHours, int maximumMinutes, __EEADDRESS__ alarmHourAddress, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ isCounting, 
....................         __EEADDRESS__ rtcHour, __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newHoursMinutes( 
....................             maximumHours, 
....................             maximumMinutes, 
....................             alarmHourAddress, 
....................             alarmMinutesAddress, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................     return newTimer; 
.................... } 
....................  
.................... Timer Timer_newMinutesSeconds(int maximumMinutes, 
....................         __EEADDRESS__ alarmMinutesAddress, __EEADDRESS__ addressAlarmSeconds, 
....................         __EEADDRESS__ isCounting, __EEADDRESS__ rtcHour, 
....................         __EEADDRESS__ rtcMinutes, __EEADDRESS__ rtcSeconds) { 
....................     Timer newTimer; 
....................  
....................     newTimer = Timer_newMinutesSeconds( 
....................             maximumMinutes, 
....................             alarmMinutesAddress, 
....................             addressAlarmSeconds, 
....................             rtcHour, 
....................             rtcMinutes, 
....................             rtcSeconds); 
....................  
....................     newTimer.addressIsCounting = isCounting; 
....................  
....................     return newTimer; 
.................... } 
....................  
.................... void Timer_updateRtc(Timer *timerPtr) { 
....................     Time_setClockTime(&timerPtr->currentTime); 
*
054D:  MOVLW  05
054E:  ADDWF  56,W
054F:  MOVWF  78
0550:  MOVF   57,W
0551:  MOVWF  7A
0552:  BTFSC  03.0
0553:  INCF   7A,F
0554:  MOVF   78,W
0555:  MOVWF  58
0556:  MOVF   7A,W
0557:  MOVWF  59
0558:  MOVF   59,W
0559:  MOVWF  5B
055A:  MOVF   58,W
055B:  MOVWF  5A
.................... } 
....................  
.................... void Timer_updateCountdownTime(Timer *timerPtr) { 
....................  
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
*
0365:  MOVLW  05
0366:  ADDWF  58,W
0367:  MOVWF  78
0368:  MOVF   59,W
0369:  MOVWF  7A
036A:  BTFSC  03.0
036B:  INCF   7A,F
036C:  MOVF   78,W
036D:  BSF    03.5
036E:  MOVWF  10
036F:  MOVF   7A,W
0370:  MOVWF  11
0371:  MOVWF  13
0372:  MOVF   10,W
0373:  MOVWF  12
0374:  BCF    03.5
0375:  BCF    03.6
0376:  CALL   1B6
0377:  MOVF   7A,W
0378:  BSF    03.6
0379:  MOVWF  5D
037A:  MOVF   79,W
037B:  MOVWF  5C
037C:  MOVF   78,W
037D:  MOVWF  5B
037E:  MOVF   77,W
037F:  MOVWF  5A
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->limitTime); 
0380:  MOVLW  0A
0381:  ADDWF  58,W
0382:  MOVWF  78
0383:  MOVF   59,W
0384:  MOVWF  7A
0385:  BTFSC  03.0
0386:  INCF   7A,F
0387:  MOVF   78,W
0388:  BSF    03.5
0389:  MOVWF  10
038A:  MOVF   7A,W
038B:  MOVWF  11
038C:  MOVWF  13
038D:  MOVF   10,W
038E:  MOVWF  12
038F:  BCF    03.5
0390:  BCF    03.6
0391:  CALL   1B6
0392:  MOVF   7A,W
0393:  BSF    03.6
0394:  MOVWF  61
0395:  MOVF   79,W
0396:  MOVWF  60
0397:  MOVF   78,W
0398:  MOVWF  5F
0399:  MOVF   77,W
039A:  MOVWF  5E
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
039B:  MOVF   5A,W
039C:  SUBWF  5E,W
039D:  MOVWF  62
039E:  MOVF   5F,W
039F:  MOVWF  63
03A0:  MOVF   5B,W
03A1:  BTFSS  03.0
03A2:  INCFSZ 5B,W
03A3:  SUBWF  63,F
03A4:  MOVF   60,W
03A5:  MOVWF  64
03A6:  MOVF   5C,W
03A7:  BTFSS  03.0
03A8:  INCFSZ 5C,W
03A9:  SUBWF  64,F
03AA:  MOVF   61,W
03AB:  MOVWF  65
03AC:  MOVF   5D,W
03AD:  BTFSS  03.0
03AE:  INCFSZ 5D,W
03AF:  SUBWF  65,F
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
03B0:  BTFSS  65.7
03B1:  GOTO   3B7
03B2:  CLRF   77
03B3:  CLRF   78
03B4:  CLRF   79
03B5:  CLRF   7A
03B6:  GOTO   3BF
03B7:  MOVF   62,W
03B8:  MOVWF  77
03B9:  MOVF   63,W
03BA:  MOVWF  78
03BB:  MOVF   64,W
03BC:  MOVWF  79
03BD:  MOVF   65,W
03BE:  MOVWF  7A
03BF:  MOVF   7A,W
03C0:  MOVWF  65
03C1:  MOVF   79,W
03C2:  MOVWF  64
03C3:  MOVF   78,W
03C4:  MOVWF  63
03C5:  MOVF   77,W
03C6:  MOVWF  62
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
03C7:  BCF    03.1
03C8:  MOVF   65,W
03C9:  BSF    03.5
03CA:  MOVWF  25
03CB:  BCF    03.5
03CC:  MOVF   64,W
03CD:  BSF    03.5
03CE:  MOVWF  24
03CF:  BCF    03.5
03D0:  MOVF   63,W
03D1:  BSF    03.5
03D2:  MOVWF  23
03D3:  BCF    03.5
03D4:  MOVF   62,W
03D5:  BSF    03.5
03D6:  MOVWF  22
03D7:  CLRF   29
03D8:  CLRF   28
03D9:  MOVLW  0E
03DA:  MOVWF  27
03DB:  MOVLW  10
03DC:  MOVWF  26
03DD:  BCF    03.5
03DE:  BCF    03.6
03DF:  CALL   253
03E0:  MOVF   7A,W
03E1:  BSF    03.6
03E2:  MOVWF  69
03E3:  MOVF   79,W
03E4:  MOVWF  68
03E5:  MOVF   78,W
03E6:  MOVWF  67
03E7:  MOVF   77,W
03E8:  MOVWF  66
03E9:  BSF    03.1
03EA:  MOVLW  90
03EB:  MOVWF  04
03EC:  BSF    03.7
03ED:  MOVF   65,W
03EE:  BSF    03.5
03EF:  MOVWF  25
03F0:  BCF    03.5
03F1:  MOVF   64,W
03F2:  BSF    03.5
03F3:  MOVWF  24
03F4:  BCF    03.5
03F5:  MOVF   63,W
03F6:  BSF    03.5
03F7:  MOVWF  23
03F8:  BCF    03.5
03F9:  MOVF   62,W
03FA:  BSF    03.5
03FB:  MOVWF  22
03FC:  CLRF   29
03FD:  CLRF   28
03FE:  MOVLW  0E
03FF:  MOVWF  27
0400:  MOVLW  10
0401:  MOVWF  26
0402:  BCF    03.5
0403:  BCF    03.6
0404:  CALL   253
0405:  BSF    03.5
0406:  BSF    03.6
0407:  MOVF   13,W
0408:  MOVWF  17
0409:  MOVF   12,W
040A:  MOVWF  16
040B:  MOVF   11,W
040C:  MOVWF  15
040D:  MOVF   10,W
040E:  MOVWF  14
040F:  CLRF   19
0410:  MOVF   04,W
0411:  MOVWF  18
0412:  BCF    19.0
0413:  BTFSC  03.7
0414:  BSF    19.0
0415:  BCF    03.1
0416:  MOVF   13,W
0417:  MOVWF  25
0418:  MOVF   12,W
0419:  MOVWF  24
041A:  MOVF   11,W
041B:  MOVWF  23
041C:  MOVF   10,W
041D:  MOVWF  22
041E:  CLRF   29
041F:  CLRF   28
0420:  CLRF   27
0421:  MOVLW  3C
0422:  MOVWF  26
0423:  BCF    03.5
0424:  BCF    03.6
0425:  CALL   253
0426:  BSF    03.5
0427:  BSF    03.6
0428:  MOVF   18,W
0429:  MOVWF  04
042A:  BCF    03.7
042B:  BTFSC  19.0
042C:  BSF    03.7
042D:  MOVF   7A,W
042E:  BCF    03.5
042F:  MOVWF  6D
0430:  MOVF   79,W
0431:  MOVWF  6C
0432:  MOVF   78,W
0433:  MOVWF  6B
0434:  MOVF   77,W
0435:  MOVWF  6A
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
0436:  MOVLW  02
0437:  ADDWF  58,W
0438:  MOVWF  78
0439:  MOVF   59,W
043A:  MOVWF  7A
043B:  BTFSC  03.0
043C:  INCF   7A,F
043D:  MOVF   78,W
043E:  BSF    03.5
043F:  MOVWF  10
0440:  MOVF   7A,W
0441:  MOVWF  11
0442:  CLRF   13
0443:  MOVF   04,W
0444:  MOVWF  12
0445:  BCF    13.0
0446:  BTFSC  03.7
0447:  BSF    13.0
0448:  BSF    03.1
0449:  MOVLW  94
044A:  MOVWF  04
044B:  BSF    03.7
044C:  BCF    03.5
044D:  MOVF   65,W
044E:  BSF    03.5
044F:  MOVWF  25
0450:  BCF    03.5
0451:  MOVF   64,W
0452:  BSF    03.5
0453:  MOVWF  24
0454:  BCF    03.5
0455:  MOVF   63,W
0456:  BSF    03.5
0457:  MOVWF  23
0458:  BCF    03.5
0459:  MOVF   62,W
045A:  BSF    03.5
045B:  MOVWF  22
045C:  CLRF   29
045D:  CLRF   28
045E:  MOVLW  0E
045F:  MOVWF  27
0460:  MOVLW  10
0461:  MOVWF  26
0462:  BCF    03.5
0463:  BCF    03.6
0464:  CALL   253
0465:  BSF    03.5
0466:  BSF    03.6
0467:  MOVF   14,W
0468:  MOVWF  77
0469:  MOVF   15,W
046A:  MOVWF  78
046B:  MOVF   16,W
046C:  MOVWF  79
046D:  MOVF   17,W
046E:  MOVWF  7A
046F:  MOVF   12,W
0470:  MOVWF  04
0471:  BCF    03.7
0472:  BTFSC  13.0
0473:  BSF    03.7
0474:  MOVF   17,W
0475:  MOVWF  1B
0476:  MOVF   16,W
0477:  MOVWF  1A
0478:  MOVF   15,W
0479:  MOVWF  19
047A:  MOVF   14,W
047B:  MOVWF  18
047C:  CLRF   1D
047D:  MOVF   04,W
047E:  MOVWF  1C
047F:  BCF    1D.0
0480:  BTFSC  03.7
0481:  BSF    1D.0
0482:  BSF    03.1
0483:  MOVLW  9E
0484:  MOVWF  04
0485:  BSF    03.7
0486:  MOVF   17,W
0487:  MOVWF  25
0488:  MOVF   16,W
0489:  MOVWF  24
048A:  MOVF   15,W
048B:  MOVWF  23
048C:  MOVF   14,W
048D:  MOVWF  22
048E:  CLRF   29
048F:  CLRF   28
0490:  CLRF   27
0491:  MOVLW  3C
0492:  MOVWF  26
0493:  BCF    03.5
0494:  BCF    03.6
0495:  CALL   253
0496:  BSF    03.5
0497:  BSF    03.6
0498:  MOVF   1C,W
0499:  MOVWF  04
049A:  BCF    03.7
049B:  BTFSC  1D.0
049C:  BSF    03.7
049D:  MOVF   10,W
049E:  MOVWF  04
049F:  BCF    03.7
04A0:  BTFSC  11.0
04A1:  BSF    03.7
04A2:  MOVF   1E,W
04A3:  MOVWF  00
....................  
....................     timerPtr->countdownTime.hour = hour; 
04A4:  BCF    03.5
04A5:  MOVF   58,W
04A6:  MOVWF  04
04A7:  BCF    03.7
04A8:  BTFSC  59.0
04A9:  BSF    03.7
04AA:  MOVF   66,W
04AB:  MOVWF  00
....................     timerPtr->countdownTime.minute = minute; 
04AC:  MOVLW  01
04AD:  ADDWF  58,W
04AE:  MOVWF  04
04AF:  BCF    03.7
04B0:  BTFSC  59.0
04B1:  BSF    03.7
04B2:  MOVF   6A,W
04B3:  MOVWF  00
.................... } 
....................  
.................... void Timer_updateCountdownTimeMinutesSeconds(Timer *timerPtr) { 
....................     signed int32 currentTimeInSeconds; 
....................     signed int32 limitTimeInSeconds; 
....................     signed int32 countdownTimeInSeconds; 
....................     currentTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->currentTime); 
....................     limitTimeInSeconds = Time_changeTimeToSeconds(&timerPtr->limitTime); 
....................     countdownTimeInSeconds = limitTimeInSeconds - currentTimeInSeconds; 
....................  
....................     countdownTimeInSeconds = countdownTimeInSeconds < 0 ? 0 : countdownTimeInSeconds; 
....................  
....................     int32 hour = (countdownTimeInSeconds / 3600); 
....................     int32 minute = (countdownTimeInSeconds % 3600) / 60; 
....................     timerPtr->countdownTime.second = (countdownTimeInSeconds % 3600) % 60; 
....................  
....................     timerPtr->countdownTime.hour = hour; 
....................     timerPtr->countdownTime.minute = minute; 
.................... } 
....................  
.................... void Timer_updateTimerFromEeprom(Timer *timerPtr) { 
....................  
....................     timerPtr->currentTime.hour = 
....................             read_eeprom(timerPtr->addressRtcHours) % (timerPtr->hoursUpperBound + 1); 
....................     timerPtr->currentTime.minute = 
....................             read_eeprom(timerPtr->addressRtcMinutes) % (timerPtr->minutesUpperBound + 1); 
....................     timerPtr->currentTime.second = 
....................             read_eeprom(timerPtr->addressRtcSeconds) % (timerPtr->secondsUpperBound + 1); 
....................     Timer_updateCountdownTime(timerPtr); 
.................... } 
....................  
.................... BOOLEAN Timer_wasCounting(Timer *timerPtr) { 
....................     return (read_eeprom(timerPtr->addressIsCounting) % 2); 
.................... } 
....................  
.................... void Timer_updateTimer(Timer *timerPtr) { 
....................     timerPtr->currentTime = Time_getCurrentTime(); 
*
02DE:  MOVLW  05
02DF:  ADDWF  56,W
02E0:  MOVWF  78
02E1:  MOVF   57,W
02E2:  MOVWF  7A
02E3:  BTFSC  03.0
02E4:  INCF   7A,F
02E5:  MOVF   78,W
02E6:  MOVWF  58
02E7:  MOVF   7A,W
02E8:  MOVWF  59
*
0343:  MOVF   79,W
0344:  MOVWF  7A
0345:  MOVF   78,W
0346:  MOVWF  5A
0347:  MOVF   7A,W
0348:  MOVWF  5B
0349:  MOVLW  05
034A:  MOVWF  78
034B:  MOVF   5A,W
034C:  MOVWF  04
034D:  BCF    03.7
034E:  BTFSC  5B.0
034F:  BSF    03.7
0350:  MOVF   00,W
0351:  MOVWF  77
0352:  MOVF   58,W
0353:  MOVWF  04
0354:  BCF    03.7
0355:  BTFSC  59.0
0356:  BSF    03.7
0357:  MOVF   77,W
0358:  MOVWF  00
0359:  INCF   58,F
035A:  BTFSC  03.2
035B:  INCF   59,F
035C:  INCF   5A,F
035D:  BTFSC  03.2
035E:  INCF   5B,F
035F:  DECFSZ 78,F
0360:  GOTO   34B
....................     Timer_updateCountdownTime(timerPtr); 
0361:  MOVF   57,W
0362:  MOVWF  59
0363:  MOVF   56,W
0364:  MOVWF  58
.................... } 
....................  
.................... BOOLEAN Timer_hasTimerChanged(Timer *timerPtr) { 
....................     Time currentTime; 
....................     currentTime = Time_getCurrentTime(); 
....................  
....................     return (timerPtr->currentTime.second != currentTime.second); 
.................... } 
....................  
.................... void Timer_increaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == timerPtr->hoursUpperBound ? 
....................             0 : timerPtr->limitTime.hour + 1; 
*
1156:  MOVLW  0A
1157:  ADDWF  21,W
1158:  MOVWF  78
1159:  MOVF   22,W
115A:  MOVWF  7A
115B:  BTFSC  03.0
115C:  INCF   7A,F
115D:  MOVF   78,W
115E:  MOVWF  23
115F:  MOVF   7A,W
1160:  MOVWF  24
1161:  MOVLW  0A
1162:  ADDWF  21,W
1163:  MOVWF  04
1164:  BCF    03.7
1165:  BTFSC  22.0
1166:  BSF    03.7
1167:  MOVF   00,W
1168:  MOVWF  25
1169:  MOVLW  0F
116A:  ADDWF  21,W
116B:  MOVWF  04
116C:  BCF    03.7
116D:  BTFSC  22.0
116E:  BSF    03.7
116F:  MOVF   00,W
1170:  SUBWF  25,W
1171:  BTFSS  03.2
1172:  GOTO   175
1173:  MOVLW  00
1174:  GOTO   17D
1175:  MOVLW  0A
1176:  ADDWF  21,W
1177:  MOVWF  04
1178:  BCF    03.7
1179:  BTFSC  22.0
117A:  BSF    03.7
117B:  MOVLW  01
117C:  ADDWF  00,W
117D:  MOVWF  25
117E:  MOVF   23,W
117F:  MOVWF  04
1180:  BCF    03.7
1181:  BTFSC  24.0
1182:  BSF    03.7
1183:  MOVF   25,W
1184:  MOVWF  00
.................... } 
....................  
.................... void Timer_decreaseTimerHours(Timer *timerPtr) { 
....................     timerPtr->limitTime.hour = 
....................             timerPtr->limitTime.hour == 0 ? 
....................             timerPtr->hoursUpperBound : timerPtr->limitTime.hour - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == timerPtr->minutesUpperBound ? 
....................             0 : timerPtr->limitTime.minute + 1; 
*
0D23:  MOVLW  0B
0D24:  BSF    03.6
0D25:  ADDWF  21,W
0D26:  MOVWF  78
0D27:  MOVF   22,W
0D28:  MOVWF  7A
0D29:  BTFSC  03.0
0D2A:  INCF   7A,F
0D2B:  MOVF   78,W
0D2C:  MOVWF  23
0D2D:  MOVF   7A,W
0D2E:  MOVWF  24
0D2F:  MOVLW  0B
0D30:  ADDWF  21,W
0D31:  MOVWF  04
0D32:  BCF    03.7
0D33:  BTFSC  22.0
0D34:  BSF    03.7
0D35:  MOVF   00,W
0D36:  MOVWF  25
0D37:  MOVLW  10
0D38:  ADDWF  21,W
0D39:  MOVWF  04
0D3A:  BCF    03.7
0D3B:  BTFSC  22.0
0D3C:  BSF    03.7
0D3D:  MOVF   00,W
0D3E:  SUBWF  25,W
0D3F:  BTFSS  03.2
0D40:  GOTO   543
0D41:  MOVLW  00
0D42:  GOTO   54B
0D43:  MOVLW  0B
0D44:  ADDWF  21,W
0D45:  MOVWF  04
0D46:  BCF    03.7
0D47:  BTFSC  22.0
0D48:  BSF    03.7
0D49:  MOVLW  01
0D4A:  ADDWF  00,W
0D4B:  MOVWF  25
0D4C:  MOVF   23,W
0D4D:  MOVWF  04
0D4E:  BCF    03.7
0D4F:  BTFSC  24.0
0D50:  BSF    03.7
0D51:  MOVF   25,W
0D52:  MOVWF  00
0D53:  BCF    03.6
0D54:  RETURN
.................... } 
....................  
.................... void Timer_decreaseTimerMinutes(Timer *timerPtr) { 
....................     timerPtr->limitTime.minute = 
....................             timerPtr->limitTime.minute == 0 ? 
....................             timerPtr->minutesUpperBound : timerPtr->limitTime.minute - 1; 
.................... } 
....................  
.................... void Timer_increaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == timerPtr->secondsUpperBound ? 
....................             0 : timerPtr->limitTime.second + 1; 
*
1316:  MOVLW  0C
1317:  ADDWF  21,W
1318:  MOVWF  78
1319:  MOVF   22,W
131A:  MOVWF  7A
131B:  BTFSC  03.0
131C:  INCF   7A,F
131D:  MOVF   78,W
131E:  MOVWF  23
131F:  MOVF   7A,W
1320:  MOVWF  24
1321:  MOVLW  0C
1322:  ADDWF  21,W
1323:  MOVWF  04
1324:  BCF    03.7
1325:  BTFSC  22.0
1326:  BSF    03.7
1327:  MOVF   00,W
1328:  MOVWF  25
1329:  MOVLW  11
132A:  ADDWF  21,W
132B:  MOVWF  04
132C:  BCF    03.7
132D:  BTFSC  22.0
132E:  BSF    03.7
132F:  MOVF   00,W
1330:  SUBWF  25,W
1331:  BTFSS  03.2
1332:  GOTO   335
1333:  MOVLW  00
1334:  GOTO   33D
1335:  MOVLW  0C
1336:  ADDWF  21,W
1337:  MOVWF  04
1338:  BCF    03.7
1339:  BTFSC  22.0
133A:  BSF    03.7
133B:  MOVLW  01
133C:  ADDWF  00,W
133D:  MOVWF  25
133E:  MOVF   23,W
133F:  MOVWF  04
1340:  BCF    03.7
1341:  BTFSC  24.0
1342:  BSF    03.7
1343:  MOVF   25,W
1344:  MOVWF  00
1345:  BCF    03.6
.................... } 
....................  
.................... void Timer_decreaseTimerSeconds(Timer *timerPtr) { 
....................     timerPtr->limitTime.second = 
....................             timerPtr->limitTime.second == 0 ? 
....................             timerPtr->secondsUpperBound : timerPtr->limitTime.second - 1; 
.................... } 
....................  
.................... void Timer_saveStateCounting(Timer *timerPtr, BOOLEAN isCounting) { 
....................     write_eeprom(timerPtr->addressIsCounting, isCounting); 
.................... } 
....................  
.................... void Timer_saveRtcCurrentTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressRtcHours, timerPtr->currentTime.hour); 
*
0B1B:  MOVLW  16
0B1C:  ADDWF  21,W
0B1D:  MOVWF  04
0B1E:  BCF    03.7
0B1F:  BTFSC  22.0
0B20:  BSF    03.7
0B21:  MOVF   00,W
0B22:  MOVWF  23
0B23:  MOVLW  05
0B24:  ADDWF  21,W
0B25:  MOVWF  04
0B26:  BCF    03.7
0B27:  BTFSC  22.0
0B28:  BSF    03.7
0B29:  MOVF   00,W
0B2A:  MOVWF  24
0B2B:  BCF    03.6
0B2C:  MOVF   0B,W
0B2D:  MOVWF  77
0B2E:  BCF    0B.7
0B2F:  BSF    03.6
0B30:  MOVF   23,W
0B31:  MOVWF  0D
0B32:  MOVF   24,W
0B33:  MOVWF  0C
0B34:  BSF    03.5
0B35:  BCF    0C.7
0B36:  BSF    0C.2
0B37:  MOVLW  55
0B38:  MOVWF  0D
0B39:  MOVLW  AA
0B3A:  MOVWF  0D
0B3B:  BSF    0C.1
0B3C:  BTFSC  0C.1
0B3D:  GOTO   33C
0B3E:  BCF    0C.2
0B3F:  MOVF   77,W
0B40:  BCF    03.5
0B41:  BCF    03.6
0B42:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcMinutes, timerPtr->currentTime.minute); 
0B43:  MOVLW  17
0B44:  BSF    03.6
0B45:  ADDWF  21,W
0B46:  MOVWF  04
0B47:  BCF    03.7
0B48:  BTFSC  22.0
0B49:  BSF    03.7
0B4A:  MOVF   00,W
0B4B:  MOVWF  23
0B4C:  MOVLW  06
0B4D:  ADDWF  21,W
0B4E:  MOVWF  04
0B4F:  BCF    03.7
0B50:  BTFSC  22.0
0B51:  BSF    03.7
0B52:  MOVF   00,W
0B53:  MOVWF  24
0B54:  BCF    03.6
0B55:  MOVF   0B,W
0B56:  MOVWF  77
0B57:  BCF    0B.7
0B58:  BSF    03.6
0B59:  MOVF   23,W
0B5A:  MOVWF  0D
0B5B:  MOVF   24,W
0B5C:  MOVWF  0C
0B5D:  BSF    03.5
0B5E:  BCF    0C.7
0B5F:  BSF    0C.2
0B60:  MOVLW  55
0B61:  MOVWF  0D
0B62:  MOVLW  AA
0B63:  MOVWF  0D
0B64:  BSF    0C.1
0B65:  BTFSC  0C.1
0B66:  GOTO   365
0B67:  BCF    0C.2
0B68:  MOVF   77,W
0B69:  BCF    03.5
0B6A:  BCF    03.6
0B6B:  IORWF  0B,F
....................     write_eeprom(timerPtr->addressRtcSeconds, timerPtr->currentTime.second); 
0B6C:  MOVLW  18
0B6D:  BSF    03.6
0B6E:  ADDWF  21,W
0B6F:  MOVWF  04
0B70:  BCF    03.7
0B71:  BTFSC  22.0
0B72:  BSF    03.7
0B73:  MOVF   00,W
0B74:  MOVWF  23
0B75:  MOVLW  07
0B76:  ADDWF  21,W
0B77:  MOVWF  04
0B78:  BCF    03.7
0B79:  BTFSC  22.0
0B7A:  BSF    03.7
0B7B:  MOVF   00,W
0B7C:  MOVWF  24
0B7D:  BCF    03.6
0B7E:  MOVF   0B,W
0B7F:  MOVWF  77
0B80:  BCF    0B.7
0B81:  BSF    03.6
0B82:  MOVF   23,W
0B83:  MOVWF  0D
0B84:  MOVF   24,W
0B85:  MOVWF  0C
0B86:  BSF    03.5
0B87:  BCF    0C.7
0B88:  BSF    0C.2
0B89:  MOVLW  55
0B8A:  MOVWF  0D
0B8B:  MOVLW  AA
0B8C:  MOVWF  0D
0B8D:  BSF    0C.1
0B8E:  BTFSC  0C.1
0B8F:  GOTO   38E
0B90:  BCF    0C.2
0B91:  MOVF   77,W
0B92:  BCF    03.5
0B93:  BCF    03.6
0B94:  IORWF  0B,F
.................... } 
....................  
.................... void Timer_saveLimitTime(Timer *timerPtr) { 
....................     write_eeprom(timerPtr->addressAlarmHours, timerPtr->limitTime.hour); 
....................     write_eeprom(timerPtr->addressAlarmMinutes, timerPtr->limitTime.minute); 
.................... } 
....................  
.................... BOOLEAN Timer_isTimerFinished(Timer *timerPtr) { 
....................     return Time_isTimeZero(&timerPtr->countdownTime); 
*
0BB4:  MOVF   21,W
0BB5:  MOVWF  78
0BB6:  MOVF   22,W
0BB7:  MOVWF  7A
0BB8:  MOVF   78,W
0BB9:  MOVWF  23
0BBA:  MOVF   7A,W
0BBB:  MOVWF  24
0BBC:  MOVF   24,W
0BBD:  MOVWF  26
0BBE:  MOVF   23,W
0BBF:  MOVWF  25
*
0BDE:  MOVF   78,W
.................... } 
....................  
.................... BOOLEAN Timer_isLimitTimeZero(Timer *timerPtr) { 
....................     return (timerPtr->limitTime.hour == 0)&& (timerPtr->limitTime.minute == 0); 
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
....................     int timeToSend[4] = {0}; 
*
071E:  CLRF   25
071F:  CLRF   26
0720:  CLRF   27
0721:  CLRF   28
....................     TimeInDigits timeInDigits; 
....................  
....................     timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
0722:  MOVF   22,W
0723:  MOVWF  78
0724:  MOVF   23,W
0725:  MOVWF  7A
0726:  MOVF   78,W
0727:  MOVWF  2F
0728:  MOVF   7A,W
0729:  MOVWF  30
072A:  MOVWF  3A
072B:  MOVF   2F,W
072C:  MOVWF  39
072D:  CLRF   3B
072E:  BCF    03.6
072F:  CALL   5E6
0730:  MOVF   79,W
0731:  MOVWF  7A
0732:  MOVF   78,W
0733:  BSF    03.6
0734:  MOVWF  2F
0735:  MOVF   7A,W
0736:  MOVWF  30
0737:  MOVLW  01
0738:  MOVWF  32
0739:  MOVLW  29
073A:  MOVWF  31
073B:  MOVLW  06
073C:  MOVWF  78
073D:  MOVF   2F,W
073E:  MOVWF  04
073F:  BCF    03.7
0740:  BTFSC  30.0
0741:  BSF    03.7
0742:  MOVF   00,W
0743:  MOVWF  77
0744:  MOVF   31,W
0745:  MOVWF  04
0746:  BCF    03.7
0747:  BTFSC  32.0
0748:  BSF    03.7
0749:  MOVF   77,W
074A:  MOVWF  00
074B:  INCF   31,F
074C:  BTFSC  03.2
074D:  INCF   32,F
074E:  INCF   2F,F
074F:  BTFSC  03.2
0750:  INCF   30,F
0751:  DECFSZ 78,F
0752:  GOTO   73D
....................     timeToSend[0] = timeInDigits.minute[0]; 
0753:  MOVF   2B,W
0754:  MOVWF  25
....................     timeToSend[1] = timeInDigits.minute[1]; 
0755:  MOVF   2C,W
0756:  MOVWF  26
....................     timeToSend[2] = timeInDigits.hour[0]; 
0757:  MOVF   29,W
0758:  MOVWF  27
....................     timeToSend[3] = timeInDigits.hour[1]; 
0759:  MOVF   2A,W
075A:  MOVWF  28
....................  
....................     if (blink) { 
075B:  MOVF   24,F
075C:  BTFSC  03.2
075D:  GOTO   768
....................         blink = timerPtr->currentTime.second % 2; 
075E:  MOVLW  07
075F:  ADDWF  22,W
0760:  MOVWF  04
0761:  BCF    03.7
0762:  BTFSC  23.0
0763:  BSF    03.7
0764:  MOVF   00,W
0765:  ANDLW  01
0766:  MOVWF  24
....................     } else { 
0767:  GOTO   76A
....................         blink = TRUE; 
0768:  MOVLW  01
0769:  MOVWF  24
....................     } 
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             blink 
....................             ); 
076A:  MOVLW  01
076B:  MOVWF  34
076C:  MOVLW  25
076D:  MOVWF  33
076E:  MOVLW  04
076F:  MOVWF  35
0770:  MOVF   24,W
0771:  MOVWF  36
0772:  BCF    03.6
0773:  CALL   697
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfCountdownTime(Timer *timerPtr) { 
....................     int timeToSend[4] = {0}; 
*
078C:  CLRF   24
078D:  CLRF   25
078E:  CLRF   26
078F:  CLRF   27
....................     TimeInDigits timeInDigits; 
....................     Time time; 
....................      
....................     time = timerPtr->countdownTime; 
0790:  MOVF   22,W
0791:  MOVWF  04
0792:  BCF    03.7
0793:  BTFSC  23.0
0794:  BSF    03.7
0795:  MOVF   00,W
0796:  MOVWF  2E
0797:  INCF   04,F
0798:  MOVF   00,W
0799:  MOVWF  2F
079A:  INCF   04,F
079B:  MOVF   00,W
079C:  MOVWF  30
079D:  INCF   04,F
079E:  MOVF   00,W
079F:  MOVWF  31
07A0:  INCF   04,F
07A1:  MOVF   00,W
07A2:  MOVWF  32
....................     time.minute = time.minute + time.hour * 60; 
07A3:  MOVF   2E,W
07A4:  MOVWF  6F
07A5:  MOVLW  3C
07A6:  BSF    03.5
07A7:  MOVWF  10
07A8:  BCF    03.5
07A9:  BCF    03.6
07AA:  CALL   146
07AB:  MOVF   78,W
07AC:  BSF    03.6
07AD:  ADDWF  2F,F
....................     timeInDigits = Time_getTimeInDigits(&time, FALSE); 
07AE:  MOVLW  01
07AF:  MOVWF  3A
07B0:  MOVLW  2E
07B1:  MOVWF  39
07B2:  CLRF   3B
07B3:  BCF    03.6
07B4:  CALL   5E6
07B5:  MOVF   79,W
07B6:  MOVWF  7A
07B7:  MOVF   78,W
07B8:  BSF    03.6
07B9:  MOVWF  33
07BA:  MOVF   7A,W
07BB:  MOVWF  34
07BC:  MOVLW  01
07BD:  MOVWF  36
07BE:  MOVLW  28
07BF:  MOVWF  35
07C0:  MOVLW  06
07C1:  MOVWF  78
07C2:  MOVF   33,W
07C3:  MOVWF  04
07C4:  BCF    03.7
07C5:  BTFSC  34.0
07C6:  BSF    03.7
07C7:  MOVF   00,W
07C8:  MOVWF  77
07C9:  MOVF   35,W
07CA:  MOVWF  04
07CB:  BCF    03.7
07CC:  BTFSC  36.0
07CD:  BSF    03.7
07CE:  MOVF   77,W
07CF:  MOVWF  00
07D0:  INCF   35,F
07D1:  BTFSC  03.2
07D2:  INCF   36,F
07D3:  INCF   33,F
07D4:  BTFSC  03.2
07D5:  INCF   34,F
07D6:  DECFSZ 78,F
07D7:  GOTO   7C2
....................     //    timeInDigits = Time_getTimeInDigits(&timerPtr->countdownTime, FALSE); 
....................     timeToSend[0] = timeInDigits.second[0]; 
07D8:  MOVF   2C,W
07D9:  MOVWF  24
....................     timeToSend[1] = timeInDigits.second[1]; 
07DA:  MOVF   2D,W
07DB:  MOVWF  25
....................     timeToSend[2] = timeInDigits.minute[0]; 
07DC:  MOVF   2A,W
07DD:  MOVWF  26
....................     timeToSend[3] = timeInDigits.minute[1]; 
07DE:  MOVF   2B,W
07DF:  MOVWF  27
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             timeToSend, 
....................             getArraySize(timeToSend), 
....................             TRUE 
....................             ); 
07E0:  MOVLW  01
07E1:  MOVWF  34
07E2:  MOVLW  24
07E3:  MOVWF  33
07E4:  MOVLW  04
07E5:  MOVWF  35
07E6:  MOVLW  01
07E7:  MOVWF  36
07E8:  BCF    03.6
07E9:  CALL   697
07EA:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
106F:  CLRF   23
1070:  CLRF   24
1071:  CLRF   25
1072:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1073:  MOVLW  0A
1074:  ADDWF  21,W
1075:  MOVWF  78
1076:  MOVF   22,W
1077:  MOVWF  7A
1078:  BTFSC  03.0
1079:  INCF   7A,F
107A:  MOVF   78,W
107B:  MOVWF  2D
107C:  MOVF   7A,W
107D:  MOVWF  2E
107E:  MOVWF  3A
107F:  MOVF   2D,W
1080:  MOVWF  39
1081:  CLRF   3B
1082:  BCF    0A.4
1083:  BCF    03.6
1084:  CALL   5E6
1085:  BSF    0A.4
1086:  MOVF   79,W
1087:  MOVWF  7A
1088:  MOVF   78,W
1089:  BSF    03.6
108A:  MOVWF  2D
108B:  MOVF   7A,W
108C:  MOVWF  2E
108D:  MOVLW  01
108E:  MOVWF  30
108F:  MOVLW  27
1090:  MOVWF  2F
1091:  MOVLW  06
1092:  MOVWF  78
1093:  MOVF   2D,W
1094:  MOVWF  04
1095:  BCF    03.7
1096:  BTFSC  2E.0
1097:  BSF    03.7
1098:  MOVF   00,W
1099:  MOVWF  77
109A:  MOVF   2F,W
109B:  MOVWF  04
109C:  BCF    03.7
109D:  BTFSC  30.0
109E:  BSF    03.7
109F:  MOVF   77,W
10A0:  MOVWF  00
10A1:  INCF   2F,F
10A2:  BTFSC  03.2
10A3:  INCF   30,F
10A4:  INCF   2D,F
10A5:  BTFSC  03.2
10A6:  INCF   2E,F
10A7:  DECFSZ 78,F
10A8:  GOTO   093
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
10A9:  MOVF   29,W
10AA:  BCF    0A.4
10AB:  BCF    03.6
10AC:  CALL   004
10AD:  BSF    0A.4
10AE:  MOVWF  78
10AF:  BSF    03.6
10B0:  MOVWF  23
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.minute[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
10B1:  MOVF   2A,W
10B2:  BCF    0A.4
10B3:  BCF    03.6
10B4:  CALL   004
10B5:  BSF    0A.4
10B6:  IORLW  08
10B7:  BSF    03.6
10B8:  MOVWF  24
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
10B9:  MOVLW  01
10BA:  MOVWF  38
10BB:  MOVLW  23
10BC:  MOVWF  37
10BD:  MOVLW  04
10BE:  MOVWF  39
10BF:  BCF    0A.4
10C0:  BCF    03.6
10C1:  CALL   650
10C2:  BSF    0A.4
....................  
.................... } 
....................  
.................... void Timer_hideMinutesAndShowSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
10DB:  CLRF   23
10DC:  CLRF   24
10DD:  CLRF   25
10DE:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
10DF:  MOVLW  0A
10E0:  ADDWF  21,W
10E1:  MOVWF  78
10E2:  MOVF   22,W
10E3:  MOVWF  7A
10E4:  BTFSC  03.0
10E5:  INCF   7A,F
10E6:  MOVF   78,W
10E7:  MOVWF  2D
10E8:  MOVF   7A,W
10E9:  MOVWF  2E
10EA:  MOVWF  3A
10EB:  MOVF   2D,W
10EC:  MOVWF  39
10ED:  CLRF   3B
10EE:  BCF    0A.4
10EF:  BCF    03.6
10F0:  CALL   5E6
10F1:  BSF    0A.4
10F2:  MOVF   79,W
10F3:  MOVWF  7A
10F4:  MOVF   78,W
10F5:  BSF    03.6
10F6:  MOVWF  2D
10F7:  MOVF   7A,W
10F8:  MOVWF  2E
10F9:  MOVLW  01
10FA:  MOVWF  30
10FB:  MOVLW  27
10FC:  MOVWF  2F
10FD:  MOVLW  06
10FE:  MOVWF  78
10FF:  MOVF   2D,W
1100:  MOVWF  04
1101:  BCF    03.7
1102:  BTFSC  2E.0
1103:  BSF    03.7
1104:  MOVF   00,W
1105:  MOVWF  77
1106:  MOVF   2F,W
1107:  MOVWF  04
1108:  BCF    03.7
1109:  BTFSC  30.0
110A:  BSF    03.7
110B:  MOVF   77,W
110C:  MOVWF  00
110D:  INCF   2F,F
110E:  BTFSC  03.2
110F:  INCF   30,F
1110:  INCF   2D,F
1111:  BTFSC  03.2
1112:  INCF   2E,F
1113:  DECFSZ 78,F
1114:  GOTO   0FF
....................  
....................     numbersToSend[0] = SevenSegmentDisplay_characters[displayableTime.second[0]]; 
1115:  MOVF   2B,W
1116:  BCF    0A.4
1117:  BCF    03.6
1118:  CALL   004
1119:  BSF    0A.4
111A:  MOVWF  78
111B:  BSF    03.6
111C:  MOVWF  23
....................     numbersToSend[1] = SevenSegmentDisplay_characters[displayableTime.second[1]] | 
....................             SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
111D:  MOVF   2C,W
111E:  BCF    0A.4
111F:  BCF    03.6
1120:  CALL   004
1121:  BSF    0A.4
1122:  IORLW  08
1123:  BSF    03.6
1124:  MOVWF  24
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
1125:  MOVLW  01
1126:  MOVWF  38
1127:  MOVLW  23
1128:  MOVWF  37
1129:  MOVLW  04
112A:  MOVWF  39
112B:  BCF    0A.4
112C:  BCF    03.6
112D:  CALL   650
112E:  BSF    0A.4
112F:  BSF    03.6
.................... } 
....................  
.................... void Timer_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0C6C:  CLRF   23
0C6D:  CLRF   24
0C6E:  CLRF   25
0C6F:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0C70:  MOVLW  0A
0C71:  ADDWF  21,W
0C72:  MOVWF  78
0C73:  MOVF   22,W
0C74:  MOVWF  7A
0C75:  BTFSC  03.0
0C76:  INCF   7A,F
0C77:  MOVF   78,W
0C78:  MOVWF  2D
0C79:  MOVF   7A,W
0C7A:  MOVWF  2E
0C7B:  MOVWF  3A
0C7C:  MOVF   2D,W
0C7D:  MOVWF  39
0C7E:  CLRF   3B
0C7F:  BCF    0A.3
0C80:  BCF    03.6
0C81:  CALL   5E6
0C82:  BSF    0A.3
0C83:  MOVF   79,W
0C84:  MOVWF  7A
0C85:  MOVF   78,W
0C86:  BSF    03.6
0C87:  MOVWF  2D
0C88:  MOVF   7A,W
0C89:  MOVWF  2E
0C8A:  MOVLW  01
0C8B:  MOVWF  30
0C8C:  MOVLW  27
0C8D:  MOVWF  2F
0C8E:  MOVLW  06
0C8F:  MOVWF  78
0C90:  MOVF   2D,W
0C91:  MOVWF  04
0C92:  BCF    03.7
0C93:  BTFSC  2E.0
0C94:  BSF    03.7
0C95:  MOVF   00,W
0C96:  MOVWF  77
0C97:  MOVF   2F,W
0C98:  MOVWF  04
0C99:  BCF    03.7
0C9A:  BTFSC  30.0
0C9B:  BSF    03.7
0C9C:  MOVF   77,W
0C9D:  MOVWF  00
0C9E:  INCF   2F,F
0C9F:  BTFSC  03.2
0CA0:  INCF   30,F
0CA1:  INCF   2D,F
0CA2:  BTFSC  03.2
0CA3:  INCF   2E,F
0CA4:  DECFSZ 78,F
0CA5:  GOTO   490
....................  
....................     numbersToSend[0] = displayableTime.minute[0]; 
0CA6:  MOVF   29,W
0CA7:  MOVWF  23
....................     numbersToSend[1] = displayableTime.minute[1]; 
0CA8:  MOVF   2A,W
0CA9:  MOVWF  24
....................     numbersToSend[2] = displayableTime.hour[0]; 
0CAA:  MOVF   27,W
0CAB:  MOVWF  25
....................     numbersToSend[3] = displayableTime.hour[1]; 
0CAC:  MOVF   28,W
0CAD:  MOVWF  26
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0CAE:  MOVLW  01
0CAF:  MOVWF  34
0CB0:  MOVLW  23
0CB1:  MOVWF  33
0CB2:  MOVLW  04
0CB3:  MOVWF  35
0CB4:  MOVLW  01
0CB5:  MOVWF  36
0CB6:  BCF    0A.3
0CB7:  BCF    03.6
0CB8:  CALL   697
0CB9:  BSF    0A.3
.................... } 
....................  
.................... void Timer_showMinutesAndSecondsOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
0CD2:  CLRF   23
0CD3:  CLRF   24
0CD4:  CLRF   25
0CD5:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
0CD6:  MOVLW  0A
0CD7:  ADDWF  21,W
0CD8:  MOVWF  78
0CD9:  MOVF   22,W
0CDA:  MOVWF  7A
0CDB:  BTFSC  03.0
0CDC:  INCF   7A,F
0CDD:  MOVF   78,W
0CDE:  MOVWF  2D
0CDF:  MOVF   7A,W
0CE0:  MOVWF  2E
0CE1:  MOVWF  3A
0CE2:  MOVF   2D,W
0CE3:  MOVWF  39
0CE4:  CLRF   3B
0CE5:  BCF    0A.3
0CE6:  BCF    03.6
0CE7:  CALL   5E6
0CE8:  BSF    0A.3
0CE9:  MOVF   79,W
0CEA:  MOVWF  7A
0CEB:  MOVF   78,W
0CEC:  BSF    03.6
0CED:  MOVWF  2D
0CEE:  MOVF   7A,W
0CEF:  MOVWF  2E
0CF0:  MOVLW  01
0CF1:  MOVWF  30
0CF2:  MOVLW  27
0CF3:  MOVWF  2F
0CF4:  MOVLW  06
0CF5:  MOVWF  78
0CF6:  MOVF   2D,W
0CF7:  MOVWF  04
0CF8:  BCF    03.7
0CF9:  BTFSC  2E.0
0CFA:  BSF    03.7
0CFB:  MOVF   00,W
0CFC:  MOVWF  77
0CFD:  MOVF   2F,W
0CFE:  MOVWF  04
0CFF:  BCF    03.7
0D00:  BTFSC  30.0
0D01:  BSF    03.7
0D02:  MOVF   77,W
0D03:  MOVWF  00
0D04:  INCF   2F,F
0D05:  BTFSC  03.2
0D06:  INCF   30,F
0D07:  INCF   2D,F
0D08:  BTFSC  03.2
0D09:  INCF   2E,F
0D0A:  DECFSZ 78,F
0D0B:  GOTO   4F6
....................  
....................     numbersToSend[0] = displayableTime.second[0]; 
0D0C:  MOVF   2B,W
0D0D:  MOVWF  23
....................     numbersToSend[1] = displayableTime.second[1]; 
0D0E:  MOVF   2C,W
0D0F:  MOVWF  24
....................     numbersToSend[2] = displayableTime.minute[0]; 
0D10:  MOVF   29,W
0D11:  MOVWF  25
....................     numbersToSend[3] = displayableTime.minute[1]; 
0D12:  MOVF   2A,W
0D13:  MOVWF  26
....................  
....................     SevenSegmentDisplay_showArrayOfNumbers( 
....................             numbersToSend, 
....................             getArraySize(numbersToSend), 
....................             TRUE); 
0D14:  MOVLW  01
0D15:  MOVWF  34
0D16:  MOVLW  23
0D17:  MOVWF  33
0D18:  MOVLW  04
0D19:  MOVWF  35
0D1A:  MOVLW  01
0D1B:  MOVWF  36
0D1C:  BCF    0A.3
0D1D:  BCF    03.6
0D1E:  CALL   697
0D1F:  BSF    0A.3
0D20:  BSF    03.6
.................... } 
....................  
.................... void Timer_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
120E:  CLRF   23
120F:  CLRF   24
1210:  CLRF   25
1211:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1212:  MOVLW  0A
1213:  ADDWF  21,W
1214:  MOVWF  78
1215:  MOVF   22,W
1216:  MOVWF  7A
1217:  BTFSC  03.0
1218:  INCF   7A,F
1219:  MOVF   78,W
121A:  MOVWF  2D
121B:  MOVF   7A,W
121C:  MOVWF  2E
121D:  MOVWF  3A
121E:  MOVF   2D,W
121F:  MOVWF  39
1220:  CLRF   3B
1221:  BCF    0A.4
1222:  BCF    03.6
1223:  CALL   5E6
1224:  BSF    0A.4
1225:  MOVF   79,W
1226:  MOVWF  7A
1227:  MOVF   78,W
1228:  BSF    03.6
1229:  MOVWF  2D
122A:  MOVF   7A,W
122B:  MOVWF  2E
122C:  MOVLW  01
122D:  MOVWF  30
122E:  MOVLW  27
122F:  MOVWF  2F
1230:  MOVLW  06
1231:  MOVWF  78
1232:  MOVF   2D,W
1233:  MOVWF  04
1234:  BCF    03.7
1235:  BTFSC  2E.0
1236:  BSF    03.7
1237:  MOVF   00,W
1238:  MOVWF  77
1239:  MOVF   2F,W
123A:  MOVWF  04
123B:  BCF    03.7
123C:  BTFSC  30.0
123D:  BSF    03.7
123E:  MOVF   77,W
123F:  MOVWF  00
1240:  INCF   2F,F
1241:  BTFSC  03.2
1242:  INCF   30,F
1243:  INCF   2D,F
1244:  BTFSC  03.2
1245:  INCF   2E,F
1246:  DECFSZ 78,F
1247:  GOTO   232
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
1248:  MOVLW  08
1249:  MOVWF  24
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.hour[0]]; 
124A:  MOVF   27,W
124B:  BCF    0A.4
124C:  BCF    03.6
124D:  CALL   004
124E:  BSF    0A.4
124F:  MOVWF  78
1250:  BSF    03.6
1251:  MOVWF  25
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.hour[1]]; 
1252:  MOVF   28,W
1253:  BCF    0A.4
1254:  BCF    03.6
1255:  CALL   004
1256:  BSF    0A.4
1257:  MOVWF  78
1258:  BSF    03.6
1259:  MOVWF  26
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
125A:  MOVLW  01
125B:  MOVWF  38
125C:  MOVLW  23
125D:  MOVWF  37
125E:  MOVLW  04
125F:  MOVWF  39
1260:  BCF    0A.4
1261:  BCF    03.6
1262:  CALL   650
1263:  BSF    0A.4
.................... } 
....................  
.................... void Timer_hideSecondsAndShowMinutesOfLimitTime(Timer *timerPtr) { 
....................     int numbersToSend[4] = {0}; 
*
127C:  CLRF   23
127D:  CLRF   24
127E:  CLRF   25
127F:  CLRF   26
....................     TimeInDigits displayableTime; 
....................  
....................     displayableTime = Time_getTimeInDigits(&timerPtr->limitTime, FALSE); 
1280:  MOVLW  0A
1281:  ADDWF  21,W
1282:  MOVWF  78
1283:  MOVF   22,W
1284:  MOVWF  7A
1285:  BTFSC  03.0
1286:  INCF   7A,F
1287:  MOVF   78,W
1288:  MOVWF  2D
1289:  MOVF   7A,W
128A:  MOVWF  2E
128B:  MOVWF  3A
128C:  MOVF   2D,W
128D:  MOVWF  39
128E:  CLRF   3B
128F:  BCF    0A.4
1290:  BCF    03.6
1291:  CALL   5E6
1292:  BSF    0A.4
1293:  MOVF   79,W
1294:  MOVWF  7A
1295:  MOVF   78,W
1296:  BSF    03.6
1297:  MOVWF  2D
1298:  MOVF   7A,W
1299:  MOVWF  2E
129A:  MOVLW  01
129B:  MOVWF  30
129C:  MOVLW  27
129D:  MOVWF  2F
129E:  MOVLW  06
129F:  MOVWF  78
12A0:  MOVF   2D,W
12A1:  MOVWF  04
12A2:  BCF    03.7
12A3:  BTFSC  2E.0
12A4:  BSF    03.7
12A5:  MOVF   00,W
12A6:  MOVWF  77
12A7:  MOVF   2F,W
12A8:  MOVWF  04
12A9:  BCF    03.7
12AA:  BTFSC  30.0
12AB:  BSF    03.7
12AC:  MOVF   77,W
12AD:  MOVWF  00
12AE:  INCF   2F,F
12AF:  BTFSC  03.2
12B0:  INCF   30,F
12B1:  INCF   2D,F
12B2:  BTFSC  03.2
12B3:  INCF   2E,F
12B4:  DECFSZ 78,F
12B5:  GOTO   2A0
....................  
....................     numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
12B6:  MOVLW  08
12B7:  MOVWF  24
....................     numbersToSend[2] = SevenSegmentDisplay_characters[displayableTime.minute[0]]; 
12B8:  MOVF   29,W
12B9:  BCF    0A.4
12BA:  BCF    03.6
12BB:  CALL   004
12BC:  BSF    0A.4
12BD:  MOVWF  78
12BE:  BSF    03.6
12BF:  MOVWF  25
....................     numbersToSend[3] = SevenSegmentDisplay_characters[displayableTime.minute[1]]; 
12C0:  MOVF   2A,W
12C1:  BCF    0A.4
12C2:  BCF    03.6
12C3:  CALL   004
12C4:  BSF    0A.4
12C5:  MOVWF  78
12C6:  BSF    03.6
12C7:  MOVWF  26
....................  
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
12C8:  MOVLW  01
12C9:  MOVWF  38
12CA:  MOVLW  23
12CB:  MOVWF  37
12CC:  MOVLW  04
12CD:  MOVWF  39
12CE:  BCF    0A.4
12CF:  BCF    03.6
12D0:  CALL   650
12D1:  BSF    0A.4
12D2:  BSF    03.6
.................... } 
....................  
.................... #endif	/* TIMER_H */ 
....................  
....................  
.................... #include "buttons.h" 
.................... /*  
....................  * File:   buttons.h 
....................  * Author: Joaquín Alan Alvidrez Soto 
....................  * 
....................  * Created on 29 de septiembre de 2017, 04:53 PM 
....................  */ 
....................  
.................... #ifndef BUTTONS_H 
.................... #define   BUTTONS_H 
....................  
.................... typedef enum { 
....................     BUTTON_STATE_HELD, 
....................     BUTTON_STATE_NOT_PUSHED    
.................... } ButtonState; 
....................  
.................... #endif   /* BUTTONS_H */ 
....................  
....................  
.................... #include "sevensegmentdisplay.h" 
.................... /*  
....................  * File:   sevensegmentdisplay.h 
....................  * Author: DISENO4 
....................  * 
....................  * Created on 2 de octubre de 2017, 09:12 AM 
....................  */ 
....................  
.................... #ifndef SEVENSEGMENTDISPLAY_H 
.................... #define   SEVENSEGMENTDISPLAY_H 
....................  
.................... #include "array.h" 
.................... #include "shiftregister.h" 
....................  
.................... typedef enum { 
....................     INDEX_SEVEN_SEGMENT_HYPHEN = 10, 
....................     INDEX_SEVEN_SEGMENT_DOT, 
....................     INDEX_CAPS_A, 
....................     INDEX_CAPS_C, 
....................     INDEX_CAPS_E, 
....................     INDEX_CAPS_F, 
....................     INDEX_CAPS_H, 
....................     INDEX_LOWERCASE_B, 
....................     INDEX_LOWERCASE_C, 
....................     INDEX_LOWERCASE_D, 
....................     INDEX_LOWERCASE_N, 
....................     INDEX_LOWERCASE_U, 
.................... } SEVEN_SEGMENT_DISPLAY_INDEX; 
....................  
.................... const int SevenSegmentDisplay_characters[] = { 
....................     0b11110110, // 0    
....................     0b01100000, // 1 
....................     0b11010101, // 2 
....................     0b11110001, // 3 
....................     0b01100011, // 4 
....................     0b10110011, // 5 
....................     0b10110111, // 6 
....................     0b11100000, // 7 
....................     0b11110111, // 8 
....................     0b11110011, // 9 
....................     0b00000001, // - 
....................     0b00001000, // .    
....................     0b11100111, // A  
....................     0b10010110, // C 
....................     0b10010111, // E 
....................     0b10000111, // F 
....................     0b01100111, //H     
....................     0b00110111, //b     
....................     0b10010110, //c     
....................     0b01110101, //d     
....................     0b00100101, //n     
....................     0b01110110, //u      
....................     0b00010111, 
....................     0b00000100, 
....................     0b01100100, 
....................     0b11000011, //°  
....................     0b00110101, 
.................... }; 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................     } 
.................... } 
....................  
.................... //DisplayableTime getDisplayableTimeFromTime(Time *timePtr) { 
.................... //    DisplayableTime displayableTime; 
.................... //     
.................... //    Array_splitNumberIntoDigits(timePtr->hour, displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.hour, 
.................... //            getArraySize(displayableTime.hour)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->minute, displayableTime.minute, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.minute, 
.................... //            getArraySize(displayableTime.minute)); 
.................... // 
.................... //    Array_splitNumberIntoDigits(timePtr->second, displayableTime.second, 
.................... //            getArraySize(displayableTime.hour)); 
.................... //    changeNumbersIntoDisplayableNumbers(displayableTime.second, 
.................... //            getArraySize(displayableTime.second)); 
.................... // 
.................... //    return displayableTime; 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfCountdownTime(Timer *timerPtr, BOOLEAN blink) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->countdownTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    if (blink) { 
.................... //        if ((timerPtr->currentTime.second % 2)) { 
.................... //            timeToSend[1] |= 0b00001000; 
.................... //        } 
.................... //    } else { 
.................... //        timeToSend[1] |= 0b00001000; 
.................... //    } 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideHoursAndShowMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_showHoursAndMinutesOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[0] = displayableTime.minute[0]; 
.................... //    timeToSend[1] = displayableTime.minute[1]; 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
.................... // 
.................... //void SevenSegmentDisplay_hideMinutesAndShowHoursOfLimitTime(Timer *timerPtr) { 
.................... //    int timeToSend[4] = {0}; 
.................... //    DisplayableTime displayableTime; 
.................... // 
.................... //    displayableTime = getDisplayableTimeFromTime(&timerPtr->limitTime); 
.................... // 
.................... //    timeToSend[1] |= 0b00001000; 
.................... //    timeToSend[2] = displayableTime.hour[0]; 
.................... //    timeToSend[3] = displayableTime.hour[1]; 
.................... // 
.................... //    ShiftRegister_sendData(timeToSend, getArraySize(timeToSend)); 
.................... //} 
....................  
.................... void SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(int arrayOfNumbers[], int arraySize) { 
....................     int i = 0; 
....................     for (i = 0; i < arraySize; i++) { 
....................         arrayOfNumbers[i] = SevenSegmentDisplay_characters[arrayOfNumbers[i]]; 
....................         arrayOfNumbers[i] |= SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
....................     } 
.................... } 
....................  
.................... void SevenSegmentDisplay_showArrayOfNumbers(int arrayOfNumbers[], int arraySize, BOOLEAN withDot) { 
....................     if (withDot) { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbersWithDot(arrayOfNumbers, arraySize); 
....................     } else { 
....................         SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayOfNumbers, arraySize); 
....................     } 
....................  
....................     ShiftRegister_sendData(arrayOfNumbers, arraySize); 
.................... } 
....................  
.................... void SeventSegmentDisplay_showHyphens(void) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     arrayToSend[0] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[1] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN] | 0b00001000; 
....................     arrayToSend[2] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     arrayToSend[3] = SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_HYPHEN]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplay(void) { 
....................     int charactersArray[4] = {0}; 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_clearDisplayTwoLines(void) { 
....................     int charactersArray[8] = {0}; 
....................  
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
....................     ShiftRegister_sendData(charactersArray, getArraySize(charactersArray)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPin(int16 pin) { 
....................     int arrayToSend[4] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, arrayToSend, getArraySize(arrayToSend)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(arrayToSend, getArraySize(arrayToSend)); 
....................  
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
....................  
.................... void SevenSegmentDisplay_showPinTwoLines(int16 pin) { 
....................     int pinDigits[4] = {0}; 
....................     int arrayToSend[8] = {0}; 
....................  
....................     Array_splitNumberIntoDigits(pin, pinDigits, getArraySize(pinDigits)); 
....................     SevenSegmentDisplay_changeNumbersIntoDisplayableNumbers(pinDigits, getArraySize(pinDigits)); 
....................  
....................     arrayToSend[4] = pinDigits[0]; 
....................     arrayToSend[5] = pinDigits[1]; 
....................     arrayToSend[6] = pinDigits[2]; 
....................     arrayToSend[7] = pinDigits[3]; 
....................     ShiftRegister_sendData(arrayToSend, getArraySize(arrayToSend)); 
.................... } 
.................... #endif   /* SEVENSEGMENTDISPLAY_H */ 
....................  
....................  
....................  
.................... // Upper bounds 
.................... #define FIRST_NUMBER_UPPER_BOUND    99 
.................... #define SECOND_NUMBER_UPPER_BOUND   59 
....................  
.................... typedef enum { 
....................     FORMAT_MINUTES_SECONDS = 0, 
....................     FORMAT_HOURS_MINUTES 
.................... } PolyoneDisplayFormat; 
....................  
.................... typedef enum { 
....................     COUNTDOWN, 
....................     COUNTUP 
.................... } TypeOfCount; 
....................  
.................... typedef enum { 
....................     STATE_IDLE = 0, 
....................     STATE_COUNTING_UP, 
....................     STATE_COUNTING_DOWN, 
....................     STATE_INIT, 
....................     STATE_RESETTING, 
....................     STATE_READY, 
....................     STATE_SETTING_FIRST_NUMBER, 
....................     STATE_SETTING_SECOND_NUMBER, 
....................     STATE_SETTING_FORMAT, 
....................     STATE_WAITING_FOR_BUTTON_BEING_RELEASED, 
....................     NUMBER_OF_STATES 
.................... } PolyoneDisplayState; 
....................  
.................... typedef struct { 
....................     Timer timer; 
....................     PolyoneDisplayFormat format; 
....................     TypeOfCount typeOfCount; 
....................     PolyoneDisplayState currentState; 
....................     PolyoneDisplayState previousState; 
....................     char addressCurrentState; 
....................     char addressPreviousState; 
....................     char addressFormat; 
.................... } PolyoneDisplay; 
....................  
.................... void PolyoneDisplay_updateRtc(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateRtc(&polyoneDisplayPtr->timer); 
*
0540:  BSF    03.6
0541:  MOVF   52,W
0542:  MOVWF  78
0543:  MOVF   53,W
0544:  MOVWF  7A
0545:  MOVF   78,W
0546:  MOVWF  54
0547:  MOVF   7A,W
0548:  MOVWF  55
0549:  MOVF   55,W
054A:  MOVWF  57
054B:  MOVF   54,W
054C:  MOVWF  56
*
057B:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_updateTimer(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_updateTimer(&polyoneDisplayPtr->timer); 
*
02D1:  BSF    03.6
02D2:  MOVF   52,W
02D3:  MOVWF  78
02D4:  MOVF   53,W
02D5:  MOVWF  7A
02D6:  MOVF   78,W
02D7:  MOVWF  54
02D8:  MOVF   7A,W
02D9:  MOVWF  55
02DA:  MOVF   55,W
02DB:  MOVWF  57
02DC:  MOVF   54,W
02DD:  MOVWF  56
*
04B4:  BCF    03.6
04B5:  RETURN
.................... } 
....................  
.................... PolyoneDisplay PolyoneDisplay_new(__EEADDRESS__ addressCurrentState, 
....................         __EEADDRESS__ addressPreviousState, __EEADDRESS__ addressFormat, 
....................         __EEADDRESS__ addressFirstNumberAlarm, 
....................         __EEADDRESS__ addressSecondNumberAlarm, __EEADDRESS__ addressRtcHours, 
....................         __EEADDRESS__ addressRtcMinutes, __EEADDRESS__ addressRtcSeconds) { 
....................     PolyoneDisplay polyoneDisplay; 
....................  
....................     polyoneDisplay.addressCurrentState = addressCurrentState; 
*
08AA:  MOVF   23,W
08AB:  MOVWF  4F
....................     polyoneDisplay.addressPreviousState = addressPreviousState; 
08AC:  MOVF   25,W
08AD:  MOVWF  50
....................     polyoneDisplay.addressFormat = addressFormat; 
08AE:  MOVF   27,W
08AF:  MOVWF  51
....................  
....................     polyoneDisplay.format = read_eeprom(addressFormat) % 2; 
08B0:  MOVF   27,W
08B1:  MOVWF  0D
08B2:  BSF    03.5
08B3:  BCF    0C.7
08B4:  BSF    0C.0
08B5:  BCF    03.5
08B6:  MOVF   0C,W
08B7:  ANDLW  01
08B8:  MOVWF  78
08B9:  BCF    4C.0
08BA:  BTFSC  78.0
08BB:  BSF    4C.0
....................     polyoneDisplay.currentState = read_eeprom(addressCurrentState) % 3; 
08BC:  MOVF   23,W
08BD:  MOVWF  0D
08BE:  BSF    03.5
08BF:  BCF    0C.7
08C0:  BSF    0C.0
08C1:  BCF    03.5
08C2:  MOVF   0C,W
08C3:  MOVWF  53
08C4:  MOVF   53,W
08C5:  BSF    03.5
08C6:  MOVWF  2B
08C7:  MOVLW  03
08C8:  MOVWF  2C
08C9:  BCF    0A.3
08CA:  BCF    03.5
08CB:  BCF    03.6
08CC:  CALL   02F
08CD:  BSF    0A.3
08CE:  MOVF   77,W
08CF:  BSF    03.6
08D0:  MOVWF  4D
....................     polyoneDisplay.previousState = read_eeprom(addressPreviousState) % 3; 
08D1:  MOVF   25,W
08D2:  MOVWF  0D
08D3:  BSF    03.5
08D4:  BCF    0C.7
08D5:  BSF    0C.0
08D6:  BCF    03.5
08D7:  MOVF   0C,W
08D8:  MOVWF  53
08D9:  MOVF   53,W
08DA:  BSF    03.5
08DB:  MOVWF  2B
08DC:  MOVLW  03
08DD:  MOVWF  2C
08DE:  BCF    0A.3
08DF:  BCF    03.5
08E0:  BCF    03.6
08E1:  CALL   02F
08E2:  BSF    0A.3
08E3:  MOVF   77,W
08E4:  BSF    03.6
08E5:  MOVWF  4E
....................  
....................     if ((polyoneDisplay.previousState == STATE_IDLE) 
....................             && (polyoneDisplay.currentState == STATE_IDLE)) { 
08E6:  MOVF   4E,F
08E7:  BTFSS  03.2
08E8:  GOTO   0EE
08E9:  MOVF   4D,F
08EA:  BTFSS  03.2
08EB:  GOTO   0EE
....................         polyoneDisplay.previousState = STATE_COUNTING_DOWN; 
08EC:  MOVLW  02
08ED:  MOVWF  4E
....................     } 
....................  
....................     switch (polyoneDisplay.format) { 
08EE:  MOVLW  00
08EF:  BTFSC  4C.0
08F0:  MOVLW  01
08F1:  XORLW  01
08F2:  BCF    03.6
08F3:  BTFSC  03.2
08F4:  GOTO   0F9
08F5:  XORLW  01
08F6:  BTFSC  03.2
08F7:  GOTO   191
08F8:  GOTO   227
....................         case FORMAT_HOURS_MINUTES: 
....................             polyoneDisplay.timer = Timer_newHoursMinutes( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     SECOND_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
08F9:  MOVLW  63
08FA:  BSF    03.6
08FB:  MOVWF  60
08FC:  MOVLW  3B
08FD:  MOVWF  61
08FE:  MOVF   2A,W
08FF:  MOVWF  63
0900:  MOVF   29,W
0901:  MOVWF  62
0902:  MOVF   2C,W
0903:  MOVWF  65
0904:  MOVF   2B,W
0905:  MOVWF  64
0906:  MOVF   2E,W
0907:  MOVWF  67
0908:  MOVF   2D,W
0909:  MOVWF  66
090A:  MOVF   30,W
090B:  MOVWF  69
090C:  MOVF   2F,W
090D:  MOVWF  68
090E:  MOVF   32,W
090F:  MOVWF  6B
0910:  MOVF   31,W
0911:  MOVWF  6A
*
096C:  MOVF   79,W
096D:  MOVWF  7A
096E:  MOVF   78,W
096F:  BCF    03.5
0970:  MOVWF  5A
0971:  MOVF   7A,W
0972:  MOVWF  5B
0973:  MOVLW  01
0974:  MOVWF  5D
0975:  MOVLW  33
0976:  MOVWF  5C
0977:  MOVLW  19
0978:  MOVWF  78
0979:  MOVF   5A,W
097A:  MOVWF  04
097B:  BCF    03.7
097C:  BTFSC  5B.0
097D:  BSF    03.7
097E:  MOVF   00,W
097F:  MOVWF  77
0980:  MOVF   5C,W
0981:  MOVWF  04
0982:  BCF    03.7
0983:  BTFSC  5D.0
0984:  BSF    03.7
0985:  MOVF   77,W
0986:  MOVWF  00
0987:  INCF   5C,F
0988:  BTFSC  03.2
0989:  INCF   5D,F
098A:  INCF   5A,F
098B:  BTFSC  03.2
098C:  INCF   5B,F
098D:  DECFSZ 78,F
098E:  GOTO   179
....................             break; 
098F:  BCF    03.6
0990:  GOTO   227
....................         case FORMAT_MINUTES_SECONDS: 
....................             polyoneDisplay.timer = Timer_newMinutesSeconds( 
....................                     FIRST_NUMBER_UPPER_BOUND, 
....................                     addressFirstNumberAlarm, 
....................                     addressSecondNumberAlarm, 
....................                     addressRtcHours, 
....................                     addressRtcMinutes, 
....................                     addressRtcSeconds 
....................                     ); 
0991:  MOVLW  63
0992:  BSF    03.6
0993:  MOVWF  60
0994:  MOVF   2A,W
0995:  MOVWF  62
0996:  MOVF   29,W
0997:  MOVWF  61
0998:  MOVF   2C,W
0999:  MOVWF  64
099A:  MOVF   2B,W
099B:  MOVWF  63
099C:  MOVF   2E,W
099D:  MOVWF  66
099E:  MOVF   2D,W
099F:  MOVWF  65
09A0:  MOVF   30,W
09A1:  MOVWF  68
09A2:  MOVF   2F,W
09A3:  MOVWF  67
09A4:  MOVF   32,W
09A5:  MOVWF  6A
09A6:  MOVF   31,W
09A7:  MOVWF  69
*
0A03:  MOVF   79,W
0A04:  MOVWF  7A
0A05:  MOVF   78,W
0A06:  BCF    03.5
0A07:  MOVWF  5A
0A08:  MOVF   7A,W
0A09:  MOVWF  5B
0A0A:  MOVLW  01
0A0B:  MOVWF  5D
0A0C:  MOVLW  33
0A0D:  MOVWF  5C
0A0E:  MOVLW  19
0A0F:  MOVWF  78
0A10:  MOVF   5A,W
0A11:  MOVWF  04
0A12:  BCF    03.7
0A13:  BTFSC  5B.0
0A14:  BSF    03.7
0A15:  MOVF   00,W
0A16:  MOVWF  77
0A17:  MOVF   5C,W
0A18:  MOVWF  04
0A19:  BCF    03.7
0A1A:  BTFSC  5D.0
0A1B:  BSF    03.7
0A1C:  MOVF   77,W
0A1D:  MOVWF  00
0A1E:  INCF   5C,F
0A1F:  BTFSC  03.2
0A20:  INCF   5D,F
0A21:  INCF   5A,F
0A22:  BTFSC  03.2
0A23:  INCF   5B,F
0A24:  DECFSZ 78,F
0A25:  GOTO   210
....................  
....................             break; 
0A26:  BCF    03.6
....................     } 
....................  
....................     if (polyoneDisplay.currentState == STATE_IDLE) { 
0A27:  BSF    03.6
0A28:  MOVF   4D,F
0A29:  BTFSS  03.2
0A2A:  GOTO   23E
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0A2B:  MOVLW  01
0A2C:  MOVWF  53
0A2D:  MOVLW  33
0A2E:  MOVWF  52
0A2F:  BCF    0A.3
0A30:  BCF    03.6
0A31:  CALL   2D1
0A32:  BSF    0A.3
....................         PolyoneDisplay_updateRtc(&polyoneDisplay); 
0A33:  MOVLW  01
0A34:  BSF    03.6
0A35:  MOVWF  53
0A36:  MOVLW  33
0A37:  MOVWF  52
0A38:  BCF    0A.3
0A39:  BCF    03.6
0A3A:  CALL   540
0A3B:  BSF    0A.3
....................     } else { 
0A3C:  GOTO   246
0A3D:  BSF    03.6
....................         PolyoneDisplay_updateTimer(&polyoneDisplay); 
0A3E:  MOVLW  01
0A3F:  MOVWF  53
0A40:  MOVLW  33
0A41:  MOVWF  52
0A42:  BCF    0A.3
0A43:  BCF    03.6
0A44:  CALL   2D1
0A45:  BSF    0A.3
....................     } 
....................  
....................     return polyoneDisplay; 
0A46:  MOVLW  33
0A47:  MOVWF  78
0A48:  MOVLW  01
0A49:  MOVWF  79
.................... } 
....................  
.................... void PolyoneDisplay_showCount(PolyoneDisplay *polyoneDisplayPtr, BOOLEAN withBlink) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0704:  MOVLW  19
0705:  BSF    03.6
0706:  ADDWF  1D,W
0707:  MOVWF  04
0708:  BCF    03.7
0709:  BTFSC  1E.0
070A:  BSF    03.7
070B:  MOVF   00,W
070C:  ANDLW  01
070D:  SUBLW  01
070E:  BTFSS  03.2
070F:  GOTO   776
....................         Timer_showHoursAndMinutesOfCountdownTime(&polyoneDisplayPtr->timer, withBlink); 
0710:  MOVF   1D,W
0711:  MOVWF  78
0712:  MOVF   1E,W
0713:  MOVWF  7A
0714:  MOVF   78,W
0715:  MOVWF  20
0716:  MOVF   7A,W
0717:  MOVWF  21
0718:  MOVF   21,W
0719:  MOVWF  23
071A:  MOVF   20,W
071B:  MOVWF  22
071C:  MOVF   1F,W
071D:  MOVWF  24
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0774:  GOTO   7EA
0775:  BSF    03.6
0776:  MOVLW  19
0777:  ADDWF  1D,W
0778:  MOVWF  04
0779:  BCF    03.7
077A:  BTFSC  1E.0
077B:  BSF    03.7
077C:  MOVF   00,W
077D:  ANDLW  01
077E:  BTFSS  03.2
077F:  GOTO   7EB
....................  
....................         Timer_showMinutesAndSecondsOfCountdownTime(&polyoneDisplayPtr->timer); 
0780:  MOVF   1D,W
0781:  MOVWF  78
0782:  MOVF   1E,W
0783:  MOVWF  7A
0784:  MOVF   78,W
0785:  MOVWF  20
0786:  MOVF   7A,W
0787:  MOVWF  21
0788:  MOVF   21,W
0789:  MOVWF  23
078A:  MOVF   20,W
078B:  MOVWF  22
....................     } 
*
07EB:  BCF    03.6
07EC:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showLimitTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
0C54:  MOVLW  19
0C55:  BSF    03.6
0C56:  ADDWF  1D,W
0C57:  MOVWF  04
0C58:  BCF    03.7
0C59:  BTFSC  1E.0
0C5A:  BSF    03.7
0C5B:  MOVF   00,W
0C5C:  ANDLW  01
0C5D:  SUBLW  01
0C5E:  BTFSS  03.2
0C5F:  GOTO   4BC
....................         Timer_showHoursAndMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
0C60:  MOVF   1D,W
0C61:  MOVWF  78
0C62:  MOVF   1E,W
0C63:  MOVWF  7A
0C64:  MOVF   78,W
0C65:  MOVWF  1F
0C66:  MOVF   7A,W
0C67:  MOVWF  20
0C68:  MOVF   20,W
0C69:  MOVWF  22
0C6A:  MOVF   1F,W
0C6B:  MOVWF  21
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
0CBA:  GOTO   520
0CBB:  BSF    03.6
0CBC:  MOVLW  19
0CBD:  ADDWF  1D,W
0CBE:  MOVWF  04
0CBF:  BCF    03.7
0CC0:  BTFSC  1E.0
0CC1:  BSF    03.7
0CC2:  MOVF   00,W
0CC3:  ANDLW  01
0CC4:  BTFSS  03.2
0CC5:  GOTO   521
....................         Timer_showMinutesAndSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
0CC6:  MOVF   1D,W
0CC7:  MOVWF  78
0CC8:  MOVF   1E,W
0CC9:  MOVWF  7A
0CCA:  MOVF   78,W
0CCB:  MOVWF  1F
0CCC:  MOVF   7A,W
0CCD:  MOVWF  20
0CCE:  MOVF   20,W
0CCF:  MOVWF  22
0CD0:  MOVF   1F,W
0CD1:  MOVWF  21
....................     } 
*
0D21:  BCF    03.6
0D22:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_showFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
11F7:  MOVLW  19
11F8:  ADDWF  1D,W
11F9:  MOVWF  04
11FA:  BCF    03.7
11FB:  BTFSC  1E.0
11FC:  BSF    03.7
11FD:  MOVF   00,W
11FE:  ANDLW  01
11FF:  SUBLW  01
1200:  BTFSS  03.2
1201:  GOTO   266
....................         Timer_hideMinutesAndShowHoursOfLimitTime(&polyoneDisplayPtr->timer); 
1202:  MOVF   1D,W
1203:  MOVWF  78
1204:  MOVF   1E,W
1205:  MOVWF  7A
1206:  MOVF   78,W
1207:  MOVWF  1F
1208:  MOVF   7A,W
1209:  MOVWF  20
120A:  MOVF   20,W
120B:  MOVWF  22
120C:  MOVF   1F,W
120D:  MOVWF  21
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1264:  GOTO   2D2
1265:  BSF    03.6
1266:  MOVLW  19
1267:  ADDWF  1D,W
1268:  MOVWF  04
1269:  BCF    03.7
126A:  BTFSC  1E.0
126B:  BSF    03.7
126C:  MOVF   00,W
126D:  ANDLW  01
126E:  BTFSS  03.2
126F:  GOTO   2D3
....................         Timer_hideSecondsAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1270:  MOVF   1D,W
1271:  MOVWF  78
1272:  MOVF   1E,W
1273:  MOVWF  7A
1274:  MOVF   78,W
1275:  MOVWF  1F
1276:  MOVF   7A,W
1277:  MOVWF  20
1278:  MOVF   20,W
1279:  MOVWF  22
127A:  MOVF   1F,W
127B:  MOVWF  21
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
1058:  MOVLW  19
1059:  ADDWF  1D,W
105A:  MOVWF  04
105B:  BCF    03.7
105C:  BTFSC  1E.0
105D:  BSF    03.7
105E:  MOVF   00,W
105F:  ANDLW  01
1060:  SUBLW  01
1061:  BTFSS  03.2
1062:  GOTO   0C5
....................         Timer_hideHoursAndShowMinutesOfLimitTime(&polyoneDisplayPtr->timer); 
1063:  MOVF   1D,W
1064:  MOVWF  78
1065:  MOVF   1E,W
1066:  MOVWF  7A
1067:  MOVF   78,W
1068:  MOVWF  1F
1069:  MOVF   7A,W
106A:  MOVWF  20
106B:  MOVF   20,W
106C:  MOVWF  22
106D:  MOVF   1F,W
106E:  MOVWF  21
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
10C3:  GOTO   12F
10C4:  BSF    03.6
10C5:  MOVLW  19
10C6:  ADDWF  1D,W
10C7:  MOVWF  04
10C8:  BCF    03.7
10C9:  BTFSC  1E.0
10CA:  BSF    03.7
10CB:  MOVF   00,W
10CC:  ANDLW  01
10CD:  BTFSS  03.2
10CE:  GOTO   130
....................         Timer_hideMinutesAndShowSecondsOfLimitTime(&polyoneDisplayPtr->timer); 
10CF:  MOVF   1D,W
10D0:  MOVWF  78
10D1:  MOVF   1E,W
10D2:  MOVWF  7A
10D3:  MOVF   78,W
10D4:  MOVWF  1F
10D5:  MOVF   7A,W
10D6:  MOVWF  20
10D7:  MOVF   20,W
10D8:  MOVWF  22
10D9:  MOVF   1F,W
10DA:  MOVWF  21
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_showFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     int numbersToSend[4] = {0}; 
*
13CE:  CLRF   1F
13CF:  CLRF   20
13D0:  CLRF   21
13D1:  CLRF   22
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
13D2:  MOVLW  19
13D3:  ADDWF  1D,W
13D4:  MOVWF  04
13D5:  BCF    03.7
13D6:  BTFSC  1E.0
13D7:  BSF    03.7
13D8:  MOVF   00,W
13D9:  ANDLW  01
13DA:  SUBLW  01
13DB:  BTFSS  03.2
13DC:  GOTO   3E5
....................  
....................         numbersToSend[0] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
13DD:  MOVLW  25
13DE:  MOVWF  1F
....................         numbersToSend[1] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
13DF:  MOVLW  2D
13E0:  MOVWF  20
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
13E1:  MOVLW  67
13E2:  MOVWF  21
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_CAPS_H]; 
13E3:  MOVWF  22
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
13E4:  GOTO   3F6
13E5:  MOVLW  19
13E6:  ADDWF  1D,W
13E7:  MOVWF  04
13E8:  BCF    03.7
13E9:  BTFSC  1E.0
13EA:  BSF    03.7
13EB:  MOVF   00,W
13EC:  ANDLW  01
13ED:  BTFSS  03.2
13EE:  GOTO   3F6
....................         numbersToSend[0] = SevenSegmentDisplay_characters[5]; 
13EF:  MOVLW  B3
13F0:  MOVWF  1F
....................         numbersToSend[1] = SevenSegmentDisplay_characters[5] | 
....................                 SevenSegmentDisplay_characters[INDEX_SEVEN_SEGMENT_DOT]; 
13F1:  MOVLW  BB
13F2:  MOVWF  20
....................         numbersToSend[2] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
13F3:  MOVLW  25
13F4:  MOVWF  21
....................         numbersToSend[3] = SevenSegmentDisplay_characters[INDEX_LOWERCASE_N]; 
13F5:  MOVWF  22
....................     } 
....................  
....................     ShiftRegister_sendData(numbersToSend, getArraySize(numbersToSend)); 
13F6:  MOVLW  01
13F7:  MOVWF  38
13F8:  MOVLW  1F
13F9:  MOVWF  37
13FA:  MOVLW  04
13FB:  MOVWF  39
13FC:  BCF    0A.4
13FD:  BCF    03.6
13FE:  CALL   650
13FF:  BSF    0A.4
.................... } 
....................  
.................... void PolyoneDisplay_increaseFirstNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
113F:  MOVLW  19
1140:  ADDWF  1D,W
1141:  MOVWF  04
1142:  BCF    03.7
1143:  BTFSC  1E.0
1144:  BSF    03.7
1145:  MOVF   00,W
1146:  ANDLW  01
1147:  SUBLW  01
1148:  BTFSS  03.2
1149:  GOTO   186
....................         Timer_increaseTimerHours(&polyoneDisplayPtr->timer); 
114A:  MOVF   1D,W
114B:  MOVWF  78
114C:  MOVF   1E,W
114D:  MOVWF  7A
114E:  MOVF   78,W
114F:  MOVWF  1F
1150:  MOVF   7A,W
1151:  MOVWF  20
1152:  MOVF   20,W
1153:  MOVWF  22
1154:  MOVF   1F,W
1155:  MOVWF  21
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
*
1185:  GOTO   1A2
1186:  MOVLW  19
1187:  ADDWF  1D,W
1188:  MOVWF  04
1189:  BCF    03.7
118A:  BTFSC  1E.0
118B:  BSF    03.7
118C:  MOVF   00,W
118D:  ANDLW  01
118E:  BTFSS  03.2
118F:  GOTO   1A2
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
1190:  MOVF   1D,W
1191:  MOVWF  78
1192:  MOVF   1E,W
1193:  MOVWF  7A
1194:  MOVF   78,W
1195:  MOVWF  1F
1196:  MOVF   1E,W
1197:  MOVWF  20
1198:  MOVWF  22
1199:  MOVF   1F,W
119A:  MOVWF  21
119B:  BCF    0A.4
119C:  BSF    0A.3
119D:  BCF    03.6
119E:  CALL   523
119F:  BSF    0A.4
11A0:  BCF    0A.3
11A1:  BSF    03.6
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_increaseSecondNumber(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
12E2:  MOVLW  19
12E3:  ADDWF  1D,W
12E4:  MOVWF  04
12E5:  BCF    03.7
12E6:  BTFSC  1E.0
12E7:  BSF    03.7
12E8:  MOVF   00,W
12E9:  ANDLW  01
12EA:  SUBLW  01
12EB:  BTFSS  03.2
12EC:  GOTO   300
....................         Timer_increaseTimerMinutes(&polyoneDisplayPtr->timer); 
12ED:  MOVF   1D,W
12EE:  MOVWF  78
12EF:  MOVF   1E,W
12F0:  MOVWF  7A
12F1:  MOVF   1D,W
12F2:  MOVWF  1F
12F3:  MOVF   1E,W
12F4:  MOVWF  20
12F5:  MOVWF  22
12F6:  MOVF   1D,W
12F7:  MOVWF  21
12F8:  BCF    0A.4
12F9:  BSF    0A.3
12FA:  BCF    03.6
12FB:  CALL   523
12FC:  BSF    0A.4
12FD:  BCF    0A.3
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
12FE:  GOTO   346
12FF:  BSF    03.6
1300:  MOVLW  19
1301:  ADDWF  1D,W
1302:  MOVWF  04
1303:  BCF    03.7
1304:  BTFSC  1E.0
1305:  BSF    03.7
1306:  MOVF   00,W
1307:  ANDLW  01
1308:  BTFSS  03.2
1309:  GOTO   345
....................         Timer_increaseTimerSeconds(&polyoneDisplayPtr->timer); 
130A:  MOVF   1D,W
130B:  MOVWF  78
130C:  MOVF   1E,W
130D:  MOVWF  7A
130E:  MOVF   78,W
130F:  MOVWF  1F
1310:  MOVF   7A,W
1311:  MOVWF  20
1312:  MOVF   20,W
1313:  MOVWF  22
1314:  MOVF   1F,W
1315:  MOVWF  21
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_swapFormat(PolyoneDisplay *polyoneDisplayPtr) { 
....................     polyoneDisplayPtr->format = !polyoneDisplayPtr->format; 
*
140B:  MOVLW  19
140C:  ADDWF  1D,W
140D:  MOVWF  78
140E:  MOVF   1E,W
140F:  MOVWF  7A
1410:  BTFSC  03.0
1411:  INCF   7A,F
1412:  MOVF   78,W
1413:  MOVWF  1F
1414:  MOVF   7A,W
1415:  MOVWF  20
1416:  MOVLW  19
1417:  ADDWF  1D,W
1418:  MOVWF  04
1419:  BCF    03.7
141A:  BTFSC  1E.0
141B:  BSF    03.7
141C:  BTFSS  00.0
141D:  GOTO   425
141E:  MOVF   1F,W
141F:  MOVWF  04
1420:  BCF    03.7
1421:  BTFSC  20.0
1422:  BSF    03.7
1423:  BCF    00.0
1424:  GOTO   42B
1425:  MOVF   1F,W
1426:  MOVWF  04
1427:  BCF    03.7
1428:  BTFSC  20.0
1429:  BSF    03.7
142A:  BSF    00.0
....................  
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
142B:  MOVLW  19
142C:  ADDWF  1D,W
142D:  MOVWF  04
142E:  BCF    03.7
142F:  BTFSC  1E.0
1430:  BSF    03.7
1431:  MOVF   00,W
1432:  ANDLW  01
1433:  SUBLW  01
1434:  BTFSS  03.2
1435:  GOTO   482
....................         polyoneDisplayPtr->timer.limitTime.hour = polyoneDisplayPtr->timer.limitTime.minute; 
1436:  MOVLW  0A
1437:  ADDWF  1D,W
1438:  MOVWF  78
1439:  MOVF   1E,W
143A:  MOVWF  7A
143B:  BTFSC  03.0
143C:  INCF   7A,F
143D:  MOVF   78,W
143E:  MOVWF  1F
143F:  MOVF   7A,W
1440:  MOVWF  20
1441:  MOVLW  0B
1442:  ADDWF  1D,W
1443:  MOVWF  04
1444:  BCF    03.7
1445:  BTFSC  1E.0
1446:  BSF    03.7
1447:  MOVF   00,W
1448:  MOVWF  21
1449:  MOVF   1F,W
144A:  MOVWF  04
144B:  BCF    03.7
144C:  BTFSC  20.0
144D:  BSF    03.7
144E:  MOVF   21,W
144F:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.second; 
1450:  MOVLW  0B
1451:  ADDWF  1D,W
1452:  MOVWF  78
1453:  MOVF   1E,W
1454:  MOVWF  7A
1455:  BTFSC  03.0
1456:  INCF   7A,F
1457:  MOVF   78,W
1458:  MOVWF  1F
1459:  MOVF   7A,W
145A:  MOVWF  20
145B:  MOVLW  0C
145C:  ADDWF  1D,W
145D:  MOVWF  04
145E:  BCF    03.7
145F:  BTFSC  1E.0
1460:  BSF    03.7
1461:  MOVF   00,W
1462:  MOVWF  21
1463:  MOVF   1F,W
1464:  MOVWF  04
1465:  BCF    03.7
1466:  BTFSC  20.0
1467:  BSF    03.7
1468:  MOVF   21,W
1469:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.second = 0; 
146A:  MOVLW  0C
146B:  ADDWF  1D,W
146C:  MOVWF  04
146D:  BCF    03.7
146E:  BTFSC  1E.0
146F:  BSF    03.7
1470:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = FIRST_NUMBER_UPPER_BOUND; 
1471:  MOVLW  0F
1472:  ADDWF  1D,W
1473:  MOVWF  04
1474:  BCF    03.7
1475:  BTFSC  1E.0
1476:  BSF    03.7
1477:  MOVLW  63
1478:  MOVWF  00
....................         polyoneDisplayPtr->timer.minutesUpperBound = SECOND_NUMBER_UPPER_BOUND; 
1479:  MOVLW  10
147A:  ADDWF  1D,W
147B:  MOVWF  04
147C:  BCF    03.7
147D:  BTFSC  1E.0
147E:  BSF    03.7
147F:  MOVLW  3B
1480:  MOVWF  00
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
1481:  GOTO   4D6
1482:  MOVLW  19
1483:  ADDWF  1D,W
1484:  MOVWF  04
1485:  BCF    03.7
1486:  BTFSC  1E.0
1487:  BSF    03.7
1488:  MOVF   00,W
1489:  ANDLW  01
148A:  BTFSS  03.2
148B:  GOTO   4D6
....................         polyoneDisplayPtr->timer.limitTime.second = polyoneDisplayPtr->timer.limitTime.minute; 
148C:  MOVLW  0C
148D:  ADDWF  1D,W
148E:  MOVWF  78
148F:  MOVF   1E,W
1490:  MOVWF  7A
1491:  BTFSC  03.0
1492:  INCF   7A,F
1493:  MOVF   78,W
1494:  MOVWF  1F
1495:  MOVF   7A,W
1496:  MOVWF  20
1497:  MOVLW  0B
1498:  ADDWF  1D,W
1499:  MOVWF  04
149A:  BCF    03.7
149B:  BTFSC  1E.0
149C:  BSF    03.7
149D:  MOVF   00,W
149E:  MOVWF  21
149F:  MOVF   1F,W
14A0:  MOVWF  04
14A1:  BCF    03.7
14A2:  BTFSC  20.0
14A3:  BSF    03.7
14A4:  MOVF   21,W
14A5:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.minute = polyoneDisplayPtr->timer.limitTime.hour; 
14A6:  MOVLW  0B
14A7:  ADDWF  1D,W
14A8:  MOVWF  78
14A9:  MOVF   1E,W
14AA:  MOVWF  7A
14AB:  BTFSC  03.0
14AC:  INCF   7A,F
14AD:  MOVF   78,W
14AE:  MOVWF  1F
14AF:  MOVF   7A,W
14B0:  MOVWF  20
14B1:  MOVLW  0A
14B2:  ADDWF  1D,W
14B3:  MOVWF  04
14B4:  BCF    03.7
14B5:  BTFSC  1E.0
14B6:  BSF    03.7
14B7:  MOVF   00,W
14B8:  MOVWF  21
14B9:  MOVF   1F,W
14BA:  MOVWF  04
14BB:  BCF    03.7
14BC:  BTFSC  20.0
14BD:  BSF    03.7
14BE:  MOVF   21,W
14BF:  MOVWF  00
....................         polyoneDisplayPtr->timer.limitTime.hour = 0; 
14C0:  MOVLW  0A
14C1:  ADDWF  1D,W
14C2:  MOVWF  04
14C3:  BCF    03.7
14C4:  BTFSC  1E.0
14C5:  BSF    03.7
14C6:  CLRF   00
....................         polyoneDisplayPtr->timer.hoursUpperBound = 0; 
14C7:  MOVLW  0F
14C8:  ADDWF  1D,W
14C9:  MOVWF  04
14CA:  BCF    03.7
14CB:  BTFSC  1E.0
14CC:  BSF    03.7
14CD:  CLRF   00
....................         polyoneDisplayPtr->timer.minutesUpperBound = FIRST_NUMBER_UPPER_BOUND; 
14CE:  MOVLW  10
14CF:  ADDWF  1D,W
14D0:  MOVWF  04
14D1:  BCF    03.7
14D2:  BTFSC  1E.0
14D3:  BSF    03.7
14D4:  MOVLW  63
14D5:  MOVWF  00
14D6:  BCF    03.6
....................  
....................     } 
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isAlarmOkay(PolyoneDisplay *polyoneDisplayPtr) { 
....................     if (polyoneDisplayPtr->format == FORMAT_HOURS_MINUTES) { 
*
136B:  MOVLW  19
136C:  ADDWF  1D,W
136D:  MOVWF  04
136E:  BCF    03.7
136F:  BTFSC  1E.0
1370:  BSF    03.7
1371:  MOVF   00,W
1372:  ANDLW  01
1373:  SUBLW  01
1374:  BTFSS  03.2
1375:  GOTO   38E
....................         return (polyoneDisplayPtr->timer.limitTime.hour != 0) || (polyoneDisplayPtr->timer.limitTime.minute != 0); 
1376:  MOVLW  0A
1377:  ADDWF  1D,W
1378:  MOVWF  04
1379:  BCF    03.7
137A:  BTFSC  1E.0
137B:  BSF    03.7
137C:  MOVF   00,F
137D:  BTFSS  03.2
137E:  GOTO   38A
137F:  MOVLW  0B
1380:  ADDWF  1D,W
1381:  MOVWF  04
1382:  BCF    03.7
1383:  BTFSC  1E.0
1384:  BSF    03.7
1385:  MOVF   00,F
1386:  BTFSS  03.2
1387:  GOTO   38A
1388:  MOVLW  00
1389:  GOTO   38B
138A:  MOVLW  01
138B:  MOVWF  78
138C:  GOTO   3AE
....................  
....................     } else if (polyoneDisplayPtr->format == FORMAT_MINUTES_SECONDS) { 
138D:  GOTO   3AE
138E:  MOVLW  19
138F:  ADDWF  1D,W
1390:  MOVWF  04
1391:  BCF    03.7
1392:  BTFSC  1E.0
1393:  BSF    03.7
1394:  MOVF   00,W
1395:  ANDLW  01
1396:  BTFSS  03.2
1397:  GOTO   3AE
....................         return (polyoneDisplayPtr->timer.limitTime.minute != 0) || (polyoneDisplayPtr->timer.limitTime.second != 0); 
1398:  MOVLW  0B
1399:  ADDWF  1D,W
139A:  MOVWF  04
139B:  BCF    03.7
139C:  BTFSC  1E.0
139D:  BSF    03.7
139E:  MOVF   00,F
139F:  BTFSS  03.2
13A0:  GOTO   3AC
13A1:  MOVLW  0C
13A2:  ADDWF  1D,W
13A3:  MOVWF  04
13A4:  BCF    03.7
13A5:  BTFSC  1E.0
13A6:  BSF    03.7
13A7:  MOVF   00,F
13A8:  BTFSS  03.2
13A9:  GOTO   3AC
13AA:  MOVLW  00
13AB:  GOTO   3AD
13AC:  MOVLW  01
13AD:  MOVWF  78
....................     } 
.................... } 
....................  
.................... void PolyoneDisplay_saveRtcCurrentTime(PolyoneDisplay *polyoneDisplayPtr) { 
....................     Timer_saveRtcCurrentTime(&polyoneDisplayPtr->timer); 
*
0B0F:  MOVF   1D,W
0B10:  MOVWF  78
0B11:  MOVF   1E,W
0B12:  MOVWF  7A
0B13:  MOVF   78,W
0B14:  MOVWF  1F
0B15:  MOVF   7A,W
0B16:  MOVWF  20
0B17:  MOVF   20,W
0B18:  MOVWF  22
0B19:  MOVF   1F,W
0B1A:  MOVWF  21
.................... } 
....................  
.................... void PolyoneDisplay_setState(PolyoneDisplay *polyoneDisplayPtr, PolyoneDisplayState polyoneDisplayState) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0853:  MOVLW  1B
0854:  BSF    03.6
0855:  ADDWF  1D,W
0856:  MOVWF  78
0857:  MOVF   1E,W
0858:  MOVWF  7A
0859:  BTFSC  03.0
085A:  INCF   7A,F
085B:  MOVF   78,W
085C:  MOVWF  20
085D:  MOVF   7A,W
085E:  MOVWF  21
085F:  MOVLW  1A
0860:  ADDWF  1D,W
0861:  MOVWF  04
0862:  BCF    03.7
0863:  BTFSC  1E.0
0864:  BSF    03.7
0865:  MOVF   00,W
0866:  MOVWF  22
0867:  MOVF   20,W
0868:  MOVWF  04
0869:  BCF    03.7
086A:  BTFSC  21.0
086B:  BSF    03.7
086C:  MOVF   22,W
086D:  MOVWF  00
....................     polyoneDisplayPtr->currentState = polyoneDisplayState; 
086E:  MOVLW  1A
086F:  ADDWF  1D,W
0870:  MOVWF  04
0871:  BCF    03.7
0872:  BTFSC  1E.0
0873:  BSF    03.7
0874:  MOVF   1F,W
0875:  MOVWF  00
0876:  BCF    03.6
0877:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_stop(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     polyoneDisplayPtr->previousState = polyoneDisplayPtr->currentState; 
*
0AEB:  MOVLW  1B
0AEC:  ADDWF  1D,W
0AED:  MOVWF  78
0AEE:  MOVF   1E,W
0AEF:  MOVWF  7A
0AF0:  BTFSC  03.0
0AF1:  INCF   7A,F
0AF2:  MOVF   78,W
0AF3:  MOVWF  1F
0AF4:  MOVF   7A,W
0AF5:  MOVWF  20
0AF6:  MOVLW  1A
0AF7:  ADDWF  1D,W
0AF8:  MOVWF  04
0AF9:  BCF    03.7
0AFA:  BTFSC  1E.0
0AFB:  BSF    03.7
0AFC:  MOVF   00,W
0AFD:  MOVWF  21
0AFE:  MOVF   1F,W
0AFF:  MOVWF  04
0B00:  BCF    03.7
0B01:  BTFSC  20.0
0B02:  BSF    03.7
0B03:  MOVF   21,W
0B04:  MOVWF  00
....................     polyoneDisplayPtr->currentState = STATE_IDLE; 
0B05:  MOVLW  1A
0B06:  ADDWF  1D,W
0B07:  MOVWF  04
0B08:  BCF    03.7
0B09:  BTFSC  1E.0
0B0A:  BSF    03.7
0B0B:  CLRF   00
.................... } 
....................  
.................... void PolyoneDisplay_saveState(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     write_eeprom(polyoneDisplayPtr->addressCurrentState, polyoneDisplayPtr->currentState); 
*
0800:  MOVLW  1C
0801:  BSF    03.6
0802:  ADDWF  1D,W
0803:  MOVWF  04
0804:  BCF    03.7
0805:  BTFSC  1E.0
0806:  BSF    03.7
0807:  MOVF   00,W
0808:  MOVWF  1F
0809:  MOVLW  1A
080A:  ADDWF  1D,W
080B:  MOVWF  04
080C:  BCF    03.7
080D:  BTFSC  1E.0
080E:  BSF    03.7
080F:  MOVF   00,W
0810:  MOVWF  20
0811:  BCF    03.6
0812:  MOVF   0B,W
0813:  MOVWF  77
0814:  BCF    0B.7
0815:  BSF    03.6
0816:  MOVF   1F,W
0817:  MOVWF  0D
0818:  MOVF   20,W
0819:  MOVWF  0C
081A:  BSF    03.5
081B:  BCF    0C.7
081C:  BSF    0C.2
081D:  MOVLW  55
081E:  MOVWF  0D
081F:  MOVLW  AA
0820:  MOVWF  0D
0821:  BSF    0C.1
0822:  BTFSC  0C.1
0823:  GOTO   022
0824:  BCF    0C.2
0825:  MOVF   77,W
0826:  BCF    03.5
0827:  BCF    03.6
0828:  IORWF  0B,F
....................     write_eeprom(polyoneDisplayPtr->addressPreviousState, polyoneDisplayPtr->previousState); 
0829:  MOVLW  1D
082A:  BSF    03.6
082B:  ADDWF  1D,W
082C:  MOVWF  04
082D:  BCF    03.7
082E:  BTFSC  1E.0
082F:  BSF    03.7
0830:  MOVF   00,W
0831:  MOVWF  1F
0832:  MOVLW  1B
0833:  ADDWF  1D,W
0834:  MOVWF  04
0835:  BCF    03.7
0836:  BTFSC  1E.0
0837:  BSF    03.7
0838:  MOVF   00,W
0839:  MOVWF  20
083A:  BCF    03.6
083B:  MOVF   0B,W
083C:  MOVWF  77
083D:  BCF    0B.7
083E:  BSF    03.6
083F:  MOVF   1F,W
0840:  MOVWF  0D
0841:  MOVF   20,W
0842:  MOVWF  0C
0843:  BSF    03.5
0844:  BCF    0C.7
0845:  BSF    0C.2
0846:  MOVLW  55
0847:  MOVWF  0D
0848:  MOVLW  AA
0849:  MOVWF  0D
084A:  BSF    0C.1
084B:  BTFSC  0C.1
084C:  GOTO   04B
084D:  BCF    0C.2
084E:  MOVF   77,W
084F:  BCF    03.5
0850:  BCF    03.6
0851:  IORWF  0B,F
0852:  RETURN
.................... } 
....................  
.................... void PolyoneDisplay_resume(PolyoneDisplay *polyoneDisplayPtr) { 
....................  
....................     PolyoneDisplayState currentState; 
....................     currentState = polyoneDisplayPtr->currentState; 
*
0A80:  MOVLW  1A
0A81:  ADDWF  1D,W
0A82:  MOVWF  04
0A83:  BCF    03.7
0A84:  BTFSC  1E.0
0A85:  BSF    03.7
0A86:  MOVF   00,W
0A87:  MOVWF  1F
....................     polyoneDisplayPtr->currentState = polyoneDisplayPtr->previousState; 
0A88:  MOVLW  1A
0A89:  ADDWF  1D,W
0A8A:  MOVWF  78
0A8B:  MOVF   1E,W
0A8C:  MOVWF  7A
0A8D:  BTFSC  03.0
0A8E:  INCF   7A,F
0A8F:  MOVF   78,W
0A90:  MOVWF  20
0A91:  MOVF   7A,W
0A92:  MOVWF  21
0A93:  MOVLW  1B
0A94:  ADDWF  1D,W
0A95:  MOVWF  04
0A96:  BCF    03.7
0A97:  BTFSC  1E.0
0A98:  BSF    03.7
0A99:  MOVF   00,W
0A9A:  MOVWF  22
0A9B:  MOVF   20,W
0A9C:  MOVWF  04
0A9D:  BCF    03.7
0A9E:  BTFSC  21.0
0A9F:  BSF    03.7
0AA0:  MOVF   22,W
0AA1:  MOVWF  00
....................     polyoneDisplayPtr->previousState = currentState; 
0AA2:  MOVLW  1B
0AA3:  ADDWF  1D,W
0AA4:  MOVWF  04
0AA5:  BCF    03.7
0AA6:  BTFSC  1E.0
0AA7:  BSF    03.7
0AA8:  MOVF   1F,W
0AA9:  MOVWF  00
.................... } 
....................  
.................... BOOLEAN PolyoneDisplay_isTimerDone(PolyoneDisplay *polyoneDisplayPtr) { 
....................     return Timer_isTimerFinished(&polyoneDisplayPtr->timer); 
*
0BA8:  MOVF   1D,W
0BA9:  MOVWF  78
0BAA:  MOVF   1E,W
0BAB:  MOVWF  7A
0BAC:  MOVF   78,W
0BAD:  MOVWF  1F
0BAE:  MOVF   7A,W
0BAF:  MOVWF  20
0BB0:  MOVF   20,W
0BB1:  MOVWF  22
0BB2:  MOVF   1F,W
0BB3:  MOVWF  21
*
0BDF:  MOVF   78,W
.................... } 
.................... #endif	/* POLYONEDISPLAY_H */ 
....................  
....................  
....................  
.................... // Timeouts 
.................... #define TIMEOUT_MENU_BUTTON_MILISECONDS 2000 
.................... #define TIMEOUT_RESET_TIMER_MILISECONDS 3000 
.................... #define TIMEOUT_HYPHENS_MILISECONDS     2000 
....................  
.................... #define DELAY_INCREASE_NUMBER_MILISECONDS 300 
....................  
.................... // Buttons 
.................... #define  BUTTON_START_STOP_RESET    PIN_B1 
.................... #define  BUTTON_MENU                PIN_B0 
....................  
.................... typedef enum { 
....................     EEPROM_CURRENT_STATE = 0, 
....................     EEPROM_PREVIOUS_STATE, 
....................     EEPROM_FORMAT, 
....................     EEPROM_FIRST_NUMBER, 
....................     EEPROM_SECOND_NUMBER, 
....................     EEPROM_RTC_HOURS, 
....................     EEPROM_RTC_MINUTES, 
....................     EEPROM_RTC_SECONDS, 
.................... } EEPROM_ADDRESS; 
....................  
.................... typedef void (*StateMachineFunction)(void); 
....................  
....................  
.................... // -------------------------FUNCTION PROTOTYPE---------------------------------- 
.................... void setupHardware(void); 
.................... // -------------------------RTOS TASKS------------------------------------------ 
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfStartStopResetButtonIsHeld(void); 
....................  
.................... #task(rate=50ms, max=1ms) 
.................... void Task_checkIfMenuButtonIsHeld(void); 
....................  
.................... #task(rate=10ms, max=5ms) 
.................... void Task_runStateMachine(void); 
....................  
.................... #task(rate=200ms, max=1ms) 
.................... void Task_blinkDisplay(void); 
....................  
.................... // ----------------------------GLOBAL VARIABLES--------------------------------- 
.................... BOOLEAN showDisplayCompletely = TRUE; 
.................... ButtonState buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
.................... ButtonState buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
.................... PolyoneDisplay myPolyoneDisplay; 
....................  
.................... BOOLEAN startStopButtonState = TRUE; 
.................... BOOLEAN menuButtonState = TRUE; 
.................... PolyoneDisplayState nextStateAfterWaitingForButtonBeingReleased; 
.................... int numberOfMenuButtonHasBeenReleased = 0; 
....................  
.................... void main(void) { 
*
0DCA:  MOVF   03,W
0DCB:  ANDLW  1F
0DCC:  MOVWF  03
0DCD:  MOVLW  FF
0DCE:  MOVWF  20
0DCF:  BSF    3E.0
0DD0:  BSF    3E.1
0DD1:  BSF    3E.2
0DD2:  BSF    3E.3
0DD3:  BSF    3E.4
0DD4:  CLRF   5F
0DD5:  CLRF   60
0DD6:  CLRF   61
0DD7:  BSF    03.5
0DD8:  BSF    03.6
0DD9:  MOVF   09,W
0DDA:  ANDLW  C0
0DDB:  MOVWF  09
0DDC:  BCF    03.6
0DDD:  BCF    1F.4
0DDE:  BCF    1F.5
0DDF:  MOVLW  00
0DE0:  BSF    03.6
0DE1:  MOVWF  08
0DE2:  BCF    03.5
0DE3:  CLRF   07
0DE4:  CLRF   08
0DE5:  CLRF   09
0DE6:  BCF    03.7
....................     setupHardware(); 
0DE7:  BCF    03.6
0DE8:  GOTO   5A2
....................  
....................     myPolyoneDisplay.currentState = STATE_INIT; 
0DE9:  MOVLW  03
0DEA:  MOVWF  59
....................  
....................  
....................     rtos_run(); 
0DEB:  CLRF   22
0DEC:  CLRF   24
0DED:  MOVLW  05
0DEE:  MOVWF  23
0DEF:  CLRF   26
0DF0:  CLRF   25
0DF1:  MOVLW  55
0DF2:  MOVWF  27
0DF3:  MOVLW  0D
0DF4:  MOVWF  28
0DF5:  CLRF   29
0DF6:  CLRF   2B
0DF7:  MOVLW  05
0DF8:  MOVWF  2A
0DF9:  CLRF   2D
0DFA:  MOVLW  01
0DFB:  MOVWF  2C
0DFC:  MOVLW  73
0DFD:  MOVWF  2E
0DFE:  MOVLW  0D
0DFF:  MOVWF  2F
0E00:  CLRF   30
0E01:  CLRF   32
0E02:  MOVLW  01
0E03:  MOVWF  31
0E04:  CLRF   34
0E05:  CLRF   33
0E06:  MOVLW  00
0E07:  MOVWF  35
0E08:  MOVLW  10
0E09:  MOVWF  36
0E0A:  CLRF   37
0E0B:  CLRF   39
0E0C:  MOVLW  14
0E0D:  MOVWF  38
0E0E:  CLRF   3B
0E0F:  MOVLW  02
0E10:  MOVWF  3A
0E11:  MOVLW  91
0E12:  MOVWF  3C
0E13:  MOVLW  0D
0E14:  MOVWF  3D
0E15:  CLRF   21
0E16:  BSF    03.5
0E17:  MOVF   01,W
0E18:  ANDLW  C0
0E19:  IORLW  07
0E1A:  MOVWF  01
0E1B:  MOVLW  3D
0E1C:  BCF    03.5
0E1D:  MOVWF  01
0E1E:  BCF    0B.2
0E1F:  BCF    03.0
0E20:  RLF    21,W
0E21:  MOVWF  77
0E22:  BCF    0A.3
0E23:  CALL   023
0E24:  BSF    0A.3
0E25:  MOVWF  79
0E26:  MOVLW  01
0E27:  ADDWF  77,W
0E28:  BCF    0A.3
0E29:  CALL   023
0E2A:  BSF    0A.3
0E2B:  MOVWF  7A
0E2C:  MOVF   79,W
0E2D:  MOVWF  04
0E2E:  BCF    03.7
0E2F:  BTFSC  7A.0
0E30:  BSF    03.7
0E31:  MOVF   00,W
0E32:  MOVWF  79
0E33:  INCF   04,F
0E34:  MOVF   00,W
0E35:  MOVWF  77
0E36:  INCF   04,F
0E37:  MOVF   00,W
0E38:  MOVWF  78
0E39:  INCF   04,F
0E3A:  INCF   00,F
0E3B:  MOVF   00,W
0E3C:  MOVWF  7A
0E3D:  BTFSS  03.2
0E3E:  GOTO   642
0E3F:  INCF   04,F
0E40:  INCF   00,F
0E41:  DECF   04,F
0E42:  INCF   04,F
0E43:  MOVF   00,W
0E44:  SUBWF  78,W
0E45:  BTFSS  03.2
0E46:  GOTO   65A
0E47:  MOVF   77,W
0E48:  SUBWF  7A,W
0E49:  BTFSS  03.2
0E4A:  GOTO   65A
0E4B:  DECF   04,F
0E4C:  CLRF   00
0E4D:  INCF   04,F
0E4E:  CLRF   00
0E4F:  INCF   04,F
0E50:  BTFSC  79.7
0E51:  GOTO   65A
0E52:  INCF   04,F
0E53:  MOVF   00,W
0E54:  MOVWF  0A
0E55:  DECF   04,F
0E56:  MOVF   00,W
0E57:  MOVWF  02
0E58:  BCF    03.5
0E59:  BCF    03.6
0E5A:  INCF   21,F
0E5B:  MOVLW  04
0E5C:  SUBWF  21,W
0E5D:  BTFSS  03.2
0E5E:  GOTO   61F
0E5F:  CLRF   21
0E60:  MOVF   01,W
0E61:  BTFSS  0B.2
0E62:  GOTO   665
0E63:  BSF    03.5
0E64:  GOTO   61B
0E65:  GOTO   660
0E66:  MOVLW  FF
0E67:  MOVWF  21
.................... } 
....................  
0E68:  SLEEP
.................... void x(void) { 
....................     switch (myPolyoneDisplay.currentState) { 
*
088C:  MOVF   59,W
088D:  ADDLW  F6
088E:  BTFSC  03.0
088F:  GOTO   443
0890:  ADDLW  0A
0891:  GOTO   446
....................         case STATE_INIT: 
....................             myPolyoneDisplay = PolyoneDisplay_new( 
....................                     EEPROM_CURRENT_STATE, 
....................                     EEPROM_PREVIOUS_STATE, 
....................                     EEPROM_FORMAT, 
....................                     EEPROM_FIRST_NUMBER, 
....................                     EEPROM_SECOND_NUMBER, 
....................                     EEPROM_RTC_HOURS, 
....................                     EEPROM_RTC_MINUTES, 
....................                     EEPROM_RTC_SECONDS 
....................                     ); 
0892:  BSF    03.6
0893:  CLRF   24
0894:  CLRF   23
0895:  CLRF   26
0896:  MOVLW  01
0897:  MOVWF  25
0898:  CLRF   28
0899:  MOVLW  02
089A:  MOVWF  27
089B:  CLRF   2A
089C:  MOVLW  03
089D:  MOVWF  29
089E:  CLRF   2C
089F:  MOVLW  04
08A0:  MOVWF  2B
08A1:  CLRF   2E
08A2:  MOVLW  05
08A3:  MOVWF  2D
08A4:  CLRF   30
08A5:  MOVLW  06
08A6:  MOVWF  2F
08A7:  CLRF   32
08A8:  MOVLW  07
08A9:  MOVWF  31
*
0A4A:  MOVF   79,W
0A4B:  MOVWF  7A
0A4C:  MOVF   78,W
0A4D:  BSF    03.6
0A4E:  MOVWF  1D
0A4F:  MOVF   7A,W
0A50:  MOVWF  1E
0A51:  CLRF   20
0A52:  MOVLW  3F
0A53:  MOVWF  1F
0A54:  MOVLW  1F
0A55:  MOVWF  78
0A56:  MOVF   1D,W
0A57:  MOVWF  04
0A58:  BCF    03.7
0A59:  BTFSC  1E.0
0A5A:  BSF    03.7
0A5B:  MOVF   00,W
0A5C:  MOVWF  77
0A5D:  MOVF   1F,W
0A5E:  MOVWF  04
0A5F:  BCF    03.7
0A60:  BTFSC  20.0
0A61:  BSF    03.7
0A62:  MOVF   77,W
0A63:  MOVWF  00
0A64:  INCF   1F,F
0A65:  BTFSC  03.2
0A66:  INCF   20,F
0A67:  INCF   1D,F
0A68:  BTFSC  03.2
0A69:  INCF   1E,F
0A6A:  DECFSZ 78,F
0A6B:  GOTO   256
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0A6C:  CLRF   1E
0A6D:  MOVLW  3F
0A6E:  MOVWF  1D
0A6F:  CLRF   1F
0A70:  BCF    0A.3
0A71:  BCF    03.6
0A72:  CALL   704
0A73:  BSF    0A.3
....................             break; 
0A74:  GOTO   443
....................  
....................         case STATE_IDLE: 
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0A75:  BSF    03.5
0A76:  BSF    06.1
0A77:  BCF    03.5
0A78:  BTFSS  06.1
0A79:  GOTO   2B7
0A7A:  BTFSC  3E.3
0A7B:  GOTO   2B7
....................                 PolyoneDisplay_resume(&myPolyoneDisplay); 
0A7C:  BSF    03.6
0A7D:  CLRF   1E
0A7E:  MOVLW  3F
0A7F:  MOVWF  1D
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0AAA:  CLRF   1E
0AAB:  MOVLW  3F
0AAC:  MOVWF  1D
0AAD:  BCF    03.6
0AAE:  CALL   000
....................                 PolyoneDisplay_updateRtc(&myPolyoneDisplay); 
0AAF:  BSF    03.6
0AB0:  CLRF   53
0AB1:  MOVLW  3F
0AB2:  MOVWF  52
0AB3:  BCF    0A.3
0AB4:  BCF    03.6
0AB5:  CALL   540
0AB6:  BSF    0A.3
....................  
....................             } 
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0AB7:  BTFSC  3E.1
0AB8:  GOTO   2C2
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0AB9:  BSF    3E.1
....................                 //                myPolyoneDisplay.currentState = STATE_RESETTING; 
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0ABA:  BSF    03.6
0ABB:  CLRF   1E
0ABC:  MOVLW  3F
0ABD:  MOVWF  1D
0ABE:  MOVLW  04
0ABF:  MOVWF  1F
0AC0:  BCF    03.6
0AC1:  CALL   053
....................             } 
....................             break; 
0AC2:  GOTO   443
....................  
....................         case STATE_COUNTING_DOWN: 
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0AC3:  BSF    03.6
0AC4:  CLRF   53
0AC5:  MOVLW  3F
0AC6:  MOVWF  52
0AC7:  BCF    0A.3
0AC8:  BCF    03.6
0AC9:  CALL   2D1
0ACA:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, TRUE); 
0ACB:  BSF    03.6
0ACC:  CLRF   1E
0ACD:  MOVLW  3F
0ACE:  MOVWF  1D
0ACF:  MOVLW  01
0AD0:  MOVWF  1F
0AD1:  BCF    0A.3
0AD2:  BCF    03.6
0AD3:  CALL   704
0AD4:  BSF    0A.3
....................  
....................             if (buttonStateStartStopReset == BUTTON_STATE_HELD) { 
0AD5:  BTFSC  3E.1
0AD6:  GOTO   2E0
....................                 buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0AD7:  BSF    3E.1
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_RESETTING); 
0AD8:  BSF    03.6
0AD9:  CLRF   1E
0ADA:  MOVLW  3F
0ADB:  MOVWF  1D
0ADC:  MOVLW  04
0ADD:  MOVWF  1F
0ADE:  BCF    03.6
0ADF:  CALL   053
....................             } 
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
0AE0:  BSF    03.5
0AE1:  BSF    06.1
0AE2:  BCF    03.5
0AE3:  BTFSS  06.1
0AE4:  GOTO   3A4
0AE5:  BTFSC  3E.3
0AE6:  GOTO   3A4
....................                 PolyoneDisplay_stop(&myPolyoneDisplay); 
0AE7:  BSF    03.6
0AE8:  CLRF   1E
0AE9:  MOVLW  3F
0AEA:  MOVWF  1D
....................                 PolyoneDisplay_saveRtcCurrentTime(&myPolyoneDisplay); 
*
0B0C:  CLRF   1E
0B0D:  MOVLW  3F
0B0E:  MOVWF  1D
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
*
0B95:  BSF    03.6
0B96:  CLRF   1E
0B97:  MOVLW  3F
0B98:  MOVWF  1D
0B99:  BCF    03.6
0B9A:  CALL   000
....................                 PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0B9B:  BSF    03.6
0B9C:  CLRF   1E
0B9D:  MOVLW  3F
0B9E:  MOVWF  1D
0B9F:  CLRF   1F
0BA0:  BCF    0A.3
0BA1:  BCF    03.6
0BA2:  CALL   704
0BA3:  BSF    0A.3
....................             } 
....................             if (PolyoneDisplay_isTimerDone(&myPolyoneDisplay)) { 
0BA4:  BSF    03.6
0BA5:  CLRF   1E
0BA6:  MOVLW  3F
0BA7:  MOVWF  1D
*
0BE0:  MOVF   78,F
0BE1:  BTFSC  03.2
0BE2:  GOTO   3EB
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_UP); 
0BE3:  CLRF   1E
0BE4:  MOVLW  3F
0BE5:  MOVWF  1D
0BE6:  MOVLW  01
0BE7:  MOVWF  1F
0BE8:  BCF    03.6
0BE9:  CALL   053
0BEA:  BSF    03.6
....................             } 
....................             break; 
0BEB:  BCF    03.6
0BEC:  GOTO   443
....................  
....................         case STATE_COUNTING_UP: 
....................  
....................             break; 
0BED:  GOTO   443
....................  
....................         case STATE_RESETTING: 
....................             Time_clearRtcTime(); 
0BEE:  BCF    0A.3
0BEF:  CALL   7ED
0BF0:  BSF    0A.3
....................             SeventSegmentDisplay_showHyphens(); 
....................             delay_ms(TIMEOUT_HYPHENS_MILISECONDS); 
*
0C06:  MOVLW  08
0C07:  BSF    03.6
0C08:  MOVWF  1D
0C09:  MOVLW  FA
0C0A:  MOVWF  1E
0C0B:  BCF    03.6
0C0C:  CALL   078
0C0D:  BSF    03.6
0C0E:  DECFSZ 1D,F
0C0F:  GOTO   409
....................             PolyoneDisplay_setState(&myPolyoneDisplay, STATE_WAITING_FOR_BUTTON_BEING_RELEASED); 
0C10:  CLRF   1E
0C11:  MOVLW  3F
0C12:  MOVWF  1D
0C13:  MOVLW  09
0C14:  MOVWF  1F
0C15:  BCF    03.6
0C16:  CALL   053
....................             nextStateAfterWaitingForButtonBeingReleased = STATE_READY; 
0C17:  MOVLW  05
0C18:  MOVWF  5E
....................             Time_clearRtcTime(); 
0C19:  BCF    0A.3
0C1A:  CALL   7ED
0C1B:  BSF    0A.3
....................             PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
0C1C:  BSF    03.6
0C1D:  CLRF   53
0C1E:  MOVLW  3F
0C1F:  MOVWF  52
0C20:  BCF    0A.3
0C21:  BCF    03.6
0C22:  CALL   2D1
0C23:  BSF    0A.3
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
0C24:  BSF    03.6
0C25:  CLRF   1E
0C26:  MOVLW  3F
0C27:  MOVWF  1D
0C28:  CLRF   1F
0C29:  BCF    0A.3
0C2A:  BCF    03.6
0C2B:  CALL   704
0C2C:  BSF    0A.3
....................             rtos_enable(Task_checkIfMenuButtonIsHeld); 
0C2D:  BCF    29.7
....................             break; 
0C2E:  GOTO   443
....................  
....................         case STATE_WAITING_FOR_BUTTON_BEING_RELEASED: 
....................             if (input(BUTTON_START_STOP_RESET) && input(BUTTON_MENU)) { 
0C2F:  BSF    03.5
0C30:  BSF    06.1
0C31:  BCF    03.5
0C32:  BTFSS  06.1
0C33:  GOTO   443
0C34:  BSF    03.5
0C35:  BSF    06.0
0C36:  BCF    03.5
0C37:  BTFSS  06.0
0C38:  GOTO   443
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, nextStateAfterWaitingForButtonBeingReleased); 
0C39:  BSF    03.6
0C3A:  CLRF   1E
0C3B:  MOVLW  3F
0C3C:  MOVWF  1D
0C3D:  BCF    03.6
0C3E:  MOVF   5E,W
0C3F:  BSF    03.6
0C40:  MOVWF  1F
0C41:  BCF    03.6
0C42:  CALL   053
....................             } 
....................             break; 
....................     } 
0C43:  BCF    0A.3
0C44:  BSF    0A.4
0C45:  GOTO   003 (RETURN)
.................... } 
....................  
.................... void Task_runStateMachine(void) { 
....................     x(); 
*
1000:  BCF    0A.4
1001:  BSF    0A.3
1002:  GOTO   08C
1003:  BSF    0A.4
1004:  BCF    0A.3
....................     switch (myPolyoneDisplay.currentState) { 
1005:  MOVLW  05
1006:  SUBWF  59,W
1007:  ADDLW  FC
1008:  BTFSC  03.0
1009:  GOTO   4F7
100A:  ADDLW  04
100B:  GOTO   512
....................         case STATE_READY: 
....................             PolyoneDisplay_showCount(&myPolyoneDisplay, FALSE); 
100C:  BSF    03.6
100D:  CLRF   1E
100E:  MOVLW  3F
100F:  MOVWF  1D
1010:  CLRF   1F
1011:  BCF    0A.4
1012:  BCF    03.6
1013:  CALL   704
1014:  BSF    0A.4
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
1015:  BSF    03.5
1016:  BSF    06.1
1017:  BCF    03.5
1018:  BTFSS  06.1
1019:  GOTO   035
101A:  BTFSC  3E.3
101B:  GOTO   035
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_COUNTING_DOWN); 
101C:  BSF    03.6
101D:  CLRF   1E
101E:  MOVLW  3F
101F:  MOVWF  1D
1020:  MOVLW  02
1021:  MOVWF  1F
1022:  BCF    0A.4
1023:  BSF    0A.3
1024:  BCF    03.6
1025:  CALL   053
1026:  BSF    0A.4
1027:  BCF    0A.3
....................                 PolyoneDisplay_saveState(&myPolyoneDisplay); 
1028:  BSF    03.6
1029:  CLRF   1E
102A:  MOVLW  3F
102B:  MOVWF  1D
102C:  BCF    0A.4
102D:  BSF    0A.3
102E:  BCF    03.6
102F:  CALL   000
1030:  BSF    0A.4
1031:  BCF    0A.3
....................                 Time_clearRtcTime(); 
1032:  BCF    0A.4
1033:  CALL   7ED
1034:  BSF    0A.4
....................             } 
....................             if (buttonStateMenu == BUTTON_STATE_HELD) { 
1035:  BTFSC  3E.2
1036:  GOTO   046
....................                 buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
1037:  BSF    3E.2
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
1038:  BSF    03.6
1039:  CLRF   1E
103A:  MOVLW  3F
103B:  MOVWF  1D
103C:  MOVLW  06
103D:  MOVWF  1F
103E:  BCF    0A.4
103F:  BSF    0A.3
1040:  BCF    03.6
1041:  CALL   053
1042:  BSF    0A.4
1043:  BCF    0A.3
....................                 rtos_enable(Task_blinkDisplay); 
1044:  BCF    37.7
....................                 rtos_disable(Task_checkIfMenuButtonIsHeld); 
1045:  BSF    29.7
....................             } 
....................             break; 
1046:  GOTO   4F7
....................  
....................         case STATE_SETTING_FIRST_NUMBER: 
....................             if (showDisplayCompletely) { 
1047:  BTFSS  3E.0
1048:  GOTO   054
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
1049:  BSF    03.6
104A:  CLRF   1E
104B:  MOVLW  3F
104C:  MOVWF  1D
104D:  BCF    0A.4
104E:  BSF    0A.3
104F:  BCF    03.6
1050:  CALL   454
1051:  BSF    0A.4
1052:  BCF    0A.3
....................             } else { 
1053:  GOTO   12F
....................                 PolyoneDisplay_showSecondNumber(&myPolyoneDisplay); 
1054:  BSF    03.6
1055:  CLRF   1E
1056:  MOVLW  3F
1057:  MOVWF  1D
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
1130:  BSF    03.5
1131:  BCF    03.6
1132:  BSF    06.1
1133:  BCF    03.5
1134:  BTFSC  06.1
1135:  GOTO   1BB
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
1136:  BSF    03.5
1137:  BSF    06.1
1138:  BCF    03.5
1139:  BTFSC  06.1
113A:  GOTO   1BB
....................                     PolyoneDisplay_increaseFirstNumber(&myPolyoneDisplay); 
113B:  BSF    03.6
113C:  CLRF   1E
113D:  MOVLW  3F
113E:  MOVWF  1D
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
11A2:  CLRF   1E
11A3:  MOVLW  3F
11A4:  MOVWF  1D
11A5:  BCF    0A.4
11A6:  BSF    0A.3
11A7:  BCF    03.6
11A8:  CALL   454
11A9:  BSF    0A.4
11AA:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
11AB:  MOVLW  02
11AC:  BSF    03.6
11AD:  MOVWF  1D
11AE:  MOVLW  96
11AF:  MOVWF  1E
11B0:  BCF    0A.4
11B1:  BSF    0A.3
11B2:  BCF    03.6
11B3:  CALL   078
11B4:  BSF    0A.4
11B5:  BCF    0A.3
11B6:  BSF    03.6
11B7:  DECFSZ 1D,F
11B8:  GOTO   1AE
11B9:  BCF    03.6
11BA:  GOTO   136
....................                 } 
....................             } 
....................  
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
11BB:  BTFSC  3E.4
11BC:  GOTO   1D4
11BD:  BSF    03.5
11BE:  BSF    06.0
11BF:  BCF    03.5
11C0:  BTFSS  06.0
11C1:  GOTO   1D4
....................                 if (myPolyoneDisplay.previousState == STATE_READY) { 
11C2:  MOVF   5A,W
11C3:  SUBLW  05
11C4:  BTFSS  03.2
11C5:  GOTO   1C8
....................                     numberOfMenuButtonHasBeenReleased++; 
11C6:  INCF   5F,F
....................                 } else { 
11C7:  GOTO   1D4
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
11C8:  BSF    03.6
11C9:  CLRF   1E
11CA:  MOVLW  3F
11CB:  MOVWF  1D
11CC:  MOVLW  07
11CD:  MOVWF  1F
11CE:  BCF    0A.4
11CF:  BSF    0A.3
11D0:  BCF    03.6
11D1:  CALL   053
11D2:  BSF    0A.4
11D3:  BCF    0A.3
....................                 } 
....................             } 
....................             if (numberOfMenuButtonHasBeenReleased >= 2) { 
11D4:  MOVF   5F,W
11D5:  SUBLW  01
11D6:  BTFSC  03.0
11D7:  GOTO   1E5
....................                 numberOfMenuButtonHasBeenReleased = 0; 
11D8:  CLRF   5F
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_SECOND_NUMBER); 
11D9:  BSF    03.6
11DA:  CLRF   1E
11DB:  MOVLW  3F
11DC:  MOVWF  1D
11DD:  MOVLW  07
11DE:  MOVWF  1F
11DF:  BCF    0A.4
11E0:  BSF    0A.3
11E1:  BCF    03.6
11E2:  CALL   053
11E3:  BSF    0A.4
11E4:  BCF    0A.3
....................  
....................             } 
....................  
....................             break; 
11E5:  GOTO   4F7
....................         case STATE_SETTING_SECOND_NUMBER: 
....................             if (showDisplayCompletely) { 
11E6:  BTFSS  3E.0
11E7:  GOTO   1F3
....................                 PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
11E8:  BSF    03.6
11E9:  CLRF   1E
11EA:  MOVLW  3F
11EB:  MOVWF  1D
11EC:  BCF    0A.4
11ED:  BSF    0A.3
11EE:  BCF    03.6
11EF:  CALL   454
11F0:  BSF    0A.4
11F1:  BCF    0A.3
....................             } else { 
11F2:  GOTO   2D2
....................                 PolyoneDisplay_showFirstNumber(&myPolyoneDisplay); 
11F3:  BSF    03.6
11F4:  CLRF   1E
11F5:  MOVLW  3F
11F6:  MOVWF  1D
....................             } 
....................             if (!input(BUTTON_START_STOP_RESET)) { 
*
12D3:  BSF    03.5
12D4:  BCF    03.6
12D5:  BSF    06.1
12D6:  BCF    03.5
12D7:  BTFSC  06.1
12D8:  GOTO   360
....................                 while (!input(BUTTON_START_STOP_RESET)) { 
12D9:  BSF    03.5
12DA:  BSF    06.1
12DB:  BCF    03.5
12DC:  BTFSC  06.1
12DD:  GOTO   360
....................                     PolyoneDisplay_increaseSecondNumber(&myPolyoneDisplay); 
12DE:  BSF    03.6
12DF:  CLRF   1E
12E0:  MOVLW  3F
12E1:  MOVWF  1D
....................                     PolyoneDisplay_showLimitTime(&myPolyoneDisplay); 
*
1346:  BSF    03.6
1347:  CLRF   1E
1348:  MOVLW  3F
1349:  MOVWF  1D
134A:  BCF    0A.4
134B:  BSF    0A.3
134C:  BCF    03.6
134D:  CALL   454
134E:  BSF    0A.4
134F:  BCF    0A.3
....................                     delay_ms(DELAY_INCREASE_NUMBER_MILISECONDS); 
1350:  MOVLW  02
1351:  BSF    03.6
1352:  MOVWF  1D
1353:  MOVLW  96
1354:  MOVWF  1E
1355:  BCF    0A.4
1356:  BSF    0A.3
1357:  BCF    03.6
1358:  CALL   078
1359:  BSF    0A.4
135A:  BCF    0A.3
135B:  BSF    03.6
135C:  DECFSZ 1D,F
135D:  GOTO   353
135E:  BCF    03.6
135F:  GOTO   2D9
....................                 } 
....................             } 
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
1360:  BTFSC  3E.4
1361:  GOTO   3C9
1362:  BSF    03.5
1363:  BSF    06.0
1364:  BCF    03.5
1365:  BTFSS  06.0
1366:  GOTO   3C9
....................                 if (PolyoneDisplay_isAlarmOkay(&myPolyoneDisplay)) { 
1367:  BSF    03.6
1368:  CLRF   1E
1369:  MOVLW  3F
136A:  MOVWF  1D
*
13AE:  MOVF   78,F
13AF:  BTFSC  03.2
13B0:  GOTO   3BE
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FORMAT); 
13B1:  CLRF   1E
13B2:  MOVLW  3F
13B3:  MOVWF  1D
13B4:  MOVLW  08
13B5:  MOVWF  1F
13B6:  BCF    0A.4
13B7:  BSF    0A.3
13B8:  BCF    03.6
13B9:  CALL   053
13BA:  BSF    0A.4
13BB:  BCF    0A.3
....................                 } else { 
13BC:  GOTO   3C9
13BD:  BSF    03.6
....................  
....................                     PolyoneDisplay_setState(&myPolyoneDisplay, STATE_SETTING_FIRST_NUMBER); 
13BE:  CLRF   1E
13BF:  MOVLW  3F
13C0:  MOVWF  1D
13C1:  MOVLW  06
13C2:  MOVWF  1F
13C3:  BCF    0A.4
13C4:  BSF    0A.3
13C5:  BCF    03.6
13C6:  CALL   053
13C7:  BSF    0A.4
13C8:  BCF    0A.3
....................                 } 
....................             } 
....................             break; 
13C9:  GOTO   4F7
....................  
....................         case STATE_SETTING_FORMAT: 
....................             PolyoneDisplay_showFormat(&myPolyoneDisplay); 
13CA:  BSF    03.6
13CB:  CLRF   1E
13CC:  MOVLW  3F
13CD:  MOVWF  1D
....................             if (input(BUTTON_START_STOP_RESET) && (!startStopButtonState)) { 
*
1400:  BSF    03.5
1401:  BSF    06.1
1402:  BCF    03.5
1403:  BTFSS  06.1
1404:  GOTO   4D7
1405:  BTFSC  3E.3
1406:  GOTO   4D7
....................                 PolyoneDisplay_swapFormat(&myPolyoneDisplay); 
1407:  BSF    03.6
1408:  CLRF   1E
1409:  MOVLW  3F
140A:  MOVWF  1D
....................             } 
....................             if (!menuButtonState && input(BUTTON_MENU)) { 
*
14D7:  BTFSC  3E.4
14D8:  GOTO   4F7
14D9:  BSF    03.5
14DA:  BSF    06.0
14DB:  BCF    03.5
14DC:  BTFSS  06.0
14DD:  GOTO   4F7
....................                 //                    Timer_saveLimitTime(&myTimer); 
....................                 Time_clearRtcTime(); 
14DE:  BCF    0A.4
14DF:  CALL   7ED
14E0:  BSF    0A.4
....................                 PolyoneDisplay_updateTimer(&myPolyoneDisplay); 
14E1:  BSF    03.6
14E2:  CLRF   53
14E3:  MOVLW  3F
14E4:  MOVWF  52
14E5:  BCF    0A.4
14E6:  BCF    03.6
14E7:  CALL   2D1
14E8:  BSF    0A.4
....................                 rtos_enable(Task_checkIfMenuButtonIsHeld); 
14E9:  BCF    29.7
....................                 rtos_disable(Task_blinkDisplay); 
14EA:  BSF    37.7
....................        
....................                 PolyoneDisplay_setState(&myPolyoneDisplay, STATE_READY); 
14EB:  BSF    03.6
14EC:  CLRF   1E
14ED:  MOVLW  3F
14EE:  MOVWF  1D
14EF:  MOVLW  05
14F0:  MOVWF  1F
14F1:  BCF    0A.4
14F2:  BSF    0A.3
14F3:  BCF    03.6
14F4:  CALL   053
14F5:  BSF    0A.4
14F6:  BCF    0A.3
....................             } 
....................             break; 
....................     } 
....................  
....................     startStopButtonState = input(BUTTON_START_STOP_RESET); 
14F7:  BSF    03.5
14F8:  BSF    06.1
14F9:  BCF    03.5
14FA:  BCF    3E.3
14FB:  BTFSC  06.1
14FC:  BSF    3E.3
....................     menuButtonState = input(BUTTON_MENU); 
14FD:  BSF    03.5
14FE:  BSF    06.0
14FF:  BCF    03.5
1500:  BCF    3E.4
1501:  BTFSC  06.0
1502:  BSF    3E.4
....................     rtos_yield(); 
1503:  MOVLW  0A
1504:  MOVWF  35
1505:  MOVLW  15
1506:  MOVWF  36
1507:  BSF    0A.3
1508:  BCF    0A.4
1509:  GOTO   658
150A:  MOVLW  00
150B:  MOVWF  35
150C:  MOVLW  10
150D:  MOVWF  36
150E:  BSF    0A.3
150F:  BCF    0A.4
1510:  GOTO   658
1511:  RETURN
.................... } 
....................  
.................... void Task_checkIfStartStopResetButtonIsHeld(void) { 
....................     static int nextUpButtonCounter = 0; 
....................     if (!input(BUTTON_START_STOP_RESET)) { 
*
0D55:  BSF    03.5
0D56:  BSF    06.1
0D57:  BCF    03.5
0D58:  BTFSC  06.1
0D59:  GOTO   55C
....................         nextUpButtonCounter++; 
0D5A:  INCF   60,F
....................     } else { 
0D5B:  GOTO   55E
....................         nextUpButtonCounter = 0; 
0D5C:  CLRF   60
....................         buttonStateStartStopReset = BUTTON_STATE_NOT_PUSHED; 
0D5D:  BSF    3E.1
....................     } 
....................     if (nextUpButtonCounter >= (TIMEOUT_RESET_TIMER_MILISECONDS / 50 / 3)) { 
0D5E:  MOVF   60,W
0D5F:  SUBLW  13
0D60:  BTFSC  03.0
0D61:  GOTO   564
....................         buttonStateStartStopReset = BUTTON_STATE_HELD; 
0D62:  BCF    3E.1
....................         nextUpButtonCounter = 0; 
0D63:  CLRF   60
....................     } 
....................     rtos_yield(); 
0D64:  MOVLW  6B
0D65:  MOVWF  27
0D66:  MOVLW  0D
0D67:  MOVWF  28
0D68:  BSF    0A.3
0D69:  BCF    0A.4
0D6A:  GOTO   658
0D6B:  MOVLW  55
0D6C:  MOVWF  27
0D6D:  MOVLW  0D
0D6E:  MOVWF  28
0D6F:  BSF    0A.3
0D70:  BCF    0A.4
0D71:  GOTO   658
0D72:  RETURN
.................... } 
....................  
.................... void Task_checkIfMenuButtonIsHeld(void) { 
....................     static int menuButtonCounter = 0; 
....................  
....................     if (!input(BUTTON_MENU)) { 
0D73:  BSF    03.5
0D74:  BSF    06.0
0D75:  BCF    03.5
0D76:  BTFSC  06.0
0D77:  GOTO   57A
....................         menuButtonCounter++; 
0D78:  INCF   61,F
....................     } else { 
0D79:  GOTO   57C
....................         menuButtonCounter = 0; 
0D7A:  CLRF   61
....................         buttonStateMenu = BUTTON_STATE_NOT_PUSHED; 
0D7B:  BSF    3E.2
....................     } 
....................     if (menuButtonCounter >= (TIMEOUT_MENU_BUTTON_MILISECONDS / 50 / 3)) { 
0D7C:  MOVF   61,W
0D7D:  SUBLW  0C
0D7E:  BTFSC  03.0
0D7F:  GOTO   582
....................         buttonStateMenu = BUTTON_STATE_HELD; 
0D80:  BCF    3E.2
....................         menuButtonCounter = 0; 
0D81:  CLRF   61
....................     } 
....................     rtos_yield(); 
0D82:  MOVLW  89
0D83:  MOVWF  2E
0D84:  MOVLW  0D
0D85:  MOVWF  2F
0D86:  BSF    0A.3
0D87:  BCF    0A.4
0D88:  GOTO   658
0D89:  MOVLW  73
0D8A:  MOVWF  2E
0D8B:  MOVLW  0D
0D8C:  MOVWF  2F
0D8D:  BSF    0A.3
0D8E:  BCF    0A.4
0D8F:  GOTO   658
0D90:  RETURN
.................... } 
....................  
.................... void Task_blinkDisplay(void) { 
....................     showDisplayCompletely = ~showDisplayCompletely; 
0D91:  MOVLW  01
0D92:  XORWF  3E,F
....................     rtos_yield(); 
0D93:  MOVLW  9A
0D94:  MOVWF  3C
0D95:  MOVLW  0D
0D96:  MOVWF  3D
0D97:  BSF    0A.3
0D98:  BCF    0A.4
0D99:  GOTO   658
0D9A:  MOVLW  91
0D9B:  MOVWF  3C
0D9C:  MOVLW  0D
0D9D:  MOVWF  3D
0D9E:  BSF    0A.3
0D9F:  BCF    0A.4
0DA0:  GOTO   658
0DA1:  RETURN
.................... } 
....................  
.................... void setupHardware(void) { 
....................     setup_timer_2(T2_DIV_BY_16, 255, 1); 
0DA2:  MOVLW  00
0DA3:  MOVWF  78
0DA4:  IORLW  06
0DA5:  MOVWF  12
0DA6:  MOVLW  FF
0DA7:  BSF    03.5
0DA8:  MOVWF  12
....................     setup_ccp1(CCP_PWM | CCP_PWM_L_H); 
0DA9:  BCF    03.5
0DAA:  BCF    20.2
0DAB:  MOVF   20,W
0DAC:  BSF    03.5
0DAD:  MOVWF  07
0DAE:  BCF    03.5
0DAF:  BCF    07.2
0DB0:  MOVLW  0E
0DB1:  MOVWF  17
0DB2:  BSF    03.5
0DB3:  CLRF   1B
0DB4:  CLRF   1C
0DB5:  MOVLW  01
0DB6:  MOVWF  1D
....................  
....................     delay_ms(500); 
0DB7:  MOVLW  02
0DB8:  BCF    03.5
0DB9:  MOVWF  62
0DBA:  MOVLW  FA
0DBB:  BSF    03.6
0DBC:  MOVWF  1E
0DBD:  BCF    03.6
0DBE:  CALL   078
0DBF:  DECFSZ 62,F
0DC0:  GOTO   5BA
....................     port_b_pullups(0xFF); 
0DC1:  MOVLW  FF
0DC2:  BSF    03.5
0DC3:  MOVWF  15
0DC4:  BCF    01.7
....................     WPUB = 0xFF; 
0DC5:  MOVWF  15
0DC6:  BCF    03.5
0DC7:  BSF    0A.3
0DC8:  BCF    0A.4
0DC9:  GOTO   5E9 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 2F82   HS NOWDT PUT NOMCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
